name: HumanEval_21_rescale_to_unit
language: rkt
prompt: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
  \ a linear transform to that list,\n;; such that the smallest number will become\
  \ 0 and the largest will become 1\n(define (rescale_to_unit numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
  \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
  \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list\
  \ 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate\
  \ (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
  \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
completions: ["  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n\
    \         [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n     \
    \    [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (cond ((null? numbers) '())\n          ((= (car numbers)\
    \ min) (cons 0 (rescale_to_unit_helper (cdr numbers) min max)))\n          ((=\
    \ (car numbers) max) (cons 1 (rescale_to_unit_helper (cdr numbers) min max)))\n\
    \          (else (cons (/ (- (car numbers) min) (- max min)) (rescale_to_unit_helper\
    \ (cdr numbers) min max)))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n     \
    \    [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (n) (/ (- n min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [delta (- max min)])\n    (map (lambda\
    \ (n) (/ (- n min) delta)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (\u03BB (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n", " \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define min (apply\
    \ min numbers))\n  (define max (apply max numbers))\n  (map (lambda (x) (/ (-\
    \ x min) (- max min))) numbers))\n", "  (let* ([min (apply min numbers)]\n   \
    \      [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons\
    \ (/ (- (first numbers) min) (- max min)) (rescale_to_unit_helper (rest numbers)\
    \ min max))]))\n  (rescale_to_unit_helper numbers (apply min numbers) (apply max\
    \ numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply max\
    \ numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff))\
    \ numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply max\
    \ numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff))\
    \ numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply max\
    \ numbers)]\n         [delta (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ delta)) numbers)))\n", "  (define (rescale_to_unit_helper numbers min max)\n\
    \    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers) min)\
    \ (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n", " \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (n) (/ (- n min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [diff (- max min)])\n\
    \    (map (\u03BB (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [diff (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [delta (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) delta)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [diff (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [delta (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) delta)) numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [delta (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) delta)) numbers)))\n", "  (let* ([min (apply min numbers)]\n     \
    \    [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (define min (apply min numbers))\n  (define\
    \ max (apply max numbers))\n  (define range (- max min))\n  (map (lambda (x) (/\
    \ (- x min) range)) numbers))\n", "  (let* ([min (apply min numbers)]\n      \
    \   [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (define min (apply min numbers))\n  (define max\
    \ (apply max numbers))\n  (define range (- max min))\n  (map (lambda (x) (/ (-\
    \ x min) range)) numbers))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [scale (/ (- max min) 1.0)])\n    (map (lambda (x) (/ (- x min) scale)) numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n", " \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min)) (rescale_to_unit_helper\
    \ (rest numbers) min max))]))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (n) (/\
    \ (- n min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n     \
    \    [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [delta (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) delta)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (n) (/ (- n min) range)) numbers)))\n", "  (let ([min (apply min numbers)]\n\
    \        [max (apply max numbers)])\n    (map (lambda (x) (/ (- x min) (- max\
    \ min))) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (\u03BB (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let ([min (apply min numbers)]\n        [max (apply\
    \ max numbers)])\n    (map (lambda (x) (/ (- x min) (- max min))) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n", "  (define min (apply\
    \ min numbers))\n  (define max (apply max numbers))\n  (map (lambda (x) (/ (-\
    \ x min) (- max min))) numbers))\n", "  (let* ([min (apply min numbers)]\n   \
    \      [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (define min (apply min numbers))\n\
    \  (define max (apply max numbers))\n  (define diff (- max min))\n  (map (lambda\
    \ (x) (/ (- x min) diff)) numbers))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (n) (/ (- n min) range)) numbers)))\n", "  (define min (apply min numbers))\n\
    \  (define max (apply max numbers))\n  (define range (- max min))\n  (map (lambda\
    \ (x) (/ (- x min) range)) numbers))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define min (apply min numbers))\n\
    \  (define max (apply max numbers))\n  (define range (- max min))\n  (map (lambda\
    \ (x) (/ (- x min) range)) numbers))\n", "  (let* ([min-number (apply min numbers)]\n\
    \         [max-number (apply max numbers)]\n         [min-max-diff (- max-number\
    \ min-number)])\n    (map (lambda (x) (/ (- x min-number) min-max-diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n", " \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [diff (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) diff)) numbers)))\n", "  (define min (apply\
    \ min numbers))\n  (define max (apply max numbers))\n  (define diff (- max min))\n\
    \  (map (lambda (x) (/ (- x min) diff)) numbers))\n", "  (define min (apply min\
    \ numbers))\n  (define max (apply max numbers))\n  (define range (- max min))\n\
    \  (map (lambda (x) (/ (- x min) range)) numbers))\n", "  (let* ([min (apply min\
    \ numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n      \
    \   [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (\u03BB\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (n) (/ (- n min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers)\
    \ min) (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n", " \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers smallest largest)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) smallest) (- largest smallest))\n\
    \              (rescale_to_unit_helper (cdr numbers) smallest largest))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define min (apply\
    \ min numbers))\n  (define max (apply max numbers))\n  (map (lambda (x) (/ (-\
    \ x min) (- max min))) numbers))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons (/ (-\
    \ (first numbers) min) (- max min)) (rescale_to_unit_helper (rest numbers) min\
    \ max))]))\n  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [min-max (- max min)])\n    (map (lambda (x)\
    \ (/ (- x min) min-max)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [delta (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) delta)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [scale (/ (- max min) 1.0)])\n \
    \   (map (lambda (x) (/ (- x min) scale)) numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (define min (apply min numbers))\n  (define max\
    \ (apply max numbers))\n  (define range (- max min))\n  (map (lambda (x) (/ (-\
    \ x min) range)) numbers))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n     \
    \    [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers\
    \ min max)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons (/ (-\
    \ (first numbers) min) (- max min)) (rescale_to_unit_helper (rest numbers) min\
    \ max))]))\n  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n      \
    \   [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (define (rescale_to_unit_helper\
    \ numbers min max)\n    (if (null? numbers)\n        '()\n        (cons (/ (-\
    \ (car numbers) min) (- max min))\n              (rescale_to_unit_helper (cdr\
    \ numbers) min max))))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max\
    \ (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/\
    \ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n      \
    \   [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [range (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n\
    \         [max (apply max numbers)]\n         [diff (- max min)])\n    (map (lambda\
    \ (x) (/ (- x min) diff)) numbers)))\n", "  (let ([min (apply min numbers)]\n\
    \        [max (apply max numbers)])\n    (map (lambda (x) (/ (- x min) (- max\
    \ min))) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (n) (/ (- n min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [diff (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ diff)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ range)) numbers)))\n", "  (let* ([min (apply min numbers)]\n         [max (apply\
    \ max numbers)]\n         [range (- max min)])\n    (map (lambda (x) (/ (- x min)\
    \ range)) numbers)))\n", "  (define (rescale_to_unit_helper numbers min max)\n\
    \    (if (null? numbers)\n        '()\n        (cons (/ (- (car numbers) min)\
    \ (- max min))\n              (rescale_to_unit_helper (cdr numbers) min max))))\n\
    \  (rescale_to_unit_helper numbers (apply min numbers) (apply max numbers)))\n",
  "  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n \
    \       '()\n        (cons (/ (- (car numbers) min) (- max min))\n           \
    \   (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n", "  (let* ([min (apply\
    \ min numbers)]\n         [max (apply max numbers)]\n         [range (- max min)])\n\
    \    (map (lambda (x) (/ (- x min) range)) numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
