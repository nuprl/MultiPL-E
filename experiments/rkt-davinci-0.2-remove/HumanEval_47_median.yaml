name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n(define (median\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond [(empty? l) empty]\n       \
    \   [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (first\
    \ l)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-iter l)\n    (cond\n      [(empty? l) (error \"median: empty\
    \ list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-iter (rest l))]))\n  (median-iter\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (first l)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (if (null? l)\n        '()\n     \
    \   (append (sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))\n          \
    \      (cons (car l)\n                      (sort (filter (lambda (x) (&gt;= x\
    \ (car l))) (cdr l)))))))\n  (define (middle l)\n    (if (null? l)\n        '()\n\
    \        (if (null? (cdr l))\n            (list (car l))\n            (middle\
    \ (cdr l)))))\n  (if (null? l)\n      '()\n      (if (even? (length l))\n    \
    \      (/ (+ (car (middle (sort l))) (car (cdr (middle (sort l))))) 2)\n     \
    \     (car (middle (sort l))))))\n</code>\n", "  (let ([n (length l)])\n    (if\
    \ (odd? n)\n        (list-ref l (quotient n 2))\n        (let ([m (quotient n\
    \ 2)])\n          (/ (+ (list-ref l (- m 1)) (list-ref l m)) 2)))))\n", "  (define\
    \ (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(<= x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (median-of-sorted l)\n    (cond [(empty? l) (error\
    \ \"median-of-sorted: empty list\")]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-of-sorted (rest (rest l)))]))\n  (median-of-sorted (sort l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n        \
    \  [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"Empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        (error \"median: empty\
    \ list\")\n        (if (null? (cdr l))\n            (car l)\n            (if (null?\
    \ (cddr l))\n                (if (&gt; (car l) (cadr l))\n                   \
    \ (car l)\n                    (cadr l))\n                (median-helper (cdr\
    \ l))))))\n  (median-helper (sort l &lt;)))\n</code>\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort-list l)\n    (sort l <))\n  (define (median-of-sorted l)\n    (if\
    \ (odd? (length l))\n        (list-ref l (/ (length l) 2))\n        (/ (+ (list-ref\
    \ l (/ (length l) 2))\n              (list-ref l (+ (/ (length l) 2) 1)))\n  \
    \         2)))\n  (median-of-sorted (sort-list l)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(=\
    \ n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n\
    \       (define (split l n)\n         (cond\n           [(empty? l) (values empty\
    \ empty)]\n           [(= n 0) (values empty l)]\n           [else (define (split-helper\
    \ l n)\n                   (cond\n                     [(empty? l) (values empty\
    \ empty)]\n                     [(= n 0) (values empty l)]\n                 \
    \    [else (define (split-helper-helper l n)\n                             (cond\n\
    \                               [(empty? l) (values empty empty)]\n          \
    \                     [(= n 0) (values empty l)]\n                           \
    \    [else (define (split-helper-helper-helper l n)\n                        \
    \               (cond\n                                         [(empty? l) (values\
    \ empty empty)]\n                                         [(= n 0) (values empty\
    \ l)]\n                                         [else (define (split-helper-helper-helper-helper\
    \ l n)\n                                                 (cond\n             \
    \                                      [(empty? l) (values empty empty)]\n   \
    \                                                [(= n 0) (values empty l)]\n\
    \                                                   [else (define (split-helper-helper-helper-helper-helper\
    \ l n)\n                                                           (cond\n   \
    \                                                          [(empty? l) (values\
    \ empty empty)]\n                                                            \
    \ [(= n 0) (values empty l)]\n                                               \
    \              [else (define (split-helper-helper-helper-helper-helper-helper\
    \ l n)\n                                                                     (cond\n\
    \                                                                       [(empty?\
    \ l) (values empty empty)]\n                                                 \
    \                      [(= n 0) (values empty l)]\n                          \
    \                                             [else (define (split-helper-helper-helper-helper-helper-helper-helper\
    \ l n)\n                                                                     \
    \          (cond\n                                                           \
    \                      [(empty? l) (values empty empty)]\n                   \
    \                                                              [(= n 0) (values\
    \ empty", "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"\
    Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l1 l2)\n\
    \    (cond [(empty? l1) (first l2)]\n          [(empty? l2) (first l1)]\n    \
    \      [(= (length l1) (length l2))\n           (/ (+ (first l1) (first l2)) 2)]\n\
    \          [(< (length l1) (length l2))\n           (median-helper (rest l1) (rest\
    \ l2))]\n          [else (median-helper (rest l2) (rest l1))]))\n  (median-helper\
    \ (sort l <) (sort l >)))\n", "  (define (sort l)\n    (if (null? l)\n       \
    \ '()\n        (append (sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))\n\
    \                (list (car l))\n                (sort (filter (lambda (x) (&gt;\
    \ x (car l))) (cdr l))))))\n  (define (median-of-sorted l)\n    (if (null? l)\n\
    \        '()\n        (if (null? (cdr l))\n            (car l)\n            (if\
    \ (even? (length l))\n                (/ (+ (list-ref l (/ (length l) 2))\n  \
    \                    (list-ref l (- (/ (length l) 2) 1)))\n                  \
    \ 2)\n                (list-ref l (/ (length l) 2))))))\n  (median-of-sorted (sort\
    \ l)))\n</code>\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ (error \"median: empty list\")]\n      [(empty? (rest l)) (first l)]\n     \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [(empty? (rest (rest l)))\n       (/ (+ (first l) (first (rest l))) 2)]\n\
    \      [else\n       (median-helper (rest (rest l)))]))\n  (median-helper (sort\
    \ l <)))\n", "  (if (null? l)\n      0\n      (let ([sorted (sort l <)])\n   \
    \     (if (even? (length sorted))\n            (/ (+ (list-ref sorted (/ (length\
    \ sorted) 2))\n                  (list-ref sorted (- (/ (length sorted) 2) 1)))\n\
    \               2)\n            (list-ref sorted (/ (length sorted) 2))))))\n",
  "  (define (median-helper l n)\n    (cond\n      [(empty? l) (error \"median: empty\
    \ list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (let ([m (quotient n 2)])\n         (cond\n   \
    \        [(= (remainder n 2) 0)\n            (median-helper (rest (drop l m))\
    \ m)]\n           [else\n            (/ (+ (median-helper (rest (drop l m)) m)\n\
    \                  (median-helper (drop l m) m)) 2)]))]))\n  (median-helper l\
    \ (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (first l)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (sort l)\n    (if (null? l)\n        '()\n        (append (sort (filter\
    \ (lambda (x) (&lt; x (car l))) (cdr l)))\n                (list (car l))\n  \
    \              (sort (filter (lambda (x) (&gt; x (car l))) (cdr l))))))\n  (define\
    \ (median-aux l)\n    (if (&lt; (length l) 2)\n        (car l)\n        (median-aux\
    \ (cdr l))))\n  (median-aux (sort l)))\n</code>\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sorted-l l)\n    (sort l <))\n  (define (nth-element l n)\n    (cond\n\
    \      [(empty? l) (error \"nth-element: empty list\")]\n      [(= n 0) (first\
    \ l)]\n      [else (nth-element (rest l) (- n 1))]))\n  (define (length l)\n \
    \   (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (median-even l)\n    (define (nth-element l n)\n      (cond\n     \
    \   [(empty? l) (error \"nth-element: empty list\")]\n        [(= n 0) (first\
    \ l)]\n        [else (nth-element (rest l) (- n 1))]))\n    (define (length l)\n\
    \      (cond\n        [(empty? l) 0]\n        [else (+ 1 (length (rest l)))]))\n\
    \    (define (even? n)\n      (= (remainder n 2) 0))\n    (define (odd? n)\n \
    \     (not (even? n)))\n    (/ (+ (nth-element l (/ (length l) 2))\n         \
    \ (nth-element l (- (/ (length l) 2) 1)))\n       2))\n  (define (median-odd l)\n\
    \    (define (nth-element l n)\n      (cond\n        [(empty? l) (error \"nth-element:\
    \ empty list\")]\n        [(= n 0) (first l)]\n        [else (nth-element (rest\
    \ l) (- n 1))]))\n    (define (length l)\n      (cond\n        [(empty? l) 0]\n\
    \        [else (+ 1 (length (rest l)))]))\n    (define (even? n)\n      (= (remainder\
    \ n 2) 0))\n    (define (odd? n)\n      (not (even? n)))\n    (nth-element l (/\
    \ (length l) 2)))\n", "  (define (sort-list l)\n    (cond ((null? l) '())\n  \
    \        ((null? (cdr l)) l)\n          (else (let ((a (car l))\n            \
    \           (b (cadr l)))\n                  (if (< a b)\n                   \
    \   (cons a (sort-list (cdr l)))\n                      (cons b (sort-list (cons\
    \ a (cddr l)))))))))\n  (define (median-helper l)\n    (cond ((null? l) '())\n\
    \          ((null? (cdr l)) (car l))\n          ((null? (cddr l)) (/ (+ (car l)\
    \ (cadr l)) 2))\n          (else (median-helper (cdr l)))))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l &lt;)))\n", "  (define (median-helper l n)\n    (cond ((= n 0) (car l))\n\
    \          ((= n 1) (/ (+ (car l) (car (cdr l))) 2))\n          ((= n 2) (/ (+\
    \ (car l) (car (cdr l)) (car (cddr l))) 3))\n          (else (median-helper (cdr\
    \ l) (- n 1)))))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l m)\n    (cond\n      [(empty? l) m]\n      [(empty? (rest l)) m]\n      [else\
    \ (median-helper (rest l) (first l))]))\n  (median-helper l (first l)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (let ([n (length\
    \ l)])\n    (if (even? n)\n        (/ (+ (list-ref l (/ n 2)) (list-ref l (- n\
    \ 1 (/ n 2)))) 2)\n        (list-ref l (/ n 2)))))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert n l)\n    (cond\n      [(empty? l)\
    \ (list n)]\n      [(< n (first l)) (cons n l)]\n      [else (cons (first l) (insert\
    \ n (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n  (middle\
    \ (sort l)))\n", "  (let ([n (length l)])\n    (if (even? n)\n        (/ (+ (list-ref\
    \ l (/ n 2)) (list-ref l (- n 1 (/ n 2)))) 2)\n        (list-ref l (/ n 2)))))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        (error \"median: empty\
    \ list\")\n        (let ([n (length l)])\n          (if (odd? n)\n           \
    \   (list-ref l (quotient n 2))\n              (quotient (+ (list-ref l (quotient\
    \ n 2))\n                           (list-ref l (quotient (- n 1) 2)))\n     \
    \                  2)))))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n \
    \   (cond\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l))\
    \ 2)]\n      [(= n 3) (second l)]\n      [else\n       (let ([mid (/ n 2)])\n\
    \         (cond\n           [(= (modulo n 2) 0)\n            (median-helper (rest\
    \ (rest l)) mid)]\n           [else\n            (median-helper (rest l) mid)]))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-iter l n)\n    (cond\n\
    \      [(empty? l) (error \"median: empty list\")]\n      [(= n 1) (first l)]\n\
    \      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (define m\
    \ (median-iter (rest l) (quotient n 2)))\n       (if (even? n)\n           m\n\
    \           (median-iter (filter (lambda (x) (&lt;= x m)) l) (quotient n 2)))]))\n\
    \  (median-iter l (length l)))\n</code>\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) (error \"empty list\")]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sorted-list l)\n    (sort l <))\n  (define (middle-element l)\n    (list-ref\
    \ l (quotient (length l) 2)))\n  (define (middle-two-elements l)\n    (list (list-ref\
    \ l (quotient (length l) 2))\n          (list-ref l (quotient (length l) 2 1))))\n\
    \  (cond\n    [(empty? l) (error \"median: empty list\")]\n    [(= (length l)\
    \ 1) (first l)]\n    [(= (length l) 2) (quotient (+ (first l) (second l)) 2)]\n\
    \    [(odd? (length l)) (middle-element (sorted-list l))]\n    [(even? (length\
    \ l)) (quotient (+ (first (middle-two-elements (sorted-list l)))\n           \
    \                          (second (middle-two-elements (sorted-list l)))) 2)]))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(<= x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (middle (sort l)))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert e l)\n    (cond [(empty? l) (list e)]\n          [(< e (first\
    \ l)) (cons e l)]\n          [else (cons (first l) (insert e (rest l)))]))\n \
    \ (define (median-of-sorted l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-of-sorted (rest (rest l)))]))\n  (median-of-sorted\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort-list l)\n    (sort l <))\n\
    \  (define (length l)\n    (if (null? l)\n        0\n        (+ 1 (length (cdr\
    \ l)))))\n  (define (nth-element l n)\n    (if (= n 0)\n        (car l)\n    \
    \    (nth-element (cdr l) (- n 1))))\n  (define (median-of-odd-length l)\n   \
    \ (nth-element (sort-list l) (/ (length l) 2)))\n  (define (median-of-even-length\
    \ l)\n    (/ (+ (nth-element (sort-list l) (/ (length l) 2))\n          (nth-element\
    \ (sort-list l) (- (/ (length l) 2) 1)))\n       2))\n  (if (= (modulo (length\
    \ l) 2) 0)\n      (median-of-even-length l)\n      (median-of-odd-length l)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        (error \"median: empty\
    \ list\")\n        (let* ([n (length l)]\n               [m (quotient n 2)])\n\
    \          (if (odd? n)\n              (list-ref l m)\n              (let* ([m1\
    \ (list-ref l m)]\n                     [m2 (list-ref l (- m 1))])\n         \
    \       (/ (+ m1 m2) 2)))))\n  (median-helper (sort l &lt;)))\n</code>\n", " \
    \ (define (sort-by-first l)\n    (sort l < #:key first))\n  (define (median-of-sorted\
    \ l)\n    (if (empty? l)\n        (error \"median-of-sorted: empty list\")\n \
    \       (let ([len (length l)])\n          (if (odd? len)\n              (list-ref\
    \ l (quotient len 2))\n              (let ([i (quotient len 2)])\n           \
    \     (/ (+ (list-ref l i) (list-ref l (- i 1))) 2))))))\n  (median-of-sorted\
    \ (sort-by-first l)))\n", "  (define (median-helper l n)\n    (cond\n      [(=\
    \ n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [else (median-helper\
    \ (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (merge-sort\
    \ l)\n    (define (merge l1 l2)\n      (cond\n        [(empty? l1) l2]\n     \
    \   [(empty? l2) l1]\n        [(< (first l1) (first l2))\n         (cons (first\
    \ l1) (merge (rest l1) l2))]\n        [else\n         (cons (first l2) (merge\
    \ l1 (rest l2)))]))\n    (define (split l)\n      (cond\n        [(empty? l) (values\
    \ empty empty)]\n        [(empty? (rest l)) (values (list (first l)) empty)]\n\
    \        [else\n         (let* ([l1 (list (first l))]\n                [l2 (list\
    \ (second l))]\n                [rest (split (drop l 2))])\n           (values\
    \ (append l1 (first rest))\n                   (append l2 (second rest))))]))\n\
    \    (let* ([splitted (split l)])\n      (cond\n        [(empty? (first splitted))\
    \ (second splitted)]\n        [(empty? (second splitted)) (first splitted)]\n\
    \        [else\n         (merge-sort (merge (first splitted) (second splitted)))])))\n\
    \  (let* ([sorted (merge-sort l)])\n    (if (even? (length sorted))\n        (/\
    \ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref sorted (-\
    \ (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length\
    \ sorted) 2)))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\n\
    \       (/ (+ (first l) (first (rest l))) 2)]\n      [else\n       (median-helper\
    \ (rest (rest l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-iter l n)\n    (if (zero? n)\n        (car l)\n        (median-iter\
    \ (cdr l) (- n 1))))\n  (median-iter l (quotient (length l) 2)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (sort l)\n    (cond [(empty? l) empty]\n          [else\n          \
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(<= x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (middle2 l)\n    (cond [(empty? l) empty]\n        \
    \  [(empty? (rest l)) empty]\n          [(empty? (rest (rest l))) (first l)]\n\
    \          [else (middle2 (rest (rest l)))]))\n  (cond [(empty? l) empty]\n  \
    \      [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest l))) (first\
    \ l)]\n        [else\n         (cond [(= (length l) (modulo (length l) 2))\n \
    \               (middle (sort l))]\n               [else\n                (middle2\
    \ (sort l))])]))\n", "  (define (median-iter l n)\n    (if (= n 1)\n        (car\
    \ l)\n        (if (= (remainder n 2) 0)\n            (median-iter (cdr l) (- n\
    \ 1))\n            (median-iter (cdr l) (- n 2)))))\n  (median-iter l (length\
    \ l)))\n", "  (define (sort l)\n    (if (null? l)\n        '()\n        (append\
    \ (sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))\n                (list\
    \ (car l))\n                (sort (filter (lambda (x) (&gt; x (car l))) (cdr l))))))\n\
    \  (define (median-of-sorted l)\n    (if (null? l)\n        0\n        (if (odd?\
    \ (length l))\n            (list-ref l (/ (length l) 2))\n            (/ (+ (list-ref\
    \ l (/ (length l) 2))\n                  (list-ref l (- (/ (length l) 2) 1)))\n\
    \               2))))\n  (median-of-sorted (sort l)))\n</code>\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sort-list l)\n    (sort l <))\n  (define (nth-element\
    \ l n)\n    (if (= n 0)\n        (car l)\n        (nth-element (cdr l) (- n 1))))\n\
    \  (define (length l)\n    (if (null? l)\n        0\n        (+ 1 (length (cdr\
    \ l)))))\n  (define (median-of-odd-length l)\n    (nth-element (sort-list l) (/\
    \ (length l) 2)))\n  (define (median-of-even-length l)\n    (/ (+ (nth-element\
    \ (sort-list l) (/ (length l) 2))\n          (nth-element (sort-list l) (- (/\
    \ (length l) 2) 1)))\n       2))\n  (if (= (modulo (length l) 2) 0)\n      (median-of-even-length\
    \ l)\n      (median-of-odd-length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l &lt;)))\n", "  (define (median-helper l)\n\
    \    (cond ((null? l) '())\n          ((null? (cdr l)) (car l))\n          (else\
    \ (median-helper (cdr l)))))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l &lt;)))\n", "  (define (sort-list l)\n    (cond\n\
    \      [(empty? l) empty]\n      [else (insert (first l) (sort-list (rest l)))]))\n\
    \  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first\
    \ l)) (cons x l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define\
    \ (median-of-sorted l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-of-sorted (rest (rest l)))]))\n  (median-of-sorted\
    \ (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n\
    \          [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n\
    \    (cond [(empty? l) (list x)]\n          [(<= x (first l)) (cons x l)]\n  \
    \        [else (cons (first l) (insert x (rest l)))]))\n  (define (nth-element\
    \ l n)\n    (cond [(empty? l) (error \"nth-element: list too short\")]\n     \
    \     [(= n 0) (first l)]\n          [else (nth-element (rest l) (- n 1))]))\n\
    \  (define (length l)\n    (cond [(empty? l) 0]\n          [else (+ 1 (length\
    \ (rest l)))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd?\
    \ n)\n    (not (even? n)))\n  (define (middle l)\n    (nth-element l (/ (length\
    \ l) 2)))\n  (define (middle-two l)\n    (list (nth-element l (/ (length l) 2))\n\
    \          (nth-element l (- (/ (length l) 2) 1))))\n  (cond [(empty? l) (error\
    \ \"median: empty list\")]\n        [(odd? (length l)) (middle (sort l))]\n  \
    \      [else (average (middle-two (sort l)))]))\n", "  (define (sort l)\n    (if\
    \ (null? l)\n        '()\n        (append (sort (filter (lambda (x) (&lt; x (car\
    \ l))) (cdr l)))\n                (list (car l))\n                (sort (filter\
    \ (lambda (x) (&gt; x (car l))) (cdr l))))))\n  (define (med l)\n    (if (null?\
    \ l)\n        0\n        (if (null? (cdr l))\n            (car l)\n          \
    \  (if (even? (length l))\n                (/ (+ (car l) (car (cdr l))) 2)\n \
    \               (car l)))))\n  (med (sort l)))\n</code>\n", "  (cond\n    [(empty?\
    \ l) (error \"median: empty list\")]\n    [(empty? (rest l)) (first l)]\n    [(=\
    \ (length l) 2) (/ (+ (first l) (second l)) 2)]\n    [else\n     (let*\n     \
    \    ([sorted (sort l <)]\n          [len (length sorted)]\n          [mid (quotient\
    \ len 2)])\n       (if (odd? len)\n           (list-ref sorted mid)\n        \
    \   (/ (+ (list-ref sorted mid) (list-ref sorted (- mid 1))) 2)))]))\n", "  (define\
    \ (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(<= x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (nth-element l n)\n    (cond [(empty? l) (error \"\
    nth-element: empty list\")]\n          [(= n 0) (first l)]\n          [else (nth-element\
    \ (rest l) (- n 1))]))\n  (define (length l)\n    (cond [(empty? l) 0]\n     \
    \     [else (+ 1 (length (rest l)))]))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (middle l)\n \
    \   (nth-element l (/ (length l) 2)))\n  (define (middle-two l)\n    (list (nth-element\
    \ l (/ (length l) 2))\n          (nth-element l (- (/ (length l) 2) 1))))\n  (cond\
    \ [(empty? l) (error \"median: empty list\")]\n        [(even? (length l)) (apply\
    \ + (middle-two (sort l)))]\n        [else (middle (sort l))]))\n", "  (define\
    \ (median-helper l)\n    (if (null? l)\n        '()\n        (cons (car l) (median-helper\
    \ (cdr l)))))\n  (define (median-helper2 l)\n    (if (null? l)\n        '()\n\
    \        (cons (car l) (median-helper2 (cdr l)))))\n  (define (median-helper3\
    \ l)\n    (if (null? l)\n        '()\n        (cons (car l) (median-helper3 (cdr\
    \ l)))))\n  (define (median-helper4 l)\n    (if (null? l)\n        '()\n     \
    \   (cons (car l) (median-helper4 (cdr l)))))\n  (define (median-helper5 l)\n\
    \    (if (null? l)\n        '()\n        (cons (car l) (median-helper5 (cdr l)))))\n\
    \  (define (median-helper6 l)\n    (if (null? l)\n        '()\n        (cons (car\
    \ l) (median-helper6 (cdr l)))))\n  (define (median-helper7 l)\n    (if (null?\
    \ l)\n        '()\n        (cons (car l) (median-helper7 (cdr l)))))\n  (define\
    \ (median-helper8 l)\n    (if (null? l)\n        '()\n        (cons (car l) (median-helper8\
    \ (cdr l)))))\n  (define (median-helper9 l)\n    (if (null? l)\n        '()\n\
    \        (cons (car l) (median-helper9 (cdr l)))))\n  (define (median-helper10\
    \ l)\n    (if (null? l)\n        '()\n        (cons (car l) (median-helper10 (cdr\
    \ l)))))\n  (define (median-helper11 l)\n    (if (null? l)\n        '()\n    \
    \    (cons (car l) (median-helper11 (cdr", "  (define (median-helper l)\n    (if\
    \ (null? l)\n        (error \"median: empty list\")\n        (if (null? (cdr l))\n\
    \            (car l)\n            (if (null? (cddr l))\n                (if (&gt;\
    \ (car l) (cadr l))\n                    (car l)\n                    (cadr l))\n\
    \                (median-helper (cdr l))))))\n  (median-helper (sort l &lt;)))\n\
    </code>\n", "  (define (merge-sort l)\n    (if (null? l)\n        '()\n      \
    \  (let* ([l1 (merge-sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))]\n \
    \              [l2 (merge-sort (filter (lambda (x) (= x (car l))) (cdr l)))])\n\
    \          (append l1 (cons (car l) l2)))))\n  (let* ([l (merge-sort l)]\n   \
    \      [n (length l)])\n    (if (even? n)\n        (/ (+ (list-ref l (/ n 2))\
    \ (list-ref l (- n 1 (/ n 2)))) 2)\n        (list-ref l (/ n 2)))))\n</code>\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\n      \
    \ (/ (+ (first l) (first (rest l))) 2)]\n      [else\n       (median-helper (rest\
    \ (rest l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (first l)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) (error \"Empty list\")]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l &lt;)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        (error \"\
    median: empty list\")\n        (if (null? (cdr l))\n            (car l)\n    \
    \        (if (null? (cddr l))\n                (if (&gt; (car l) (cadr l))\n \
    \                   (car l)\n                    (cadr l))\n                (median-helper\
    \ (cdr l))))))\n  (median-helper (sort l &lt;)))\n</code>\nThis is the code I\
    \ have so far. I'm not sure how to go about the second part of the question.\n\
    \n\nA:\n\nYou can use <code>partition</code> to split the list into two lists,\
    \ one with the elements that are less than the median, and the other with the\
    \ elements that are greater than or equal to the median.\n<code>(define (median\
    \ l)\n  (define (median-helper l)\n    (if (null? l)\n        (error \"median:\
    \ empty list\")\n        (if (null? (cdr l))\n            (car l)\n          \
    \  (if (null? (cddr l))\n                (if (&gt; (car l) (cadr l))\n       \
    \             (car l)\n                    (cadr l))\n                (median-helper\
    \ (cdr l))))))\n  (median-helper (sort l &lt;)))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car\
    \ l)\n            (median-helper (cdr l)))))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper\
    \ (cdr l)))))\n  (/ (median-helper l) (length l)))\n", "  (let ([l (sort l &lt;)])\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [else\n           (let ([n (length l)])\n             (if (odd? n)\n       \
    \          (list-ref l (/ n 2))\n                 (/ (+ (list-ref l (/ n 2)) (list-ref\
    \ l (+ (/ n 2) 1))) 2)))])))\n</code>\n", "  (define (sort l)\n    (if (null?\
    \ l)\n        '()\n        (append (sort (filter (lambda (x) (&lt; x (car l)))\
    \ (cdr l)))\n                (list (car l))\n                (sort (filter (lambda\
    \ (x) (&gt; x (car l))) (cdr l))))))\n  (define (middle l)\n    (if (null? l)\n\
    \        '()\n        (if (null? (cdr l))\n            (car l)\n            (middle\
    \ (cdr l)))))\n  (middle (sort l)))\n</code>\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n  \
    \     (define m (/ n 2))\n       (cond\n         [(even? n) (median-helper (rest\
    \ l) m)]\n         [else (median-helper (rest l) (- m 1))])]))\n  (median-helper\
    \ l (length l)))\n", "  (define (sorted-list l)\n    (sort l <))\n  (define (middle\
    \ l)\n    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n\
    \              (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle (sorted-list l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        (error \"median: empty\
    \ list\")\n        (if (null? (cdr l))\n            (car l)\n            (if (null?\
    \ (cddr l))\n                (/ (+ (car l) (cadr l)) 2)\n                (median-helper\
    \ (cdr l))))))\n  (median-helper (sort l <)))\n", "  (define (merge-sort l)\n\
    \    (if (null? l)\n        l\n        (let* ([n (length l)]\n               [m\
    \ (quotient n 2)]\n               [left (take l m)]\n               [right (drop\
    \ l m)])\n          (merge (merge-sort left) (merge-sort right)))))\n  (define\
    \ (merge l1 l2)\n    (if (null? l1)\n        l2\n        (if (null? l2)\n    \
    \        l1\n            (if (&lt; (car l1) (car l2))\n                (cons (car\
    \ l1) (merge (cdr l1) l2))\n                (cons (car l2) (merge l1 (cdr l2)))))))\n\
    \  (define (take l n)\n    (if (zero? n)\n        '()\n        (cons (car l) (take\
    \ (cdr l) (- n 1)))))\n  (define (drop l n)\n    (if (zero? n)\n        l\n  \
    \      (drop (cdr l) (- n 1))))\n  (define (length l)\n    (if (null? l)\n   \
    \     0\n        (+ 1 (length (cdr l)))))\n  (define (nth l n)\n    (if (zero?\
    \ n)\n        (car l)\n        (nth (cdr l) (- n 1))))\n  (let* ([sorted (merge-sort\
    \ l)]\n         [n (length sorted)]\n         [m (quotient n 2)])\n    (if (odd?\
    \ n)\n        (nth sorted m)\n        (/ (+ (nth sorted m) (nth sorted (- m 1)))\
    \ 2.0))))\n</code>\n", "  (define (sort-list l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car\
    \ l)\n            (/ (+ (car l) (car (cdr l))) 2))))\n  (median-helper (sort-list\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"\
    empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n      [else\n       (median-helper (append\
    \ (rest l) (list (first l))))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (sort-list l)\n    (sort l <))\n  (define (middle l)\n    (if (null? l)\n  \
    \      0\n        (if (null? (cdr l))\n            (car l)\n            (middle\
    \ (cdr l)))))\n  (define (even? l)\n    (if (null? l)\n        #t\n        (if\
    \ (null? (cdr l))\n            #f\n            (even? (cdr l)))))\n  (if (even?\
    \ l)\n      (/ (+ (middle (sort-list l)) (middle (cdr (sort-list l)))) 2)\n  \
    \    (middle (sort-list l))))\n", "  (define (sort-list l)\n    (sort l <))\n\
    \  (define (middle-element l)\n    (list-ref l (quotient (length l) 2)))\n  (define\
    \ (middle-two-elements l)\n    (let ([l (sort-list l)])\n      (list (list-ref\
    \ l (quotient (length l) 2))\n            (list-ref l (quotient (length l) 2 1)))))\n\
    \  (if (odd? (length l))\n      (middle-element l)\n      (middle-two-elements\
    \ l)))\n", "  (define (sort l)\n    (if (null? l)\n        '()\n        (append\
    \ (sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))\n                (list\
    \ (car l))\n                (sort (filter (lambda (x) (&gt; x (car l))) (cdr l))))))\n\
    \  (define (length l)\n    (if (null? l)\n        0\n        (+ 1 (length (cdr\
    \ l)))))\n  (define (nth l n)\n    (if (= n 0)\n        (car l)\n        (nth\
    \ (cdr l) (- n 1))))\n  (define (half l)\n    (quotient (length l) 2))\n  (define\
    \ (odd? n)\n    (= (remainder n 2) 1))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (odd-median l)\n    (nth (sort l) (half l)))\n  (define\
    \ (even-median l)\n    (/ (+ (nth (sort l) (half l))\n          (nth (sort l)\
    \ (- (half l) 1)))\n       2))\n  (if (odd? (length l))\n      (odd-median l)\n\
    \      (even-median l)))\n</code>\n", "  (define (sort l)\n    (cond [(empty?\
    \ l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert x l)\n    (cond [(empty? l) (list x)]\n          [(<= x (first l)) (cons\
    \ x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n  (define (median-of-sorted\
    \ l)\n    (if (empty? l)\n        0\n        (if (empty? (rest l))\n         \
    \   (first l)\n            (if (even? (length l))\n                (/ (+ (list-ref\
    \ l (/ (length l) 2))\n                      (list-ref l (- (/ (length l) 2) 1)))\n\
    \                   2)\n                (list-ref l (/ (length l) 2))))))\n  (median-of-sorted\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ (error \"median: empty list\")]\n      [(empty? (rest l)) (first l)]\n     \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (first l)]\n          [else (cons (first l) (median-helper\
    \ (rest l)))]))\n  (define (median-helper2 l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (first l)]\n          [else (median-helper2 (rest l))]))\n  (define (median-helper3\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (first l)]\n          [else (median-helper3\
    \ (rest (rest l)))]))\n  (cond [(empty? l) empty]\n        [(empty? (rest l))\
    \ (first l)]\n        [(empty? (rest (rest l))) (first l)]\n        [else (cond\
    \ [(even? (length l)) (/ (+ (median-helper l) (median-helper2 l)) 2)]\n      \
    \              [else (median-helper3 l)])]))\n</code>\n", "  (define (sort-list\
    \ l)\n    (sort l <))\n  (define (nth-element l n)\n    (list-ref (sort-list l)\
    \ n))\n  (define (length l)\n    (if (null? l)\n        0\n        (+ 1 (length\
    \ (cdr l)))))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd?\
    \ n)\n    (not (even? n)))\n  (define (median-of-even-list l)\n    (define (length\
    \ l)\n      (if (null? l)\n          0\n          (+ 1 (length (cdr l)))))\n \
    \   (define (nth-element l n)\n      (list-ref (sort-list l) n))\n    (/ (+ (nth-element\
    \ l (/ (length l) 2))\n          (nth-element l (+ (/ (length l) 2) 1)))\n   \
    \    2))\n  (define (median-of-odd-list l)\n    (nth-element l (/ (length l) 2)))\n\
    \  (if (even? (length l))\n      (median-of-even-list l)\n      (median-of-odd-list\
    \ l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n      \
    \    [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (first\
    \ l)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort-list l)\n    (sort l <))\n  (define (nth-element l n)\n    (cond\
    \ ((= n 0) (car l))\n          (else (nth-element (cdr l) (- n 1)))))\n  (define\
    \ (length l)\n    (cond ((null? l) 0)\n          (else (+ 1 (length (cdr l))))))\n\
    \  (define (median-of-odd-length l)\n    (nth-element (sort-list l) (/ (length\
    \ l) 2)))\n  (define (median-of-even-length l)\n    (/ (+ (nth-element (sort-list\
    \ l) (/ (length l) 2))\n          (nth-element (sort-list l) (- (/ (length l)\
    \ 2) 1)))\n       2))\n  (cond ((= (length l) 0) 0)\n        ((= (modulo (length\
    \ l) 2) 1) (median-of-odd-length l))\n        (else (median-of-even-length l))))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (first l)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l n)\n    (cond\n      [(empty? l) (error \"median: empty\
    \ list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (define m (/ n 2))\n       (cond\n         [(even?\
    \ n) (median-helper (rest l) m)]\n         [else (median-helper (rest l) (- m\
    \ 1))])]))\n  (median-helper l (length l)))\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n  \
    \     (let ([m (quotient n 2)])\n         (cond\n           [(= (modulo n 2) 0)\
    \ (median-helper (rest l) m)]\n           [else\n            (let ([l1 (take l\
    \ m)])\n              (median-helper (drop l m) m))]))]))\n  (median-helper l\
    \ (length l)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (define pivot (first l))\n       (define (partition l)\n\
    \         (cond\n           [(empty? l) empty]\n           [(&lt;= (first l) pivot)\n\
    \            (cons (first l) (partition (rest l)))]\n           [else\n      \
    \      (define (partition-rest l)\n              (cond\n                [(empty?\
    \ l) empty]\n                [(&lt;= (first l) pivot)\n                 (cons\
    \ (first l) (partition-rest (rest l)))]\n                [else\n             \
    \    (partition-rest (rest l))]))\n            (append (partition-rest (rest l))\
    \ (list (first l)))]))\n       (append (sort (partition l)) (list pivot) (sort\
    \ (partition (rest l))))]))\n  (define (middle l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l))) (first\
    \ l)]\n      [else (middle (rest l))]))\n  (middle (sort l)))\n</code>\n", " \
    \ (define (merge l1 l2)\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n\
    \          ((< (car l1) (car l2))\n           (cons (car l1) (merge (cdr l1) l2)))\n\
    \          (else\n           (cons (car l2) (merge l1 (cdr l2))))))\n  (define\
    \ (merge-sort l)\n    (if (null? l)\n        l\n        (let ((n (/ (length l)\
    \ 2)))\n          (merge (merge-sort (take l n))\n                 (merge-sort\
    \ (drop l n))))))\n  (let ((sorted (merge-sort l)))\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n", "  (define (sort-list l)\n    (sort l <))\n  (define\
    \ (length l)\n    (if (null? l)\n        0\n        (+ 1 (length (cdr l)))))\n\
    \  (define (nth-element l n)\n    (if (= n 0)\n        (car l)\n        (nth-element\
    \ (cdr l) (- n 1))))\n  (define (median-of-odd-length l)\n    (nth-element (sort-list\
    \ l) (/ (length l) 2)))\n  (define (median-of-even-length l)\n    (/ (+ (nth-element\
    \ (sort-list l) (/ (length l) 2))\n          (nth-element (sort-list l) (- (/\
    \ (length l) 2) 1)))\n       2))\n  (if (= (modulo (length l) 2) 0)\n      (median-of-even-length\
    \ l)\n      (median-of-odd-length l)))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (first l)]\n          [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (define (merge l1 l2)\n    (cond\n      [(empty?\
    \ l1) l2]\n      [(empty? l2) l1]\n      [(< (first l1) (first l2)) (cons (first\
    \ l1) (merge (rest l1) l2))]\n      [else (cons (first l2) (merge l1 (rest l2)))]))\n\
    \  (define (merge-sort l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) l]\n      [else\n       (let ([n (/ (length l) 2)])\n         (merge\
    \ (merge-sort (take l n)) (merge-sort (drop l n))))]))\n  (define (median-of-sorted\
    \ l)\n    (let ([n (/ (length l) 2)])\n      (if (odd? (length l))\n         \
    \ (list-ref l n)\n          (/ (+ (list-ref l n) (list-ref l (- n 1))) 2))))\n\
    \  (median-of-sorted (merge-sort l)))\n", "  (define (nth-element l n)\n    (if\
    \ (= n 0)\n        (car l)\n        (nth-element (cdr l) (- n 1))))\n  (define\
    \ (sort-list l)\n    (if (null? l)\n        '()\n        (append (sort-list (filter\
    \ (lambda (x) (< x (car l))) (cdr l)))\n                (list (car l))\n     \
    \           (sort-list (filter (lambda (x) (>= x (car l))) (cdr l))))))\n  (define\
    \ (length l)\n    (if (null? l)\n        0\n        (+ 1 (length (cdr l)))))\n\
    \  (define (filter pred l)\n    (cond ((null? l) '())\n          ((pred (car l))\
    \ (cons (car l) (filter pred (cdr l))))\n          (else (filter pred (cdr l)))))\n\
    \  (define (append l1 l2)\n    (if (null? l1)\n        l2\n        (cons (car\
    \ l1) (append (cdr l1) l2))))\n  (define (car l)\n    (if (null? l)\n        (error\
    \ \"car: empty list\")\n        (car l)))\n  (define (cdr l)\n    (if (null? l)\n\
    \        (error \"cdr: empty list\")\n        (cdr l)))\n  (define (null? l)\n\
    \    (eq? l '()))\n  (define (eq? a b)\n    (cond ((and (pair? a) (pair? b))\n\
    \           (and (eq? (car a) (car b))\n                (eq? (cdr a) (cdr b))))\n\
    \          ((or (pair? a) (pair? b)) #f)\n          (else (eqv? a b))))\n  (define\
    \ (pair? x) (and (not (null? x)) (pair? x)))\n  (define (eqv? a b)\n    (cond\
    \ ((and (number? a) (number? b)) (= a b))\n          ((and (string? a) (string?\
    \ b)) (string=? a b))\n          ((and (symbol? a", "  (define (sort-list l)\n\
    \    (cond\n      [(empty? l) empty]\n      [else\n       (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n\
    \      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert x (rest\
    \ l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"\
    Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort-list l)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) (error \"Empty list\")]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (first l)]\n     \
    \     [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"Empty list\"\
    )]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-iter l m)\n    (cond\n      [(empty? l)\
    \ m]\n      [(empty? (rest l)) m]\n      [else (median-iter (rest l) (rest m))]))\n\
    \  (median-iter l (sort l)))\n", "  (let ([n (length l)])\n    (if (even? n)\n\
    \        (/ (+ (list-ref l (/ n 2)) (list-ref l (- n (/ n 2)))) 2)\n        (list-ref\
    \ l (/ n 2)))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l &lt;)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n      [else (insert\
    \ (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n    (cond\n    \
    \  [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n\
    \          [else\n           (let* ([l1 (take (quotient (length l) 2) l)]\n  \
    \                [l2 (drop (quotient (length l) 2) l)])\n             (if (= (length\
    \ l) (modulo (length l) 2))\n                 (median-helper l1)\n           \
    \      (median-helper l2)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"Empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-iter l n)\n    (cond [(empty? l) (error \"median: empty list\"\
    )]\n          [(= n 1) (first l)]\n          [(even? n) (/ (+ (median-iter (rest\
    \ l) (/ n 2))\n                           (median-iter (rest l) (/ (+ n 1) 2)))\n\
    \                        2)]\n          [else (median-iter (rest l) (/ (+ n 1)\
    \ 2))]))\n  (median-iter l (length l)))\n", "  (define (sorted-list l)\n    (sort\
    \ l <))\n  (define (middle l)\n    (if (even? (length l))\n        (/ (+ (list-ref\
    \ l (/ (length l) 2))\n              (list-ref l (- (/ (length l) 2) 1)))\n  \
    \         2)\n        (list-ref l (/ (length l) 2))))\n  (middle (sorted-list\
    \ l)))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n\
    \      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else\
    \ (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (let\
    \ ([sorted (sort l <)])\n    (if (odd? (length sorted))\n        (list-ref sorted\
    \ (quotient (length sorted) 2))\n        (/ (+ (list-ref sorted (quotient (length\
    \ sorted) 2))\n              (list-ref sorted (quotient (length sorted) 2 1)))\n\
    \           2))))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (if (null?\
    \ l)\n        (error \"median: empty list\")\n        (let* ([n (length l)]\n\
    \               [m (quotient n 2)])\n          (if (odd? n)\n              (list-ref\
    \ l m)\n              (quotient (+ (list-ref l m) (list-ref l (- m 1))) 2)))))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (first l)]\n      [else\n       (median-helper (cons (first\
    \ l) (rest (rest l))))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"Empty list\"\
    )]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (if (null? l)\n        '()\n     \
    \   (append (sort (filter (lambda (x) (&lt; x (car l))) (cdr l)))\n          \
    \      (list (car l))\n                (sort (filter (lambda (x) (&gt; x (car\
    \ l))) (cdr l))))))\n  (define (median-helper l)\n    (if (null? l)\n        (error\
    \ \"median: empty list\")\n        (if (null? (cdr l))\n            (car l)\n\
    \            (if (null? (cddr l))\n                (/ (+ (car l) (cadr l)) 2)\n\
    \                (median-helper (cdr l))))))\n  (median-helper (sort l)))\n</code>\n",
  "  (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (first l)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l &lt;)))\n</code>\nI have\
    \ a feeling that I'm missing something simple.\n\n\nA:\n\nYou're missing the base\
    \ case for the recursive call. \n<code>(define (median l)\n  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l &lt;)))\n</code>\nThe recursive call\
    \ <code>(median-helper (rest l))</code> is not going to terminate unless the list\
    \ is empty. You need to add a base case for the recursive call.\n", "  (define\
    \ (sort-list l)\n    (sort l <))\n  (define (middle l)\n    (if (null? l)\n  \
    \      (error \"middle: empty list\")\n        (if (null? (cdr l))\n         \
    \   (car l)\n            (middle (cdr l)))))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (length l)\n \
    \   (if (null? l)\n        0\n        (+ 1 (length (cdr l)))))\n  (define (nth\
    \ n l)\n    (if (= n 0)\n        (car l)\n        (nth (- n 1) (cdr l))))\n  (define\
    \ (take n l)\n    (if (= n 0)\n        '()\n        (cons (car l) (take (- n 1)\
    \ (cdr l)))))\n  (define (drop n l)\n    (if (= n 0)\n        l\n        (drop\
    \ (- n 1) (cdr l))))\n  (define (take-while pred l)\n    (if (null? l)\n     \
    \   '()\n        (if (pred (car l))\n            (cons (car l) (take-while pred\
    \ (cdr l)))\n            '())))\n  (define (drop-while pred l)\n    (if (null?\
    \ l)\n        '()\n        (if (pred (car l))\n            (drop-while pred (cdr\
    \ l))\n            l)))\n  (define (split-at n l)\n    (cons (take n l) (drop\
    \ n l)))\n  (define (split-at-while pred l)\n    (cons (take-while pred l) (drop-while\
    \ pred l)))\n  (define (split-at-middle l)\n    (split-at (quotient (length l)\
    \ 2) l))\n  (define (split-at-middle-while pred l)\n    (split-at-while pred (quotient\
    \ (length l) 2) l))\n  (define (split-at-middle-even l)\n    (split-at-middle\
    \ (sort-list l)))", "  (define (sort-list l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) (error \"Empty list\")]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) (error \"median: empty list\")]\n      [(= n 1) (first l)]\n\
    \      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l &lt;)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(<= x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (median-of-sorted l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n          [else (median-of-sorted (rest (rest l)))]))\n  (median-of-sorted\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\n \
    \     [(empty? l) empty]\n      [else\n       (define (insert x l)\n         (cond\n\
    \           [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n \
    \          [else (cons (first l) (insert x (rest l)))]))\n       (insert (first\
    \ l) (sort (rest l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) (error \"median: empty list\")]\n      [(empty? (rest l)) (first l)]\n  \
    \    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort\
    \ l)\n    (if (null? l)\n        '()\n        (append (sort (filter (lambda (x)\
    \ (&lt; x (car l))) (cdr l)))\n                (list (car l))\n              \
    \  (sort (filter (lambda (x) (&gt; x (car l))) (cdr l))))))\n  (define (median-of-sorted\
    \ l)\n    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car\
    \ l)\n            (if (even? (length l))\n                (/ (+ (list-ref l (/\
    \ (length l) 2))\n                      (list-ref l (- (/ (length l) 2) 1)))\n\
    \                   2)\n                (list-ref l (/ (length l) 2))))))\n  (median-of-sorted\
    \ (sort l)))\n</code>\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper\
    \ (cdr l)))))\n  (/ (median-helper l) (length l)))\n", "  (cond [(empty? l) 0]\n\
    \        [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n        [else (median (rest l))]))\n", "  (define\
    \ (merge-sort l)\n    (if (null? l)\n        '()\n        (let ([l1 (merge-sort\
    \ (filter (lambda (x) (< x (car l))) (cdr l)))])\n          (append l1 (list (car\
    \ l)) (merge-sort (filter (lambda (x) (>= x (car l))) (cdr l)))))))\n  (let ([l\
    \ (merge-sort l)])\n    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length\
    \ l) 2)) (list-ref l (- (/ (length l) 2) 1))) 2)\n        (list-ref l (/ (length\
    \ l) 2)))))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n     \
    \     [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l &lt;)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) (error \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) (error \"median: empty list\")]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"Empty list\"\
    )]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l n)\n    (if (= n 1)\n        (car\
    \ l)\n        (if (= (remainder n 2) 0)\n            (median-helper (cdr l) (-\
    \ n 1))\n            (/ (+ (car l) (car (cdr l))) 2))))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n      \
    \    [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) (error\
    \ \"median: empty list\")]\n          [(empty? (rest l)) (first l)]\n        \
    \  [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) (error \"Empty list\")]\n      [(= n 1) (first\
    \ l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (sort-list\
    \ l)\n    (sort l <))\n  (define (median-of-sorted l)\n    (if (empty? l)\n  \
    \      (error \"Cannot find median of empty list\")\n        (let ((n (length\
    \ l)))\n          (if (odd? n)\n              (list-ref l (quotient n 2))\n  \
    \            (let ((m (/ n 2)))\n                (/ (+ (list-ref l (- m 1)) (list-ref\
    \ l m)) 2.0))))))\n  (median-of-sorted (sort-list l)))\n", "  (define (merge-sort\
    \ l)\n    (if (null? l)\n        l\n        (let* ([n (length l)]\n          \
    \     [half (quotient n 2)]\n               [left (merge-sort (take l half))]\n\
    \               [right (merge-sort (drop l half))])\n          (merge left right))))\n\
    \  (define (merge l1 l2)\n    (cond [(null? l1) l2]\n          [(null? l2) l1]\n\
    \          [(< (car l1) (car l2))\n           (cons (car l1) (merge (cdr l1) l2))]\n\
    \          [else\n           (cons (car l2) (merge l1 (cdr l2)))]))\n  (define\
    \ (take l n)\n    (if (= n 0)\n        '()\n        (cons (car l) (take (cdr l)\
    \ (- n 1)))))\n  (define (drop l n)\n    (if (= n 0)\n        l\n        (drop\
    \ (cdr l) (- n 1))))\n  (define (length l)\n    (if (null? l)\n        0\n   \
    \     (+ 1 (length (cdr l)))))\n  (let* ([sorted (merge-sort l)]\n         [n\
    \ (length sorted)]\n         [half (quotient n 2)])\n    (if (odd? n)\n      \
    \  (list-ref sorted half)\n        (/ (+ (list-ref sorted half) (list-ref sorted\
    \ (- half 1))) 2))))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) (error \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [(empty? (rest (rest l))) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (let ([sorted (sort l &lt;)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \            (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n \
    \       (list-ref sorted (/ (length sorted) 2)))))\n</code>\n", "  (define (sort-list\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n\
    \      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert x (rest\
    \ l)))]))\n  (define (nth-element l n)\n    (cond\n      [(empty? l) (error \"\
    nth-element: empty list\")]\n      [(= n 0) (first l)]\n      [else (nth-element\
    \ (rest l) (- n 1))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n\
    \      [else (+ 1 (length (rest l)))]))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (nth-element-from-end\
    \ l n)\n    (nth-element l (- (length l) n)))\n  (define (median-of-odd-length-list\
    \ l)\n    (nth-element-from-end (sort-list l) (/ (length l) 2)))\n  (define (median-of-even-length-list\
    \ l)\n    (/ (+ (nth-element-from-end (sort-list l) (/ (length l) 2))\n      \
    \    (nth-element-from-end (sort-list l) (/ (length l) 2 1)))\n       2))\n  (cond\n\
    \    [(empty? l) (error \"median: empty list\")]\n    [(odd? (length l)) (median-of-odd-length-list\
    \ l)]\n    [else (median-of-even-length-list l)]))\n", "  (define (sort l)\n \
    \   (cond [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(<= x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (middle l)\n    (if (empty? (rest l))\n        (first l)\n        (middle\
    \ (rest l))))\n  (middle (sort l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) (error \"empty list\")]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define (insert\
    \ x l)\n         (cond\n           [(empty? l) (list x)]\n           [(< x (first\
    \ l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (insert (first l) (sort (rest l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (middle (sort l)))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n \
    \     [(= n 3) (second l)]\n      [else (median-helper (rest l) (- n 1))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) (error \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l n)\n    (cond ((= n 1) (car l))\n          ((= n 2) (/ (+ (car l) (cadr l))\
    \ 2))\n          (else\n           (let ((m (quotient n 2)))\n             (if\
    \ (odd? n)\n                 (median-helper (cdr l) m)\n                 (median-helper\
    \ (cdr l) (- m 1)))))))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) (error \"median: empty list\")]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(&lt;= x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (median-of-sorted l)\n    (if (empty?\
    \ l)\n        0\n        (if (even? (length l))\n            (/ (+ (list-ref l\
    \ (/ (length l) 2))\n                  (list-ref l (- (/ (length l) 2) 1)))\n\
    \               2)\n            (list-ref l (/ (length l) 2)))))\n  (median-of-sorted\
    \ (sort l)))\n</code>\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (cond\n    [(empty? l) (error \"median of\
    \ empty list\")]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n    [else (median (rest l))]))\n", " \
    \ (define (median-helper l n)\n    (cond\n      [(empty? l) #f]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper l (length l)))\n</code>\n", "  (cond\n\
    \    [(empty? l) (error \"median: empty list\")]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n    [else\n    \
    \ (let* ([sorted (sort l <)]\n            [mid (quotient (length sorted) 2)])\n\
    \       (if (odd? (length sorted))\n           (list-ref sorted mid)\n       \
    \    (/ (+ (list-ref sorted mid) (list-ref sorted (- mid 1))) 2)))]))\n", "  (let\
    \ ([n (length l)])\n    (if (odd? n)\n        (list-ref l (quotient n 2))\n  \
    \      (quotient (+ (list-ref l (quotient n 2))\n                     (list-ref\
    \ l (- (quotient n 2) 1)))\n                 2))))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort < l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert e l)\n    (cond [(empty?\
    \ l) (list e)]\n          [(< e (first l)) (cons e l)]\n          [else (cons\
    \ (first l) (insert e (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) empty]\n          [(empty? (rest (rest\
    \ l))) (first l)]\n          [else (middle (rest (rest l)))]))\n  (define (middle-of-three\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) empty]\n    \
    \      [(empty? (rest (rest l))) empty]\n          [else (list (first l) (first\
    \ (rest l)) (first (rest (rest l))))]))\n  (define (median-of-three l)\n    (define\
    \ (median-of-three-helper l)\n      (cond [(empty? l) empty]\n            [(empty?\
    \ (rest l)) empty]\n            [(empty? (rest (rest l))) empty]\n           \
    \ [else (cond [(> (first l) (first (rest l)))\n                         (cond\
    \ [(> (first (rest l)) (first (rest (rest l))))\n                            \
    \    (first (rest l))]\n                               [else (cond [(> (first\
    \ l) (first (rest (rest l))))\n                                            (first\
    \ (rest (rest l)))]\n                                           [else (first l)])])]\n\
    \                        [else (cond [(> (first l) (first (rest (rest l))))\n\
    \                                     (first l)]\n                           \
    \         [else (cond [(> (first (rest l)) (first (rest (rest l))))\n        \
    \                                         (first (rest (rest l)))]\n         \
    \                                       [else (first (rest l))])])])])\n    (median-of-three-helper\
    \ (sort l)))\n  (cond [(empty? l) empty]\n        [(empty? (rest l)) (first l)]\n\
    \        [(empty? (rest (rest l", "  (define (median-iter l n)\n    (cond\n  \
    \    [(empty? l) (error \"median: empty list\")]\n      [(= n 1) (first l)]\n\
    \      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (define (median-iter-helper\
    \ l n)\n         (cond\n           [(empty? l) (error \"median-iter-helper: empty\
    \ list\")]\n           [(= n 1) (first l)]\n           [else (median-iter-helper\
    \ (rest l) (- n 1))]))\n       (define (median-iter-helper2 l n)\n         (cond\n\
    \           [(empty? l) (error \"median-iter-helper2: empty list\")]\n       \
    \    [(= n 1) (first l)]\n           [else (median-iter-helper2 (rest l) (- n\
    \ 2))]))\n       (/ (+ (median-iter-helper l (/ n 2)) (median-iter-helper2 l (/\
    \ n 2))) 2)]))\n  (median-iter l (length l)))\n", "  (define (median-helper l)\n\
    \    (define (median-helper-helper l)\n      (cond ((null? l) '())\n         \
    \   ((null? (cdr l)) (list (car l)))\n            (else (cons (car l) (median-helper-helper\
    \ (cdr l))))))\n    (define (median-helper-helper2 l)\n      (cond ((null? l)\
    \ '())\n            ((null? (cdr l)) (list (car l)))\n            (else (cons\
    \ (car l) (median-helper-helper2 (cdr (cdr l)))))))\n    (cond ((null? l) '())\n\
    \          ((null? (cdr l)) (car l))\n          ((null? (cdr (cdr l))) (/ (+ (car\
    \ l) (car (cdr l))) 2))\n          (else (median (append (median-helper-helper\
    \ l) (median-helper-helper2 (cdr l)))))))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"median: empty\
    \ list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (let ([sorted (sort l &lt;)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \            (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n \
    \       (list-ref sorted (/ (length sorted) 2)))))\n</code>\n", "  (define (sort-by-first\
    \ l)\n    (sort l < #:key car))\n  (define (median-of-sorted l)\n    (define (middle\
    \ l)\n      (if (even? (length l))\n          (/ (+ (car l) (cadr l)) 2)\n   \
    \       (car l)))\n    (middle (sort-by-first l)))\n  (median-of-sorted l))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
