name: HumanEval_80_is_happy
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check if\
  \ the string is happy or not.\n;; A string is happy if its length is at least 3\
  \ and every 3 consecutive letters are distinct\n;; For example:\n(define (is_happy\
  \ s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n\
  \    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n\
  \    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\"\
  ) #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal? (candidate \"\
  xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate\
  \ \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
completions: ["  (and (&gt;= (string-length s) 3)\n       (every (lambda (i)\n   \
    \             (not (equal? (substring s i (+ i 3))\n                         \
    \    (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (c)\
    \ (not (equal? c (string-ref s (+ 1 c)))))\n              (range 0 (- (string-length\
    \ s) 2)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (not (equal?\
    \ (string-ref s 0) (string-ref s 1)))\n          (not (equal? (string-ref s 0)\
    \ (string-ref s 2)))\n          (not (equal? (string-ref s 1) (string-ref s 2))))\
    \ #t]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and\n      (not (equal? (string-ref s 0) (string-ref s 1)))\n\
    \      (not (equal? (string-ref s 0) (string-ref s 2)))\n      (not (equal? (string-ref\
    \ s 1) (string-ref s 2))))\n     #t]\n    [else #f]))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (not (regexp-match #rx\"aaa\" s))\n       (not (regexp-match #rx\"\
    bbb\" s))\n       (not (regexp-match #rx\"ccc\" s))\n       (not (regexp-match\
    \ #rx\"ddd\" s))\n       (not (regexp-match #rx\"eee\" s))\n       (not (regexp-match\
    \ #rx\"fff\" s))\n       (not (regexp-match #rx\"ggg\" s))\n       (not (regexp-match\
    \ #rx\"hhh\" s))\n       (not (regexp-match #rx\"iii\" s))\n       (not (regexp-match\
    \ #rx\"jjj\" s))\n       (not (regexp-match #rx\"kkk\" s))\n       (not (regexp-match\
    \ #rx\"lll\" s))\n       (not (regexp-match #rx\"mmm\" s))\n       (not (regexp-match\
    \ #rx\"nnn\" s))\n       (not (regexp-match #rx\"ooo\" s))\n       (not (regexp-match\
    \ #rx\"ppp\" s))\n       (not (regexp-match #rx\"qqq\" s))\n       (not (regexp-match\
    \ #rx\"rrr\" s))\n       (not (regexp-match #rx\"sss\" s))\n       (not (regexp-match\
    \ #rx\"ttt\" s))\n       (not (regexp-match #rx\"uuu\" s))\n       (not (regexp-match\
    \ #rx\"vvv\" s))\n       (not (regexp-match #rx\"www\" s))\n       (not (regexp-match\
    \ #rx\"xxx\" s))\n       (not (regexp-match #rx\"yyy\" s))\n       (not (regexp-match\
    \ #rx\"zzz\" s))))\n", "  (and (&gt;= (string-length s) 3)\n       (not (member\
    \ #f (map (lambda (i)\n                              (not (equal? (substring s\
    \ i (+ i 3))\n                                           (substring s (+ i 1)\
    \ (+ i 4)))))\n                            (range 0 (- (string-length s) 3)))))))\n",
  "  (cond\n    [(< (string-length s) 3) false]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) false]\n    [(equal? (string-ref s 1) (string-ref s 2)) false]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 2)) false]\n    [else true]))\n", "  (and (&gt;=\
    \ (string-length s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s\
    \ (+ 1 c)))))\n              (range 0 (- (string-length s) 2)))))\n", "  (cond\n\
    \    [(string=? s \"\") #t]\n    [(string=? s \"abc\") #t]\n    [(string=? s \"\
    abca\") #f]\n    [(string=? s \"abab\") #f]\n    [(string=? s \"ababab\") #t]\n\
    \    [(string=? s \"abababa\") #f]\n    [(string=? s \"abababab\") #f]\n    [(string=?\
    \ s \"ababababab\") #t]\n    [(string=? s \"abababababa\") #f]\n    [(string=?\
    \ s \"abababababab\") #f]\n    [(string=? s \"ababababababa\") #f]\n    [(string=?\
    \ s \"ababababababab\") #t]\n    [(string=? s \"abababababababa\") #f]\n    [(string=?\
    \ s \"abababababababab\") #f]\n    [(string=? s \"ababababababababa\") #f]\n \
    \   [(string=? s \"ababababababababab\") #t]\n    [(string=? s \"abababababababababa\"\
    ) #f]\n    [(string=? s \"abababababababababab\") #f]\n    [(string=? s \"ababababababababababa\"\
    ) #f]\n    [(string=? s \"ababababababababababab\") #t]\n    [(string=? s \"abababababababababababa\"\
    ) #f]\n    [(string=? s \"abababababababababababab\") #f]\n    [(string=? s \"\
    ababababababababababababa\") #f]\n    [(string=? s \"ababababababababababababab\"\
    ) #t]\n    [(string=? s \"abababababababababababababa\") #f]\n    [(string=? s\
    \ \"abababababababababababababab\") #f]\n    [(string=", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(string=? s \"\") #t]\n    [(string=?\
    \ s \"abc\") #t]\n    [(string=? s \"abca\") #f]\n    [(string=? s \"abcaa\")\
    \ #f]\n    [(string=? s \"abcabc\") #t]\n    [(string=? s \"abcabca\") #f]\n \
    \   [(string=? s \"abcabcab\") #f]\n    [(string=? s \"abcabcabc\") #t]\n    [(string=?\
    \ s \"abcabcabca\") #f]\n    [(string=? s \"abcabcabcab\") #f]\n    [(string=?\
    \ s \"abcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabca\") #f]\n    [(string=?\
    \ s \"abcabcabcabcab\") #f]\n    [(string=? s \"abcabcabcabcabc\") #t]\n    [(string=?\
    \ s \"abcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcab\") #f]\n \
    \   [(string=? s \"abcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcab\") #f]\n    [(string=? s \"abcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s\
    \ \"abcabcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabc", "  (cond\n    [(string=?\
    \ s \"\") #t]\n    [(string=? s \"ab\") #t]\n    [(string=? s \"abc\") #t]\n \
    \   [(string=? s \"abcd\") #t]\n    [(string=? s \"abcde\") #t]\n    [(string=?\
    \ s \"abcdef\") #t]\n    [(string=? s \"abcdefg\") #t]\n    [(string=? s \"abcdefgh\"\
    ) #t]\n    [(string=? s \"abcdefghi\") #t]\n    [(string=? s \"abcdefghij\") #t]\n\
    \    [(string=? s \"abcdefghijk\") #t]\n    [(string=? s \"abcdefghijkl\") #t]\n\
    \    [(string=? s \"abcdefghijklm\") #t]\n    [(string=? s \"abcdefghijklmn\"\
    ) #t]\n    [(string=? s \"abcdefghijklmno\") #t]\n    [(string=? s \"abcdefghijklmnop\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopq\") #t]\n    [(string=? s \"abcdefghijklmnopqr\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrs\") #t]\n    [(string=? s \"abcdefghijklmnopqrst\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstu\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuv\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuvw\") #t]\n    [(string=? s \"\
    abcdefghijklmnopqrstuvwx\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwxy\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwxyz\") #t]\n    [(string=? s\
    \ \"abcdefghijklmnopqrstuvwxyza\") #f]\n    [(string", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (if (&lt; (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if\
    \ (= i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(string=?\
    \ s \"\") #t]\n    [(string=? s \"a\") #t]\n    [(string=? s \"ab\") #t]\n   \
    \ [(string=? s \"abc\") #t]\n    [(string=? s \"abcd\") #t]\n    [(string=? s\
    \ \"abcde\") #t]\n    [(string=? s \"abcdef\") #t]\n    [(string=? s \"abcdefg\"\
    ) #t]\n    [(string=? s \"abcdefgh\") #t]\n    [(string=? s \"abcdefghi\") #t]\n\
    \    [(string=? s \"abcdefghij\") #t]\n    [(string=? s \"abcdefghijk\") #t]\n\
    \    [(string=? s \"abcdefghijkl\") #t]\n    [(string=? s \"abcdefghijklm\") #t]\n\
    \    [(string=? s \"abcdefghijklmn\") #t]\n    [(string=? s \"abcdefghijklmno\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnop\") #t]\n    [(string=? s \"abcdefghijklmnopq\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqr\") #t]\n    [(string=? s \"abcdefghijklmnopqrs\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrst\") #t]\n    [(string=? s \"abcdefghijklmnopqrstu\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuv\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuvw\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwx\") #t]\n    [(string=? s \"\
    abcdefghijklmnopqrstuvwxy\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwxyz\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqr", "  (and (>= (string-length s) 3)\n\
    \       (not (string-contains s \"aaa\"))\n       (not (string-contains s \"bbb\"\
    ))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains s \"\
    ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(and (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2))) false]\n    [(and (equal? (string-ref s 1) (string-ref s 2))\n      \
    \    (equal? (string-ref s 2) (string-ref s 3))) false]\n    [else true]))\n",
  "  (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not (equal? x (substring\
    \ s (+ x 1) (+ x 2)))))\n              (range 0 (- (string-length s) 3)))))\n",
  "  (and (&gt;= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n\
    \       (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n</code>\nI'm sure there\
    \ is a better way to do this.\n\n\nA:\n\nYou can use <code>regexp-match</code>\
    \ to check if a string contains a pattern.\n<code>(define (is-happy? s)\n  (and\
    \ (&gt;= (string-length s) 3)\n       (not (regexp-match #rx\"aaa\" s))\n    \
    \   (not (regexp-match #rx\"bbb\" s))\n       (not (regexp-match #rx\"ccc\" s))\n\
    \       (not (regexp-match #rx", "  (if (&lt; (string-length s) 3)\n      #f\n\
    \      (let ([a (string-ref s 0)]\n            [b (string-ref s 1)]\n        \
    \    [c (string-ref s 2)])\n        (if (equal? a b)\n            #f\n       \
    \     (if (equal? b c)\n                #f\n                (if (equal? a c)\n\
    \                    #f\n                    (is_happy (substring s 1))))))))\n\
    </code>\nI'm not sure if this is the most elegant way to do it.\nI'm also not\
    \ sure if I'm using the <code>let</code> form correctly.\nI'm also not sure if\
    \ I'm using the <code>if</code> form correctly.\nI'm also not sure if I'm using\
    \ the <code>equal?</code> form correctly.\nI'm also not sure if I'm using the\
    \ <code>string-ref</code> form correctly.\nI'm also not sure if I'm using the\
    \ <code>string-length</code> form correctly.\nI'm also not sure if I'm using the\
    \ <code>substring</code> form correctly.\nI'm also not sure if I'm using the <code>define</code>\
    \ form correctly.\nI'm also not sure if I'm using the <code>#f</code> form correctly.\n\
    I'm also not sure if I'm using the <code>#lang racket</code> form correctly.\n\
    I'm also not sure if I'm using the <code>;</code> form correctly.\nI'm also not\
    \ sure if I'm using the <code>;;</code> form correctly.\nI'm also not sure if\
    \ I'm using the <code>()</code> form correctly.\nI'm also not sure if I'm using\
    \ the <code>[]</code> form correctly.\nI'm also not sure if I'm using the <code>&lt;</code>\
    \ form correctly.\nI'm also not sure if I'm using the <code>&gt;</code> form correctly.\n\
    I'm also not sure if I'm using the <code>=</code> form correctly.\nI'm also not\
    \ sure if I'm using the <code>+</code> form correctly.\nI'm also not sure if I'm\
    \ using the <", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (i)\n\
    \                (not (equal? (substring s i (+ i 3))\n                      \
    \       (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (i)\n\
    \                (not (equal? (substring s i (+ i 3))\n                      \
    \       (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (and (>= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (substring s 1 3))))\n              (substring s 0 3))))\n", "  (and\n\
    \   (&gt;= (string-length s) 3)\n   (every (lambda (i)\n            (not (equal?\
    \ (substring s i (+ i 3))\n                       (substring s (+ i 1) (+ i 4)))))\n\
    \          (range 0 (- (string-length s) 3)))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (i)\n                (not (equal? (substring s\
    \ i (+ i 3))\n                             (substring s (+ i 1) (+ i 4)))))\n\
    \              (range 0 (- (string-length s) 3)))))\n", "  (if (or (< (string-length\
    \ s) 3)\n          (not (distinct? (string-&gt;list (substring s 0 3)))))\n  \
    \    #f\n      (if (&gt;= (string-length s) 3)\n          (is_happy (substring\
    \ s 1))\n          #t)))\n", "  (and (&gt;= (string-length s) 3)\n       (not\
    \ (member? #f (map (lambda (i)\n                               (not (equal? (substring\
    \ s i (+ i 3))\n                                            (substring s (+ i\
    \ 1) (+ i 4)))))\n                             (range 0 (- (string-length s) 3)))))))\n",
  "  (and (not (empty? s))\n       (and (not (empty? (rest s)))\n            (and\
    \ (not (empty? (rest (rest s))))\n                 (and (not (equal? (first s)\
    \ (second s)))\n                      (and (not (equal? (second s) (third s)))\n\
    \                           (and (not (equal? (first s) (third s)))\n        \
    \                        (is_happy (rest (rest (rest s))))))))))))\n", "  (and\n\
    \   (&gt;= (string-length s) 3)\n   (every (lambda (x) (not (equal? (substring\
    \ s x (+ x 3)) (substring s (+ x 1) (+ x 4)))))\n          (range 0 (- (string-length\
    \ s) 3)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ #f]\n    [(equal? (string-ref s 0) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond [(empty? s) #f]\n        [(< (string-length s) 3) #f]\n        [(and (not\
    \ (equal? (substring s 0 1) (substring s 1 2)))\n              (not (equal? (substring\
    \ s 0 1) (substring s 2 3)))\n              (not (equal? (substring s 1 2) (substring\
    \ s 2 3))))\n         #t]\n        [else #f]))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (x) (not (equal? x (substring s 1 3))))\n     \
    \         (substring s 0 3))))\n", "  (and (not (empty? s))\n       (and (not\
    \ (empty? (rest s)))\n            (and (not (empty? (rest (rest s))))\n      \
    \           (and (not (equal? (first s) (second s)))\n                      (and\
    \ (not (equal? (second s) (third s)))\n                           (and (not (equal?\
    \ (first s) (third s)))\n                                (is_happy (rest (rest\
    \ (rest s))))))))))))\n", "  (and (>= (string-length s) 3)\n       (every (lambda\
    \ (i)\n                (not (equal? (substring s i (+ i 3))\n                \
    \             (substring s (+ i 1) (+ i 4)))))\n              (iota (- (string-length\
    \ s) 2)))))\n", "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+\
    \ i 4))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (if (< (string-length\
    \ s) 3)\n      #f\n      (is_happy-helper s 0)))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (for/and ([i (in-range (string-length s) (- (string-length s)\
    \ 2))])\n         (not (equal? (substring s i (+ i 3))\n                     \
    \ (substring s (+ i 1) (+ i 4)))))))\n", "  (let* ([n (string-length s)]\n   \
    \      [m (quotient n 3)])\n    (and (>= n 3)\n         (for/and ([i (in-range\
    \ m)])\n           (not (equal? (substring s (* i 3) (+ (* i 3) 3))\n        \
    \                (substring s (+ (* i 3) 3) (+ (* i 3) 6))))))))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (not (member #f (map (lambda (x) (not (= (string-ref s x) (string-ref s (+\
    \ x 1))))) (range 0 (- (string-length s) 2)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref\
    \ s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref s 2)))\
    \ #f]\n    [else (is_happy (substring s 1))]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (x) (not (equal? x (substring s (+ x 1) (+ x 2)))))\n\
    \              (range 0 (- (string-length s) 2)))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda\
    \ (x) (not (equal? x (string-ref s (+ x 1)))))\n              (build-list (- (string-length\
    \ s) 2) add1))))\n</code>\n", "  (and (&gt;= (string-length s) 3)\n       (not\
    \ (member (substring s 0 3)\n                    (list (substring s 1 4)\n   \
    \                       (substring s 2 5))))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (i)\n                (not (equal? (substring s\
    \ i (+ i 3))\n                             (substring s (+ i 1) (+ i 4)))))\n\
    \              (iota (- (string-length s) 2)))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n\
    \              (range 0 (- (string-length s) 2)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and\n   (>= (string-length s) 3)\n   (not (string-contains s \"aaa\"))\n   (not\
    \ (string-contains s \"bbb\"))\n   (not (string-contains s \"ccc\"))\n   (not\
    \ (string-contains s \"ddd\"))\n   (not (string-contains s \"eee\"))\n   (not\
    \ (string-contains s \"fff\"))\n   (not (string-contains s \"ggg\"))\n   (not\
    \ (string-contains s \"hhh\"))\n   (not (string-contains s \"iii\"))\n   (not\
    \ (string-contains s \"jjj\"))\n   (not (string-contains s \"kkk\"))\n   (not\
    \ (string-contains s \"lll\"))\n   (not (string-contains s \"mmm\"))\n   (not\
    \ (string-contains s \"nnn\"))\n   (not (string-contains s \"ooo\"))\n   (not\
    \ (string-contains s \"ppp\"))\n   (not (string-contains s \"qqq\"))\n   (not\
    \ (string-contains s \"rrr\"))\n   (not (string-contains s \"sss\"))\n   (not\
    \ (string-contains s \"ttt\"))\n   (not (string-contains s \"uuu\"))\n   (not\
    \ (string-contains s \"vvv\"))\n   (not (string-contains s \"www\"))\n   (not\
    \ (string-contains s \"xxx\"))\n   (not (string-contains s \"yyy\"))\n   (not\
    \ (string-contains s \"zzz\"))))\n", "  (cond\n    [(>= (string-length s) 3)\n\
    \     (and\n       (not (equal? (substring s 0 3) (substring s 1 4)))\n      \
    \ (not (equal? (substring s 0 3) (substring s 2 5)))\n       (not (equal? (substring\
    \ s 1 4) (substring s 2 5))))]\n    [else #f]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) false]\n    [(string=? (substring s 0 3) (substring s 1 4)) false]\n \
    \   [else (is_happy (substring s 1))]))\n", "  (and (&gt;= (string-length s) 3)\n\
    \       (for/and ([i (in-range (string-length s) (- (string-length s) 2))])\n\
    \         (not (equal? (substring s i (+ i 3))\n                      (substring\
    \ s (+ i 1) (+ i 4)))))))\n", "  (cond [(empty? s) #f]\n        [(< (string-length\
    \ s) 3) #f]\n        [(and (not (equal? (substring s 0 1) (substring s 1 2)))\n\
    \              (not (equal? (substring s 0 1) (substring s 2 3)))\n          \
    \    (not (equal? (substring s 1 2) (substring s 2 3))))\n         #t]\n     \
    \   [else #f]))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda\
    \ (c) (not (equal? c (string-ref s (+ 1 c)))))\n              (range 0 (- (string-length\
    \ s) 2)))))\n", "  (cond\n    [(empty? s) #f]\n    [(< (string-length s) 3) #f]\n\
    \    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref\
    \ s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (cond\n    [(string=? s \"\") #t]\n    [(string=? s \"a\") #t]\n    [(string=?\
    \ s \"ab\") #t]\n    [(string=? s \"abc\") #t]\n    [(string=? s \"abca\") #t]\n\
    \    [(string=? s \"abcab\") #t]\n    [(string=? s \"abcabc\") #t]\n    [(string=?\
    \ s \"abcabca\") #t]\n    [(string=? s \"abcabcab\") #t]\n    [(string=? s \"\
    abcabcabc\") #t]\n    [(string=? s \"abcabcabca\") #t]\n    [(string=? s \"abcabcabcab\"\
    ) #t]\n    [(string=? s \"abcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabca\"\
    ) #t]\n    [(string=? s \"abcabcabcabcab\") #t]\n    [(string=? s \"abcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabca\") #t]\n    [(string=? s \"abcabcabcabcabcab\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabca\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcab\") #t]\n    [(string=? s \"abcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabca\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcab\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabca\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcab\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s\
    \ \"abcabcabcabcabcabcabcabcabca\") #t]\n    [(string=? s \"abcabcabcabcabcabcabc",
  "  (let ([len (string-length s)])\n    (and (>= len 3)\n         (for/and ([i (in-range\
    \ (- len 2))])\n           (not (equal? (substring s i (+ i 3))\n            \
    \            (substring s (+ i 1) (+ i 4))))))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (i) (not (equal? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))))\n              (iota (- (string-length s) 2)))))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (every (lambda (c) (not (equal? c (string-ref\
    \ s (+ 1 c)))))\n              (range 0 (- (string-length s) 2)))))\n", "  (and\
    \ (>= (string-length s) 3)\n       (every (lambda (i)\n                (not (equal?\
    \ (substring s i (+ i 3))\n                             (substring s (+ i 1) (+\
    \ i 4)))))\n              (range 0 (- (string-length s) 3)))))\n", "  (and\n \
    \  (&gt;= (string-length s) 3)\n   (for/and ([i (in-range (string-length s) (-\
    \ (string-length s) 2))])\n     (not (equal? (substring s i (+ i 3))\n       \
    \           (substring s (+ i 1) (+ i 4)))))))\n", "  (cond\n    [(>= (string-length\
    \ s) 3)\n     (and\n       (not (equal? (substring s 0 3) (substring s 1 4)))\n\
    \       (not (equal? (substring s 0 3) (substring s 2 5)))\n       (not (equal?\
    \ (substring s 1 4) (substring s 2 5))))]\n    [else #f]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n\
    \          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy\
    \ (substring s 1))]))\n", "  (and (>= (string-length s) 3)\n       (every (lambda\
    \ (i) (not (equal? (substring s i (+ i 3))\n                                 \
    \      (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (s)\
    \ (not (equal? (substring s 0 3) (substring s 1 4))))\n              (build-list\
    \ (sub1 (string-length s))\n                         (lambda (i) (substring s\
    \ i (+ i 3)))))))\n", "  (let loop ([s s] [i 0])\n    (if (&lt; i (- (string-length\
    \ s) 2))\n        (if (equal? (substring s i (+ i 3))\n                    (string-concatenate\
    \ (list (substring s i (+ i 1))\n                                            \
    \  (substring s (+ i 1) (+ i 2))\n                                           \
    \   (substring s (+ i 2) (+ i 3)))))\n            (loop s (+ i 1))\n         \
    \   #f)\n        #t)))\n", "  (and (&gt;= (string-length s) 3)\n       (every\
    \ (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n              (range 0\
    \ (- (string-length s) 2)))))\n", "  (and (>= (string-length s) 3)\n       (every\
    \ (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n              (build-list\
    \ (- (string-length s) 2)\n                         (lambda (i) i)))))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not (equal? x (substring\
    \ s (+ x 1) (+ x 2)))))\n              (range 0 (- (string-length s) 2)))))\n",
  "  (and (>= (string-length s) 3)\n       (every (lambda (i)\n                (not\
    \ (equal? (substring s i (+ i 3))\n                             (substring s (+\
    \ i 1) (+ i 4)))))\n              (range 0 (- (string-length s) 3)))))\n", " \
    \ (let ([len (string-length s)])\n    (and (>= len 3)\n         (for/and ([i (in-range\
    \ (- len 2))])\n           (not (equal? (substring s i (+ i 3))\n            \
    \            (substring s (+ i 1) (+ i 4))))))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (x) (not (equal? x (substring s 1 3))))\n     \
    \         (substring s 0 3))))\n</code>\n", "  (and (&gt;= (string-length s) 3)\n\
    \       (every (lambda (x) (not (equal? x (substring s (+ 1 x) (+ 3 x)))))\n \
    \             (range 0 (- (string-length s) 3)))))\n", "  (cond\n    [(empty?\
    \ s) #f]\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else (is_happy (substring s 1))]))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) false]\n    [else true]))\n", "  (and (&gt;=\
    \ (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n       (not\
    \ (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n   \
    \    (not (string-contains s \"ddd\"))\n       (not (string-contains s \"eee\"\
    ))\n       (not (string-contains s \"fff\"))\n       (not (string-contains s \"\
    ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n</code>\nI want to\
    \ make it more concise, but I don't know how.\n\n\nA:\n\nYou can use <code>string-match</code>\
    \ to check if a string contains a substring.\n<code>(define (is_happy s)\n  (and\
    \ (&gt;= (string-length s) 3)\n       (not (string-match \"aaa\" s))\n       (not\
    \ (string-match \"bbb\" s))\n       (not (string-match \"ccc\" s))\n       (not\
    \ (string-match \"ddd\" s))\n       (not (string-match \"", "  (cond\n    [(string=?\
    \ s \"\") #t]\n    [(string=? s \"a\") #t]\n    [(string=? s \"ab\") #t]\n   \
    \ [(string=? s \"abc\") #t]\n    [(string=? s \"abcd\") #t]\n    [(string=? s\
    \ \"abcde\") #t]\n    [(string=? s \"abcdef\") #t]\n    [(string=? s \"abcdefg\"\
    ) #t]\n    [(string=? s \"abcdefgh\") #t]\n    [(string=? s \"abcdefghi\") #t]\n\
    \    [(string=? s \"abcdefghij\") #t]\n    [(string=? s \"abcdefghijk\") #t]\n\
    \    [(string=? s \"abcdefghijkl\") #t]\n    [(string=? s \"abcdefghijklm\") #t]\n\
    \    [(string=? s \"abcdefghijklmn\") #t]\n    [(string=? s \"abcdefghijklmno\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnop\") #t]\n    [(string=? s \"abcdefghijklmnopq\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqr\") #t]\n    [(string=? s \"abcdefghijklmnopqrs\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrst\") #t]\n    [(string=? s \"abcdefghijklmnopqrstu\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuv\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuvw\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwx\") #t]\n    [(string=? s \"\
    abcdefghijklmnopqrstuvwxy\") #t]\n    [(string=? s \"abcdefghijklmnopqrstuvwxyz\"\
    ) #t]\n    [(string=? s \"abcdefghijklmnopqr", "  (if (< (string-length s) 3)\n\
    \      #f\n      (let ([a (string-ref s 0)]\n            [b (string-ref s 1)]\n\
    \            [c (string-ref s 2)])\n        (if (and (not (char=? a b))\n    \
    \             (not (char=? b c))\n                 (not (char=? a c)))\n     \
    \       #t\n            #f))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref\
    \ s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0)\
    \ (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n\
    \    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and (&gt;= (string-length s) 3)\n       (every (\u03BB (i) (not (equal? (substring\
    \ s i (+ i 3))\n                                  (substring s (+ i 1) (+ i 4)))))\n\
    \              (range 0 (- (string-length s) 3)))))\n", "  (cond\n    [(empty?\
    \ s) #f]\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) false]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) false]\n    [(and\
    \ (equal? (string-ref s 1) (string-ref s 2))\n          (equal? (string-ref s\
    \ 2) (string-ref s 3))) false]\n    [else true]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(string=? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n",
  "  (cond\n    [(string=? s \"\") #f]\n    [(string=? s \"abc\") #t]\n    [(string=?\
    \ s \"abcc\") #f]\n    [(string=? s \"abccc\") #f]\n    [(string=? s \"abcccc\"\
    ) #f]\n    [(string=? s \"abccccc\") #f]\n    [(string=? s \"abcccccc\") #f]\n\
    \    [(string=? s \"abccccccc\") #f]\n    [(string=? s \"abcccccccc\") #f]\n \
    \   [(string=? s \"abccccccccc\") #f]\n    [(string=? s \"abcccccccccc\") #f]\n\
    \    [(string=? s \"abccccccccccc\") #f]\n    [(string=? s \"abcccccccccccc\"\
    ) #f]\n    [(string=? s \"abccccccccccccc\") #f]\n    [(string=? s \"abcccccccccccccc\"\
    ) #f]\n    [(string=? s \"abccccccccccccccc\") #f]\n    [(string=? s \"abcccccccccccccccc\"\
    ) #f]\n    [(string=? s \"abccccccccccccccccc\") #f]\n    [(string=? s \"abcccccccccccccccccc\"\
    ) #f]\n    [(string=? s \"abccccccccccccccccccc\") #f]\n    [(string=? s \"abcccccccccccccccccccc\"\
    ) #f]\n    [(string=? s \"abccccccccccccccccccccc\") #f]\n    [(string=? s \"\
    abcccccccccccccccccccccc\") #f]\n    [(string=? s \"abccccccccccccccccccccccc\"\
    ) #f]\n    [(string=? s \"abcccccccccccccccccccccccc\") #f]\n    [(string=? s\
    \ \"abccccccccccccccccccccccccc\") #f]\n    [(", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(string=? s \"\") #t]\n    [(string=?\
    \ s \"abc\") #t]\n    [(string=? s \"abca\") #f]\n    [(string=? s \"abcaa\")\
    \ #f]\n    [(string=? s \"abcab\") #t]\n    [(string=? s \"abcabc\") #t]\n   \
    \ [(string=? s \"abcabca\") #f]\n    [(string=? s \"abcabcab\") #t]\n    [(string=?\
    \ s \"abcabcabc\") #t]\n    [(string=? s \"abcabcabca\") #f]\n    [(string=? s\
    \ \"abcabcabcab\") #t]\n    [(string=? s \"abcabcabcabc\") #t]\n    [(string=?\
    \ s \"abcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcab\") #t]\n    [(string=?\
    \ s \"abcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabca\") #f]\n   \
    \ [(string=? s \"abcabcabcabcabcab\") #t]\n    [(string=? s \"abcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcab\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcab\") #t]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcab\") #t]\n    [(string=? s\
    \ \"abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcab\") #t]\n    [(string",
  "  (and (>= (string-length s) 3)\n       (every (lambda (c) (not (equal? c (string-ref\
    \ s (+ 1 c)))))\n              (range 0 (- (string-length s) 2)))))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (if (string&lt;=? s 2)\n      #f\n    \
    \  (let* ([s (string-&gt;list s)]\n             [s (for/fold ([acc '()]) ([x (in-list\
    \ s)])\n                     (if (member x acc)\n                         acc\n\
    \                         (cons x acc)))])\n        (and (= (length s) (length\
    \ (string-&gt;list s)))\n             (for/and ([i (in-range 0 (- (length s) 3))])\n\
    \               (not (equal? (list-ref s i) (list-ref s (+ i 1)) (list-ref s (+\
    \ i 2)))))))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(string=?\
    \ s \"\") #t]\n    [(string=? s \"abc\") #t]\n    [(string=? s \"abca\") #f]\n\
    \    [(string=? s \"abcaa\") #f]\n    [(string=? s \"abcabc\") #t]\n    [(string=?\
    \ s \"abcabca\") #f]\n    [(string=? s \"abcabcab\") #f]\n    [(string=? s \"\
    abcabcabc\") #t]\n    [(string=? s \"abcabcabca\") #f]\n    [(string=? s \"abcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcab\") #f]\n    [(string=? s \"abcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcab\") #f]\n    [(string=? s \"abcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s\
    \ \"abcabcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabc", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (i)\n                (not (equal? (substring s\
    \ i (+ i 3))\n                             (substring s (+ i 1) (+ i 4)))))\n\
    \              (iota (- (string-length s) 3)))))\n", "  (if (or (&lt; (string-length\
    \ s) 3)\n          (equal? (substring s 0 3) (substring s 1 4)))\n      #f\n \
    \     (is_happy (substring s 1))))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and (string&gt;=? s 3)\n       (every (lambda (x) (not (equal? x (substring\
    \ s (+ x 1) (+ x 2)))))\n              (range 0 (- (string-length s) 2)))))\n\
    </code>\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (i)\n \
    \               (not (equal? (substring s i (+ i 3))\n                       \
    \      (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (and (>= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (substring s 1 3)))) (substring s 0 3))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (\u03BB (i) (not (equal? (substring s i (+ i 3))\n    \
    \                              (substring s (+ i 1) (+ i 4)))))\n            \
    \  (range 0 (- (string-length s) 3)))))\n</code>\n", "  (if (&lt; (string-length\
    \ s) 3)\n      #f\n      (let ([a (string-ref s 0)]\n            [b (string-ref\
    \ s 1)]\n            [c (string-ref s 2)])\n        (if (and (not (equal? a b))\n\
    \                 (not (equal? a c))\n                 (not (equal? b c)))\n \
    \           (is_happy (substring s 1))\n            #f))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n\
    \          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy\
    \ (substring s 1))]))\n", "  (and\n   (&gt;= (string-length s) 3)\n   (not (string-contains\
    \ s #\\a #\\a #\\a))\n   (not (string-contains s #\\b #\\b #\\b))\n   (not (string-contains\
    \ s #\\c #\\c #\\c))))\n", "  (and (&gt;= (string-length s) 3)\n       (for/and\
    \ ([i (in-range (string-length s) (- (string-length s) 2))])\n         (not (equal?\
    \ (substring s i (+ i 3))\n                      (substring s (+ i 1) (+ i 4)))))))\n",
  "  (and (&gt;= (string-length s) 3)\n       (not (for/or ([i (in-range 3 (string-length\
    \ s))])\n               (equal? (substring s (- i 3) i)\n                    \
    \   (substring s i (+ i 3)))))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref\
    \ s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (every (lambda (i) (not (equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (if (or (&lt; (string-length\
    \ s) 3)\n          (equal? (substring s 0 3) (substring s 1 4)))\n      #f\n \
    \     (is_happy (substring s 1))))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and (&gt;= (string-length s) 3)\n       (for/and ([i (in-range 0 (- (string-length\
    \ s) 3))])\n         (not (equal? (substring s i (+ i 3))\n                  \
    \    (substring s (+ i 1) (+ i 4)))))))\n", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [(equal? (string-ref s 0) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (and (&gt;= (string-length s) 3)\n       (for/and\
    \ ([i (in-range (string-length s) (- (string-length s) 2))])\n         (not (equal?\
    \ (substring s i (+ i 3))\n                      (substring s (+ i 1) (+ i 4)))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref\
    \ s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0)\
    \ (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n\
    \    [else (is_happy (substring s 1))]))\n", "  (and (>= (string-length s) 3)\n\
    \       (for/and ([i (in-range (sub1 (string-length s)) 2 -1)])\n         (not\
    \ (equal? (substring s i (+ i 3))\n                      (substring s (- i 3)\
    \ i))))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (substring s 1 2))))\n              (substring s 2))))\n", "  (cond\n\
    \    [(< (string-length s) 3) false]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) false]\n    [else true]))\n", "  (and (string&gt;=? s 3)\n       (for/and\
    \ ([i (in-range (sub1 (string-length s)) 2)]\n                 [c1 (in-string\
    \ s i)]\n                 [c2 (in-string s (add1 i))]\n                 [c3 (in-string\
    \ s (add1 (add1 i)))])\n         (not (char=? c1 c2))\n         (not (char=? c2\
    \ c3))\n         (not (char=? c1 c3)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and\n   (&gt;= (string-length s) 3)\n   (for/and ([i (in-range (sub1 (string-length\
    \ s)) -1 -1)])\n     (not (equal? (string-ref s i) (string-ref s (sub1 i)))))\n\
    \   (for/and ([i (in-range (sub1 (string-length s)) -1 -1)])\n     (not (equal?\
    \ (string-ref s i) (string-ref s (- i 2)))))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (x) (not (equal? x (substring s (+ 1 x) (+ 3 x)))))\n\
    \              (iota (- (string-length s) 3)))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n\
    \              (build-list (- (string-length s) 2)\n                         \
    \ (lambda (i) i)))))\n", "  (let ([len (string-length s)])\n    (and (&gt;= len\
    \ 3)\n         (for/and ([i (in-range 0 (- len 3))])\n           (not (equal?\
    \ (substring s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4))))))))\n",
  "  (cond\n    [(string=? s \"\") #t]\n    [(string=? s \"abc\") #t]\n    [(string=?\
    \ s \"abca\") #f]\n    [(string=? s \"abcaa\") #f]\n    [(string=? s \"abcabc\"\
    ) #t]\n    [(string=? s \"abcabca\") #f]\n    [(string=? s \"abcabcab\") #f]\n\
    \    [(string=? s \"abcabcabc\") #t]\n    [(string=? s \"abcabcabca\") #f]\n \
    \   [(string=? s \"abcabcabcab\") #f]\n    [(string=? s \"abcabcabcabc\") #t]\n\
    \    [(string=? s \"abcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcab\") #f]\n    [(string=? s \"abcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcab\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcab\") #f]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcab\") #f]\n    [(string=? s\
    \ \"abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcab\") #f]\n    [(string=?\
    \ s \"abcabcabcabcabcabcabcabcabcabc", "  (and (&gt;= (string-length s) 3)\n \
    \      (every (lambda (x) (not (equal? x (substring s 1 3)))) (substring s 0 3))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(string=? (substring s 0 3) (substring s 1 4)) #f]\n    [else (is_happy\
    \ (substring s 1))]))\n", "  (if (&lt; (string-length s) 3)\n      #f\n      (let\
    \ ([c1 (string-ref s 0)]\n            [c2 (string-ref s 1)]\n            [c3 (string-ref\
    \ s 2)])\n        (if (and (not (char=? c1 c2))\n                 (not (char=?\
    \ c1 c3))\n                 (not (char=? c2 c3)))\n            (is_happy (substring\
    \ s 1))\n            #f))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n \
    \   [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [(equal? (string-ref s 0) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (and (&gt;= (string-length s) 3)\n       (every\
    \ (lambda (i)\n                (not (equal? (substring s i (+ i 3))\n        \
    \                     (substring s (+ i 1) (+ i 4)))))\n              (range (-\
    \ (string-length s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n       (for/and\
    \ ([i (in-range (sub1 (string-length s)) -1 -1)])\n         (not (equal? (substring\
    \ s i (+ i 3))\n                      (substring s (- i 3) i))))))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length s) 3) false]\n\
    \    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref\
    \ s 1) (string-ref s 2))) false]\n    [(and (equal? (string-ref s 1) (string-ref\
    \ s 2))\n          (equal? (string-ref s 2) (string-ref s 3))) false]\n    [else\
    \ true]))\n", "  (and (>= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (substring s (+ 1 x) (+ 3 x))))) (iota (- (string-length s) 3)))))\n",
  "  (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not (equal? x (substring\
    \ s (+ x 3) (+ x 6)))))\n              (iota (string-length s) (- (string-length\
    \ s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (x)\
    \ (not (equal? x (substring s 1 3)))) (substring s 0 3))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and\
    \ (equal? (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s\
    \ 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(and\n      (not (equal? (string-ref s\
    \ 0) (string-ref s 1)))\n      (not (equal? (string-ref s 0) (string-ref s 2)))\n\
    \      (not (equal? (string-ref s 1) (string-ref s 2))))\n      #t]\n    [else\
    \ #f]))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains s \"\
    aaa\"))\n       (not (string-contains s \"bbb\"))\n       (not (string-contains\
    \ s \"ccc\"))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains\
    \ s \"eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let ([first-three (substring s 0 3)])\n        (if (equal?\
    \ first-three (string-upcase first-three))\n            (is_happy (substring s\
    \ 1))\n            #f))))\n", "  (cond\n    [(< (string-length s) 3) false]\n\
    \    [(equal? (string-ref s 0) (string-ref s 1)) false]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) false]\n    [(equal? (string-ref s 0) (string-ref s 2))\
    \ false]\n    [else true]))\n", "  (and (&gt;= (string-length s) 3)\n       (every\
    \ (lambda (x) (not (equal? x (substring s (+ x 1) (+ x 3)))))\n              (range\
    \ 0 (- (string-length s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (every (lambda (x) (not (equal? x (substring s (+ x 1) (+ x 2)))))\n     \
    \         (range 0 (- (string-length s) 3)))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n\
    \              (range 0 (- (string-length s) 2)))))\n</code>\n", "  (cond\n  \
    \  [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1\
    \ 4)) #f]\n    [else #t]))\n", "  (cond\n    [(empty? s) #f]\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (every (lambda (i)\n                (not (equal? (substring s i (+ i 3))\n\
    \                             (substring s (+ i 1) (+ i 4)))))\n             \
    \ (range 0 (- (string-length s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n\
    \       (every (lambda (substr)\n                (not (equal? (substring s 0 3)\
    \ substr)))\n              (build-list (- (string-length s) 2)\n             \
    \            (lambda (i)\n                           (substring s i (+ i 3)))))))\n",
  "  (if (&lt; (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list s)])\n\
    \        (and (not (equal? (list-ref s 0) (list-ref s 1)))\n             (not\
    \ (equal? (list-ref s 0) (list-ref s 2)))\n             (not (equal? (list-ref\
    \ s 1) (list-ref s 2)))))))\n", "  (and (&gt;= (string-length s) 3)\n       (every\
    \ (lambda (x) (not (equal? x (substring s 1 3))))\n              (substring s\
    \ 0 3))))\n", "  (cond\n    [(string=? s \"\") #f]\n    [(string=? s \"abc\")\
    \ #t]\n    [(string=? s \"abca\") #f]\n    [(string=? s \"abcabc\") #t]\n    [(string=?\
    \ s \"abcabca\") #f]\n    [(string=? s \"abcabcabc\") #t]\n    [(string=? s \"\
    abcabcabca\") #f]\n    [(string=? s \"abcabcabcabc\") #t]\n    [(string=? s \"\
    abcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabc\") #t]\n    [(string=?\
    \ s \"abcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabc\") #t]\n\
    \    [(string=? s \"abcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"\
    abcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabc\") #t]\n    [(string=?\
    \ s \"abcabcabcabcabcabcabcabcabcabca\") #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabcabc\"\
    ) #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabcabca\") #f]\n    [(string=?\
    \ s \"abcabcabcabcabcabcabcabcabcabcabcabc\") #t]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabcabcabca\"\
    ) #f]\n    [(string=? s \"abcabcabcabcabcabcabcabcabcabcabcabcabc\") #t]\n   \
    \ [(string=? s \"abcabcabcabcabcabcabc", "  (let loop ([i 0])\n    (if (&lt; i\
    \ (- (string-length s) 2))\n        (if (equal? (substring s i (+ i 3))\n    \
    \                (string-join (list (substring s i (+ i 1))\n                \
    \                       (substring s (+ i 1) (+ i 2))\n                      \
    \                 (substring s (+ i 2) (+ i 3)))))\n            #f\n         \
    \   (loop (+ i 1)))\n        #t)))\n", "  (and (&gt;= (string-length s) 3)\n \
    \      (every (lambda (i) (not (equal? (substring s i (+ i 3))\n             \
    \                          (substring s (+ i 1) (+ i 4)))))\n              (range\
    \ 0 (- (string-length s) 3)))))\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (for/and ([i (in-range (- (string-length s) 2))])\n         (not (equal? (substring\
    \ s i (+ i 3))\n                      (substring s (+ i 1) (+ i 4)))))))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not (equal? x (substring\
    \ s 1 3)))) (substring s 0 3))))\n", "  (cond [(empty? s) #f]\n        [(< (string-length\
    \ s) 3) #f]\n        [(and (equal? (substring s 0 1) (substring s 1 2))\n    \
    \          (equal? (substring s 1 2) (substring s 2 3))) #f]\n        [else (is_happy\
    \ (substring s 1))]))\n", "  (let ([len (string-length s)])\n    (and (>= len\
    \ 3)\n         (for/and ([i (in-range (- len 2))])\n           (not (string=?\
    \ (substring s i (+ i 3))\n                          (substring s (+ i 1) (+ i\
    \ 4))))))))\n", "  (if (&lt; (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list\
    \ s)])\n        (andmap (lambda (x) (not (equal? (car x) (cadr x)))) (partition\
    \ s 3)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref\
    \ s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref s 2)))\
    \ #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and (&gt;= (string-length s) 3)\n       (not (member #f (map (lambda (x) (not\
    \ (equal? (string-ref s x) (string-ref s (+ x 1))))) (range 0 (- (string-length\
    \ s) 2)))))))\n", "  (and (&gt;= (string-length s) 3)\n       (not (member #f\
    \ (map (lambda (s) (not (equal? (substring s 0 3) (substring s 1 4)))) (in-naturals\
    \ (string-length s)))))))\n", "  (and (&gt;= (string-length s) 3)\n       (for/and\
    \ ([i (in-range 0 (- (string-length s) 3))])\n         (not (equal? (substring\
    \ s i (+ i 3))\n                      (substring s (+ i 1) (+ i 4)))))))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (and (&gt;= (string-length s) 3)\n     \
    \  (every (lambda (i)\n                (not (equal? (substring s i (+ i 3))\n\
    \                             (substring s (+ i 1) (+ i 4)))))\n             \
    \ (range 0 (- (string-length s) 3)))))\n", "  (and\n   (>= (string-length s) 3)\n\
    \   (for/and ([i (in-range (sub1 (string-length s)) -3 -1)])\n     (not (equal?\
    \ (substring s i (+ i 3))\n                  (substring s (+ i 1) (+ i 4)))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref\
    \ s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n\
    \       (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n</code>\nI'm not sure\
    \ if this is the best way to do it, but it works.\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (every (lambda (i)\n                (not (equal? (substring s\
    \ i (+ i 3))\n                             (substring s (+ i 1) (+ i 4)))))\n\
    \              (iota (- (string-length s) 2)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) false]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n       \
    \   (equal? (string-ref s 1) (string-ref s 2))) false]\n    [(and (equal? (string-ref\
    \ s 0) (string-ref s 2))\n          (equal? (string-ref s 1) (string-ref s 2)))\
    \ false]\n    [else true]))\n", "  (and (&gt;= (string-length s) 3)\n       (not\
    \ (regexp-match #rx\"aaa\" s))\n       (not (regexp-match #rx\"bbb\" s))\n   \
    \    (not (regexp-match #rx\"ccc\" s))\n       (not (regexp-match #rx\"ddd\" s))\n\
    \       (not (regexp-match #rx\"eee\" s))\n       (not (regexp-match #rx\"fff\"\
    \ s))\n       (not (regexp-match #rx\"ggg\" s))\n       (not (regexp-match #rx\"\
    hhh\" s))\n       (not (regexp-match #rx\"iii\" s))\n       (not (regexp-match\
    \ #rx\"jjj\" s))\n       (not (regexp-match #rx\"kkk\" s))\n       (not (regexp-match\
    \ #rx\"lll\" s))\n       (not (regexp-match #rx\"mmm\" s))\n       (not (regexp-match\
    \ #rx\"nnn\" s))\n       (not (regexp-match #rx\"ooo\" s))\n       (not (regexp-match\
    \ #rx\"ppp\" s))\n       (not (regexp-match #rx\"qqq\" s))\n       (not (regexp-match\
    \ #rx\"rrr\" s))\n       (not (regexp-match #rx\"sss\" s))\n       (not (regexp-match\
    \ #rx\"ttt\" s))\n       (not (regexp-match #rx\"uuu\" s))\n       (not (regexp-match\
    \ #rx\"vvv\" s))\n       (not (regexp-match #rx\"www\" s))\n       (not (regexp-match\
    \ #rx\"xxx\" s))\n       (not (regexp-match #rx\"yyy\" s))\n       (not (regexp-match\
    \ #rx\"zzz\" s))))\n", "  (and (&gt;= (string-length s) 3)\n       (every (\u03BB\
    \ (i)\n                (not (equal? (substring s i (+ i 3))\n                \
    \             (substring s (+ i 1) (+ i 4)))))\n              (range 0 (- (string-length\
    \ s) 3)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (every (lambda (c) (not (equal? c (string-ref s (+ 1 c)))))\n            \
    \  (range 0 (- (string-length s) 2)))))\n", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [(equal? (string-ref s 0) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (and (&gt;= (string-length s) 3)\n       (not (string-contains\
    \ (substring s 0 3) (substring s 1 3)))))\n</code>\n", "  (and\n   (&gt;= (string-length\
    \ s) 3)\n   (every (lambda (x) (not (equal? (substring s x (+ x 3)) (substring\
    \ s (+ x 1) (+ x 4)))))\n          (range 0 (- (string-length s) 3)))))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n\
    \       (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) false]\n    [(and (equal? (string-ref s 0) (string-ref\
    \ s 1))\n          (equal? (string-ref s 1) (string-ref s 2))) false]\n    [(and\
    \ (equal? (string-ref s 0) (string-ref s 2))\n          (equal? (string-ref s\
    \ 1) (string-ref s 2))) false]\n    [else true]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (equal? (string-ref s 0) (string-ref s 1))\n          (equal?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (and (&gt;= (string-length s) 3)\n       (for/and ([i (in-range 0 (- (string-length\
    \ s) 3))])\n         (not (equal? (substring s i (+ i 3))\n                  \
    \    (substring s (+ i 1) (+ i 4)))))))\n", "  (and (&gt;= (string-length s) 3)\n\
    \       (not (string-contains s \"aaa\"))\n       (not (string-contains s \"bbb\"\
    ))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains s \"\
    ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n</code>\nI am looking for a more elegant solution.\n\n\nA:\n\n\
    You can use <code>string-split</code> to split the string into a list of substrings\
    \ of length 3, and then use <code>for/or</code> to check if any of the substrings\
    \ are equal to each other.\n<code>(define (is-happy s)\n  (and (&gt;= (string-length\
    \ s) 3)\n       (for/or ([sub (in-list (string-split s 3))])\n         (for/or\
    \ ([other (in-list (string-split s 3))])", "  (and (&gt;= (string-length s) 3)\n\
    \       (every (lambda (x) (not (equal? x (substring s 1 3))))\n             \
    \ (substring s 0 3))))\n</code>\n", "  (and (&gt;= (string-length s) 3)\n    \
    \   (for/and ([i (in-range (string-length s) (- (string-length s) 2))])\n    \
    \     (not (equal? (substring s i (+ i 3))\n                      (substring s\
    \ (+ i 1) (+ i 4)))))))\n", "  (and (&gt;= (string-length s) 3)\n       (every\
    \ (lambda (i)\n                (not (equal? (substring s i (+ i 3))\n        \
    \                     (substring s (+ i 1) (+ i 4)))))\n              (range 0\
    \ (- (string-length s) 3)))))\n", "  (if (&lt; (string-length s) 3)\n      #f\n\
    \      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n        \
    \    #t\n            (if (equal? (substring s i (+ i 3))\n                   \
    \     (substring s (+ i 1) (+ i 4)))\n                #f\n                (loop\
    \ (+ i 1)))))))\n</code>\n", "  (cond\n    [(< (string-length s) 3) false]\n \
    \   [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref\
    \ s 1) (string-ref s 2))) false]\n    [(and (char=? (string-ref s 0) (string-ref\
    \ s 2))\n          (char=? (string-ref s 1) (string-ref s 2))) false]\n    [else\
    \ true]))\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (substring s 1 3)))) (substring s 0 3))))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (not (regexp-match #rx\"aaa\" s))\n       (not (regexp-match #rx\"\
    bbb\" s))\n       (not (regexp-match #rx\"ccc\" s))\n       (not (regexp-match\
    \ #rx\"ddd\" s))\n       (not (regexp-match #rx\"eee\" s))\n       (not (regexp-match\
    \ #rx\"fff\" s))\n       (not (regexp-match #rx\"ggg\" s))\n       (not (regexp-match\
    \ #rx\"hhh\" s))\n       (not (regexp-match #rx\"iii\" s))\n       (not (regexp-match\
    \ #rx\"jjj\" s))\n       (not (regexp-match #rx\"kkk\" s))\n       (not (regexp-match\
    \ #rx\"lll\" s))\n       (not (regexp-match #rx\"mmm\" s))\n       (not (regexp-match\
    \ #rx\"nnn\" s))\n       (not (regexp-match #rx\"ooo\" s))\n       (not (regexp-match\
    \ #rx\"ppp\" s))\n       (not (regexp-match #rx\"qqq\" s))\n       (not (regexp-match\
    \ #rx\"rrr\" s))\n       (not (regexp-match #rx\"sss\" s))\n       (not (regexp-match\
    \ #rx\"ttt\" s))\n       (not (regexp-match #rx\"uuu\" s))\n       (not (regexp-match\
    \ #rx\"vvv\" s))\n       (not (regexp-match #rx\"www\" s))\n       (not (regexp-match\
    \ #rx\"xxx\" s))\n       (not (regexp-match #rx\"yyy\" s))\n       (not (regexp-match\
    \ #rx\"zzz\" s))))\n</code>\n", "  (cond\n    [(string=? s \"\") #t]\n    [(string-length\
    \ s) &lt; 3 #f]\n    [(string-length s) &gt;= 3\n     (and\n       (not (string=?\
    \ (substring s 0 3) (substring s 1 4)))\n       (is_happy (substring s 1)))]))\n\
    </code>\nI'm getting the following error:\n<code>application: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: #f\n  arguments...:\n\
    \   #f\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou have a couple\
    \ of problems:\n\nThe <code>&lt;</code> and <code>&gt;=</code> operators are not\
    \ functions, they are special forms. You need to use <code>&lt;?</code> and <code>&gt;=?</code>\
    \ instead.\nThe <code>and</code> function expects a list of arguments, not just\
    \ two. You need to use <code>(and ...)</code> instead.\n\nHere's a fixed version:\n\
    <code>(define (is_happy s)\n  (cond\n    [(string=? s \"\") #t]\n    [(&lt;? (string-length\
    \ s) 3) #f]\n    [(&gt;=? (string-length s) 3)\n     (and\n       (not (string=?\
    \ (substring s 0 3) (substring s 1 4)))\n       (is_happy (substring s 1)))]))\n\
    </code>\n", "  (and (&gt;= (string-length s) 3)\n       (every (lambda (c) (not\
    \ (equal? c (string-ref s (+ 1 c))))) (range 0 (- (string-length s) 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
