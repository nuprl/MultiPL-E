name: HumanEval_104_unique_digits
language: rkt
prompt: "#lang racket\n\n;; Given a list of positive integers x. return a sorted list\
  \ of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should\
  \ be sorted in increasing order.\n;; For example:\n(define (unique_digits x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
  \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
  \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
  \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103\
  \ 31)) (list 31 135))\n))\n\n(test-humaneval)"
completions: ["  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n",
  "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n)\
    \ (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even?\
    \ (remainder x 10)))) x) <))\n", "  (define (is_odd? n)\n    (not (even? n)))\n\
    \  (define (has_even_digit? n)\n    (cond ((zero? n) #f)\n          ((is_odd?\
    \ (remainder n 10)) (has_even_digit? (quotient n 10)))\n          (else #t)))\n\
    \  (define (unique_digits_helper xs acc)\n    (cond ((null? xs) acc)\n       \
    \   ((has_even_digit? (car xs)) (unique_digits_helper (cdr xs) acc))\n       \
    \   (else (unique_digits_helper (cdr xs) (cons (car xs) acc)))))\n  (sort < (unique_digits_helper\
    \ x '())))\n", "  (sort (filter (lambda (y) (not (any even? (digits y)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (\u03BB (x)\
    \ (not (even? (modulo x 10)))) x) <))\n", "  (sort x < #:key (lambda (x) (odd?\
    \ (modulo x 10)))))\n", "  (cond\n    [(empty? x) empty]\n    [(even? (first x))\
    \ (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n",
  "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (x)\
    \ (not (any even? (digits x)))) x) <))\n", "  (sort (filter (lambda (n) (not (even?\
    \ (remainder n 10)))) x) <))\n", "  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (y)\n                  (not (even? (remainder y 10))))\n\
    \                x)\n        <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (modulo y 10)))) x) <))\n", "  (sort (filter (lambda (y) (odd? (remainder y\
    \ 10))) x) <))\n", "  (cond\n    [(empty? x) empty]\n    [(even? (remainder (first\
    \ x) 10)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (x) (not (any even? (digits x)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n)\
    \ (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even?\
    \ (remainder x 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (x) (not (even? (modulo x 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (define (even? x)\n    (if\
    \ (zero? (remainder x 2))\n        #t\n        #f))\n  (define (has-even-digit?\
    \ x)\n    (if (zero? x)\n        #f\n        (if (even? (remainder x 10))\n  \
    \          #t\n            (has-even-digit? (quotient x 10)))))\n  (define (unique-digits-helper\
    \ x)\n    (if (null? x)\n        '()\n        (if (has-even-digit? (car x))\n\
    \            (unique-digits-helper (cdr x))\n            (cons (car x) (unique-digits-helper\
    \ (cdr x))))))\n  (define (insert-sorted x lst)\n    (if (null? lst)\n       \
    \ (list x)\n        (if (< x (car lst))\n            (cons x lst)\n          \
    \  (cons (car lst) (insert-sorted x (cdr lst))))))\n  (define (sort-unique-digits\
    \ x)\n    (if (null? x)\n        '()\n        (insert-sorted (car x) (sort-unique-digits\
    \ (cdr x)))))\n  (sort-unique-digits (unique-digits-helper x)))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (n)\n                  (not (zero? (modulo n 2))))\n                x)\n   \
    \     <))\n", "  (sort (filter (lambda (y) (not (even? (modulo y 10)))) x) <))\n",
  "  (sort x < #:key (lambda (x) (not (even? (remainder x 10)))))\n  )\n", "  (sort\
    \ (filter (lambda (y) (not (even? (modulo y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n)\n                  (not (even? (remainder n 10))))\n           \
    \     x)\n        <))\n", "  (cond\n    [(empty? x) empty]\n    [(even? (first\
    \ x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits (rest\
    \ x)))]))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x)\
    \ <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (has-even-digit? y))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\
    \ (not (even? (modulo y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (first-digit n)))) x) <))\n", "  (sort (filter (lambda\
    \ (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda (y)\
    \ (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (cond\n    [(empty? x) empty]\n   \
    \ [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n", "  (sort (filter (lambda (n) (not (even? (remainder n 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y)\n                  (not (even? (remainder y 10))))\n   \
    \             x)\n        <))\n", "  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10))))\
    \ x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (odd? (remainder n 10))) x) <))\n", "  (sort (filter\
    \ (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\
    \ (not (even? (remainder y 10)))) x) <))\n", "  (filter (lambda (y) (not (even?\
    \ (modulo y 10)))) x))\n", "  (sort < (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x)))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort x < #:key (lambda (x) (list->string (list->set (number->list\
    \ x 10)))))\n)\n", "  (cond\n    [(empty? x) empty]\n    [(even? (first x)) (unique_digits\
    \ (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\
    \ (not (even? (modulo y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (define (has-even-digit? x)\n    (cond\n      [(zero? x) #f]\n      [(even? (remainder\
    \ x 10)) #t]\n      [else (has-even-digit? (quotient x 10))]))\n  (define (unique-digits-helper\
    \ x acc)\n    (cond\n      [(null? x) acc]\n      [(has-even-digit? (car x)) (unique-digits-helper\
    \ (cdr x) acc)]\n      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (sort < (unique-digits-helper x '())))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y)\n                  (not (even? (remainder\
    \ y 10))))\n                x)\n        <))\n", "  (sort (filter (lambda (n) (not\
    \ (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y)\n                  (not (even? (modulo\
    \ y 10))))\n                x)\n        <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even?\
    \ (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder\
    \ x 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (modulo y 10))))\
    \ x) <))\n", "  (sort (filter (\u03BB (n) (not (any even? (digits n)))) x) <))\n",
  "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y)\n                  (not (even? (remainder y 10))))\n           \
    \     x)\n        <))\n", "  (sort (filter (\u03BB (n) (not (even? (remainder\
    \ n 10)))) x) <))\n", "  (cond\n    [(empty? x) empty]\n    [(even? (first x))\
    \ (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ x < #:key (lambda (x) (list-ref (digits x) 0))))\n", "  (sort x < #:key (lambda\
    \ (x) (not (even? (modulo x 10)))))\n  )\n", "  (sort (filter (lambda (n) (not\
    \ (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\n              \
    \    (not (even? (remainder y 10))))\n                x)\n        <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (modulo y 10)))) x) <))\n", "  (filter (lambda\
    \ (n) (not (even? (remainder n 10)))) x))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder\
    \ x 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10))))\
    \ x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n",
  "  (sort (filter (\u03BB (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n)\
    \ (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (modulo x 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (odd? (remainder y 10))) x) <))\n", "  (sort (filter (lambda (n)\n     \
    \             (not (even? (remainder n 10))))\n                x)\n        <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (x) (not (even? (modulo x 10)))) x) <))\n", "  (sort < (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x)))\n", "  (sort x < #:key (lambda\
    \ (x) (odd? (remainder x 10)))))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(empty? x) acc]\n      [(has-even-digit? (first x)) (unique-digits-helper\
    \ (rest x) acc)]\n      [else (unique-digits-helper (rest x) (cons (first x) acc))]))\n\
    \  (unique-digits-helper x '()))\n", "  (sort (filter (lambda (n) (not (even?\
    \ (remainder n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n", "  (sort (filter (lambda (n)\n                  (not (zero?\
    \ (modulo n 2))))\n                x)\n        <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (modulo y 10)))) x) <))\n", "  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (modulo y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (x)\
    \ (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (modulo y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (\u03BB (x) (not (even? (remainder\
    \ x 10)))) x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10))))\
    \ x) <))\n", "  (sort (filter (lambda (n)\n                  (not (even? (remainder\
    \ n 10))))\n                x)\n        <))\n", "  (sort (filter (lambda (x) (not\
    \ (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (n) (not (even? (modulo\
    \ n 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (odd? (remainder n 10))) x) <))\n", "  (sort (filter\
    \ (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (\u03BB\
    \ (x) (not (even? (modulo x 10)))) x) <))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x) <))\n", "  (sort x < #:key (lambda (x) (unique-digits\
    \ x))))\n", "  (sort (filter (lambda (y) (not (even? (modulo y 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\
    \ (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter (lambda (y)\n  \
    \                (not (even? (remainder y 10))))\n                x)\n       \
    \ <))\n", "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort\
    \ x < #:key (lambda (x) (not (even? (remainder x 10)))))\n  )\n", "  (sort (remove\
    \ even? (flatten (map string->list (map number->string x)))) <))\n", "  (sort\
    \ (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (y)\n                  (not (even? (remainder y 10))))\n                x)\n\
    \        <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort\
    \ (filter (lambda (x) (not (even? (remainder x 10)))) x) <))\n", "  (sort (filter\
    \ (lambda (n) (not (even? (remainder n 10)))) x) <))\n", "  (sort (filter (lambda\
    \ (n) (not (even? (modulo n 10)))) x) <))\n", "  (sort (filter (lambda (n) (not\
    \ (has-even-digit? n))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10))))\
    \ x) <))\n", "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n",
  "  (sort (filter (lambda (y) (not (even? (remainder y 10)))) x) <))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
