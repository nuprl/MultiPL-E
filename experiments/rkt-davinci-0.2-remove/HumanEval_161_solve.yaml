name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n(define (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (string-reverse s))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref s\
    \ 0))\n           (string-downcase (string-upcase (string-ref s 0)))\n       \
    \    (string-ref s 0))\n       (solve (substring s 1)))))\n", "  (if (empty? s)\n\
    \      \"\"\n      (string-append (solve (substring s 1))\n                  \
    \   (if (char-alphabetic? (string-ref s 0))\n                         (if (char-lower-case?\
    \ (string-ref s 0))\n                             (string-upcase (string-ref s\
    \ 0))\n                             (string-downcase (string-ref s 0)))\n    \
    \                     (string-ref s 0)))))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (first s))\n     (string-append\n      (if (char-lower-case?\
    \ (first s))\n          (string-upcase (first s))\n          (string-downcase\
    \ (first s)))\n      (solve (rest s)))]\n    [else\n     (string-append (first\
    \ s) (solve (rest s)))]))\n", "  (string-join (reverse (map (lambda (c)\n    \
    \                           (if (char-alphabetic? c)\n                       \
    \            (if (char-lower-case? c)\n                                      \
    \ (char-upcase c)\n                                       (char-downcase c))\n\
    \                                   c))\n                             (string->list\
    \ s)))))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\n    \
    \   (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case?\
    \ (string-ref s 0))\n               (string-upcase (string-ref s 0))\n       \
    \        (string-downcase (string-ref s 0)))\n           (string-ref s 0))\n \
    \      (solve (substring s 1)))))\n", "  (if (string-contains-ci? s #\\a)\n  \
    \    (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n \
    \                       (if (char-lower-case? c)\n                           \
    \ (char-upcase c)\n                            (char-downcase c))\n          \
    \              c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-empty? s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (string-reverse\
    \ s))\n", "  (string-reverse (string-map (lambda (x)\n                       \
    \         (if (char-alphabetic? x)\n                                    (if (char-lower-case?\
    \ x)\n                                        (char-upcase x)\n              \
    \                          (char-downcase x))\n                              \
    \      x))\n                              s)))\n", "  (define (is-letter? c)\n\
    \    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (cond\n    [(string=? s \"\") s]\n    [(not (string-contains-pred is-letter?\
    \ s)) (string-reverse s)]\n    [else\n     (string-map reverse-case s)]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (string-reverse (string-map (lambda (c)\n    \
    \                            (if (char-alphabetic? c)\n                      \
    \              (if (char-lower-case? c)\n                                    \
    \    (char-upcase c)\n                                        (char-downcase c))\n\
    \                                    c))\n                              s)))\n",
  "  (string-reverse s))\n", "  (if (string-contains-pred s char-alphabetic?)\n  \
    \    (string-map (lambda (c) (if (char-alphabetic? c)\n                      \
    \            (if (char-lower-case? c)\n                                      (char-upcase\
    \ c)\n                                      (char-downcase c))\n             \
    \                     c))\n                  s)\n      (string-reverse s)))\n",
  "  (string-reverse (string-map (lambda (c)\n                                (if\
    \ (char-alphabetic? c)\n                                    (if (char-lower-case?\
    \ c)\n                                        (char-upcase c)\n              \
    \                          (char-downcase c))\n                              \
    \      c))\n                              s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref s\
    \ 0))\n           (if (char-lower-case? (string-ref s 0))\n               (string-upcase\
    \ (string-ref s 0))\n               (string-downcase (string-ref s 0)))\n    \
    \       (string-ref s 0))\n       (solve (substring s 1)))))\n", "  (string-join\
    \ (reverse (map (lambda (c)\n                               (if (char-alphabetic?\
    \ c)\n                                   (if (char-lower-case? c)\n          \
    \                             (char-upcase c)\n                              \
    \         (char-downcase c))\n                                   c))\n       \
    \                      (string->list s)))))\n", "  (if (string-empty? s)\n   \
    \   \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n     \
    \                    (if (char-lower-case? (string-ref s 0))\n               \
    \              (string-upcase (string-ref s 0))\n                            \
    \ (string-downcase (string-ref s 0)))\n                         (string-ref s\
    \ 0))\n                     (solve (substring s 1)))))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-empty? s)\n      s\n      (string-join\n\
    \       (map (lambda (x)\n              (if (char-alphabetic? x)\n           \
    \       (if (char-lower-case? x)\n                      (char-upcase x)\n    \
    \                  (char-downcase x))\n                  x))\n            (string->list\
    \ s))\n       \"\")))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (string-reverse (string-append (string-map (lambda (c)\n                   \
    \                                               (if (char-alphabetic? c)\n   \
    \                                                                   (if (char-lower-case?\
    \ c)\n                                                                       \
    \   (char-upcase c)\n                                                        \
    \                  (char-downcase c))\n                                      \
    \                                c))\n                                       \
    \                         s)))\n                     (solve (substring s 1)))))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (\u03BB (x) (if (char-alphabetic?\
    \ x)\n                             (if (char-lower-case? x)\n                \
    \                 (char-upcase x)\n                                 (char-downcase\
    \ x))\n                             x)) s)\n      (string-reverse s)))\n", " \
    \ (if (string-empty? s)\n      \"\"\n      (string-append (string-reverse s) (string-reverse\
    \ (string-upcase s)))))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (if (char-alphabetic? (string-ref s 0))\n                         (if (char-lower-case?\
    \ (string-ref s 0))\n                             (string-upcase (string-ref s\
    \ 0))\n                             (string-downcase (string-ref s 0)))\n    \
    \                     (string-ref s 0))\n                     (solve (substring\
    \ s 1)))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n      \
    \ (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase c)\n\
    \           (char-downcase c)))\n       s)\n      (string-reverse s)))\n", " \
    \ (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic?\
    \ c)\n           (if (char-lower-case? c)\n               (char-upcase c)\n  \
    \             (char-downcase c))\n           c))\n     (string->list s)))))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-append (string-downcase\
    \ (string-ref s 0)) (substring s 1))) (solve (substring s 1)))]\n    [else (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string-upcase (first s))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (first s)\n      (solve (rest s)))]\n\
    \    [else\n     (string-append\n      (string-downcase (first s))\n      (solve\
    \ (rest s)))]))\n", "  (string-reverse s))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n                 \
    \                 (char-upcase c)\n                                  (char-downcase\
    \ c))) s)\n      (string-reverse s)))\n", "  (string-reverse s))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (if (char-lower-case? c)\n                          \
    \            (char-upcase c)\n                                      (char-downcase\
    \ c))\n                                  c)) s)\n      (string-reverse s)))\n",
  "  (string-reverse (string-map (lambda (c)\n                                (if\
    \ (char-alphabetic? c)\n                                    (if (char-lower-case?\
    \ c)\n                                        (char-upcase c)\n              \
    \                          (char-downcase c))\n                              \
    \      c))\n                              s)))\n", "  (string-reverse s))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-downcase (string-ref s 0))\n                    (solve\
    \ (substring s 1)))]\n    [else\n     (string-append (string-upcase (string-ref\
    \ s 0))\n                    (solve (substring s 1)))]))\n", "  (string-reverse\
    \ s))\n", "  (string-reverse s))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (string-join (reverse (string-split s))))\n", "  (string-reverse (string-map\
    \ (lambda (c)\n                                (if (char-alphabetic? c)\n    \
    \                                (if (char-lower-case? c)\n                  \
    \                      (char-upcase c)\n                                     \
    \   (char-downcase c))\n                                    c))\n            \
    \                  s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (if\
    \ (char-lower-case? c)\n                                      (char-upcase c)\n\
    \                                      (char-downcase c))\n                  \
    \                c)) s)\n      (string-reverse s)))\n", "  (string-join (reverse\
    \ (string-split s #\\space))))\n", "  (if (string-contains-ci? s #\\a)\n     \
    \ (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n    \
    \                    (if (char-lower-case? c)\n                            (char-upcase\
    \ c)\n                            (char-downcase c))\n                       \
    \ c))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (string-reverse (string-map (lambda (c)\
    \ (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)))))\n", "  (if\
    \ (string-contains s #\\a)\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n\
    \                            (char-upcase c)\n                            (char-downcase\
    \ c))\n                        c))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (string-reverse (string-map\n                   (lambda (c)\n  \
    \                   (if (char-alphabetic? c)\n                         (if (char-lower-case?\
    \ c)\n                             (char-upcase c)\n                         \
    \    (char-downcase c))\n                         c))\n                   s)))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append (string-append (string-upcase\
    \ (substring s 0 1))\n                                    (substring s 1))\n \
    \                   (solve (substring s 1)))))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (string-map (lambda (c)\n                  \
    \                 (if (char-alphabetic? c)\n                                 \
    \      (if (char-lower-case? c)\n                                           (char-upcase\
    \ c)\n                                           (char-downcase c))\n        \
    \                               c))\n                                 s)\n   \
    \                  (solve (substring s 1)))))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase\
    \ c))) s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map\n       (lambda (c)\n      \
    \   (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n        \
    \         (char-upcase c)\n                 (char-downcase c))\n             c))\n\
    \       s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains? s #\\a)\n      (string-map (lambda (c)\n                 \
    \   (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n\
    \                            (char-upcase c)\n                            (char-downcase\
    \ c))\n                        c))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (string-join (reverse (map (lambda (x)\n                       \
    \        (if (char-alphabetic? x)\n                                   (if (char-lower-case?\
    \ x)\n                                       (char-upcase x)\n               \
    \                        (char-downcase x))\n                                \
    \   x))\n                             (string->list s)))))\n", "  (string-join\
    \ (reverse (map (lambda (c)\n                               (if (char-alphabetic?\
    \ c)\n                                   (if (char-lower-case? c)\n          \
    \                             (char-upcase c)\n                              \
    \         (char-downcase c))\n                                   c))\n       \
    \                      (string->list s)))))\n", "  (if (empty? s)\n      \"\"\n\
    \      (string-append\n       (if (char-alphabetic? (string-ref s 0))\n      \
    \     (if (char-lower-case? (string-ref s 0))\n               (string-upcase (string-ref\
    \ s 0))\n               (string-downcase (string-ref s 0)))\n           (string-ref\
    \ s 0))\n       (solve (substring s 1)))))\n", "  (if (string-empty? s)\n    \
    \  \"\"\n      (string-append (string-map (lambda (c) (if (char-alphabetic? c)\n\
    \                                                 (char-upcase c)\n          \
    \                                       (char-downcase c)))\n                \
    \                 s)\n                     (solve (substring s 1)))))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string-downcase (first s))\n      (solve (rest s)))]\n    [else\n    \
    \ (string-append\n      (string-upcase (first s))\n      (solve (rest s)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\n\
    \       (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case?\
    \ (string-ref s 0))\n               (string-upcase (string (string-ref s 0)))\n\
    \               (string-downcase (string (string-ref s 0))))\n           (string\
    \ (string-ref s 0)))\n       (solve (substring s 1)))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append (string-upcase (first s)) (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (first s) (solve (rest s)))]\n\
    \    [else (string-append (string-downcase (first s)) (solve (rest s)))]))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append\n       (if (char-alphabetic?\
    \ (string-ref s 0))\n           (if (char-lower-case? (string-ref s 0))\n    \
    \           (string-upcase (string-ref s 0))\n               (string-downcase\
    \ (string-ref s 0)))\n           (string-ref s 0))\n       (solve (substring s\
    \ 1)))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (string-map (lambda (c)\n                                   (if (char-alphabetic?\
    \ c)\n                                       (if (char-lower-case? c)\n      \
    \                                     (char-upcase c)\n                      \
    \                     (char-downcase c))\n                                   \
    \    c))\n                                 s)\n                     (solve (substring\
    \ s 1)))))\n", "  (string-reverse (string-map (lambda (c)\n                  \
    \              (if (char-alphabetic? c)\n                                    (if\
    \ (char-lower-case? c)\n                                        (char-upcase c)\n\
    \                                        (char-downcase c))\n                \
    \                    c))\n                              s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond [(empty? s) \"\"]\n        [(char-alphabetic? (first s))\n         (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n        [(char-numeric? (first\
    \ s))\n         (string-append (first s) (solve (rest s)))]\n        [else (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n  \
    \                       (if (char-lower-case? (string-ref s 0))\n            \
    \                 (string-upcase (string-ref s 0))\n                         \
    \    (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (if (string-contains-any\
    \ s \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (define (is-letter? c)\n\
    \    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (define (reverse-case-string s)\n    (string-join (map reverse-case\
    \ (string->list s))))\n  (define (reverse-string s)\n    (string-join (reverse\
    \ (string->list s))))\n  (define (has-letter? s)\n    (foldl (lambda (c b) (or\
    \ b (is-letter? c))) #f (string->list s)))\n  (if (has-letter? s)\n      (reverse-case-string\
    \ s)\n      (reverse-string s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n\
    \                 (char-upcase c)\n                 (char-downcase c))\n     \
    \        c))\n       s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n\
    \                            (char-upcase c)\n                            (char-downcase\
    \ c))\n                        c))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (string-join (reverse (string-split s))))\n",
  "  (string-reverse s))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (string-reverse (string-map\
    \ (lambda (x)\n                                (if (char-alphabetic? x)\n    \
    \                                (if (char-lower-case? x)\n                  \
    \                      (char-upcase x)\n                                     \
    \   (char-downcase x))\n                                    x))\n            \
    \                  s)))\n", "  (if (string-empty? s)\n      s\n      (string-join\
    \ (map (lambda (c)\n                          (if (char-alphabetic? c)\n     \
    \                         (if (char-lower-case? c)\n                         \
    \         (char-upcase c)\n                                  (char-downcase c))\n\
    \                              c))\n                        (string->list s)))))\n",
  "  (string-join (reverse (string-split s \"\"))))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (string-reverse (string-map (lambda (c)\n                                (if\
    \ (char-alphabetic? c)\n                                    (if (char-lower-case?\
    \ c)\n                                        (char-upcase c)\n              \
    \                          (char-downcase c))\n                              \
    \      c))\n                              s)))\n", "  (cond\n    [(empty? s) \"\
    \"]\n    [(char-alphabetic? (first s))\n     (string-append (string-downcase (first\
    \ s))\n                    (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-upcase (first s))\n                    (solve (rest s)))]))\n", "  (if\
    \ (string-empty? s)\n      \"\"\n      (string-append (string-map (lambda (c)\n\
    \                                   (if (char-alphabetic? c)\n               \
    \                        (if (char-lower-case? c)\n                          \
    \                 (char-upcase c)\n                                          \
    \ (char-downcase c))\n                                       c))\n           \
    \                      s)\n                     (solve (substring s 1)))))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (char-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else (string-append (char-downcase\
    \ (first s)) (solve (rest s)))]))\n", "  (string-join (reverse (map (lambda (x)\n\
    \                               (if (char-alphabetic? x)\n                   \
    \                (if (char-lower-case? x)\n                                  \
    \     (char-upcase x)\n                                       (char-downcase x))\n\
    \                                   x))\n                             (string->list\
    \ s)))))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (string-map\
    \ (lambda (c)\n                                   (if (char-alphabetic? c)\n \
    \                                      (if (char-lower-case? c)\n            \
    \                               (char-upcase c)\n                            \
    \               (char-downcase c))\n                                       c))\n\
    \                                 s)\n                     (solve (substring s\
    \ 1)))))\n", "  (string-reverse (string-map (lambda (c)\n                    \
    \            (if (char-alphabetic? c)\n                                    (if\
    \ (char-lower-case? c)\n                                        (char-upcase c)\n\
    \                                        (char-downcase c))\n                \
    \                    c))\n                              s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref\
    \ s 0))\n           (if (char-lower-case? (string-ref s 0))\n               (string-upcase\
    \ (string-ref s 0))\n               (string-downcase (string-ref s 0)))\n    \
    \       (string-ref s 0))\n       (solve (substring s 1)))))\n", "  (string-reverse\
    \ (string-map (lambda (c)\n                                (if (char-alphabetic?\
    \ c)\n                                    (if (char-upper-case? c)\n         \
    \                               (char-downcase c)\n                          \
    \              (char-upcase c))\n                                    c))\n   \
    \                           s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (string-reverse (string-map (lambda (x)\n  \
    \                                                 (if (char-alphabetic? x)\n \
    \                                                      (if (char-lower-case? x)\n\
    \                                                           (char-upcase x)\n\
    \                                                           (char-downcase x))\n\
    \                                                       x))\n                \
    \                                 s))\n                     (solve (substring\
    \ s 1)))))\n", "  (string-reverse (string-map\n                   (lambda (c)\n\
    \                     (if (char-alphabetic? c)\n                         (if (char-lower-case?\
    \ c)\n                             (char-upcase c)\n                         \
    \    (char-downcase c))\n                         c))\n                   s)))\n",
  "  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic?\
    \ c)\n           (if (char-lower-case? c)\n               (char-upcase c)\n  \
    \             (char-downcase c))\n           c))\n     (string->list s)))))\n",
  "  (if (empty? s)\n      \"\"\n      (string-append\n       (if (char-alphabetic?\
    \ (string-ref s 0))\n           (if (char-lower-case? (string-ref s 0))\n    \
    \           (string-upcase (string (string-ref s 0)))\n               (string-downcase\
    \ (string (string-ref s 0))))\n           (string (string-ref s 0)))\n       (solve\
    \ (substring s 1)))))\n", "  (string-join\n   (reverse\n    (map\n     (lambda\
    \ (c)\n       (if (char-alphabetic? c)\n           (if (char-lower-case? c)\n\
    \               (char-upcase c)\n               (char-downcase c))\n         \
    \  c))\n     (string->list s)))))\n", "  (string-reverse (string-map (lambda (x)\n\
    \                                (if (char-alphabetic? x)\n                  \
    \                  (if (char-lower-case? x)\n                                \
    \        (char-upcase x)\n                                        (char-downcase\
    \ x))\n                                    x))\n                             \
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (string-map\n\
    \                      (lambda (c)\n                        (if (char-alphabetic?\
    \ c)\n                            (if (char-lower-case? c)\n                 \
    \               (char-upcase c)\n                                (char-downcase\
    \ c))\n                            c))\n                      s)\n           \
    \          (solve (substring s 1)))))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (string-reverse\
    \ (string-map\n                   (lambda (c)\n                     (if (char-alphabetic?\
    \ c)\n                         (if (char-lower-case? c)\n                    \
    \         (char-upcase c)\n                             (char-downcase c))\n \
    \                        c))\n                   s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (string-reverse\
    \ (string-map (lambda (x)\n                                (if (char-alphabetic?\
    \ x)\n                                    (if (char-lower-case? x)\n         \
    \                               (char-upcase x)\n                            \
    \            (char-downcase x))\n                                    x))\n   \
    \                           s)))\n", "  (string-reverse s))\n", "  (string-reverse\
    \ (string-map (lambda (c)\n                                (if (char-alphabetic?\
    \ c)\n                                    (if (char-lower-case? c)\n         \
    \                               (char-upcase c)\n                            \
    \            (char-downcase c))\n                                    c))\n   \
    \                           s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append\n      (if (char-lower-case? (first s))\n  \
    \        (string-upcase (first s))\n          (string-downcase (first s)))\n \
    \     (solve (rest s)))]\n    [else\n     (string-append (first s) (solve (rest\
    \ s)))]))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (string-map\
    \ (lambda (x) (if (char-alphabetic? x)\n                                     \
    \            (if (char-lower-case? x)\n                                      \
    \               (char-upcase x)\n                                            \
    \         (char-downcase x))\n                                               \
    \  x))\n                                 s)\n                     (solve (substring\
    \ s 1)))))\n", "  (string-join (reverse (map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                             (if (char-lower-case? c)\n\
    \                                                 (char-upcase c)\n          \
    \                                       (char-downcase c))\n                 \
    \                            c))\n                             (string->list s)))))\n",
  "  (if (string-empty? s)\n      s\n      (string-join (reverse (map (lambda (c)\n\
    \                                   (if (char-alphabetic? c)\n               \
    \                        (if (char-lower-case? c)\n                          \
    \                 (char-upcase c)\n                                          \
    \ (char-downcase c))\n                                       c))\n           \
    \                      (string->list s)))\n                   \"\")))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string-upcase (first s))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (string-downcase (first s))\n      (solve\
    \ (rest s)))]\n    [else\n     (string-append\n      (string (first s))\n    \
    \  (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (if (char-lower-case?\
    \ (first s))\n          (string-upcase (first s))\n          (string-downcase\
    \ (first s)))\n      (solve (rest s)))]\n    [else\n     (string-append (first\
    \ s) (solve (rest s)))]))\n", "  (if (string-empty? s)\n      (string-reverse\
    \ s)\n      (string-join (map (lambda (c)\n                          (if (char-alphabetic?\
    \ c)\n                              (if (char-lower-case? c)\n               \
    \                   (char-upcase c)\n                                  (char-downcase\
    \ c))\n                              c))\n                        (string->list\
    \ s)))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (string-reverse (string-map (lambda (c)\n    \
    \                            (if (char-alphabetic? c)\n                      \
    \              (if (char-lower-case? c)\n                                    \
    \    (char-upcase c)\n                                        (char-downcase c))\n\
    \                                    c))\n                              s)))\n",
  "  (cond [(empty? s) \"\"]\n        [(char-alphabetic? (string-ref s 0))\n     \
    \    (string-append (string-upcase (string-ref s 0))\n                       \
    \ (solve (substring s 1)))]\n        [(char-numeric? (string-ref s 0))\n     \
    \    (string-append (string-ref s 0)\n                        (solve (substring\
    \ s 1)))]\n        [else (string-append (string-downcase (string-ref s 0))\n \
    \                            (solve (substring s 1)))]))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (if (char-lower-case? x)\n                     \
    \       (char-upcase x)\n                            (char-downcase x))\n    \
    \                    x))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n\
    \                 (char-upcase c)\n                 (char-downcase c))\n     \
    \        c))\n       s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-upcase (string-ref s 0))\n       (substring\
    \ s 1 (sub1 (string-length s))))\n      (solve (substring s 1 (sub1 (string-length\
    \ s)))))]\n    [else\n     (string-append\n      (string-append\n       (string-downcase\
    \ (string-ref s 0))\n       (substring s 1 (sub1 (string-length s))))\n      (solve\
    \ (substring s 1 (sub1 (string-length s)))))]))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n  \
    \                       (if (char-lower-case? (string-ref s 0))\n            \
    \                 (string-upcase (string-ref s 0))\n                         \
    \    (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (string-join\n\
    \   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic? c)\n  \
    \         (if (char-lower-case? c)\n               (char-upcase c)\n         \
    \      (char-downcase c))\n           c))\n     (string->list s)))))\n", "  (string-join\
    \ (reverse (map (lambda (x) (if (char-alphabetic? x) (if (char-lower-case? x)\
    \ (char-upcase x) (char-downcase x)) x)) (string->list s)))))\n", "  (string-reverse\
    \ (string-map (lambda (c)\n                                (if (char-alphabetic?\
    \ c)\n                                    (if (char-lower-case? c)\n         \
    \                               (char-upcase c)\n                            \
    \            (char-downcase c))\n                                    c))\n   \
    \                           s)))\n", "  (if (string-empty? s)\n      \"\"\n  \
    \    (string-append\n       (if (char-alphabetic? (string-ref s 0))\n        \
    \   (if (char-lower-case? (string-ref s 0))\n               (string-upcase (string-ref\
    \ s 0))\n               (string-downcase (string-ref s 0)))\n           (string-ref\
    \ s 0))\n       (solve (substring s 1)))))\n", "  (string-reverse (string-map\
    \ (lambda (x) (if (char-alphabetic? x) (char-upcase x) (char-downcase x))) s)))\n",
  "  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic?\
    \ c)\n           (if (char-lower-case? c)\n               (char-upcase c)\n  \
    \             (char-downcase c))\n           c))\n     (string->list s)))))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append (if (char-alphabetic?\
    \ (string-ref s 0))\n                         (if (char-lower-case? (string-ref\
    \ s 0))\n                             (string-upcase (string-ref s 0))\n     \
    \                        (string-downcase (string-ref s 0)))\n               \
    \          (string-ref s 0))\n                     (solve (substring s 1)))))\n",
  "  (string-reverse (string-map (lambda (c)\n                                (if\
    \ (char-alphabetic? c)\n                                    (if (char-lower-case?\
    \ c)\n                                        (char-upcase c)\n              \
    \                          (char-downcase c))\n                              \
    \      c))\n                              s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n  \
    \                       (if (char-lower-case? (string-ref s 0))\n            \
    \                 (string-upcase (string-ref s 0))\n                         \
    \    (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (string-reverse\
    \ (string-map (lambda (c)\n                                (if (char-alphabetic?\
    \ c)\n                                    (if (char-lower-case? c)\n         \
    \                               (char-upcase c)\n                            \
    \            (char-downcase c))\n                                    c))\n   \
    \                           s)))\n", "  (if (string-empty? s)\n      \"\"\n  \
    \    (string-append (string-map (lambda (c)\n                                \
    \   (if (char-alphabetic? c)\n                                       (if (char-lower-case?\
    \ c)\n                                           (char-upcase c)\n           \
    \                                (char-downcase c))\n                        \
    \               c))\n                                 s)\n                   \
    \  (solve (substring s 1)))))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if\
    \ (char-alphabetic? c)\n           (if (char-lower-case? c)\n               (char-upcase\
    \ c)\n               (char-downcase c))\n           c))\n     (string->list s)))))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append (string-map (lambda (c)\
    \ (if (char-alphabetic? c)\n                                                 (if\
    \ (char-lower-case? c)\n                                                     (char-upcase\
    \ c)\n                                                     (char-downcase c))\n\
    \                                                 c))\n                      \
    \           s)\n                     (solve (substring s 1)))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref\
    \ s 0))\n           (if (char-lower-case? (string-ref s 0))\n               (string-upcase\
    \ (string-ref s 0))\n               (string-downcase (string-ref s 0)))\n    \
    \       (string-ref s 0))\n       (solve (substring s 1)))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (string-map (lambda (x)\n             \
    \                      (if (char-alphabetic? x)\n                            \
    \           (if (char-lower-case? x)\n                                       \
    \    (char-upcase x)\n                                           (char-downcase\
    \ x))\n                                       x))\n                          \
    \       s)\n                     (solve (substring s 1)))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (if (char-lower-case? x)\n                          \
    \            (char-upcase x)\n                                      (char-downcase\
    \ x))\n                                  x)) s)\n      (string-reverse s)))\n",
  "  (string-reverse (string-map (lambda (x)\n                                (if\
    \ (char-alphabetic? x)\n                                    (char-upcase x)\n\
    \                                    (char-downcase x)))\n                   \
    \           s)))\n", "  (string-reverse (string-map (lambda (c)\n            \
    \                    (if (char-alphabetic? c)\n                              \
    \      (if (char-lower-case? c)\n                                        (char-upcase\
    \ c)\n                                        (char-downcase c))\n           \
    \                         c))\n                              s)))\n", "  (string-reverse\
    \ (string-map\n                   (lambda (c)\n                     (if (char-alphabetic?\
    \ c)\n                         (if (char-lower-case? c)\n                    \
    \         (char-upcase c)\n                             (char-downcase c))\n \
    \                        c))\n                   s)))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-downcase (string-ref s 0))\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-ref s 0)\n                    (solve (substring s 1)))]))\n", "  (if\
    \ (string-empty? s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (if (string-empty?\
    \ s)\n      s\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                         (string-downcase (string-upcase (string-ref s 0)))\n\
    \                         (string-ref s 0))\n                      (solve (substring\
    \ s 1)))))\n", "  (string-join (reverse (string-split s #\\space)) \" \"))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (x)\n              \
    \      (if (char-alphabetic? x)\n                        (if (char-lower-case?\
    \ x)\n                            (char-upcase x)\n                          \
    \  (char-downcase x))\n                        x))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (if (char-lower-case? x)\n                     \
    \       (char-upcase x)\n                            (char-downcase x))\n    \
    \                    x))\n                  s)\n      (string-reverse s)))\n",
  "  (string-reverse (string-map (lambda (x)\n                                (if\
    \ (char-alphabetic? x)\n                                    (if (char-lower-case?\
    \ x)\n                                        (char-upcase x)\n              \
    \                          (char-downcase x))\n                              \
    \      x)) s)))\n", "  (if (string-empty? s)\n      (string-reverse s)\n     \
    \ (string-join\n       (map (lambda (c)\n              (if (char-alphabetic? c)\n\
    \                  (if (char-lower-case? c)\n                      (char-upcase\
    \ c)\n                      (char-downcase c))\n                  c))\n      \
    \      (string->list s)))))\n", "  (string-join (reverse (map (lambda (x)\n  \
    \                             (if (char-alphabetic? x)\n                     \
    \              (if (char-lower-case? x)\n                                    \
    \   (char-upcase x)\n                                       (char-downcase x))\n\
    \                                   x))\n                             (string->list\
    \ s)))))\n", "  (string-join\n   (reverse\n    (map\n     (lambda (c)\n      \
    \ (if (char-alphabetic? c)\n           (if (char-lower-case? c)\n            \
    \   (char-upcase c)\n               (char-downcase c))\n           c))\n     (string->list\
    \ s)))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n\
    \                 (char-upcase c)\n                 (char-downcase c))\n     \
    \        c))\n       s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref\
    \ s 0))\n           (if (char-lower-case? (string-ref s 0))\n               (string-upcase\
    \ (string (string-ref s 0)))\n               (string-downcase (string (string-ref\
    \ s 0))))\n           (string (string-ref s 0)))\n       (solve (substring s 1)))))\n",
  "  (string-reverse (string-map (lambda (x)\n                                (if\
    \ (char-alphabetic? x)\n                                    (if (char-lower-case?\
    \ x)\n                                        (char-upcase x)\n              \
    \                          (char-downcase x))\n                              \
    \      x))\n                              s)))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-downcase\
    \ x) (char-upcase x))) s)\n      (string-reverse s)))\n", "  (string-join (reverse\
    \ (string-split s #\\space))))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (string-downcase (substring s 0 1))\n      \
    \               (substring s 1))))\n", "  (if (string-empty? s)\n      \"\"\n\
    \      (string-append\n       (if (char-alphabetic? (string-ref s 0))\n      \
    \     (if (char-lower-case? (string-ref s 0))\n               (string-upcase (string-ref\
    \ s 0))\n               (string-downcase (string-ref s 0)))\n           (string-ref\
    \ s 0))\n       (solve (substring s 1)))))\n", "  (string-join (reverse (map (lambda\
    \ (x)\n                               (if (char-alphabetic? x)\n             \
    \                      (if (char-lower-case? x)\n                            \
    \           (char-upcase x)\n                                       (char-downcase\
    \ x))\n                                   x))\n                             (string->list\
    \ s)))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (string-join (reverse (string-split s))))\n",
  "  (string-reverse (string-map (lambda (x)\n                                (if\
    \ (char-alphabetic? x)\n                                    (if (char-lower-case?\
    \ x)\n                                        (char-upcase x)\n              \
    \                          (char-downcase x))\n                              \
    \      x))\n                              s)))\n", "  (string-join (reverse (map\
    \ (lambda (c)\n                               (if (char-alphabetic? c)\n     \
    \                              (if (char-lower-case? c)\n                    \
    \                   (char-upcase c)\n                                       (char-downcase\
    \ c))\n                                   c))\n                             (string->list\
    \ s)))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\n\
    \       (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case?\
    \ (string-ref s 0))\n               (string-upcase (string (string-ref s 0)))\n\
    \               (string-downcase (string (string-ref s 0))))\n           (string\
    \ (string-ref s 0)))\n       (solve (substring s 1)))))\n", "  (string-reverse\
    \ (string-map (\u03BB (c)\n                                (if (char-alphabetic?\
    \ c)\n                                    (if (char-lower-case? c)\n         \
    \                               (char-upcase c)\n                            \
    \            (char-downcase c))\n                                    c))\n   \
    \                           s)))\n", "  (string-reverse (string-map (lambda (c)\n\
    \                                (if (char-alphabetic? c)\n                  \
    \                  (if (char-lower-case? c)\n                                \
    \        (char-upcase c)\n                                        (char-downcase\
    \ c))\n                                    c))\n                             \
    \ s)))\n", "  (if (empty? s)\n      \"\"\n      (string-append (if (char-alphabetic?\
    \ (string-ref s 0))\n                         (if (char-lower-case? (string-ref\
    \ s 0))\n                             (string-upcase (string-ref s 0))\n     \
    \                        (string-downcase (string-ref s 0)))\n               \
    \          (string-ref s 0))\n                     (solve (substring s 1)))))\n",
  "  (string-append (reverse (string-map (lambda (x)\n                           \
    \             (if (char-alphabetic? x)\n                                     \
    \       (if (char-lower-case? x)\n                                           \
    \     (char-upcase x)\n                                                (char-downcase\
    \ x))\n                                            x)) s))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0))\n                     (solve (substring s 1)))))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (string-upcase\
    \ (first s))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\n\
    \      (string-downcase (first s))\n      (solve (rest s)))]\n    [else\n    \
    \ (string-append\n      (first s)\n      (solve (rest s)))]))\n", "  (string-join\n\
    \   (reverse\n    (map\n     (lambda (c)\n       (cond\n         [(char-alphabetic?\
    \ c)\n          (if (char-lower-case? c)\n              (char-upcase c)\n    \
    \          (char-downcase c))]\n         [else c]))\n     (string->list s)))))\n",
  "  (string-reverse (string-map (lambda (x)\n                                (if\
    \ (char-alphabetic? x)\n                                    (if (char-lower-case?\
    \ x)\n                                        (char-upcase x)\n              \
    \                          (char-downcase x))\n                              \
    \      x)) s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string-downcase (first s)) (solve (rest s)))]\n  \
    \  [(char-numeric? (first s))\n     (string-append (first s) (solve (rest s)))]\n\
    \    [else\n     (string-append (string-upcase (first s)) (solve (rest s)))]))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append", "  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n",
  "  (string-reverse s))\n", "  (string-join (reverse (map (lambda (x)\n         \
    \                      (if (char-alphabetic? x)\n                            \
    \       (if (char-lower-case? x)\n                                       (char-upcase\
    \ x)\n                                       (char-downcase x))\n            \
    \                       x))\n                             (string->list s)))))\n",
  "  (if (string-empty? s)\n      \"\"\n      (string-append\n       (if (char-alphabetic?\
    \ (string-ref s 0))\n           (if (char-lower-case? (string-ref s 0))\n    \
    \           (string-upcase (string (string-ref s 0)))\n               (string-downcase\
    \ (string (string-ref s 0))))\n           (string (string-ref s 0)))\n       (solve\
    \ (substring s 1)))))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (string-reverse (string-map\
    \ (lambda (c)\n                                (if (char-alphabetic? c)\n    \
    \                                (if (char-lower-case? c)\n                  \
    \                      (char-upcase c)\n                                     \
    \   (char-downcase c))\n                                    c))\n            \
    \                  s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append\n      (string-downcase (first s))\n      (solve\
    \ (rest s)))]\n    [else\n     (string-append\n      (string-upcase (first s))\n\
    \      (solve (rest s)))]))\n", "  (string-reverse (string-map (lambda (c)\n \
    \                               (if (char-alphabetic? c)\n                   \
    \                 (if (char-lower-case? c)\n                                 \
    \       (char-upcase c)\n                                        (char-downcase\
    \ c))\n                                    c))\n                             \
    \ s)))\n", "  (string-reverse (string-map\n                   (lambda (c)\n  \
    \                   (if (char-alphabetic? c)\n                         (if (char-lower-case?\
    \ c)\n                             (char-upcase c)\n                         \
    \    (char-downcase c))\n                         c))\n                   s)))\n",
  "  (string-reverse (string-map (lambda (c)\n                                (if\
    \ (char-alphabetic? c)\n                                    (if (char-lower-case?\
    \ c)\n                                        (char-upcase c)\n              \
    \                          (char-downcase c))\n                              \
    \      c))\n                              s)))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
