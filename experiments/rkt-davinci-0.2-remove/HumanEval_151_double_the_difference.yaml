name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; If the input list is empty, return 0.\n(define (double_the_difference\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
  \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0\
  \ -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
  \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square\
    \ (car lst))\n        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* (first lst) (first lst))]\n    [else\n     (double_the_difference (rest\
    \ lst))]))\n", "  (cond [(empty? lst) 0]\n        [else (cond [(odd? (first lst))\n\
    \                     (+ (square (first lst))\n                        (double_the_difference\
    \ (rest lst)))]\n                    [else (double_the_difference (rest lst))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\
    \ [(empty? lst) 0]\n        [else\n         (let ([first (first lst)]\n      \
    \         [rest (rest lst)])\n           (cond [(and (integer? first) (odd? first))\n\
    \                  (+ (square first) (double_the_difference rest))]\n        \
    \         [else (double_the_difference rest)]))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (car lst))\n     (square (car lst))]\n    [else\n     (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n     (+\
    \ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (* (first lst)\
    \ (first lst))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* (first lst) (first lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (let ([x (first lst)])\n        (if (and (integer?\
    \ x) (odd? x))\n            (+ (* x x) (double_the_difference (rest lst)))\n \
    \           (double_the_difference (rest lst))))))\n</code>\n", "  (cond\n   \
    \ [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+\
    \ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+\
    \ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car\
    \ lst))) (double_the_difference (cdr lst))]\n    [(negative? (car lst)) (double_the_difference\
    \ (cdr lst))]\n    [else (+ (* (car lst) (car lst)) (double_the_difference (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n     (+\
    \ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n     (+\
    \ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst)) (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n     (if\
    \ (positive? (car lst))\n         (* (car lst) (car lst))\n         0)]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst))\n          (odd? (first lst)))\n     (square (first\
    \ lst))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n \
    \    (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n     (+\
    \ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (if (and (integer? (car lst))\n\
    \              (positive? (car lst)))\n         (+ (* (car lst) (car lst))\n \
    \           (double_the_difference (cdr lst)))\n         (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(not (integer? (car lst))) (double_the_difference (cdr lst))]\n    [(negative?\
    \ (car lst)) (double_the_difference (cdr lst))]\n    [else (+ (* (car lst) (car\
    \ lst)) (double_the_difference (cdr lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive?\
    \ (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (let ([x (car lst)])\n    \
    \   (+ (* x x) (double_the_difference (cdr lst))))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(negative? (car lst)) (double_the_difference (cdr lst))]\n\
    \    [else (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [else (let ([first (first lst)]\n                    [rest (rest lst)])\n\
    \                (cond [(odd? first) (+ (square first) (double_the_difference\
    \ rest))]\n                      [else (double_the_difference rest)]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(negative? (car lst)) (double_the_difference (cdr lst))]\n\
    \    [else (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (square (first lst))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (square (car lst))\n     (double_the_difference (cdr lst))]\n    [else\n\
    \     (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst)\
    \ (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (car lst)) (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (add1 (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (* (first lst) (first lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (even? (first lst)) (odd? (second lst)))\n     (+ (square (first\
    \ lst)) (square (second lst)))]\n    [else\n     (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n   \
    \  (+ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n  \
    \        (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n     \
    \   (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (* (first lst) (first lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* (first lst) (first lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (even? (first lst))\
    \ (odd? (second lst)))\n     (+ (* (first lst) (first lst))\n        (* (- (second\
    \ lst) (first lst)) (- (second lst) (first lst))))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (not (negative? (first lst))))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (double_the_difference (rest lst))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd?\
    \ (first lst))\n        (+ (square (first lst))\n           (double_the_difference\
    \ (rest lst)))]\n       [else\n        (double_the_difference (rest lst))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (if (odd? (first lst))\n             \
    \ (* (first lst) (first lst))\n              0)]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([first (first lst)]\n           [rest (rest lst)])\n\
    \       (cond\n         [(and (integer? first)\n               (odd? first))\n\
    \          (+ (square first)\n             (double_the_difference rest))]\n  \
    \       [else\n          (double_the_difference rest)]))]))\n", "  (cond\n   \
    \ [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n            [rest\
    \ (rest lst)]\n            [first-square (square first)]\n            [rest-sum\
    \ (double_the_difference rest)])\n       (cond\n         [(odd? first) (+ first-square\
    \ rest-sum)]\n         [else rest-sum]))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (let ([x (first lst)])\n       (cond\n         [(and (integer?\
    \ x) (odd? x))\n          (+ (* x x) (double_the_difference (rest lst)))]\n  \
    \       [else\n          (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (cond\n\
    \         [(and (integer? x) (odd? x))\n          (+ (* x x) (double_the_difference\
    \ (rest lst)))]\n         [else\n          (double_the_difference (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)]\n    \
    \       [rest (rest lst)])\n       (cond\n         [(and (integer? first) (odd?\
    \ first))\n          (+ (* first first) (double_the_difference rest))]\n     \
    \    [else (double_the_difference rest)]))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (if (odd? (first lst))\n         (* (first lst) (first lst))\n\
    \         0)]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first\
    \ lst)])\n       (if (and (integer? x) (odd? x))\n           (+ (* x x) (double_the_difference\
    \ (rest lst)))\n           (double_the_difference (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (if (and\
    \ (integer? x) (odd? x))\n           (* x x)\n           0))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (if (and (integer? (first lst))\n     \
    \         (odd? (first lst)))\n         (+ (* (first lst) (first lst))\n     \
    \       (double_the_difference (rest lst)))\n         (double_the_difference (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([first\
    \ (first lst)]\n            [rest (rest lst)]\n            [first-double (* 2\
    \ first)]\n            [rest-double (double_the_difference rest)])\n       (-\
    \ first-double rest-double))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let* ([first (first lst)]\n            [rest (rest lst)]\n            [first-squared\
    \ (* first first)]\n            [rest-squared (double_the_difference rest)])\n\
    \       (if (odd? first)\n           (+ first-squared rest-squared)\n        \
    \   rest-squared))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car\
    \ lst)) (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car\
    \ lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n  \
    \   (+ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\
    \ [(empty? lst) 0]\n        [else (let ([x (first lst)])\n                (if\
    \ (and (integer? x) (odd? x))\n                    (+ (square x) (double_the_difference\
    \ (rest lst)))\n                    (double_the_difference (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (* (car lst) (car lst))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+\
    \ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n  \
    \   (+ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n   \
    \  (+ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (*\
    \ (car lst) (car lst))]\n    [else (double_the_difference (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive?\
    \ (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n</code>\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (square (car\
    \ lst))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else (let ([x (first lst)])\n                (if (and (integer?\
    \ x) (odd? x))\n                    (* x x)\n                    0))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [else\n         (let ([x\
    \ (first lst)])\n           (cond [(and (integer? x) (odd? x))\n             \
    \     (+ (square x) (double_the_difference (rest lst)))]\n                 [else\
    \ (double_the_difference (rest lst))]))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)))\n     (* (first lst) (first\
    \ lst))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n  \
    \   (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n   \
    \  (+ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car lst)))\
    \ (double_the_difference (cdr lst))]\n    [(< (car lst) 0) (double_the_difference\
    \ (cdr lst))]\n    [(odd? (car lst)) (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first\
    \ lst)])\n       (if (and (integer? x) (odd? x))\n           (+ (square x) (double_the_difference\
    \ (rest lst)))\n           (double_the_difference (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n          \
    \  [rest (rest lst)]\n            [first-squared (* first first)]\n          \
    \  [rest-squared (double_the_difference rest)])\n       (if (odd? first)\n   \
    \        (+ first-squared rest-squared)\n           rest-squared))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n          \
    \  [second (second lst)]\n            [difference (- first second)])\n       (*\
    \ 2 difference))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square\
    \ (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(integer? (car lst))\n     (if (odd? (car lst))\n         (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))\n         (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (if (and\
    \ (integer? x) (odd? x))\n           (+ (* x x) (double_the_difference (rest lst)))\n\
    \           (double_the_difference (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else (cond [(odd? (first lst))\n                     (+ (square\
    \ (first lst))\n                        (double_the_difference (rest lst)))]\n\
    \                    [else (double_the_difference (rest lst))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (&gt; (first lst) 0))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst)))\n     (+\
    \ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst))\n          (odd? (first lst))\n          (positive?\
    \ (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (expt (first lst) 2)\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst))\n          (odd? (first lst))\n          (positive?\
    \ (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (square\
    \ (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (expt (first lst) 2)]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (square\
    \ (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (if (empty? lst)\n      0\n    \
    \  (let ([x (first lst)])\n        (if (and (integer? x)\n                 (not\
    \ (negative? x))\n                 (odd? x))\n            (+ (square x)\n    \
    \           (double_the_difference (rest lst)))\n            (double_the_difference\
    \ (rest lst))))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+\
    \ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car\
    \ lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(number? (car lst))\n     (if (odd? (car lst))\n \
    \        (+ (* (car lst) (car lst))\n            (double_the_difference (cdr lst)))\n\
    \         (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first\
    \ lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (let ([n (car lst)])\n    \
    \   (* n n))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n \
    \   [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
