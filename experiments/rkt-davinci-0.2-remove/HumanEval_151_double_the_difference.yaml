name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; If the input list is empty, return 0.\n(define (double_the_difference\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5\
  \ 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2 8))\
  \ 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate\
  \ (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd?\
    \ (first lst))\n        (+ (square (first lst))\n           (double_the_difference\
    \ (rest lst)))]\n       [else\n        (double_the_difference (rest lst))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)]\n    \
    \       [rest (rest lst)])\n       (cond\n         [(and (integer? first) (odd?\
    \ first))\n          (+ (* first first) (double_the_difference rest))]\n     \
    \    [else (double_the_difference rest)]))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (let ([x (first lst)])\n       (cond\n         [(and (integer?\
    \ x) (odd? x))\n          (+ (square x) (double_the_difference (rest lst)))]\n\
    \         [else\n          (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond [(empty? lst) 0]\n        [(and (integer? (first lst))\n\
    \              (odd? (first lst)))\n         (+ (square (first lst))\n       \
    \     (double_the_difference (rest lst)))]\n        [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* (first lst) (first lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first\
    \ lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (if (and (integer? (car lst))\n\
    \              (positive? (car lst)))\n         (+ (* (car lst) (car lst))\n \
    \           (double_the_difference (cdr lst)))\n         (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst)) (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n  \
    \        (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n     \
    \   (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\
    \ [(empty? lst) 0]\n        [(and (integer? (first lst))\n              (odd?\
    \ (first lst)))\n         (+ (* (first lst) (first lst))\n            (double_the_difference\
    \ (rest lst)))]\n        [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\
    \ [(empty? lst) 0]\n        [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n        [(< (car lst) 0) (double_the_difference (cdr lst))]\n \
    \       [else (+ (* (car lst) (car lst))\n                 (double_the_difference\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (square (first lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(not (integer? (car lst))) (double_the_difference (cdr lst))]\n   \
    \ [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd? (car lst)) (+\
    \ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (double_the_difference\
    \ (rest lst))]\n    [else (* (first lst) (first lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else (let ([x (first lst)])\n                (cond [(and (integer?\
    \ x) (odd? x))\n                       (+ (square x) (double_the_difference (rest\
    \ lst)))]\n                      [else (double_the_difference (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first\
    \ lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (square (car lst))\n     (double_the_difference (cdr lst))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(= (remainder (first lst) 2) 1)\n     (+ (square (first lst))\n   \
    \     (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd?\
    \ (first lst))\n        (+ (* (first lst) (first lst))\n           (double_the_difference\
    \ (rest lst)))]\n       [else\n        (double_the_difference (rest lst))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (let ([x (first lst)])\n            (cond\n\
    \              [(and (integer? x) (odd? x)) (+ (square x) (double_the_difference\
    \ (rest lst)))]\n              [else (double_the_difference (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n</code>\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst))\n          (odd? (first lst))\n          (positive?\
    \ (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(even? (first lst)) (double_the_difference (rest lst))]\n    [else (+ (*\
    \ (first lst) (first lst))\n             (double_the_difference (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (cond\n\
    \         [(and (integer? x) (odd? x))\n          (+ (* x x) (double_the_difference\
    \ (rest lst)))]\n         [else\n          (double_the_difference (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (+ (* (first lst) (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (car lst)) (number? (car lst)))\n     (+\
    \ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else\n     (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([first\
    \ (first lst)]\n            [rest (rest lst)]\n            [first-squared (* first\
    \ first)]\n            [rest-squared (double_the_difference rest)])\n       (+\
    \ first-squared rest-squared))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst))\n     (+ (square (car lst))\n        (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n  \
    \        (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n     \
    \   (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (not (negative? (first lst))))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (*\
    \ (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n   \
    \ [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car\
    \ lst))) (double_the_difference (cdr lst))]\n    [(negative? (car lst)) (double_the_difference\
    \ (cdr lst))]\n    [else (+ (* (car lst) (car lst)) (double_the_difference (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first\
    \ (first lst)]\n           [rest (rest lst)])\n       (cond\n         [(or (negative?\
    \ first) (not (integer? first)))\n          (double_the_difference rest)]\n  \
    \       [(odd? first)\n          (+ (* first first) (double_the_difference rest))]\n\
    \         [else\n          (double_the_difference rest)]))]))\n", "  (cond\n \
    \   [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n           \
    \ [rest (rest lst)]\n            [first-double (* 2 first)]\n            [rest-double\
    \ (double_the_difference rest)])\n       (- first-double rest-double))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)]\n    \
    \       [rest (rest lst)])\n       (cond\n         [(and (integer? first) (odd?\
    \ first))\n          (+ (* first first) (double_the_difference rest))]\n     \
    \    [else (double_the_difference rest)]))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (cond\n            [(odd? (first lst)) (square (first lst))]\n\
    \            [else 0])\n          (+ (double_the_difference (rest lst))\n    \
    \         (cond\n               [(odd? (first lst)) (square (first lst))]\n  \
    \             [else 0]))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n  \
    \   (let ([x (first lst)])\n       (cond\n         [(and (integer? x) (odd? x))\n\
    \          (+ (* x x) (double_the_difference (rest lst)))]\n         [else\n \
    \         (double_the_difference (rest lst))]))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let* ([first (first lst)]\n            [rest (rest\
    \ lst)]\n            [first-square (square first)]\n            [rest-sum (double_the_difference\
    \ rest)])\n       (if (odd? first)\n           (+ first-square rest-sum)\n   \
    \        rest-sum))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer?\
    \ (first lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n    \
    \    (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (*\
    \ (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n   \
    \ [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst))\n          (odd? (first lst))\n          (positive?\
    \ (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst))\n     (sqr (first lst))\n     (double_the_difference\
    \ (rest lst))]\n    [else (double_the_difference (rest lst))]))\n</code>\nI'm\
    \ getting the following error:\n<code>application: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:4:0&gt;\n\
    \  arguments...:\n   #&lt;syntax:eval:4:0&gt;\n</code>\nI'm not sure what I'm\
    \ doing wrong.\n\n\nA:\n\nYou have a few problems. First, you have an extra <code>sqr</code>\
    \ call in your <code>odd?</code> clause. Second, you need to add the result of\
    \ the recursive call to the result of the <code>sqr</code> call. Third, you need\
    \ to add a <code>else</code> clause to the <code>cond</code> expression.\n<code>(define\
    \ (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first\
    \ lst))\n     (+ (sqr (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n</code>\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car\
    \ lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (expt (car lst) 2)\n     +\n\
    \     (double_the_difference (cdr lst))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (*\
    \ (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n   \
    \ [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (square (first\
    \ lst))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (remainder (first\
    \ lst) 2) 1)\n     (+ (square (first lst))\n        (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd? (first lst))\n   \
    \     (+ (square (first lst))\n           (double_the_difference (rest lst)))]\n\
    \       [else\n        (double_the_difference (rest lst))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd? (first lst))\n   \
    \     (+ (* (first lst) (first lst))\n           (double_the_difference (rest\
    \ lst)))]\n       [else\n        (double_the_difference (rest lst))])]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)]\n   \
    \        [rest (rest lst)])\n       (if (and (integer? first)\n              \
    \  (odd? first))\n           (+ (square first)\n              (double_the_difference\
    \ rest))\n           (double_the_difference rest)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([a (first lst)]\n           [b (second lst)])\n\
    \       (cond\n         [(and (integer? a) (integer? b))\n          (+ (* (- a\
    \ b) (- a b))\n             (double_the_difference (rest (rest lst))))]\n    \
    \     [else\n          (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n          \
    \  [rest (rest lst)]\n            [first-sq (sqr first)]\n            [rest-sq\
    \ (double_the_difference rest)])\n       (+ first-sq rest-sq))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (define first (first lst))\n     (define\
    \ second (second lst))\n     (cond\n       [(and (integer? first) (integer? second))\n\
    \        (+ (square (- first second))\n           (double_the_difference (rest\
    \ (rest lst))))]\n       [else (double_the_difference (rest lst))])]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(odd? (first lst))\n\
    \        (+ (square (first lst))\n           (double_the_difference (rest lst)))]\n\
    \       [else\n        (double_the_difference (rest lst))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (number? (first lst)) (odd? (first lst)))\n \
    \    (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (* (car lst) (car lst))\n     (double_the_difference (cdr lst))]\n    [else\n\
    \     (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first lst)\
    \ (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (* (first lst) (first lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car\
    \ lst))) (double_the_difference (cdr lst))]\n    [(< (car lst) 0) (double_the_difference\
    \ (cdr lst))]\n    [(odd? (car lst)) (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (square (car lst))\n     (double_the_difference\
    \ (cdr lst))]\n    [else\n     (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n   \
    \     (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [else\n     (let ([x (first lst)])\n       (if (and (integer? x) (odd? x))\n\
    \           (+ (* x x) (double_the_difference (rest lst)))\n           (double_the_difference\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (if (and (integer? (first lst))\
    \ (odd? (first lst)))\n         (+ (* (first lst) (first lst))\n            (double_the_difference\
    \ (rest lst)))\n         (double_the_difference (rest lst)))]))\n</code>\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n      \
    \ (cond\n         [(and (integer? x) (odd? x))\n          (+ (* x x) (double_the_difference\
    \ (rest lst)))]\n         [else\n          (double_the_difference (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([first (first lst)]\n   \
    \         [second (second lst)]\n            [difference (- first second)])\n\
    \       (* 2 difference))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer?\
    \ (first lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n\
    \     (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square (car\
    \ lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (square (first lst))\n        (double_the_difference (rest lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first\
    \ (first lst)]\n           [rest (rest lst)])\n       (cond\n         [(and (integer?\
    \ first) (odd? first))\n          (+ (* first first) (double_the_difference rest))]\n\
    \         [else (double_the_difference rest)]))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (cond\n         [(and\
    \ (integer? x) (odd? x))\n          (+ (* x x) (double_the_difference (rest lst)))]\n\
    \         [else\n          (double_the_difference (rest lst))]))]))\n", "  (cond\
    \ [(empty? lst) 0]\n        [else (let ([x (first lst)])\n                (cond\
    \ [(and (integer? x) (odd? x)) (+ (square x) (double_the_difference (rest lst)))]\n\
    \                      [else (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(not (integer? (car lst))) (double_the_difference (cdr lst))]\n    [(negative?\
    \ (car lst)) (double_the_difference (cdr lst))]\n    [else (+ (* (car lst) (car\
    \ lst)) (double_the_difference (cdr lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (let ([x (first lst)])\n       (if (and (integer? x) (odd?\
    \ x))\n           (+ (* x x) (double_the_difference (rest lst)))\n           (double_the_difference\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (cond\n         [(and (integer? x) (odd? x))\n       \
    \   (+ (* x x) (double_the_difference (rest lst)))]\n         [else\n        \
    \  (double_the_difference (rest lst))]))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst))\n          (odd? (first lst))\n          (positive?\
    \ (first lst)))\n     (+ (square (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (square (first lst))\n  \
    \      (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (integer? (car lst)) (> (car lst) 0))\n     (+\
    \ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) 0]\n        [else (let ([first (first\
    \ lst)]\n                    [rest (rest lst)])\n                (cond [(and (integer?\
    \ first)\n                            (odd? first))\n                       (+\
    \ (square first)\n                          (double_the_difference rest))]\n \
    \                     [else (double_the_difference rest)]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst)))\n     (double_the_difference\
    \ (cdr lst))]\n    [(negative? (car lst))\n     (double_the_difference (cdr lst))]\n\
    \    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else\n     (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)])\n       (cond\n\
    \         [(integer? first)\n          (if (odd? first)\n              (+ (* first\
    \ first) (double_the_difference (rest lst)))\n              (double_the_difference\
    \ (rest lst)))]\n         [else (double_the_difference (rest lst))]))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([a (first lst)]\n       \
    \    [b (second lst)])\n       (cond\n         [(or (not (integer? a)) (not (integer?\
    \ b))) (double_the_difference (rest lst))]\n         [(or (negative? a) (negative?\
    \ b)) (double_the_difference (rest lst))]\n         [else (+ (* (- a b) (- a b))\
    \ (double_the_difference (rest lst)))]))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)))\n     (square (first lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(not (integer? (car\
    \ lst))) (double_the_difference (cdr lst))]\n    [(negative? (car lst)) (double_the_difference\
    \ (cdr lst))]\n    [else (+ (* (car lst) (car lst)) (double_the_difference (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (+ (*\
    \ (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n   \
    \ [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst))\n     (+ (square (car lst))\n        (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (not (negative? (first lst))))\n     (+ (* (first lst) (first\
    \ lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n \
    \    (+ (* (car lst) (car lst))\n        (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (car lst)) (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\n  \
    \   (+ (square (car lst))\n        (double_the_difference (cdr lst)))]\n    [else\
    \ (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (car lst))\n     (* (car lst) (car lst))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (+ (* (first lst) (first lst))\n\
    \        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [else\n         (cond\
    \ [(odd? (first lst))\n                (+ (square (first lst))\n             \
    \      (double_the_difference (rest lst)))]\n               [else\n          \
    \      (double_the_difference (rest lst))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (* (first\
    \ lst) (first lst))\n        (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (* (first lst) (first lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (* (first lst) (first lst))\n        (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst))\n     (+ (* (car lst) (car lst))\n\
    \        (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (+ (* (first lst) (first lst))\n        (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
