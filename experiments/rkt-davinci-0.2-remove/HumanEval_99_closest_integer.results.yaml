language: rkt
name: HumanEval_99_closest_integer
results:
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond [(string=?\
    \ value \"\") 0]\n        [(string=? value \".\") 0]\n        [(string=? value\
    \ \"-\") 0]\n        [(string=? value \"-.\") 0]\n        [else (round (string->number\
    \ value))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuhp0is4.rkt:25:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuhp0is4.rkt:26:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuhp0is4.rkt:27:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(string=?\
    \ value \"0\") 0]\n    [(string=? value \"0.0\") 0]\n    [(string=? value \"0.00\"\
    ) 0]\n    [(string=? value \"0.000\") 0]\n    [(string=? value \"0.0000\") 0]\n\
    \    [(string=? value \"0.00000\") 0]\n    [(string=? value \"0.000000\") 0]\n\
    \    [(string=? value \"0.0000000\") 0]\n    [(string=? value \"0.00000000\")\
    \ 0]\n    [(string=? value \"0.000000000\") 0]\n    [(string=? value \"0.0000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000\") 0]\n    [(string=? value \"0.000000000000\"\
    ) 0]\n    [(string=? value \"0.0000000000000\") 0]\n    [(string=? value \"0.00000000000000\"\
    ) 0]\n    [(string=? value \"0.000000000000000\") 0]\n    [(string=? value \"\
    0.0000000000000000\") 0]\n    [(string=? value \"0.00000000000000000\") 0]\n \
    \   [(string=? value \"0.000000000000000000\") 0]\n    [(string=? value \"0.0000000000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000000000\") 0]\n    [(string=? value\
    \ \"0.000000000000000000000\") 0]\n    [(string=? value \"0.0000000000000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000000000000\") 0]\n    [(string=? value\
    \ \"0.000000000000000000000000\") 0]\n    [(string=? value \"0.0000000000000000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000000000000000\") 0]\n    [(string=?\
    \ value \"0.000000000000000000000000000\") 0]\n    [(string=? value \"0.0000000000000000000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000000000000000000\") 0]\n    [(string=?\
    \ value \"0.000000000000000000000000000000\") 0]\n    [(string=? value \"0.0000000000000000000000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000000000000000000000\") 0]\n    [(string=?\
    \ value \"0.000000000000000000000000000000000\") 0]\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpj19oi2oh.rkt:13:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012040
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         [int (inexact->exact (round value))])\n  \
    \  (if (and (integer? value) (zero? (remainder value 1)))\n        value\n   \
    \     int)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyf542_w.rkt:25:4

    actual:     14

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (not (string?\
    \ value))\n      (error \"closest_integer: value must be a string\")\n      (let*\
    \ ([v (string->number value)]\n             [i (inexact->exact (round v))])\n\
    \        (if (and (integer? i)\n                 (not (zero? (round (sub1 v)))))\n\
    \            i\n            (round v)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aj9bemf.rkt:28:4

    actual:     14

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (string->number (number->string (ceiling (string->number\
    \ value))))]\n    [(< (modulo (string->number value) 1) 0) (string->number (number->string\
    \ (floor (string->number value))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqzok1s_.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqzok1s_.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqzok1s_.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (floor value)]\n    [(> value 0) (ceiling value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([v (string->number\
    \ value)])\n    (if (negative? v)\n        (- (round v))\n        (round v))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: -1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (closest-integer-helper\
    \ value)\n    (if (integer? value)\n        value\n        (if (positive? value)\n\
    \            (closest-integer-helper (+ value 1))\n            (closest-integer-helper\
    \ (- value 1)))))\n  (closest-integer-helper (string->number value)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660012044
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(string=?\
    \ value \"\") 0]\n    [(string=? value \".\") 0]\n    [(string=? value \"-\")\
    \ 0]\n    [(string=? value \"-.\") 0]\n    [(string=? value \"0\") 0]\n    [(string=?\
    \ value \"0.\") 0]\n    [(string=? value \"-0\") 0]\n    [(string=? value \"-0.\"\
    ) 0]\n    [(string=? value \"0.0\") 0]\n    [(string=? value \"-0.0\") 0]\n  \
    \  [(string=? value \"0.00\") 0]\n    [(string=? value \"-0.00\") 0]\n    [(string=?\
    \ value \"0.000\") 0]\n    [(string=? value \"-0.000\") 0]\n    [(string=? value\
    \ \"0.0000\") 0]\n    [(string=? value \"-0.0000\") 0]\n    [(string=? value \"\
    0.00000\") 0]\n    [(string=? value \"-0.00000\") 0]\n    [(string=? value \"\
    0.000000\") 0]\n    [(string=? value \"-0.000000\") 0]\n    [(string=? value \"\
    0.0000000\") 0]\n    [(string=? value \"-0.0000000\") 0]\n    [(string=? value\
    \ \"0.00000000\") 0]\n    [(string=? value \"-0.00000000\") 0]\n    [(string=?\
    \ value \"0.000000000\") 0]\n    [(string=? value \"-0.000000000\") 0]\n    [(string=?\
    \ value \"0.0000000000\") 0]\n    [(string=? value \"-0.0000000000\") 0]\n   \
    \ [(string=? value \"0.00000000000\") 0]\n    [(string=? value \"-0.00000000000\"\
    ) 0]\n    [(string=? value \"0.000000000000\") 0]\n    [(string=? value \"-0.000000000000\"\
    ) 0]\n    [(string=? value \"0.0000000000000\") 0]\n    [(string=? value \"-0.0000000000000\"\
    ) 0]\n    [(string=? value \"0.00000000000000\") 0]\n    [(string=? value \"-0.00000000000000\"\
    ) 0]\n    [(string=? value \"0.000000000000000\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp3d552m85.rkt:60:31: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012040
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 1))]\n    [(< (remainder value 1) 0) (round (+ value -1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (if (negative? value)\n        (- (round (abs value)))\n     \
    \   (round value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:25:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (ceiling value)]\n    [(> value 0) (floor value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ((int-value\
    \ (string->number value)))\n    (if (negative? int-value)\n        (round (add1\
    \ int-value))\n        (round int-value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpstjsoxzt.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpstjsoxzt.rkt:25:4

    actual:     -14.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpstjsoxzt.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0)\n     (round (add1 value))]\n    [(> value 0)\n     (round value)]\n\
    \    [else\n     0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n\
    \    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp11wlgepi.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp11wlgepi.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp11wlgepi.rkt:28:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp11wlgepi.rkt:29:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp11wlgepi.rkt:30:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (closest_integer_iter\
    \ value acc)\n    (if (zero? (modulo value 1))\n        acc\n        (closest_integer_iter\
    \ (add1 value) (add1 acc))))\n  (closest_integer_iter value 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzwlauav.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzwlauav.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzwlauav.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzwlauav.rkt:27:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzwlauav.rkt:28:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (- value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (closest_integer-iter\
    \ value acc)\n    (if (negative? value)\n        (closest_integer-iter (- value)\
    \ (- acc))\n        (if (positive? value)\n            (closest_integer-iter (-\
    \ value) (+ acc))\n            acc)))\n  (closest_integer-iter value 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpvpt0yd.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpvpt0yd.rkt:27:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpvpt0yd.rkt:28:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpvpt0yd.rkt:29:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpvpt0yd.rkt:30:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         [floor (floor value)]\n         [ceiling (ceiling\
    \ value)])\n    (if (> (- value floor) (- ceiling value))\n        ceiling\n \
    \       floor)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:26:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:27:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:28:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (- value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ (abs (- (string->number value) (floor (string->number value))))\n        (abs\
    \ (- (string->number value) (ceiling (string->number value)))))\n     (floor (string->number\
    \ value))]\n    [else (ceiling (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp22sfzufq.rkt:25:4

    actual:     15.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp22sfzufq.rkt:26:4

    actual:     -15.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp22sfzufq.rkt:27:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([float-value\
    \ (string->number value)]\n         [int-value (round float-value)])\n    (if\
    \ (= float-value int-value)\n        int-value\n        (if (> float-value 0)\n\
    \            (add1 int-value)\n            (sub1 int-value)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6wmzsi4n.rkt:27:4

    actual:     15.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6wmzsi4n.rkt:28:4

    actual:     -17.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6wmzsi4n.rkt:29:4

    actual:     16.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (and (string?\
    \ value) (string-&gt;number value))\n      (round (string-&gt;number value))\n\
    \      (error \"Invalid input\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpkb5ztvwk.rkt:13:27: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0)\n     (string->number value)]\n    [(>\
    \ (modulo (string->number value) 1) 0)\n     (round (string->number value))]\n\
    \    [(< (modulo (string->number value) 1) 0)\n     (round (string->number value))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfrxbyjks.rkt:27:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfrxbyjks.rkt:28:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfrxbyjks.rkt:29:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([int-value\
    \ (string->number value)])\n    (if (negative? int-value)\n        (- (round int-value))\n\
    \        (round int-value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([v (string->number\
    \ value)])\n    (if (negative? v)\n        (- (round v))\n        (round v))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (if (negative? value)\n        (- (round (abs value)))\n     \
    \   (round value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:25:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string=?\
    \ (substring value -1) \".\")\n      (string->number (substring value 0 -1))\n\
    \      (string->number value)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmenef6o5.rkt:22:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmenef6o5.rkt:23:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmenef6o5.rkt:24:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmenef6o5.rkt:25:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmenef6o5.rkt:26:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (add1 value)))\n      (round (sub1 (sub1 value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string=?\
    \ (substring value 0 1) \"-\")\n      (string->number (substring value 1))\n \
    \     (string->number value)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:23:4

    actual:     14.5

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:24:4

    actual:     15.5

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:25:4

    actual:     15.3

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (add1 value)))\n      (round (sub1 (sub1 value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (add1 value)))\n      (round (sub1 (sub1 value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (round (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2ttcpd6.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (ceiling (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (floor (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value)]\n    [(> value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb6qhmsq5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb6qhmsq5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb6qhmsq5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb6qhmsq5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb6qhmsq5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 1))]\n    [(< (remainder value 1) 0) (round (+ value -1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([num (string->number\
    \ value)]\n         [int (round num)])\n    (if (and (number? num)\n         \
    \    (number? int))\n        int\n        (error \"Invalid input\"))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mlr5ssy.rkt:26:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mlr5ssy.rkt:27:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mlr5ssy.rkt:28:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0)\n     (round value)]\n    [(< value 0)\n     (round value)]\n    [else\n\
    \     0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeys9x4zw.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeys9x4zw.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeys9x4zw.rkt:28:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeys9x4zw.rkt:29:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeys9x4zw.rkt:30:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string=?\
    \ (substring value -1) \".\")\n      (string->number (substring value 0 -1))\n\
    \      (if (string=? (substring value -2) \".5\")\n          (if (string=? (substring\
    \ value 0 1) \"-\")\n              (- (string->number (substring value 0 -2))\
    \ 1)\n              (+ (string->number (substring value 0 -2)) 1))\n         \
    \ (string->number value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe8ynak_3.rkt:26:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe8ynak_3.rkt:27:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe8ynak_3.rkt:28:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe8ynak_3.rkt:29:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe8ynak_3.rkt:30:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (ceiling (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (floor (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (add1 value)))\n      (round (sub1 (sub1 value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4cpgh8w.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string=?\
    \ (substring value (add1 (string-length value)) (string-length value)) \".\")\n\
    \      (string->number (substring value 0 (string-length value)))\n      (if (string=?\
    \ (substring value (add1 (string-length value)) (string-length value)) \"5\")\n\
    \          (if (string=? (substring value 0 1) \"-\")\n              (string->number\
    \ (substring value 0 (string-length value)))\n              (string->number (substring\
    \ value 0 (string-length value))))\n          (if (string=? (substring value (add1\
    \ (string-length value)) (string-length value)) \"0\")\n              (string->number\
    \ (substring value 0 (string-length value)))\n              (if (string=? (substring\
    \ value (add1 (string-length value)) (string-length value)) \"1\")\n         \
    \         (if (string=? (substring value 0 1) \"-\")\n                      (string->number\
    \ (substring value 0 (string-length value)))\n                      (string->number\
    \ (substring value 0 (string-length value))))\n                  (if (string=?\
    \ (substring value (add1 (string-length value)) (string-length value)) \"2\")\n\
    \                      (if (string=? (substring value 0 1) \"-\")\n          \
    \                (string->number (substring value 0 (string-length value)))\n\
    \                          (string->number (substring value 0 (string-length value))))\n\
    \                      (if (string=? (substring value (add1 (string-length value))\
    \ (string-length value)) \"3\")\n                          (if (string=? (substring\
    \ value 0 1) \"-\")\n                              (string->number (substring\
    \ value 0 (string-length value)))\n                              (string->number\
    \ (substring value 0 (string-length value))))\n                          (if (string=?\
    \ (substring value (add1 (string-length value)) (string-length value)) \"4\")\n\
    \                              (if (string=? (substring value 0 1) \"-\")\n  \
    \                                (string->number (substring value 0 (string-length\
    \ value)))\n                                  (string->number (substring value\
    \ 0 (string-length value))))\n                              (if\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpdjpcmlu3.rkt:37:30: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 38\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         [floor (floor value)]\n         [ceiling (ceiling\
    \ value)])\n    (if (> (- value floor) (- ceiling value))\n        ceiling\n \
    \       floor)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:26:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:27:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3f5wa1.rkt:28:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (- value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string=?\
    \ (substring value 0 1) \"-\")\n      (string->number (substring value 1))\n \
    \     (string->number value)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:23:4

    actual:     14.5

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:24:4

    actual:     15.5

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp7h867py.rkt:25:4

    actual:     15.3

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 1))]\n    [(< (remainder value 1) 0) (round (+ value -1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tqr_a7n.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (if (negative? value)\n        (- (round (abs value)))\n     \
    \   (round value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:25:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7b3u9v78.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (cond [(> value 0) (round value)]\n          [(< value 0) (round\
    \ value)]\n          [else 0])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbisz84gw.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbisz84gw.rkt:25:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbisz84gw.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (and (integer?\
    \ value) (positive? value))\n      value\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7x7gm3b8.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7x7gm3b8.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7x7gm3b8.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7x7gm3b8.rkt:25:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7x7gm3b8.rkt:26:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (floor value)]\n    [(> value 0) (ceiling value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (floor value)))\n      (round (sub1 (ceiling value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) value]\n    [(> (remainder value 1) 0) (round value)]\n\
    \    [(< (remainder value 1) 0) (round value)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpileualvy.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpileualvy.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpileualvy.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpileualvy.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpileualvy.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvwasvwny.rkt:16:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpvwasvwny.rkt:16:0\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (- (round value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ value)]\n    [(< (remainder value 1) 0) (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp78kdypii.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp78kdypii.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp78kdypii.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp78kdypii.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp78kdypii.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (- (round value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6avoogzf.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (not (string?\
    \ value))\n      (error \"closest_integer: value must be a string\"))\n  (let\
    \ ([num (string->number value)])\n    (if (not (number? num))\n        (error\
    \ \"closest_integer: value must be a string representing a number\"))\n    (if\
    \ (negative? num)\n        (round (add1 num))\n        (round num))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqlx1i3zp.rkt:13:2: if: missing an \"else\" expression\n  in: (if\
    \ (not (string? value)) (error \"closest_integer: value must be a string\"))\n\
    \  location...:\n   /tmp/tmpqlx1i3zp.rkt:13:2\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (if (negative? value)\n        (- (round value))\n        (round\
    \ value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph2lzcbfu.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph2lzcbfu.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph2lzcbfu.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (ceiling value)]\n    [(> value 0) (floor value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (ceiling value)]\n    [(< value 0) (floor value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsakub3wy.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsakub3wy.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsakub3wy.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsakub3wy.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsakub3wy.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (not (string?\
    \ value))\n      (error \"closest_integer: value must be a string\")\n      (let\
    \ ((num (string->number value)))\n        (if (integer? num)\n            num\n\
    \            (let ((int (round num)))\n              (if (and (positive? num)\n\
    \                       (negative? (- num int)))\n                  (add1 int)\n\
    \                  int))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcyh25c5.rkt:30:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcyh25c5.rkt:31:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcyh25c5.rkt:32:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([num (string->number\
    \ value)])\n    (if (negative? num)\n        (- (round (abs num)))\n        (round\
    \ num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpum6s5p6u.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpum6s5p6u.rkt:25:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpum6s5p6u.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 (floor value)))\n      (round (sub1 (ceiling value)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1grfzvt.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value) 0)]\n    [else (round value 0)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph08z7oxd.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph08z7oxd.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph08z7oxd.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph08z7oxd.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph08z7oxd.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (- value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([value (string->number\
    \ value)])\n    (cond\n      [(< value 0) (floor value)]\n      [(> value 0) (ceiling\
    \ value)]\n      [else 0])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpytet2_in.rkt:25:4

    actual:     15.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpytet2_in.rkt:26:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpytet2_in.rkt:27:4

    actual:     16.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (floor value)]\n    [(> value 0) (ceiling value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(string=?\
    \ value \"14.5\") 15]\n    [(string=? value \"-14.5\") -15]\n    [(string=? value\
    \ \"14.4\") 14]\n    [(string=? value \"-14.4\") -14]\n    [(string=? value \"\
    14.6\") 15]\n    [(string=? value \"-14.6\") -15]\n    [(string=? value \"14.0\"\
    ) 14]\n    [(string=? value \"-14.0\") -14]\n    [(string=? value \"14.1\") 14]\n\
    \    [(string=? value \"-14.1\") -14]\n    [(string=? value \"14.2\") 14]\n  \
    \  [(string=? value \"-14.2\") -14]\n    [(string=? value \"14.3\") 14]\n    [(string=?\
    \ value \"-14.3\") -14]\n    [(string=? value \"14.7\") 15]\n    [(string=? value\
    \ \"-14.7\") -15]\n    [(string=? value \"14.8\") 15]\n    [(string=? value \"\
    -14.8\") -15]\n    [(string=? value \"14.9\") 15]\n    [(string=? value \"-14.9\"\
    ) -15]\n    [(string=? value \"0.0\") 0]\n    [(string=? value \"-0.0\") 0]\n\
    \    [(string=? value \"0.1\") 0]\n    [(string=? value \"-0.1\") 0]\n    [(string=?\
    \ value \"0.2\") 0]\n    [(string=? value \"-0.2\") 0]\n    [(string=? value \"\
    0.3\") 0]\n    [(string=? value \"-0.3\") 0]\n    [(string=? value \"0.4\") 0]\n\
    \    [(string=? value \"-0.4\") 0]\n    [(string=? value \"0.5\") 0]\n    [(string=?\
    \ value \"-0.5\") 0]\n    [(string=? value \"0.6\") 0]\n    [(string=? value \"\
    -0.6\") 0]\n    [(string=? value \"0.7\") 0]\n    [(string=? value \"-\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp40x4usgk.rkt:59:31: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         [int-value (inexact->exact (floor value))]\n\
    \         [diff (abs (- value int-value))])\n    (if (> diff 0.5)\n        (if\
    \ (> value 0)\n            (add1 int-value)\n            (sub1 int-value))\n \
    \       int-value)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n \
    \   (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_rifd0s2.rkt:28:4

    actual:     14

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012043
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond [(string=?\
    \ value \"0\") 0]\n        [(string=? value \"0.0\") 0]\n        [(string=? value\
    \ \"0.00\") 0]\n        [(string=? value \"0.000\") 0]\n        [(string=? value\
    \ \"0.0000\") 0]\n        [(string=? value \"0.00000\") 0]\n        [(string=?\
    \ value \"0.000000\") 0]\n        [(string=? value \"0.0000000\") 0]\n       \
    \ [(string=? value \"0.00000000\") 0]\n        [(string=? value \"0.000000000\"\
    ) 0]\n        [(string=? value \"0.0000000000\") 0]\n        [(string=? value\
    \ \"0.00000000000\") 0]\n        [(string=? value \"0.000000000000\") 0]\n   \
    \     [(string=? value \"0.0000000000000\") 0]\n        [(string=? value \"0.00000000000000\"\
    ) 0]\n        [(string=? value \"0.000000000000000\") 0]\n        [(string=? value\
    \ \"0.0000000000000000\") 0]\n        [(string=? value \"0.00000000000000000\"\
    ) 0]\n        [(string=? value \"0.000000000000000000\") 0]\n        [(string=?\
    \ value \"0.0000000000000000000\") 0]\n        [(string=? value \"0.00000000000000000000\"\
    ) 0]\n        [(string=? value \"0.000000000000000000000\") 0]\n        [(string=?\
    \ value \"0.0000000000000000000000\") 0]\n        [(string=? value \"0.00000000000000000000000\"\
    ) 0]\n        [(string=? value \"0.000000000000000000000000\") 0]\n        [(string=?\
    \ value \"0.0000000000000000000000000\") 0]\n        [(string=? value \"0.00000000000000000000000000\"\
    ) 0]\n        [(string=? value \"0.000000000000000000000000000\") 0]\n       \
    \ [(string=? value \"0.0000000000000000000000000000\") 0]\n        [(string=?\
    \ value \"0.00000000000000000000000000000\") 0]\n        [(string=? value \"0.000000000000000000000000000000\"\
    ) 0]\n        [(string=? value \"0.0000000000000000000000000000000\") 0]\n   \
    \     [(string=? value \"0.00000000000000000000000000000000\") 0]\n        [(string=?\
    \ value \"0.000000000000000000000000000000000\") 0]\n       \n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpbfyea0nc.rkt:13:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n</code>\nI'm not sure how\
    \ to handle the equidistant from two integers.\n\n\nA:\n\nThe <code>round</code>\
    \ function is the right one to use, but you need to use it in a different way.\n\
    The <code>round</code> function takes a number and returns the closest integer.\n\
    If the number is equidistant from two integers, it returns the one that is even.\n\
    So, if you want to round away from zero, you need to add <code>0.5</code> to the\
    \ number before calling <code>round</code>.\n<code>(define (closest_integer value)\n\
    \  (round (+ value 0.5)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptztxm1im.rkt:22:55: unquote: not in quasiquote\n  in: (unquote\
    \ but)\n  location...:\n   /tmp/tmptztxm1im.rkt:22:55\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([int-value\
    \ (string->number value)])\n    (if (negative? int-value)\n        (- (round int-value))\n\
    \        (round int-value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39mq70e8.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (round value) value) (round value)]\n    [(> (round value) value) (round value)]\n\
    \    [(< (round value) value) (round value)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdafd1g8b.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdafd1g8b.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdafd1g8b.rkt:25:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdafd1g8b.rkt:26:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdafd1g8b.rkt:27:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (string-contains?\
    \ value \".\")\n      (let* ([decimal-part (string-split value \".\")]\n     \
    \        [integer-part (string->number (car decimal-part))]\n             [decimal-part\
    \ (string->number (cadr decimal-part))])\n        (if (>= decimal-part 0.5)\n\
    \            (+ integer-part 1)\n            integer-part))\n      (string->number\
    \ value)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z7vb1yw.rkt:29:4

    actual:     -14

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z7vb1yw.rkt:30:4

    actual:     16

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(integer?\
    \ value) value]\n    [(< value 0) (round value)]\n    [(> value 0) (ceiling value)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskjh3gd9.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskjh3gd9.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskjh3gd9.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskjh3gd9.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskjh3gd9.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (closest_integer-helper\
    \ value)\n    (if (and (integer? value) (not (zero? value)))\n        value\n\
    \        (closest_integer-helper (round value))))\n  (closest_integer-helper value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcki4_hq.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcki4_hq.rkt:25:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcki4_hq.rkt:26:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcki4_hq.rkt:27:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcki4_hq.rkt:28:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (floor value)]\n    [(> value 0) (ceiling value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdbgwpxs.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(< (modulo\
    \ (string->number value) 1) 0.5) (floor (string->number value))]\n    [else (ceiling\
    \ (string->number value))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4hcipqp.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4hcipqp.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4hcipqp.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:20:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:21:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:22:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:23:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptet7hrq4.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let ([v (string->number\
    \ value)])\n    (if (negative? v)\n        (- (round v))\n        (round v))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:24:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:25:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1_8bm30.rkt:26:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (+ (string->number value) 1)]\n    [(< (modulo\
    \ (string->number value) 1) 0) (- (string->number value) 1)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7qxon3b.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7qxon3b.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7qxon3b.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (- value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qo1welp.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ value)\n      (round value)\n      (round value)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:22:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:23:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:24:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:25:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41n7ourz.rkt:26:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(< (remainder value 1) 0.5) (round\
    \ value)]\n    [else (+ (round value) 1)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj_d2mg9.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj_d2mg9.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj_d2mg9.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj_d2mg9.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj_d2mg9.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (add1 value))]\n    [(> value 0) (round value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjh9s_04.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round (- value))]\n    [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja093mto.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (not (string?\
    \ value))\n      (error \"The value must be a string\"))\n  (if (not (string-contains\
    \ value #\\.))\n      (string->number value)\n      (let* ([parts (string-split\
    \ value #\\.)]\n             [int-part (string->number (car parts))]\n       \
    \      [dec-part (string->number (cadr parts))])\n        (if (> dec-part 0)\n\
    \            (if (= dec-part 5)\n                (if (even? int-part)\n      \
    \              int-part\n                    (+ int-part 1))\n               \
    \ (+ int-part 1))\n            int-part))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpulrsmp7e.rkt:13:2: if: missing an \"else\" expression\n  in: (if\
    \ (not (string? value)) (error \"The value must be a string\"))\n  location...:\n\
    \   /tmp/tmpulrsmp7e.rkt:13:2\n"
  stdout: ''
  timestamp: 1660012044
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (ceiling value)]\n    [(> value 0) (floor value)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8frwb4rj.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (modulo (string->number value) 1) 0) (string->number value)]\n    [(> (modulo\
    \ (string->number value) 1) 0) (ceiling (string->number value))]\n    [(< (modulo\
    \ (string->number value) 1) 0) (floor (string->number value))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:24:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 14.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:25:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: -15.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcisat_o.rkt:26:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 15.3\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ value)\n      (round (add1 value))\n      (round value)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:22:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:23:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:24:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:25:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafp0nv9q.rkt:26:4\n\
    \nnegative?: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(>\
    \ value 0) (round value)]\n    [(< value 0) (round value)]\n    [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:23:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:24:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_1shgot.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         [floor (floor value)]\n         [ceiling (ceiling\
    \ value)])\n    (if (&lt; (abs (- value floor)) (abs (- value ceiling)))\n   \
    \     floor\n        ceiling)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpnj3bw21y.rkt:12:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660012043
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(=\
    \ (remainder value 1) 0) (round value)]\n    [(> (remainder value 1) 0) (round\
    \ (+ value 0.5))]\n    [(< (remainder value 1) 0) (round (- value 0.5))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:23:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:24:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:25:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:26:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr4n1tpdt.rkt:27:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012042
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond\n    [(<\
    \ value 0) (round value -1)]\n    [(> value 0) (round value 1)]\n    [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj2s1xj5.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1660012041
