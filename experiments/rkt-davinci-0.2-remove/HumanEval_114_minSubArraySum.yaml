name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers nums, find the minimum sum\
  \ of any non-empty sub-array\n;; of nums.\n;; Example\n(define (minSubArraySum nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums)\
    \ min]\n          [else (minSubArraySum-iter (rest nums) (+ sum (first nums))\
    \ (min sum min))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n    \
    \      [else\n           (let* ([curr-sum (apply + nums)]\n                  [new-min-sum\
    \ (min min-sum curr-sum)])\n             (minSubArraySum-iter (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum curr-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(<\
    \ curr-sum min-sum) (minSubArraySum-iter (rest nums) curr-sum (add1 curr-sum))]\n\
    \      [else (minSubArraySum-iter (rest nums) min-sum (add1 curr-sum))]))\n  (minSubArraySum-iter\
    \ nums (first nums) (add1 (first nums))))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (define\
    \ new-sum (+ sum (first nums)))\n       (define new-min (min min new-sum))\n \
    \      (minSubArraySum-iter (rest nums) new-sum new-min)]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n\
    \    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper (rest nums)\
    \ (+ sum (first nums))\n                                       (min min sum))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums) min]\n        \
    \  [else (minSubArraySum-iter (rest nums) (+ sum (first nums)) (min sum min))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (let loop ([nums nums] [min-sum\
    \ (first nums)])\n    (cond [(empty? nums) min-sum]\n          [(< (first nums)\
    \ min-sum) (loop (rest nums) (first nums))]\n          [else (loop (rest nums)\
    \ min-sum)])))\n", "  (define (minSubArraySum-iter nums sum min)\n    (cond [(empty?\
    \ nums) min]\n          [else (minSubArraySum-iter (rest nums) (+ sum (first nums))\n\
    \                                     (min min sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (let ([minSum (apply + nums)])\n    (for ([i (in-range\
    \ (length nums))])\n      (let ([sum 0])\n        (for ([j (in-range (add1 i)\
    \ (length nums))])\n          (set! sum (add sum (vector-ref nums j)))\n     \
    \     (when (< sum minSum)\n            (set! minSum sum)))\n        (when (<\
    \ sum minSum)\n          (set! minSum sum))))\n    minSum))\n", "  (define (minSubArraySum'\
    \ nums start end)\n    (cond\n      [(= start end) (vector-ref nums start)]\n\
    \      [(= start (+ end 1)) (min (vector-ref nums start) (vector-ref nums end))]\n\
    \      [else (min (vector-ref nums start) (minSubArraySum' nums (+ start 1) end))]))\n\
    \  (minSubArraySum' nums 0 (- (vector-length nums) 1)))\n", "  (let loop ([nums\
    \ nums] [min-sum (first nums)])\n    (if (null? nums)\n        min-sum\n     \
    \   (loop (cdr nums)\n              (min min-sum\n                   (apply +\
    \ (take (length nums) nums)))))))\n", "  (define (minSubArraySum' nums start end)\n\
    \    (cond\n      [(= start end) 0]\n      [(= start (+ end 1)) (vector-ref nums\
    \ start)]\n      [else\n       (let ([mid (quotient (+ start end) 2)])\n     \
    \    (let ([left (minSubArraySum' nums start mid)]\n               [right (minSubArraySum'\
    \ nums (+ mid 1) end)])\n           (let ([left-right (minSubArraySum' nums start\
    \ end)])\n             (min (min left right) left-right))))]))\n  (minSubArraySum'\
    \ nums 0 (- (vector-length nums) 1)))\n", "  (define (minSubArraySum-helper nums\
    \ sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n         \
    \  (define new-sum (+ sum (first nums)))\n           (define new-min-sum (min\
    \ min-sum new-sum))\n           (minSubArraySum-helper (rest nums) new-sum new-min-sum)]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (let loop ([nums nums]\
    \ [min-sum (car nums)])\n    (if (null? (cdr nums))\n        min-sum\n       \
    \ (let ([sum (apply + (take (cdr nums) (length nums)))])\n          (loop (cdr\
    \ nums) (min min-sum sum))))))\n", "  (define (minSubArraySum' nums min-so-far)\n\
    \    (cond\n      [(empty? nums) min-so-far]\n      [(< (first nums) min-so-far)\
    \ (minSubArraySum' (rest nums) (first nums))]\n      [else (minSubArraySum' (rest\
    \ nums) min-so-far)]))\n  (minSubArraySum' nums (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n      \
    \    [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n         \
    \                              (min min sum))]))\n  (minSubArraySum-helper nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (cond\n\
    \      [(empty? nums) min]\n      [else\n       (define newSum (+ sum (first nums)))\n\
    \       (define newMin (min min newSum))\n       (minSubArraySum' (rest nums)\
    \ newSum newMin)]))\n  (minSubArraySum' nums 0 (first nums)))\n", "  (let loop\
    \ ([i 0] [j 0] [min-sum (vector-ref nums 0)])\n    (cond [(>= i (vector-length\
    \ nums)) min-sum]\n          [(>= j (vector-length nums)) (loop (+ i 1) (+ i 1)\
    \ min-sum)]\n          [else (let ([sum (vector-ref nums i)])\n              \
    \    (for ([k (+ i 1)])\n                    (set! sum (+ sum (vector-ref nums\
    \ k))))\n                  (loop i (+ j 1) (min min-sum sum)))])))\n", "  (define\
    \ (minSubArraySum' nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n \
    \     [(< (sum nums) min-sum) (minSubArraySum' (rest nums) (sum nums))]\n    \
    \  [else (minSubArraySum' (rest nums) min-sum)]))\n  (minSubArraySum' nums (sum\
    \ nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty?\
    \ nums) min-sum]\n          [else\n           (let ([sum (apply + nums)])\n  \
    \           (minSubArraySum-iter (rest nums) (min sum min-sum)))]))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n\
    \    (cond\n      [(empty? nums) min]\n      [else\n       (let ([new-sum (+ sum\
    \ (first nums))])\n         (minSubArraySum-helper (rest nums) new-sum (min new-sum\
    \ (abs new-sum))))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums sum min)\n    (cond [(empty? nums) min]\n          [(<\
    \ sum (first nums)) (minSubArraySum' (rest nums) (first nums) (first nums))]\n\
    \          [else (minSubArraySum' (rest nums) (+ sum (first nums)) min)]))\n \
    \ (minSubArraySum' nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums\
    \ min-sum sum)\n    (cond\n      [(empty? nums) min-sum]\n      [else\n      \
    \ (minSubArraySum-iter (rest nums)\n                            (min min-sum (add1\
    \ sum))\n                            (add1 sum))]))\n  (minSubArraySum-iter nums\
    \ (first nums) 0))\n", "  (define (minSubArraySum-helper nums min-so-far)\n  \
    \  (cond\n      [(empty? nums) min-so-far]\n      [(< (first nums) min-so-far)\
    \ (minSubArraySum-helper (rest nums) (first nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (minSubArraySum' (cdr nums)\n                         (min min-sum\n\
    \                              (apply + (take (length nums) nums))))))\n  (minSubArraySum'\
    \ nums (apply + nums)))\n", "  (let loop ([nums nums] [min-sum (car nums)])\n\
    \    (if (null? (cdr nums))\n        min-sum\n        (let ([sum (apply + (take\
    \ (cdr nums) (length nums)))])\n          (loop (cdr nums) (min min-sum sum))))))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond\n      [(empty? nums)\
    \ min]\n      [else\n       (let ([new-sum (+ sum (first nums))])\n         (minSubArraySum-helper\
    \ (rest nums) new-sum (min min new-sum)))]))\n  (minSubArraySum-helper nums 0\
    \ (first nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n    (cond\n\
    \      [(empty? nums) min-sum]\n      [else\n       (let* ([n (first nums)]\n\
    \              [new-sum (+ sum n)]\n              [new-min-sum (min min-sum new-sum)])\n\
    \         (minSubArraySum-iter (rest nums) new-sum new-min-sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (define new-sum\
    \ (+ sum (first nums)))\n           (define new-min-sum (min min-sum new-sum))\n\
    \           (minSubArraySum-iter (rest nums) new-sum new-min-sum)]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n\
    \    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper (rest nums)\
    \ (+ sum (first nums))\n                                       (min min sum))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n        \
    \   (let* ([sum (apply + nums)]\n                  [new-min-sum (min min-sum sum)])\n\
    \             (minSubArraySum-iter (rest nums) new-min-sum))]))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n\
    \    (cond [(empty? nums) min]\n          [else (let ([new-sum (+ sum (first nums))])\n\
    \                  (minSubArraySum-helper (rest nums) new-sum (min min new-sum)))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (let\
    \ ([new-sum (+ sum (first nums))])\n         (minSubArraySum' (rest nums) new-sum\
    \ (min new-sum new-sum)))]))\n  (minSubArraySum' nums 0 (first nums)))\n", " \
    \ (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (cond\
    \ [(empty? nums) min]\n          [(< sum (first nums)) (minSubArraySum' (rest\
    \ nums) (first nums) (first nums))]\n          [else (minSubArraySum' (rest nums)\
    \ (+ sum (first nums)) (min sum (first nums)))]))\n  (minSubArraySum' nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum-iter nums acc)\n    (cond\n      [(empty?\
    \ nums) acc]\n      [(< (first nums) 0) (minSubArraySum-iter (rest nums) (min\
    \ acc (first nums))) ]\n      [else (minSubArraySum-iter (rest nums) acc)]))\n\
    \  (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum' nums\
    \ sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum' (rest\
    \ nums) (+ sum (first nums))\n                                 (min min (if (&lt;\
    \ sum 0) (+ sum (first nums)) sum)))]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums) min]\n \
    \         [else (minSubArraySum-iter (rest nums) (+ sum (first nums)) (min sum\
    \ min))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum curr-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(<\
    \ curr-sum min-sum) (minSubArraySum-iter (rest nums) curr-sum (add1 curr-sum))]\n\
    \      [else (minSubArraySum-iter (rest nums) min-sum (add1 curr-sum))]))\n  (minSubArraySum-iter\
    \ nums (first nums) (add1 (first nums))))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                            (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (let\
    \ ([new-sum (+ sum (first nums))])\n         (minSubArraySum-helper (rest nums)\
    \ new-sum (min new-sum sum)))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n",
  "  (define (minSubArraySum' nums sum min)\n    (cond\n      [(empty? nums) min]\n\
    \      [else\n       (let ([sum (+ sum (first nums))])\n         (minSubArraySum'\
    \ (rest nums) sum (min sum min)))]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (cond [(empty? nums) min-sum]\n \
    \         [else\n           (let* ([n (first nums)]\n                  [min-sum\
    \ (if (&lt; n min-sum) n min-sum)]\n                  [nums (rest nums)])\n  \
    \           (minSubArraySum' nums min-sum))]))\n  (minSubArraySum' nums (first\
    \ nums)))\n", "  (define (minSubArraySum-helper nums current-min)\n    (cond [(empty?\
    \ nums) current-min]\n          [else\n           (let ([sum (apply + nums)])\n\
    \             (minSubArraySum-helper (rest nums) (min sum current-min)))]))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n        \
    \   (let* ([curr-sum (apply + nums)]\n                  [new-min-sum (min min-sum\
    \ curr-sum)])\n             (minSubArraySum-helper (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums min-sum)\n    (if (null? nums)\n        min-sum\n    \
    \    (let* ([n (car nums)]\n               [min-sum (if (< n min-sum) n min-sum)])\n\
    \          (minSubArraySum' (cdr nums) min-sum))))\n  (minSubArraySum' nums (car\
    \ nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n    (cond [(null?\
    \ nums) min-sum]\n          [else\n           (define new-sum (+ sum (car nums)))\n\
    \           (define new-min-sum (min new-sum min-sum))\n           (minSubArraySum-iter\
    \ (cdr nums) new-sum new-min-sum)]))\n  (minSubArraySum-iter nums 0 (car nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([sum (apply + nums)]\n                  [new-min-sum\
    \ (min min-sum sum)])\n             (minSubArraySum-iter (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum'\
    \ nums i j sum minSum)\n    (cond [(= i j) minSum]\n          [else\n        \
    \   (define newSum (+ sum (vector-ref nums i)))\n           (define newMinSum\
    \ (min minSum newSum))\n           (minSubArraySum' nums (+ i 1) j newSum newMinSum)]))\n\
    \  (minSubArraySum' nums 0 (vector-length nums) 0 (vector-ref nums 0)))\n", " \
    \ (define (minSubArraySum-iter nums sum min)\n    (cond [(null? nums) min]\n \
    \         [else (minSubArraySum-iter (cdr nums) (+ sum (car nums)) (min sum min))]))\n\
    \  (minSubArraySum-iter nums 0 (car nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                            (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum curr-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n\
    \           (define new-sum (+ curr-sum (first nums)))\n           (define new-min-sum\
    \ (min min-sum new-sum))\n           (minSubArraySum-iter (rest nums) new-min-sum\
    \ new-sum)]))\n  (minSubArraySum-iter nums (first nums) 0))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [else\n \
    \      (let ([new-sum (+ sum (first nums))])\n         (minSubArraySum-iter (rest\
    \ nums) new-sum (min min-sum new-sum)))]))\n  (minSubArraySum-iter nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty?\
    \ nums) min-sum]\n          [else\n           (let* ([cur-sum (apply + nums)]\n\
    \                  [new-min-sum (min min-sum cur-sum)])\n             (minSubArraySum-iter\
    \ (rest nums) new-min-sum))]))\n  (minSubArraySum-iter nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums sum min-sum)\n    (if (null? nums)\n    \
    \    min-sum\n        (let ([new-sum (+ sum (car nums))])\n          (minSubArraySum-helper\
    \ (cdr nums)\n                                 new-sum\n                     \
    \            (min min-sum new-sum)))))\n  (minSubArraySum-helper nums 0 (car nums)))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (let loop ([nums nums] [min-sum (first nums)])\n\
    \    (if (empty? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n\
    \          (if (&lt; sum min-sum)\n              (loop (rest nums) sum)\n    \
    \          (loop (rest nums) min-sum))))))\n", "  (define (minSubArraySum' nums\
    \ sum min)\n    (cond [(empty? nums) min]\n          [(< sum (first nums)) (minSubArraySum'\
    \ (rest nums) (first nums) (first nums))]\n          [else (minSubArraySum' (rest\
    \ nums) (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([cur-sum (apply + nums)]\n               \
    \   [new-min-sum (min min-sum cur-sum)])\n             (minSubArraySum-helper\
    \ (rest nums) new-min-sum))]))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum' nums start end sum)\n    (cond\n      [(= start end)\
    \ sum]\n      [else\n       (minSubArraySum' nums (+ start 1) end (+ sum (vector-ref\
    \ nums start)))]))\n  (minSubArraySum' nums 0 (vector-length nums) 0))\n", " \
    \ (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n\
    \    (cond [(empty? nums) min-so-far]\n          [else\n           (let ([sum\
    \ (apply + nums)])\n             (minSubArraySum-helper (rest nums) (min sum min-so-far)))]))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (let loop ([i 0] [j 0]\
    \ [min-sum (vector-ref nums 0)])\n    (cond [(= i (vector-length nums)) min-sum]\n\
    \          [(= j (vector-length nums)) (loop (+ i 1) (+ i 1) min-sum)]\n     \
    \     [else (let ([sum (vector-ref nums i)])\n                  (for ([k (+ i\
    \ 1)])\n                    (set! sum (+ sum (vector-ref nums k))))\n        \
    \          (if (< sum min-sum)\n                      (loop i (+ j 1) sum)\n \
    \                     (loop i (+ j 1) min-sum)))])))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter\
    \ (rest nums)\n                                     (min min-sum (add1 (sum nums)))\n\
    \                                     (add1 (sum nums)))]))\n  (minSubArraySum-iter\
    \ nums (sum nums) 0))\n", "  (define (minSubArraySum-iter nums min-sum curr-sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< curr-sum min-sum) (minSubArraySum-iter\
    \ (rest nums) curr-sum (add1 curr-sum))]\n      [else (minSubArraySum-iter (rest\
    \ nums) min-sum (add1 curr-sum))]))\n  (minSubArraySum-iter nums (first nums)\
    \ (add1 (first nums))))\n", "  (define (minSubArraySum' nums current-min)\n  \
    \  (cond\n      [(empty? nums) current-min]\n      [(< (first nums) current-min)\
    \ (minSubArraySum' (rest nums) (first nums))]\n      [else (minSubArraySum' (rest\
    \ nums) current-min)]))\n  (minSubArraySum' nums (first nums)))\n", "  (let loop\
    \ ([i 0] [j 0] [min (car nums)] [sum (car nums)])\n    (cond [(>= i (length nums))\
    \ min]\n          [(>= j (length nums)) (loop (+ i 1) (+ i 1) min sum)]\n    \
    \      [(>= sum min) (loop i (+ j 1) min sum)]\n          [else (loop i (+ j 1)\
    \ sum sum)])))\n", "  (define (minSubArraySum-iter nums sum min)\n    (cond\n\
    \      [(empty? nums) min]\n      [else\n       (minSubArraySum-iter (rest nums)\
    \ (+ sum (first nums))\n                            (min min sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums min-sum sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (let ([new-sum\
    \ (+ sum (first nums))])\n             (minSubArraySum-iter (rest nums)\n    \
    \                              (min min-sum new-sum)\n                       \
    \           (min new-sum 0)))]))\n  (minSubArraySum-iter nums (first nums) 0))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else (minSubArraySum-iter (rest nums)\n                          \
    \           (min min-sum\n                                          (apply + (take\
    \ nums (length nums)))))]))\n  (minSubArraySum-iter nums (apply + nums)))\n",
  "  (let loop ([i 0] [j 0] [sum 0] [min-sum (vector-ref nums 0)])\n    (cond [(=\
    \ i (vector-length nums)) min-sum]\n          [(>= sum 0)\n           (loop (+\
    \ i 1) i (+ sum (vector-ref nums i)) (min min-sum sum))]\n          [else\n  \
    \         (loop (+ j 1) j (+ sum (vector-ref nums j)) (min min-sum sum))])))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (if (null? nums)\n        min\n\
    \        (minSubArraySum-helper (cdr nums) (+ sum (car nums)) (min min sum))))\n\
    \  (minSubArraySum-helper nums 0 (car nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min-sum sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums i j sum)\n    (cond\n      [(= i j) sum]\n      [else\
    \ (minSubArraySum' nums i (+ j 1) (+ sum (vector-ref nums j)))]))\n  (define (minSubArraySum''\
    \ nums i j sum min)\n    (cond\n      [(= i j) min]\n      [else (minSubArraySum''\
    \ nums i (+ j 1) (+ sum (vector-ref nums j)) (min min (minSubArraySum' nums i\
    \ j sum)))]))\n  (minSubArraySum'' nums 0 0 0 (vector-ref nums 0)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n      \
    \    [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n         \
    \                              (min min sum))]))\n  (minSubArraySum-helper nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n              \
    \ [min-sum (if (&lt; sum min-sum) sum min-sum)])\n          (minSubArraySum' (cdr\
    \ nums) min-sum))))\n  (minSubArraySum' nums (apply + nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (if (null? nums)\n        min\n        (minSubArraySum' (cdr\
    \ nums) (+ sum (car nums)) (min min sum))))\n  (minSubArraySum' nums 0 (car nums)))\n",
  "  (define (go nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let*\
    \ ([n (car nums)]\n               [new-sum (+ min-sum n)])\n          (go (cdr\
    \ nums) (min new-sum new-sum)))))\n  (go nums 0))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min-sum sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums) min]\n        \
    \  [else (minSubArraySum-iter (rest nums) (+ sum (first nums)) (min sum min))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums start end)\n    (if (= start end)\n        (vector-ref nums start)\n  \
    \      (let* ([mid (/ (+ start end) 2)]\n               [left (minSubArraySum'\
    \ nums start mid)]\n               [right (minSubArraySum' nums (+ mid 1) end)])\n\
    \          (min left right))))\n  (minSubArraySum' nums 0 (- (vector-length nums)\
    \ 1)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (cond [(empty?\
    \ nums) min]\n          [else (minSubArraySum-helper (rest nums) (+ sum (first\
    \ nums))\n                                       (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums sum min)\n  \
    \  (cond [(empty? nums) min]\n          [else (minSubArraySum-iter (rest nums)\
    \ (+ sum (first nums))\n                                     (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [(< sum (first nums))\
    \ (minSubArraySum' (rest nums) (first nums) (first nums))]\n          [else (minSubArraySum'\
    \ (rest nums) (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum' nums sum min-sum)\n    (cond\n      [(empty? nums) min-sum]\n\
    \      [else\n       (let ([sum (+ sum (first nums))])\n         (minSubArraySum'\
    \ (rest nums) sum (min sum min-sum)))]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-so-far)\n    (if (empty? nums)\n    \
    \    min-so-far\n        (let ([curr-sum (apply + nums)])\n          (minSubArraySum-helper\
    \ (rest nums) (min min-so-far curr-sum)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n    (cond\n\
    \      [(empty? nums) min-sum]\n      [else\n       (define new-sum (+ sum (first\
    \ nums)))\n       (define new-min-sum (min min-sum new-sum))\n       (minSubArraySum-iter\
    \ (rest nums) new-sum new-min-sum)]))\n  (minSubArraySum-iter nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums) min]\n \
    \         [else (minSubArraySum-iter (rest nums) (+ sum (first nums))\n      \
    \                               (min min sum))]))\n  (minSubArraySum-iter nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum' nums curr-sum min-sum)\n  \
    \  (cond [(empty? nums) min-sum]\n          [else (minSubArraySum' (rest nums)\
    \ (+ curr-sum (first nums))\n                                 (min min-sum curr-sum))]))\n\
    \  (minSubArraySum' nums 0 (first nums)))\n", "  (define (go nums sum min)\n \
    \   (cond [(empty? nums) min]\n          [(< sum 0) (go (rest nums) (first nums)\
    \ (min (first nums) min))]\n          [else (go (rest nums) (+ sum (first nums))\
    \ (min sum min))]))\n  (go nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums i j min-sum)\n    (cond [(= i j) min-sum]\n          [else\n          \
    \ (define sum (+ (vector-ref nums i) (vector-ref nums j)))\n           (define\
    \ new-min-sum (min sum min-sum))\n           (minSubArraySum-helper nums (+ i\
    \ 1) j new-min-sum)]))\n  (minSubArraySum-helper nums 0 (- (vector-length nums)\
    \ 1) (vector-ref nums 0)))\n", "  (define (minSubArraySum-iter nums sum min)\n\
    \    (cond\n      [(empty? nums) min]\n      [else\n       (let ([new-sum (+ sum\
    \ (first nums))])\n         (minSubArraySum-iter (rest nums) new-sum (min new-sum\
    \ new-sum)))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (helper\
    \ nums min-sum cur-sum)\n    (cond [(empty? nums) min-sum]\n          [else (let\
    \ ([new-sum (+ cur-sum (first nums))])\n                  (helper (rest nums)\
    \ (min min-sum new-sum) (min new-sum 0)))]))\n  (helper nums (first nums) 0))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let ([sum (apply + nums)])\n             (minSubArraySum-helper\
    \ (rest nums) (min sum min-sum)))]))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([curr-sum (sum nums)]\n                  [new-min-sum\
    \ (min min-sum curr-sum)])\n             (minSubArraySum-helper (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum' nums\
    \ start end sum)\n    (cond\n      [(= start end) sum]\n      [else\n       (minSubArraySum'\
    \ nums (+ start 1) end (+ sum (vector-ref nums start)))]))\n  (minSubArraySum'\
    \ nums 0 (vector-length nums) 0))\n", "  (define (minSubArraySum' nums start end)\n\
    \    (if (= start end)\n        (vector-ref nums start)\n        (let ([mid (quotient\
    \ (+ start end) 2)])\n          (min (minSubArraySum' nums start mid)\n      \
    \         (minSubArraySum' nums (+ mid 1) end)\n               (minSubArraySum'\
    \ nums start end)))))\n  (minSubArraySum' nums 0 (- (vector-length nums) 1)))\n",
  "  (define (minSubArraySum' nums start end)\n    (cond\n      [(= start end) (vector-ref\
    \ nums start)]\n      [(= start (+ end 1)) (min (vector-ref nums start) (vector-ref\
    \ nums end))]\n      [else\n       (let* ([mid (quotient (+ start end) 2)]\n \
    \             [left (minSubArraySum' nums start mid)]\n              [right (minSubArraySum'\
    \ nums (+ mid 1) end)])\n         (min left right))]))\n  (minSubArraySum' nums\
    \ 0 (- (vector-length nums) 1)))\n", "  (define (minSubArraySum-iter nums sum\
    \ min)\n    (cond\n      [(null? nums) min]\n      [else\n       (let ([new-sum\
    \ (+ sum (car nums))])\n         (minSubArraySum-iter (cdr nums) new-sum (min\
    \ new-sum new-sum)))]))\n  (minSubArraySum-iter nums 0 (car nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [else\n           (let* ([curr-sum (apply + nums)]\n                \
    \  [new-min-sum (min min-sum curr-sum)])\n             (minSubArraySum-helper\
    \ (rest nums) new-min-sum))]))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond\n      [(empty? nums)\
    \ min]\n      [else\n       (minSubArraySum-helper (rest nums) (+ sum (first nums))\n\
    \                              (min min sum))]))\n  (minSubArraySum-helper nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum-helper nums start end min-sum)\n\
    \    (if (= start end)\n        min-sum\n        (let ([sum (apply + (sublist\
    \ nums start end))])\n          (minSubArraySum-helper nums (+ start 1) end (min\
    \ sum min-sum)))))\n  (minSubArraySum-helper nums 0 (length nums) (apply + nums)))\n",
  "  (define (minSubArraySum' nums sum min)\n    (if (null? nums)\n        min\n \
    \       (minSubArraySum' (cdr nums) (+ sum (car nums)) (min min sum))))\n  (minSubArraySum'\
    \ nums 0 (car nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [else\n           (let* ([cur-sum (apply\
    \ + nums)]\n                  [new-min-sum (min min-sum cur-sum)])\n         \
    \    (minSubArraySum-iter (rest nums) new-min-sum))]))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-iter nums i sum min-sum)\n\
    \    (if (= i (length nums))\n        min-sum\n        (let ([new-sum (+ sum (vector-ref\
    \ nums i))])\n          (minSubArraySum-iter nums (+ i 1) new-sum (min new-sum\
    \ new-sum)))))\n  (minSubArraySum-iter nums 0 0 (vector-ref nums 0)))\n", "  (let\
    \ loop ([nums nums] [min-sum (first nums)])\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (min min-sum\
    \ sum)])\n          (loop (cdr nums) new-min-sum)))))\n", "  (let ([min (apply\
    \ min nums)])\n    (for/fold ([sum min]) ([n nums])\n      (min sum (+ n (sum\
    \ -1))))))\n", "  (define (minSubArraySum-helper nums start end)\n    (cond [(=\
    \ start end) 0]\n          [(= start (+ end 1)) (vector-ref nums start)]\n   \
    \       [else\n           (let ([mid (quotient (+ start end) 2)])\n          \
    \   (min (minSubArraySum-helper nums start mid)\n                  (minSubArraySum-helper\
    \ nums (+ mid 1) end)))]))\n  (minSubArraySum-helper nums 0 (- (vector-length\
    \ nums) 1)))\n", "  (define (minSubArraySum' nums sum min)\n    (cond [(empty?\
    \ nums) min]\n          [(< sum (first nums)) (minSubArraySum' (rest nums) (first\
    \ nums) (first nums))]\n          [else (minSubArraySum' (rest nums) (+ sum (first\
    \ nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n    \
    \       (define new-sum (+ sum (first nums)))\n           (define new-min-sum\
    \ (min min-sum new-sum))\n           (minSubArraySum-iter (rest nums) new-sum\
    \ new-min-sum)]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums i j)\n    (cond [(= i j) (list (list (list (list\
    \ nums i j)) 0))]\n          [else (let* ([sub-array (list-ref nums i)]\n    \
    \                   [sub-array-sum (apply + sub-array)]\n                    \
    \   [sub-array-min (apply min sub-array)]\n                       [sub-array-max\
    \ (apply max sub-array)]\n                       [sub-array-min-sum (+ sub-array-min\
    \ sub-array-sum)]\n                       [sub-array-max-sum (+ sub-array-max\
    \ sub-array-sum)]\n                       [sub-array-min-sum-list (list (list\
    \ sub-array i j) sub-array-min-sum)]\n                       [sub-array-max-sum-list\
    \ (list (list sub-array i j) sub-array-max-sum)]\n                       [sub-array-min-sum-list-list\
    \ (list sub-array-min-sum-list)]\n                       [sub-array-max-sum-list-list\
    \ (list sub-array-max-sum-list)]\n                       [sub-array-min-sum-list-list-list\
    \ (list sub-array-min-sum-list-list)]\n                       [sub-array-max-sum-list-list-list\
    \ (list sub-array-max-sum-list-list)]\n                       [sub-array-min-sum-list-list-list-list\
    \ (list sub-array-min-sum-list-list-list)]\n                       [sub-array-max-sum-list-list-list-list\
    \ (list sub-array-max-sum-list-list-list)]\n                       [sub-array-min-sum-list-list-list-list-list\
    \ (list sub-array-min-sum-list-list-list-list)]\n                       [sub-array-max-sum-list-list-list-list-list\
    \ (list sub-array-max-sum-list-list-list-list)]\n                       [sub-array-min-sum-list-list-list-list-list-list\
    \ (list sub-array-min-sum-list-list-list-list-list)]\n                       [sub",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (let loop ([i 0] [j 0] [sum 0] [min-sum (vector-ref\
    \ nums 0)])\n    (if (= i (vector-length nums))\n        min-sum\n        (let\
    \ ([sum (+ sum (vector-ref nums i))])\n          (if (&lt; sum 0)\n          \
    \    (loop (+ i 1) (+ i 1) 0 min-sum)\n              (loop (+ i 1) j sum (min\
    \ min-sum sum)))))))\n", "  (define (minSubArraySum' nums start end)\n    (if\
    \ (= start end)\n        (vector-ref nums start)\n        (let* ([mid (/ (+ start\
    \ end) 2)]\n               [left (minSubArraySum' nums start mid)]\n         \
    \      [right (minSubArraySum' nums (+ mid 1) end)])\n          (min left right))))\n\
    \  (minSubArraySum' nums 0 (- (vector-length nums) 1)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n\
    \          [(< (first nums) min-so-far) (minSubArraySum-iter (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-iter (rest nums) min-so-far)]))\n \
    \ (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (if (null? nums)\n        min\n        (minSubArraySum' (cdr\
    \ nums) (+ sum (car nums)) (min sum min))))\n  (minSubArraySum' nums 0 (car nums)))\n",
  "  (define (minSubArraySum-helper nums i j sum min)\n    (cond\n      [(= i j) min]\n\
    \      [else\n       (let ([sum (+ sum (vector-ref nums j))])\n         (minSubArraySum-helper\
    \ nums i (+ j 1) sum (min sum min)))]))\n  (minSubArraySum-helper nums 0 1 0 (vector-ref\
    \ nums 0)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n    (cond [(empty?\
    \ nums) min-sum]\n          [else\n           (define new-sum (+ sum (first nums)))\n\
    \           (define new-min-sum (min new-sum min-sum))\n           (minSubArraySum-iter\
    \ (rest nums) new-sum new-min-sum)]))\n  (minSubArraySum-iter nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums sum min-sum)\n    (cond\n      [(empty? nums)\
    \ min-sum]\n      [else\n       (define new-sum (+ sum (first nums)))\n      \
    \ (minSubArraySum-iter (rest nums) new-sum (min new-sum new-sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (cond\
    \ [(empty? nums) min]\n          [(< sum (first nums)) (minSubArraySum' (rest\
    \ nums) (first nums) (first nums))]\n          [else (minSubArraySum' (rest nums)\
    \ (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n", " \
    \ (define (minSubArraySum' nums left right sum)\n    (cond\n      [(= left right)\
    \ sum]\n      [else\n       (minSubArraySum' nums (+ left 1) right (+ sum (vector-ref\
    \ nums left)))]))\n  (minSubArraySum' nums 0 (vector-length nums) 0))\n", "  (define\
    \ (minSubArraySum' nums i sum min)\n    (if (= i (length nums))\n        min\n\
    \        (minSubArraySum' nums (+ i 1) (+ sum (vector-ref nums i))\n         \
    \                (min min sum))))\n  (minSubArraySum' nums 0 0 (vector-ref nums\
    \ 0)))\n", "  (define (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums)\
    \ min]\n          [else (let ([new-sum (+ sum (first nums))])\n              \
    \    (minSubArraySum-iter (rest nums)\n                                      \
    \ new-sum\n                                       (min min (if (&lt; new-sum 0)\
    \ new-sum 0))))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums min-sum)\n    (cond [(empty? nums) min-sum]\n        \
    \  [else\n           (let ([sum (apply + nums)])\n             (minSubArraySum'\
    \ (rest nums) (min sum min-sum)))]))\n  (minSubArraySum' nums (apply + nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(null? nums) min-sum]\n\
    \          [(< (car nums) min-sum) (minSubArraySum-iter (cdr nums) (car nums))]\n\
    \          [else (minSubArraySum-iter (cdr nums) min-sum)]))\n  (minSubArraySum-iter\
    \ nums (car nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n  \
    \  (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter (rest nums)\
    \ (+ sum (first nums))\n                                     (min min-sum sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let* ([n (car\
    \ nums)]\n               [min-sum (if (< n min-sum) n min-sum)])\n          (minSubArraySum'\
    \ (cdr nums) min-sum))))\n  (minSubArraySum' nums (car nums)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min-sum)\n    (cond\n      [(null? nums) min-sum]\n\
    \      [else\n       (let ([new-sum (+ sum (car nums))])\n         (minSubArraySum-helper\
    \ (cdr nums) new-sum (min min-sum new-sum)))]))\n  (minSubArraySum-helper nums\
    \ 0 (car nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (if (null?\
    \ nums)\n        min\n        (minSubArraySum' (cdr nums) (+ sum (car nums)) (min\
    \ min sum))))\n  (minSubArraySum' nums 0 (car nums)))\n", "  (define (minSubArraySum-iter\
    \ nums acc)\n    (cond [(empty? nums) acc]\n          [else (minSubArraySum-iter\
    \ (rest nums) (min acc (apply + nums)))]))\n  (minSubArraySum-iter nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if (null? nums)\n\
    \        min-sum\n        (let ([sum (apply + nums)])\n          (minSubArraySum'\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum' nums (apply + nums)))\n",
  "  (define (minSubArraySum' nums sum min)\n    (cond\n      [(empty? nums) min]\n\
    \      [else\n       (minSubArraySum' (rest nums) (+ sum (first nums))\n     \
    \                   (if (< sum min) sum min))]))\n  (minSubArraySum' nums 0 (first\
    \ nums)))\n", "  (let ([minSum (apply + nums)])\n    (for ([i (in-range (length\
    \ nums))])\n      (let ([sum 0])\n        (for ([j (in-range i (add1 (length nums)))])\n\
    \          (set! sum (add sum (vector-ref nums j)))\n          (when (< sum minSum)\n\
    \            (set! minSum sum)))\n        (when (= minSum 0)\n          (return\
    \ minSum))))\n    minSum))\n", "  (define (minSubArraySum' nums i j sum min-sum)\n\
    \    (cond [(= i j) min-sum]\n          [(>= sum 0) (minSubArraySum' nums (+ i\
    \ 1) j (+ sum (vector-ref nums i)) (min sum min-sum))]\n          [else (minSubArraySum'\
    \ nums (+ i 1) j (vector-ref nums i) (min (vector-ref nums i) min-sum))]))\n \
    \ (minSubArraySum' nums 0 (vector-length nums) 0 (vector-ref nums 0)))\n", " \
    \ (define (minSubArraySum' nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([n (first nums)]\n                  [min-sum\
    \ (if (< n min-sum) n min-sum)]\n                  [min-sum (if (< (+ n (first\
    \ (rest nums))) min-sum) (+ n (first (rest nums))) min-sum)])\n             (minSubArraySum'\
    \ (rest nums) min-sum))]))\n  (minSubArraySum' nums (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (cond\n      [(empty? nums) min]\n \
    \     [else\n       (minSubArraySum-iter (rest nums) (+ sum (first nums))\n  \
    \                          (min min sum))]))\n  (minSubArraySum-iter nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (if (null? nums)\n\
    \        min\n        (minSubArraySum' (cdr nums) (+ sum (car nums)) (min min\
    \ sum))))\n  (minSubArraySum' nums 0 (car nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min-sum)\n    (cond\n      [(empty? nums) min-sum]\n\
    \      [else\n       (let ([new-sum (+ sum (first nums))])\n         (minSubArraySum-helper\
    \ (rest nums) new-sum (min min-sum new-sum)))]))\n  (minSubArraySum-helper nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (cond\n\
    \      [(empty? nums) min]\n      [else\n       (let ([new-sum (+ sum (first nums))])\n\
    \         (minSubArraySum-helper (rest nums) new-sum (min new-sum new-sum)))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums start end)\n    (if (= start end)\n        (vector (vector start end) (vector\
    \ (vector-ref nums start) 0))\n        (let* ([mid (quotient (+ start end) 2)]\n\
    \               [left (minSubArraySum-helper nums start mid)]\n              \
    \ [right (minSubArraySum-helper nums (+ mid 1) end)]\n               [cross (minSubArraySum-cross\
    \ nums start mid end)])\n          (minSubArraySum-min left right cross))))\n\
    \  (let* ([n (vector-length nums)]\n         [result (minSubArraySum-helper nums\
    \ 0 (- n 1))])\n    (vector-ref (vector-ref result 0) 2)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [(< sum (first nums))\
    \ (minSubArraySum' (rest nums) (first nums) (first nums))]\n          [else (minSubArraySum'\
    \ (rest nums) (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums sum min)\n  \
    \  (cond [(empty? nums) min]\n          [else (minSubArraySum-iter (rest nums)\
    \ (+ sum (first nums))\n                                     (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums acc)\n    (cond [(empty? nums) acc]\n          [(< (first nums) acc) (minSubArraySum-iter\
    \ (rest nums) (first nums))]\n          [else (minSubArraySum-iter (rest nums)\
    \ acc)]))\n  (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums start end)\n    (if (= start end)\n        (vector 0 start end)\n     \
    \   (let* ([mid (quotient (+ start end) 2)]\n               [left (minSubArraySum-helper\
    \ nums start mid)]\n               [right (minSubArraySum-helper nums (+ mid 1)\
    \ end)]\n               [cross (minSubArraySum-cross nums start mid end)])\n \
    \         (if (< (vector-ref left 0) (vector-ref right 0))\n              (if\
    \ (< (vector-ref left 0) (vector-ref cross 0))\n                  left\n     \
    \             cross)\n              (if (< (vector-ref right 0) (vector-ref cross\
    \ 0))\n                  right\n                  cross)))))\n  (vector-ref (minSubArraySum-helper\
    \ nums 0 (- (vector-length nums) 1)) 0))\n", "  (define (minSubArraySum' nums\
    \ sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (define\
    \ new-sum (+ sum (first nums)))\n       (define new-min (min min new-sum))\n \
    \      (minSubArraySum' (rest nums) new-sum new-min)]))\n  (minSubArraySum' nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum-helper nums i j sum)\n    (cond\
    \ [(= i j) sum]\n          [else (minSubArraySum-helper nums i (+ j 1) (+ sum\
    \ (vector-ref nums j)))]))\n  (define (minSubArraySum-helper2 nums i j sum min)\n\
    \    (cond [(= i j) min]\n          [else (minSubArraySum-helper2 nums i (+ j\
    \ 1) (+ sum (vector-ref nums j)) (min min (minSubArraySum-helper nums i j sum)))]))\n\
    \  (minSubArraySum-helper2 nums 0 (vector-length nums) 0 (vector-ref nums 0)))\n",
  "  (let loop ([nums nums] [min-sum (car nums)])\n    (if (empty? nums)\n       \
    \ min-sum\n        (loop (cdr nums)\n              (min min-sum\n            \
    \       (apply + (take (length nums) nums)))))))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n    \
    \       (define new-sum (+ sum (first nums)))\n           (define new-min-sum\
    \ (min min-sum new-sum))\n           (minSubArraySum-iter (rest nums) new-sum\
    \ new-min-sum)]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (define new-sum (+ sum (first nums)))\n         \
    \  (define new-min-sum (min min-sum new-sum))\n           (minSubArraySum-helper\
    \ (rest nums) new-sum new-min-sum)]))\n  (minSubArraySum-helper nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (cond [(empty? nums)\
    \ min-sum]\n          [else\n           (let* ([n (first nums)]\n            \
    \      [min-sum (if (&lt; n min-sum) n min-sum)]\n                  [min-sum (if\
    \ (&lt; (+ n (first (rest nums))) min-sum) (+ n (first (rest nums))) min-sum)])\n\
    \             (minSubArraySum' (rest nums) min-sum))]))\n  (minSubArraySum' nums\
    \ (first nums)))\n", "  (define (minSubArraySum-iter nums sum min)\n    (cond\
    \ [(empty? nums) min]\n          [else (minSubArraySum-iter (rest nums) (+ sum\
    \ (first nums))\n                                     (min min sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (if (< sum min-sum)\n              (minSubArraySum' (cdr nums) sum)\n    \
    \          (minSubArraySum' (cdr nums) min-sum)))))\n  (minSubArraySum' nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum' nums sum min)\n    (if (null? nums)\n\
    \        min\n        (minSubArraySum' (cdr nums) (+ sum (car nums)) (min min\
    \ sum))))\n  (minSubArraySum' nums 0 (car nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [else\n \
    \      (let ([new-sum (+ sum (first nums))])\n         (minSubArraySum-helper\
    \ (rest nums) new-sum (min min-sum new-sum)))]))\n  (minSubArraySum-helper nums\
    \ 0 (first nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n   \
    \ (cond [(empty? nums) min-sum]\n          [else\n           (define new-sum (+\
    \ sum (first nums)))\n           (define new-min-sum (min min-sum new-sum))\n\
    \           (minSubArraySum-iter (rest nums) new-sum new-min-sum)]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums sum min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (let ([new-sum\
    \ (+ sum (first nums))])\n             (minSubArraySum-helper (rest nums) new-sum\
    \ (min min-sum new-sum)))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n",
  "  (let ([minSum (first nums)])\n    (for ([i (in-range (add1 (length nums)))]\n\
    \          [sum 0])\n      (set! sum (add sum (vector-ref nums i)))\n      (when\
    \ (< sum minSum)\n        (set! minSum sum)))\n    minSum))\n", "  (define (minSubArraySum'\
    \ nums start end)\n    (if (= start end)\n        (vector-ref nums start)\n  \
    \      (let ([sum (vector-ref nums start)])\n          (for ([i (in-range (+ start\
    \ 1) end)])\n            (set! sum (+ sum (vector-ref nums i)))\n            (if\
    \ (&lt; sum (vector-ref nums i))\n                (set! sum (vector-ref nums i))))\n\
    \          sum)))\n  (let ([min (minSubArraySum' nums 0 (vector-length nums))])\n\
    \    (for ([i (in-range 1 (vector-length nums))])\n      (let ([sum (minSubArraySum'\
    \ nums i (vector-length nums))])\n        (if (&lt; sum min)\n            (set!\
    \ min sum))))\n    min))\n", "  (let loop ([i 0] [min-sum (vector-ref nums 0)])\n\
    \    (if (= i (vector-length nums))\n        min-sum\n        (let ([sum (vector-ref\
    \ nums i)])\n          (for ([j (in-range i (+ i 1))])\n            (set! sum\
    \ (+ sum (vector-ref nums j))))\n          (if (< sum min-sum)\n             \
    \ (set! min-sum sum))\n          (loop (+ i 1) min-sum)))))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                            (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [else\n       (let\
    \ ([new-sum (+ sum (first nums))])\n         (minSubArraySum-iter (rest nums)\
    \ new-sum (min min new-sum)))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([n (first nums)]\n                  [new-min-sum\
    \ (min n (+ n min-sum))])\n             (minSubArraySum-iter (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-iter nums 0))\n", "  (define (minSubArraySum-iter nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (define sum (apply\
    \ + nums))\n           (minSubArraySum-iter (rest nums) (min sum min-sum))]))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (cond\n      [(empty? nums) min]\n \
    \     [else\n       (minSubArraySum-iter (rest nums) (+ sum (first nums))\n  \
    \                          (min min sum))]))\n  (minSubArraySum-iter nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum-helper nums start end)\n    (cond\n \
    \     [(= start end) (vector-ref nums start)]\n      [(= start (+ end 1)) (min\
    \ (vector-ref nums start) (vector-ref nums end))]\n      [else\n       (let* ([mid\
    \ (quotient (+ start end) 2)]\n              [left-sum (minSubArraySum-helper\
    \ nums start mid)]\n              [right-sum (minSubArraySum-helper nums (+ mid\
    \ 1) end)]\n              [cross-sum (minCrossingSum nums start mid end)])\n \
    \        (min left-sum (min right-sum cross-sum)))]))\n  (minSubArraySum-helper\
    \ nums 0 (- (vector-length nums) 1)))\n", "  (define (minSubArraySum-helper nums\
    \ min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n           (let*\
    \ ([sum (apply + nums)]\n                  [new-min-sum (min min-sum sum)])\n\
    \             (minSubArraySum-helper (rest nums) new-min-sum))]))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-iter nums sum min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (let ([sum (+\
    \ sum (first nums))])\n             (minSubArraySum-iter (rest nums) sum (min\
    \ sum min-sum)))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else\n           (let* ([n (first nums)]\n                  [new-sum\
    \ (+ sum n)]\n                  [new-min-sum (min min-sum new-sum)])\n       \
    \      (minSubArraySum-iter (rest nums) new-sum new-min-sum))]))\n  (minSubArraySum-iter\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum' nums start end)\n    (if\
    \ (= start end)\n        (vector-ref nums start)\n        (let* ([mid (quotient\
    \ (+ start end) 2)]\n               [left (minSubArraySum' nums start mid)]\n\
    \               [right (minSubArraySum' nums (+ mid 1) end)])\n          (min\
    \ left right))))\n  (minSubArraySum' nums 0 (- (vector-length nums) 1)))\n", " \
    \ (define (minSubArraySum-helper nums sum min)\n    (cond [(empty? nums) min]\n\
    \          [else (minSubArraySum-helper (rest nums) (+ sum (first nums))\n   \
    \                                    (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums sum min)\n  \
    \  (cond\n      [(empty? nums) min]\n      [else\n       (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                            (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [(< sum (first nums))\
    \ (minSubArraySum' (rest nums) (first nums) (first nums))]\n          [else (minSubArraySum'\
    \ (rest nums) (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums sum min)\n    (cond [(null? nums) min]\n  \
    \        [else (minSubArraySum-iter (cdr nums)\n                             \
    \        (+ sum (car nums))\n                                     (min min sum))]))\n\
    \  (minSubArraySum-iter nums 0 (car nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n    \
    \       (define new-sum (+ sum (first nums)))\n           (define new-min-sum\
    \ (min new-sum min-sum))\n           (minSubArraySum-iter (rest nums) new-sum\
    \ new-min-sum)]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (cond [(empty? nums) min]\n        \
    \  [else (minSubArraySum-iter (rest nums) (+ sum (first nums)) (min sum min))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum'\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [(< sum (first nums))\
    \ (minSubArraySum' (rest nums) (first nums) (first nums))]\n          [else (minSubArraySum'\
    \ (rest nums) (+ sum (first nums)) min)]))\n  (minSubArraySum' nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [else (let* ([sum (apply + nums)]\n                       [new-min-sum\
    \ (min min-sum sum)])\n                  (minSubArraySum-iter (rest nums) new-min-sum))]))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n    \
    \       (let* ([num (first nums)]\n                  [new-sum (+ sum num)]\n \
    \                 [new-min-sum (min min-sum new-sum)])\n             (minSubArraySum-iter\
    \ (rest nums) new-sum new-min-sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (min min-sum\
    \ sum)])\n          (minSubArraySum-iter (cdr nums) new-min-sum))))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-iter nums sum min)\n  \
    \  (cond [(empty? nums) min]\n          [else (minSubArraySum-iter (rest nums)\
    \ (+ sum (first nums)) (min sum min))]))\n  (minSubArraySum-iter nums 0 (first\
    \ nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (cond\n   \
    \   [(empty? nums) min]\n      [else\n       (let ([new-sum (+ sum (first nums))])\n\
    \         (minSubArraySum-helper (rest nums) new-sum (min new-sum (abs new-sum))))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min-sum sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (let loop\
    \ ([nums nums] [min-sum (first nums)])\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (&lt; sum min-sum)\n     \
    \         (loop (rest nums) sum)\n              (loop (rest nums) min-sum))))))\n",
  "  (define (minSubArraySum-iter nums min-sum curr-sum)\n    (cond [(empty? nums)\
    \ min-sum]\n          [else\n           (define curr-num (first nums))\n     \
    \      (define new-sum (+ curr-sum curr-num))\n           (define new-min-sum\
    \ (min min-sum new-sum))\n           (minSubArraySum-iter (rest nums) new-min-sum\
    \ new-sum)]))\n  (minSubArraySum-iter nums (first nums) 0))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n        \
    \   (let* ([n (first nums)]\n                  [rest (rest nums)]\n          \
    \        [min-sum (min min-sum n)])\n             (minSubArraySum-iter rest min-sum))]))\n\
    \  (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond [(empty? nums) min]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums start end)\n    (cond [(= start end) 0]\n          [(=\
    \ start (+ end 1)) (vector-ref nums start)]\n          [else (min (vector-ref\
    \ nums start)\n                     (minSubArraySum' nums (+ start 1) end))]))\n\
    \  (minSubArraySum' nums 0 (vector-length nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
