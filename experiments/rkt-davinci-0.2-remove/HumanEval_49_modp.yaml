name: HumanEval_49_modp
language: rkt
prompt: "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n(define (modp\
  \ n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n   \
    \   [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (-\
    \ n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient n 2)\
    \ p (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo\
    \ (* acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n        \
    \  [(even? n) (loop (quotient n 2) p (modulo (* r r) p))]\n          [else (loop\
    \ (sub1 n) p (modulo (* r n) p))])))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", " \
    \ (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(= (remainder\
    \ n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter (-\
    \ n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even?\
    \ n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1)\
    \ p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (if (= n 0)\n        acc\n        (modp-iter (- n 1) p (* 2 acc))))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (quotient n 2) p\n                   (if (odd? n)\n       \
    \                (modulo (* acc 2) p)\n                       (modulo (* acc acc)\
    \ p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (*\
    \ acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo (* acc acc) p))]))\n\
    \  (modp-iter n p 2))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else\
    \ (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (sub1 n) p (modulo\
    \ (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (if (= n 0)\n        acc\n        (modp-iter (- n 1) p (* acc 2 acc))))\n\
    \  (modp-iter n p 2))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero?\
    \ n) acc]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n\
    \      [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (if (zero? n)\n        acc\n\
    \        (modp-iter (quotient n 2) p\n                   (if (odd? n)\n      \
    \                 (modulo (* acc 2) p)\n                       (modulo (* acc\
    \ acc) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc)\
    \ p))]\n      [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (iter n r)\n    (cond\n      [(zero? n) r]\n      [(even?\
    \ n) (iter (quotient n 2) (modulo (* r r) p))]\n      [else (iter (sub1 n) (modulo\
    \ (* r 2) p))]))\n  (iter n 1))\n", "  (define (iter n acc)\n    (cond\n     \
    \ [(= n 0) acc]\n      [(even? n) (iter (/ n 2) (* acc acc) % p)]\n      [else\
    \ (iter (- n 1) (* acc 2) % p)]))\n  (iter n 1))\n", "  (define (modp-iter n p\
    \ r)\n    (cond [(= n 0) r]\n          [(even? n) (modp-iter (/ n 2) p (* r r\
    \ p))]\n          [else (modp-iter (- n 1) p (* r 2 p))]))\n  (modp-iter n p 1))\n",
  "  (define (modp-iter n p r)\n    (cond\n      [(zero? n) r]\n      [(even? n) (modp-iter\
    \ (quotient n 2) p (modulo (* r r) p))]\n      [else (modp-iter (quotient n 2)\
    \ p (modulo (* r r) p))]))\n  (modp-iter n p 2))\n", "  (define (modp-iter n p\
    \ acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo\
    \ (* acc acc) p))]))\n  (modp-iter n p 2))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (iter n p acc)\n    (if (= n 0)\n        acc\n        (iter\
    \ (- n 1) p (* 2 acc) p)))\n  (modulo (iter n p 1) p))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2)\
    \ p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (- n 1) p (* 2 acc))))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (iter n p)\n    (cond [(= n 0) 1]\n     \
    \     [(= (remainder n 2) 0)\n           (let ([n (quotient n 2)])\n         \
    \    (let ([x (iter n p)])\n               (remainder (* x x) p)))]\n        \
    \  [else\n           (let ([n (quotient n 2)])\n             (let ([x (iter n\
    \ p)])\n               (remainder (* x x 2) p)))]))\n  (iter n p))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (let loop ([n n] [p p]\
    \ [r 1])\n    (if (zero? n)\n        r\n        (loop (quotient n 2) p\n     \
    \         (if (odd? n)\n                  (modulo (* r r) p)\n               \
    \   (modulo (* r r 2) p))))))\n", "  (define (modp-iter n p a)\n    (if (zero?\
    \ n)\n        a\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* a a) p)\n                       (modulo\
    \ (* a a 2) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n   \
    \   [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (-\
    \ n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (iter (/ n 2) p (* acc acc) p)]\n\
    \          [else (iter (- n 1) p (* acc 2) p)]))\n  (iter n p 1 p))\n", "  (define\
    \ (modp-iter n p a)\n    (cond\n      [(= n 0) a]\n      [(even? n) (modp-iter\
    \ (/ n 2) p (* a a p))]\n      [else (modp-iter (- n 1) p (* a 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (quotient n 2) p\
    \ (modulo (* acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (iter n\
    \ p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (iter (/ n 2) p (modulo\
    \ (* acc acc) p))]\n      [else (iter (- n 1) p (modulo (* acc 2) p))]))\n  (iter\
    \ n p 1))\n", "  (let loop ([n n] [p p] [acc 1])\n    (cond [(zero? n) acc]\n\
    \          [(even? n) (loop (quotient n 2) p (modulo (* acc acc) p))]\n      \
    \    [else (loop (sub1 n) p (modulo (* acc p) p))])))\n", "  (let loop ([n n]\
    \ [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n) (loop (quotient\
    \ n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n) p (modulo (* r n)\
    \ p))])))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n          [else\
    \ (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p r)\n    (if (= n 0)\n    \
    \    r\n        (modp-iter (- n 1) p (* 2 r))))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= (remainder n\
    \ 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p\
    \ (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n \
    \   (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient n 2) p\
    \ (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo (*\
    \ acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n        \
    \  [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n         \
    \ [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (= n 0)\n      1\n      (let ([n2 (modulo (* 2 (modp (- n\
    \ 1) p)) p)])\n        (if (= n2 0)\n            p\n            n2))))\n", " \
    \ (define (modp-iter n p r)\n    (cond\n      [(= n 0) r]\n      [(= (remainder\
    \ n 2) 0) (modp-iter (/ n 2) p (* r r p))]\n      [else (modp-iter (- n 1) p (*\
    \ r 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\
    \ [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n \
    \         [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (let loop ([n n] [acc 1])\n    (if (zero? n)\n        acc\n        (loop (quotient\
    \ n 2)\n              (if (odd? n)\n                  (modulo (* acc 2) p)\n \
    \                 (modulo (* acc acc) p))))))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(= (remainder n 2) 0) (modp-iter (/ n 2)\
    \ p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (let loop ([n n] [p p] [r 1])\n    (if (zero? n)\n        r\n\
    \        (loop (quotient n 2) p\n              (if (odd? n)\n                \
    \  (modulo (* r r) p)\n                  (modulo (* r r 2) p))))))\n", "  (let\
    \ loop ([n n] [p p] [r 1])\n    (cond\n      [(zero? n) r]\n      [(even? n) (loop\
    \ (quotient n 2) p (modulo (* r r) p))]\n      [else (loop (sub1 n) p (modulo\
    \ (* r 2) p))])))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n      \
    \  acc\n        (modp-iter (- n 1) p (* acc 2 p))))\n  (modp-iter n p 1))\n",
  "  (define (iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (iter (/\
    \ n 2) p (modulo (* acc acc) p))]\n          [else (iter (- n 1) p (modulo (*\
    \ acc 2) p))]))\n  (iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (*\
    \ acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo (* acc acc acc)\
    \ p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p r)\n    (if (zero?\
    \ n)\n        r\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* r r) p)\n                       (modulo\
    \ (* r 2) p)))))\n  (modp-iter n p 1))\n", "  (define (mul a b)\n    (let ([r\
    \ (modulo (* a b) p)])\n      (if (negative? r)\n          (+ r p)\n         \
    \ r)))\n  (define (exp a n)\n    (if (zero? n)\n        1\n        (if (even?\
    \ n)\n            (exp (mul a a) (quotient n 2))\n            (mul a (exp a (sub1\
    \ n))))))\n  (exp 2 n))\n", "  (define (modp-iter n p result)\n    (cond [(zero?\
    \ n) result]\n          [(even? n) (modp-iter (quotient n 2) p (modulo (* result\
    \ result) p))]\n          [else (modp-iter (sub1 n) p (modulo (* result 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n  \
    \      acc\n        (modp-iter (quotient n 2) p\n                   (if (even?\
    \ n)\n                       acc\n                       (modulo (* acc 2) p)))))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (zero? n)\n\
    \        acc\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* acc 2) p)\n                       (modulo\
    \ (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (let loop ([n n] [p p] [r 1])\n\
    \    (cond [(zero? n) r]\n          [(even? n) (loop (quotient n 2) p (modulo\
    \ (* r r) p))]\n          [else (loop (sub1 n) p (modulo (* r 2) p))])))\n", " \
    \ (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo\
    \ (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p a)\n  \
    \  (cond [(= n 0) a]\n          [(even? n) (modp-iter (/ n 2) p (* a a p))]\n\
    \          [else (modp-iter (- n 1) p (* a 2 a p))]))\n  (modp-iter n p 1))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc\
    \ 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\
    \ [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n \
    \         [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (modulo (expt 2 n) p))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0)\
    \ acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else\
    \ (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter\
    \ n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (iter (/ n 2) p (* acc\
    \ acc p))]\n          [else (iter (- n 1) p (* acc 2 p))]))\n  (iter n p 1))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (*\
    \ 2 acc)]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n      [else (modp-iter\
    \ (- n 1) p (* 2 acc))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p\
    \ acc)\n    (if (= n 0)\n        acc\n        (modp-iter (- n 1) p (* acc 2 acc))))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p result)\n    (if (= n 0)\n\
    \        result\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* result 2) p)\n                       (modulo\
    \ result p)))))\n  (modp-iter n p 1))\n", "  (let loop ([n n] [p p] [r 1])\n \
    \   (cond [(zero? n) r]\n          [(even? n) (loop (quotient n 2) p (modulo (*\
    \ r r) p))]\n          [else (loop (sub1 n) p (modulo (* r 2) p))])))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n  \
    \      acc\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* acc 2) p)\n                       (modulo\
    \ (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (if (= n 0)\n        acc\n        (modp-iter (- n 1) p (* 2 acc))))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(= n 1) (modulo (* 2 acc) p)]\n      [(even? n) (modp-iter (/ n 2) p (modulo\
    \ (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* 2 acc) p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else\
    \ (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (let loop\
    \ ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n) (loop (quotient\
    \ n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n) p (modulo (* r 2)\
    \ p))])))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero? n) acc]\n\
    \      [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n     \
    \ [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter n p r)\n\
    \    (if (zero? n)\n        r\n        (iter (quotient n 2) p\n              (if\
    \ (odd? n)\n                  (modulo (* r r) p)\n                  (modulo (*\
    \ r r 2) p)))))\n  (iter n p 2))\n", "  (let loop ([n n] [p p] [r 1])\n    (if\
    \ (zero? n)\n        r\n        (loop (quotient n 2) p\n              (if (odd?\
    \ n)\n                  (modulo (* r r 2) p)\n                  (modulo (* r r)\
    \ p))))))\n", "  (let loop ([n n] [p p] [r 1])\n    (cond\n      [(zero? n) r]\n\
    \      [(even? n) (loop (quotient n 2) p (modulo (* r r) p))]\n      [else (loop\
    \ (sub1 n) p (modulo (* r 2) p))])))\n", "  (define (modp-iter n p acc)\n    (cond\
    \ [(zero? n) acc]\n          [(even? n) (modp-iter (quotient n 2) p (modulo (*\
    \ acc acc) p))]\n          [else (modp-iter (sub1 n) p (modulo (* acc 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (iter n p r)\n    (cond [(= n 0) r]\n   \
    \       [(even? n) (iter (/ n 2) p (* r r p))]\n          [else (iter (- n 1)\
    \ p (* r 2 p))]))\n  (iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if\
    \ (= n 0)\n        acc\n        (modp-iter (- n 1) p (* 2 acc))))\n  (modp-iter\
    \ n p 1))\n", "  (define (iter n acc)\n    (cond [(= n 0) acc]\n          [else\
    \ (iter (- n 1) (* 2 acc))]))\n  (modulo (iter n 1) p))\n", "  (define (modp-iter\
    \ n p acc)\n    (if (= n 0)\n        acc\n        (modp-iter (- n 1) p (* 2 acc))))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero?\
    \ n) acc]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n\
    \      [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (iter n p r)\n    (cond\n      [(= n 0) r]\n      [(even?\
    \ n) (iter (/ n 2) p (* r r p))]\n      [else (iter (- n 1) p (* r 2 p))]))\n\
    \  (iter n p 1))\n", "  (define (iter n p acc)\n    (if (= n 0)\n        acc\n\
    \        (iter (- n 1) p (* 2 acc p))))\n  (iter n p 1))\n", "  (define (modp-iter\
    \ n p a)\n    (cond\n      [(zero? n) a]\n      [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* a a) p))]\n      [else (modp-iter (sub1 n) p (modulo (* a\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p a)\n    (cond\n\
    \      [(zero? n) a]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (*\
    \ a a) p))]\n      [else (modp-iter (sub1 n) p (modulo (* a 2) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (= n 0)\n      1\n      (let ((m (modp (- n 1) p)))\n   \
    \     (modulo (* 2 m) p))))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n\
    \        acc\n        (modp-iter (- n 1) p (* acc 2 acc))))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p p2)\n    (cond ((zero? n) 1)\n          ((even?\
    \ n) (modp-iter (quotient n 2) p (* p2 p2)))\n          (else (* (modp-iter (quotient\
    \ n 2) p (* p2 p2)) p2))))\n  (modulo (modp-iter n p p) p))\n", "  (let loop ([n\
    \ n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n) (loop (quotient\
    \ n 2) p (* r r p))]\n          [else (loop (sub1 n) p (* r p))])))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (let loop ([n n] [p p] [acc 1])\n    (cond [(zero?\
    \ n) acc]\n          [(even? n) (loop (quotient n 2) p (modulo (* acc acc) p))]\n\
    \          [else (loop (sub1 n) p (modulo (* acc p) p))])))\n", "  (if (zero?\
    \ n)\n      1\n      (let ([n (modulo n p)])\n        (if (zero? n)\n        \
    \    1\n            (let ([n (modulo n (sub1 p))])\n              (if (zero? n)\n\
    \                  1\n                  (let ([n (modulo n (sub1 p))])\n     \
    \               (if (zero? n)\n                        1\n                   \
    \     (let ([n (modulo n (sub1 p))])\n                          (if (zero? n)\n\
    \                              1\n                              (let ([n (modulo\
    \ n (sub1 p))])\n                                (if (zero? n)\n             \
    \                       1\n                                    (let ([n (modulo\
    \ n (sub1 p))])\n                                      (if (zero? n)\n       \
    \                                   1\n                                      \
    \    (let ([n (modulo n (sub1 p))])\n                                        \
    \    (if (zero? n)\n                                                1\n      \
    \                                          (let ([n (modulo n (sub1 p))])\n  \
    \                                                (if (zero? n)\n             \
    \                                         1\n                                \
    \                      (let ([n (modulo n (sub1 p))])\n                      \
    \                                  (if (zero? n)\n                           \
    \                                 1\n                                        \
    \                    (let ([n (modulo n (sub1 p))])\n                        \
    \                                      (if (zero? n)\n                       \
    \                                           1\n                              \
    \                                    (let ([n (modulo n (sub1 p))])\n        \
    \                                                            (if (zero? n)\n \
    \                                                                       1\n  \
    \                                                                      (let ([n\
    \ (modulo n (sub1 p))])\n                                                    \
    \                      (if (zero? n)\n                                       \
    \                                       1\n                                  \
    \                                            (let ([n (modulo n (sub1 p))])\n\
    \                                                                            \
    \    (if (zero? n)\n                                                         \
    \                           1\n                                              \
    \                                      (let ([n (modulo n (sub1 p))])\n      \
    \                                                                            \
    \    (if (zero? n)\n                                                         \
    \                                 1\n                                        \
    \                                                  (let ([n (modulo n (sub1 p))])\n\
    \                                                                            \
    \                (", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n\
    \          [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n \
    \         [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n \
    \ (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n   \
    \     acc\n        (modp-iter (quotient n 2) p\n                   (if (odd? n)\n\
    \                       (modulo (* acc 2) p)\n                       (modulo (*\
    \ acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n \
    \   (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n)\
    \ (loop (quotient n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n)\
    \ p (modulo (* r 2) p))])))\n", "  (define (modp-iter n p result)\n    (if (=\
    \ n 0)\n        result\n        (modp-iter (quotient n 2) p\n                \
    \   (if (odd? n)\n                       (modulo (* result 2) p)\n           \
    \            (modulo result p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo\
    \ (* acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even?\
    \ n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1)\
    \ p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (if (= n 0)\n      1\n      (let\
    \ ([n2 (modulo (* 2 (modp (- n 1) p)) p)])\n        (if (even? n)\n          \
    \  n2\n            (modulo (* n2 n2) p)))))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (iter n p r)\n    (if (= n 0)\n        r\n        (iter (-\
    \ n 1) p (* r 2 p))))\n  (iter n p 1))\n", "  (define (modp-iter n p acc)\n  \
    \  (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (define (iter n p acc)\n    (if (= n 0)\n        acc\n        (iter (- n 1) p\
    \ (* 2 acc) p)))\n  (modulo (iter n p 1) p))\n", "  (define (modp-iter n p p2)\n\
    \    (cond\n      [(= n 0) 1]\n      [(= (remainder n 2) 0) (modulo (* p2 p2)\
    \ p)]\n      [else (modulo (* p2 (modp-iter (- n 1) p p2)) p)]))\n  (modp-iter\
    \ n p 2))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter n p result)\n\
    \    (if (= n 0)\n        result\n        (iter (- n 1) p (* 2 result))))\n  (modulo\
    \ (iter n p 1) p))\n", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n\
    \          [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n \
    \         [else (modp-iter (quotient n 2) p (modulo (* acc acc acc) p))]))\n \
    \ (modp-iter n p 1))\n", "  (define (iter n p acc)\n    (cond\n      [(zero? n)\
    \ acc]\n      [(even? n) (iter (/ n 2) p (modulo (* acc acc) p))]\n      [else\
    \ (iter (- n 1) p (modulo (* acc 2) p))]))\n  (iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2)\
    \ p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n    \
    \      [(even? n) (loop (quotient n 2) p (modulo (* r r) p))]\n          [else\
    \ (loop (sub1 n) p (modulo (* r 2) p))])))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n   \
    \   [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (-\
    \ n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(zero? n) acc]\n          [(even? n) (modp-iter (quotient n 2) p (modulo\
    \ (* acc acc) p))]\n          [else (modp-iter (sub1 n) p (modulo (* acc 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else\
    \ (modp-iter (- n 1) p (* acc 2 acc p))]))\n  (modp-iter n p 1))\n", "  (if (=\
    \ n 0)\n      1\n      (let ([n (modulo n p)])\n        (modulo (* 2 (modp (-\
    \ n 1) p)) p))))\n", "  (define (iter n p acc)\n    (if (= n 0)\n        acc\n\
    \        (iter (- n 1) p (* 2 acc))))\n  (modulo (iter n p 1) p))\n", "  (define\
    \ (modp-iter n p acc)\n    (if (= n 0)\n        acc\n        (modp-iter (quotient\
    \ n 2) p\n                   (if (odd? n)\n                       (modulo (* acc\
    \ 2) p)\n                       acc))))\n  (modp-iter n p 1))\n", "  (let loop\
    \ ([n n] [p p] [r 1])\n    (if (zero? n)\n        r\n        (loop (quotient n\
    \ 2) p\n              (if (odd? n)\n                  (modulo (* r r) p)\n   \
    \               (modulo (* r r 2) p))))))\n", "  (let loop ([n n] [r 1])\n   \
    \ (if (zero? n)\n        r\n        (loop (quotient n 2)\n              (if (odd?\
    \ n)\n                  (modulo (* r r 2) p)\n                  (modulo (* r r)\
    \ p))))))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (quotient n 2) p\n                   (if (odd? n)\n       \
    \                (modulo (* acc 2) p)\n                       acc))))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter n p acc)\n\
    \    (cond\n      [(zero? n) acc]\n      [(even? n) (iter (/ n 2) p (modulo (*\
    \ acc acc) p))]\n      [else (iter (- n 1) p (modulo (* acc 2) p))]))\n  (iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (- n 1) p (* 2 acc p))))\n  (modp-iter n p 1))\n", "  (let\
    \ loop ([n n] [p p] [accum 1])\n    (if (zero? n)\n        accum\n        (loop\
    \ (quotient n 2) p\n              (if (odd? n)\n                  (modulo (* accum\
    \ accum) p)\n                  (modulo (* accum accum accum) p))))))\n", "  (define\
    \ (modp-iter n p r)\n    (if (= n 0)\n        r\n        (modp-iter (- n 1) p\
    \ (* r 2 p))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if\
    \ (zero? n)\n        acc\n        (modp-iter (quotient n 2) p\n              \
    \     (if (odd? n)\n                       (modulo (* acc 2) p)\n            \
    \           (modulo (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define (iter\
    \ n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (iter (/ n 2) p (* acc\
    \ acc) p)]\n          [else (iter (- n 1) p (* acc 2) p)]))\n  (modulo (iter n\
    \ p 1) p))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n     \
    \     [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n          [else\
    \ (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (iter (/ n 2) p\
    \ (modulo (* acc acc) p))]\n      [else (iter (- n 1) p (modulo (* acc 2) p))]))\n\
    \  (iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p r)\n    (cond [(zero? n) r]\n          [(even? n) (modp-iter (quotient n 2)\
    \ p (* r r p))]\n          [else (modp-iter (quotient n 2) p (* r r p))]))\n \
    \ (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (zero? n)\n \
    \       acc\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* acc 2) p)\n                       (modulo\
    \ (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (if (= n 0)\n        acc\n        (modp-iter (quotient n 2) p\n         \
    \          (if (odd? n)\n                       (modulo (* acc 2) p)\n       \
    \                (modulo (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter\
    \ (quotient n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (let loop\
    \ ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n) (loop (quotient\
    \ n 2) p (* r r p))]\n          [else (loop (sub1 n) p (* r p))])))\n", "  (define\
    \ (iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (iter (/ n\
    \ 2) p (* acc acc p))]\n      [else (iter (- n 1) p (* acc 2 p))]))\n  (iter n\
    \ p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n        \
    \  [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (let loop ([n n] [p p]\
    \ [r 1])\n    (cond [(zero? n) r]\n          [(zero? (modulo n 2)) (loop (quotient\
    \ n 2) p (* r 2))]\n          [else (loop (quotient n 2) p (* r 2))])))\n", " \
    \ (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc\
    \ 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\
    \ [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n \
    \         [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n)\
    \ (loop (quotient n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n)\
    \ p (modulo (* r 2) p))])))\n", "  (define (modp-iter n p acc)\n    (cond\n  \
    \    [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n  \
    \    [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", " \
    \ (let loop ([n n] [r 1])\n    (cond [(zero? n) r]\n          [else (loop (quotient\
    \ n 2)\n                      (if (odd? n)\n                          (modulo\
    \ (* r r 2) p)\n                          (modulo (* r r) p)))])))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= (remainder n\
    \ 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p\
    \ (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n \
    \   (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient n 2) p\
    \ (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo (*\
    \ acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (if (zero? n)\n        acc\n   \
    \     (modp-iter (quotient n 2) p\n                   (if (odd? n)\n         \
    \              (modulo (* acc 2) p)\n                       (modulo (* acc acc)\
    \ p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(=\
    \ n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n     \
    \     [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", " \
    \ (let loop ([n n] [p p] [r 1])\n    (if (zero? n)\n        r\n        (loop (quotient\
    \ n 2) p\n              (if (odd? n)\n                  (modulo (* r r) p)\n \
    \                 (modulo (* r r 2) p))))))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even?\
    \ n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1)\
    \ p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc\
    \ p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p\
    \ 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n   \
    \   [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (-\
    \ n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(= (remainder n 2) 0) (modp-iter (/ n 2)\
    \ p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter\
    \ (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (let loop ([n\
    \ n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n) (loop (quotient\
    \ n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n) p (modulo (* r 2)\
    \ p))])))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero?\
    \ n) acc]\n      [(even? n) (modp-iter (quotient n 2) p (modulo (* acc acc) p))]\n\
    \      [else (modp-iter (quotient n 2) p (modulo (* acc acc p) p))]))\n  (modp-iter\
    \ n p 2))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (- n 1) p (* acc 2 p))))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p r)\n    (if (= n 0) r\n        (modp-iter (- n 1) p (* r 2 p))))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (quotient n 2) p (modulo\
    \ (* acc acc p) p))]))\n  (modp-iter n p 2))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 acc p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (iter n p acc)\n    (cond\n      [(= n 0) acc]\n    \
    \  [(= (remainder n 2) 0) (iter (/ n 2) p (remainder (* acc acc) p))]\n      [else\
    \ (iter (/ n 2) p (remainder (* acc acc acc) p))]))\n  (iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (modulo\
    \ (* 2 acc) p)]\n      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n\
    \      [else (modp-iter (- n 1) p (modulo (* 2 acc) p))]))\n  (modp-iter n p 1))\n",
  "  (define (modp-iter n p r)\n    (cond\n      [(= n 0) r]\n      [(even? n) (modp-iter\
    \ (/ n 2) p (* r r p))]\n      [else (modp-iter (- n 1) p (* r 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (if (= n 0)\n        acc\n \
    \       (modp-iter (quotient n 2) p\n                   (if (even? n)\n      \
    \                 acc\n                       (modulo (* acc 2) p)))))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p r)\n    (if (= n 0)\n        r\n        (modp-iter (quotient n 2) p\n    \
    \               (if (odd? n)\n                       (modulo (* r r) p)\n    \
    \                   (modulo (* r r 2) p)))))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter\
    \ (quotient n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (quotient\
    \ n 2) p (modulo (* acc acc acc) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2)\
    \ p (modulo (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", " \
    \ (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (let loop ([n n] [p p] [r 1])\n    (if (zero? n)\n\
    \        r\n        (loop (quotient n 2) p\n              (if (odd? n)\n     \
    \             (modulo (* r r) p)\n                  (modulo (* r r 2) p))))))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc\
    \ 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (=\
    \ n 0)\n        acc\n        (modp-iter (- n 1) p (* acc 2 p))))\n  (modp-iter\
    \ n p 1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
