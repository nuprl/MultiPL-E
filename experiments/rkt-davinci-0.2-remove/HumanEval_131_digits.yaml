name: HumanEval_131_digits
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return the product of the\
  \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> digits(1)\
  \ \n;; 1\n;; >>> digits(4) \n;; 0\n(define (digits n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
  \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
  \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal? (candidate\
  \ 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal? (candidate\
  \ 2468) 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n     \
    \ 0\n      (if (odd? (remainder n 10))\n          (* (remainder n 10) (digits\
    \ (quotient n 10)))\n          (digits (quotient n 10)))))\n", "  (if (zero? n)\n\
    \      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n         \
    \   (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond\n    [(empty? n) 0]\n    [(odd? (first n)) (* (first\
    \ n) (digits (rest n)))]\n    [else (digits (rest n))]))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if\
    \ (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n\
    \          (digits (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n\
    \ 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(even? (remainder n 10)) (digits\
    \ (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient n 10)))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let* ([d (remainder n 10)]\n\
    \             [r (digits (quotient n 10))])\n        (if (odd? d)\n          \
    \  (* d r)\n            r))))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder\
    \ n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n          (digits\
    \ (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10))\n  \
    \   (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10))\
    \ (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n) 0\n      (if (even? (remainder n 10)) (digits (quotient n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10))))))\n", "  (cond [(zero?\
    \ n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n        [else (digits\
    \ (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n\
    \ 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10))\n     (* (remainder n 10) (digits (quotient n 10)))]\n   \
    \ [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder\
    \ n 10)])\n        (if (odd? d)\n            (* d (digits (quotient n 10)))\n\
    \            (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n    \
    \  (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n \
    \   [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n     \
    \ 0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d\
    \ (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n\
    \    [else (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (= n 0)\n      0\n\
    \      (if (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient\
    \ n 10)))\n          (digits (quotient n 10)))))\n", "  (if (zero? n)\n      0\n\
    \      (if (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient\
    \ n 10)))\n          (digits (quotient n 10)))))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond [(zero? n) 0]\n        [(odd? n) (*\
    \ n (digits (quotient n 10)))]\n        [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(empty? n) 0]\n    [(odd? (first n)) (* (first n) (digits (rest n)))]\n\
    \    [else (digits (rest n))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n     \
    \ 0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder\
    \ n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n          (digits\
    \ (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n          (* (digits\
    \ (quotient n 10)) (remainder n 10))\n          (digits (quotient n 10)))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (if (odd?\
    \ (remainder n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n\
    \          (digits (quotient n 10)))))\n", "  (cond [(zero? n) 0]\n        [(odd?\
    \ n) (* n (digits (quotient n 10)))]\n        [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10))\
    \ (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n   \
    \ [else (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (if (zero? n)\n\
    \      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n          \
    \  (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n) 0\n      (let ([d (remainder n 10)])\n        (if (odd? d) (* d\
    \ (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(empty? n) 0]\n    [(odd?\
    \ (first n)) (* (first n) (digits (rest n)))]\n    [else (digits (rest n))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond [(zero?\
    \ n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n        [else (digits\
    \ (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder\
    \ n 10) (digits (quotient n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even? (remainder\
    \ n 10)) (digits (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient\
    \ n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(even? n) (digits (quotient n 10))]\n    [else (* (remainder n 10)\
    \ (digits (quotient n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond ((= n 0) 0)\n        ((odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10))))\n        (else (digits (quotient n 10)))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n   \
    \ [else (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (if (zero? n)\n\
    \      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n         \
    \   (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n   \
    \ [else (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (if (zero? n)\n\
    \      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n          \
    \  (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond ((= n 0) 0)\n        ((even? (remainder n 10)) (digits (quotient n 10)))\n\
    \        (else (* (remainder n 10) (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n          (* (remainder\
    \ n 10) (digits (quotient n 10)))\n          (digits (quotient n 10)))))\n", " \
    \ (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even?\
    \ n) (digits (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient\
    \ n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(even? n) (digits (quotient n 10))]\n    [else\
    \ (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (cond\n    [(= n 0)\
    \ 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if\
    \ (odd? (remainder n 10))\n          (* (digits (quotient n 10)) (remainder n\
    \ 10))\n          (digits (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(even? (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder\
    \ n 10) (digits (quotient n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder\
    \ n 10)])\n        (if (even? d)\n            (digits (quotient n 10))\n     \
    \       (* d (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n \
    \   [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if\
    \ (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n\
    \          (digits (quotient n 10)))))\n", "  (if (zero? n)\n      0\n      (if\
    \ (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n\
    \          (digits (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder\
    \ n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n          (digits\
    \ (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(empty? n) 0]\n    [(odd? (first\
    \ n)) (* (first n) (digits (rest n)))]\n    [else (digits (rest n))]))\n", " \
    \ (cond [(zero? n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n   \
    \     [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even?\
    \ (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder n 10) (digits\
    \ (quotient n 10)))]))\n", "  (cond\n    [(empty? n) 0]\n    [(odd? (first n))\
    \ (* (first n) (digits (rest n)))]\n    [else (digits (rest n))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n     \
    \ 0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d\
    \ (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if\
    \ (even? (remainder n 10))\n          (digits (quotient n 10))\n          (* (remainder\
    \ n 10) (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10))\n     (* (remainder n 10) (digits (quotient n 10)))]\n   \
    \ [else (digits (quotient n 10))]))\n", "  (define (digits-iter n acc)\n    (cond\n\
    \      [(zero? n) acc]\n      [(odd? (remainder n 10)) (digits-iter (quotient\
    \ n 10) (* acc (remainder n 10)))]\n      [else (digits-iter (quotient n 10) acc)]))\n\
    \  (digits-iter n 1))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder\
    \ n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n          (digits\
    \ (quotient n 10)))))\n", "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10))\
    \ (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n          (* (remainder\
    \ n 10) (digits (quotient n 10)))\n          (digits (quotient n 10)))))\n", " \
    \ (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n \
    \   [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder\
    \ n 10))\n          (* (remainder n 10) (digits (quotient n 10)))\n          (digits\
    \ (quotient n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (if (zero? n)\n      0\n      (let* ([d (remainder n 10)]\n\
    \             [r (quotient n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ r))\n            (digits r)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even? (remainder n 10)) (digits\
    \ (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient n 10)))]))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (if (even?\
    \ (remainder n 10))\n          (digits (quotient n 10))\n          (* (remainder\
    \ n 10) (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n\
    \          (* (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient\
    \ n 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10))\n     (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder\
    \ n 10) (digits (quotient n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(empty? n) 0]\n    [(odd? (first\
    \ n)) (* (first n) (digits (rest n)))]\n    [else (digits (rest n))]))\n", " \
    \ (cond\n    [(empty? n) 0]\n    [(odd? (first n)) (* (first n) (digits (rest\
    \ n)))]\n    [else (digits (rest n))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ([d (remainder n 10)])\n        (if (even? d)\n            (digits (quotient\
    \ n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (if (odd? (remainder n 10))\n          (* (remainder n 10) (digits (quotient\
    \ n 10)))\n          (digits (quotient n 10)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
