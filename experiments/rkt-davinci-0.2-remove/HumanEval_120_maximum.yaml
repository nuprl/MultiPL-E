name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; Example 2:\n;; Example 3:\n;; Note:\n;; 1. The length of the array\
  \ will be in the range of [1, 1000].\n;; 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (define (max-k lst k)\n    (cond\n      [(empty? lst) empty]\n  \
    \    [(= k 0) empty]\n      [else (cons (max-k-helper lst) (max-k (remove (max-k-helper\
    \ lst) lst) (- k 1)))]))\n  (max-k arr k))\n", "  (define (max-heapify arr i)\n\
    \    (define (left i) (+ i i))\n    (define (right i) (+ i i 1))\n    (define\
    \ (largest i)\n      (define l (left i))\n      (define r (right i))\n      (define\
    \ largest (if (< l (vector-length arr))\n                          (if (> (vector-ref\
    \ arr l) (vector-ref arr i)) l i)\n                          i))\n      (if (<\
    \ r (vector-length arr))\n          (if (> (vector-ref arr r) (vector-ref arr\
    \ largest)) r largest)\n          largest))\n    (define l (left i))\n    (define\
    \ r (right i))\n    (define largest (largest i))\n    (when (not (= largest i))\n\
    \      (vector-swap! arr i largest)\n      (max-heapify arr largest)))\n  (define\
    \ (build-max-heap arr)\n    (define (parent i) (quotient i 2))\n    (define (heapify\
    \ i)\n      (define p (parent i))\n      (when (and (> i 1) (> (vector-ref arr\
    \ i) (vector-ref arr p)))\n        (vector-swap! arr i p)\n        (heapify p)))\n\
    \    (for ([i (in-range (vector-length arr) 1 -1)])\n      (heapify i)))\n  (define\
    \ (heap-sort arr)\n    (build-max-heap arr)\n    (define (sort i)\n      (when\
    \ (> i 0)\n        (vector-swap! arr 0 i)\n        (max-heapify arr 0)\n     \
    \   (sort (- i 1))))\n    (sort (- (vector-length arr) 1)))\n  (define (sorted-vector->list\
    \ v)\n    (define (sorted-vector->list-iter v i)\n      (if (= i (vector-length\
    \ v))\n          '()\n          (cons (vector-ref v i) (sorted-vector->list-iter\
    \ v (+ i 1)))))\n    (sorted-vector->list-iter v 0))\n  (define v (vector->immutable-vector\
    \ arr))\n  (heap", "  (define (helper arr k result)\n    (if (zero? k)\n     \
    \   result\n        (helper (remove-max arr) (- k 1) (cons (max arr) result))))\n\
    \  (helper arr k '()))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n   \
    \ (if (= k 0)\n        '()\n        (cons (apply max lst)\n              (max-k\
    \ (remove (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k\
    \ lst)\n    (if (null? lst)\n        '()\n        (cons (apply max lst)\n    \
    \          (max-k (remove (apply max lst) lst)))))\n  (max-k arr))\n", "  (define\
    \ (max-k lst k)\n    (cond [(empty? lst) empty]\n          [(= k 0) empty]\n \
    \         [(= k 1) (list (max (first lst) (second lst)))]\n          [else (cons\
    \ (max (first lst) (second lst)) (max-k (rest lst) (- k 1)))]))\n  (max-k arr\
    \ k))\n", "  (define (max-k arr k)\n    (if (or (null? arr) (= k 0))\n       \
    \ '()\n        (let ([max (apply max arr)])\n          (cons max (max-k (remove\
    \ max arr) (- k 1))))))\n  (sort (max-k arr k) <))\n", "  (define (max-k lst k)\n\
    \    (if (or (null? lst) (= k 0))\n        '()\n        (let ([max (apply max\
    \ lst)])\n          (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k arr\
    \ k))\n", "  (define (max-k arr k)\n    (if (or (= k 0) (null? arr))\n       \
    \ '()\n        (let ([max (apply max arr)])\n          (cons max (max-k (remove\
    \ max arr) (- k 1))))))\n  (sort (max-k arr k) >))\n", "  (sort arr (lambda (a\
    \ b) (< a b))))\n", "  (sort arr >))\n", "  (define (insert-sort lst)\n    (define\
    \ (insert x lst)\n      (cond [(empty? lst) (list x)]\n            [(> x (first\
    \ lst)) (cons x lst)]\n            [else (cons (first lst) (insert x (rest lst)))]))\n\
    \    (if (empty? lst)\n        empty\n        (insert (first lst) (insert-sort\
    \ (rest lst)))))\n  (define (max-k lst k)\n    (if (zero? k)\n        empty\n\
    \        (cons (first lst) (max-k (rest lst) (- k 1)))))\n  (max-k (insert-sort\
    \ arr) k))\n", "  (define (max-helper arr k)\n    (if (empty? arr)\n        '()\n\
    \        (let ([max (apply max arr)])\n          (cons max (max-helper (remove\
    \ max arr) (- k 1))))))\n  (reverse (max-helper arr k)))\n", "  (define (max-k\
    \ lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (let ([max (apply\
    \ max lst)])\n          (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k\
    \ arr k))\n", "  (define (max-k arr k)\n    (if (= k 0)\n        '()\n       \
    \ (let ([max (apply max arr)])\n          (cons max (max-k (remove max arr) (-\
    \ k 1))))))\n  (sort (max-k arr k) <))\n", "  (define (max-k lst k)\n    (if (or\
    \ (null? lst) (= k 0))\n        '()\n        (let ([max (apply max lst)])\n  \
    \        (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n",
  "  (define (max-k-nums arr k)\n    (cond [(empty? arr) empty]\n          [(= k 0)\
    \ empty]\n          [(= k 1) (list (max (first arr) (max-k-nums (rest arr) 0)))]\n\
    \          [else (cons (max (first arr) (max-k-nums (rest arr) (- k 1)))\n   \
    \                   (max-k-nums (rest arr) (- k 1)))]))\n  (max-k-nums arr k))\n",
  "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n      \
    \  (let ([max (apply max lst)])\n          (cons max (max-k (remove max lst) (-\
    \ k 1))))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (if (= k 0)\n\
    \        '()\n        (cons (max lst)\n              (max-k (remove (max lst)\
    \ lst) (- k 1)))))\n  (max-k arr k))\n", "  (let loop ([arr arr] [k k] [result\
    \ '()])\n    (cond [(zero? k) result]\n          [else (loop (remove-max arr)\
    \ (- k 1) (cons (max arr) result))])))\n", "  (define (max-k lst k)\n    (if (or\
    \ (null? lst) (= k 0))\n        '()\n        (let ([max (apply max lst)])\n  \
    \        (cons max (max-k (remove max lst) (- k 1))))))\n  (sort (max-k arr k)\
    \ <))\n", "  (define (max-k-helper arr k)\n    (if (or (null? arr) (= k 0))\n\
    \        '()\n        (let ([max (apply max arr)])\n          (cons max (max-k-helper\
    \ (remove max arr) (- k 1))))))\n  (max-k-helper arr k))\n", "  (define (max-k-nums\
    \ arr k)\n    (cond [(empty? arr) empty]\n          [(= k 0) empty]\n        \
    \  [(= k 1) (list (max (first arr) (max-k-nums (rest arr) 0)))]\n          [else\
    \ (cons (max (first arr) (max-k-nums (rest arr) (- k 1)))\n                  \
    \    (max-k-nums (rest arr) (- k 1)))]))\n  (max-k-nums arr k))\n", "  (define\
    \ (max-k-helper arr k)\n    (if (= k 0)\n        '()\n        (let ([max (apply\
    \ max arr)])\n          (cons max (max-k-helper (remove max arr) (- k 1))))))\n\
    \  (max-k-helper arr k))\n", "  (define (max-k lst)\n    (if (null? lst)\n   \
    \     '()\n        (cons (apply max lst)\n              (max-k (remove (apply\
    \ max lst) lst)))))\n  (max-k arr))\n", "  (define (helper arr k result)\n   \
    \ (cond [(empty? arr) result]\n          [(empty? result) (helper (rest arr) k\
    \ (list (first arr))) ]\n          [(> (first arr) (first result)) (helper (rest\
    \ arr) k (cons (first arr) (rest result)))]\n          [else (helper (rest arr)\
    \ k (cons (first result) (rest result)))]))\n  (helper arr k empty))\n", "  (sort\
    \ arr >))\n", "  (sort arr >))\n", "  (sort arr >))\n", "  (define (max-k arr\
    \ k)\n    (if (zero? k)\n        '()\n        (cons (apply max arr)\n        \
    \      (max-k (remove (apply max arr) arr) (- k 1)))))\n  (max-k arr k))\n", " \
    \ (define (max-k lst k)\n    (cond [(empty? lst) empty]\n          [(= k 0) empty]\n\
    \          [(= k 1) (list (max (first lst) (second lst)))]\n          [else (cons\
    \ (max (first lst) (second lst)) (max-k (rest lst) (- k 1)))]))\n  (max-k arr\
    \ k))\n", "  (define (helper arr k)\n    (cond [(= k 0) '()]\n          [(= k\
    \ 1) (list (apply max arr))]\n          [else (cons (apply max arr) (helper (remove\
    \ (apply max arr) arr) (- k 1)))]))\n  (helper arr k))\n", "  (define (max-heapify\
    \ arr i)\n    (define (swap arr i j)\n      (define (swap-helper arr i j)\n  \
    \      (define (swap-helper-helper arr i j)\n          (define (swap-helper-helper-helper\
    \ arr i j)\n            (define (swap-helper-helper-helper-helper arr i j)\n \
    \             (define (swap-helper-helper-helper-helper-helper arr i j)\n    \
    \            (define (swap-helper-helper-helper-helper-helper-helper arr i j)\n\
    \                  (define (swap-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                  (define (swap-helper-helper-", " \
    \ (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n     \
    \   (cons (max-k-helper lst)\n              (max-k (remove (max-k-helper lst)\
    \ lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (if (or\
    \ (null? lst) (= k 0))\n        '()\n        (cons (max-k-helper lst)\n      \
    \        (max-k (remove (max-k-helper lst) lst) (- k 1)))))\n  (max-k arr k))\n",
  "  (define (max-k lst k)\n    (if (or (= k 0) (null? lst))\n        '()\n      \
    \  (cons (max-k-helper lst) (max-k (remove (max-k-helper lst) lst) (- k 1)))))\n\
    \  (max-k arr k))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n    (cond\
    \ ((= k 0) '())\n          ((null? lst) '())\n          (else (cons (max lst)\
    \ (max-k (remove (max lst) lst) (- k 1))))))\n  (max-k arr k))\n", "  (define\
    \ (max-k arr k)\n    (if (zero? k)\n        '()\n        (cons (max (first arr)\
    \ (max-k (rest arr) (- k 1)))\n              (max-k (rest arr) (- k 1)))))\n \
    \ (sort (max-k arr k) >))\n", "  (define (max-k lst k)\n    (if (or (null? lst)\
    \ (= k 0))\n        '()\n        (cons (max-k-helper lst) (max-k (remove (max-k-helper\
    \ lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (if\
    \ (or (null? lst) (= k 0))\n        '()\n        (cons (max lst) (max-k (remove\
    \ (max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n\
    \    (cond ((null? lst) '())\n          ((= k 0) '())\n          ((null? (cdr\
    \ lst)) (list (car lst)))\n          (else\n           (let ((max (car lst))\n\
    \                 (max-rest (max-k (cdr lst) (- k 1))))\n             (cons max\
    \ max-rest)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (cond [(empty?\
    \ lst) empty]\n          [(= k 0) empty]\n          [(= k 1) (list (max (first\
    \ lst) (second lst)))]\n          [else (cons (max (first lst) (second lst)) (max-k\
    \ (rest lst) (- k 1)))]))\n  (max-k arr k))\n", "  (define (max-k-nums arr k)\n\
    \    (if (or (null? arr) (= k 0))\n        '()\n        (let ([max-num (apply\
    \ max arr)])\n          (cons max-num (max-k-nums (remove max-num arr) (- k 1))))))\n\
    \  (sort (max-k-nums arr k) >))\n", "  (define (max-k arr k)\n    (cond\n    \
    \  [(empty? arr) empty]\n      [(= k 0) empty]\n      [else\n       (let* ([max\
    \ (max-k (rest arr) (- k 1))]\n              [max-max (first max)])\n        \
    \ (if (< (first arr) max-max)\n             max\n             (cons (first arr)\
    \ max)))]))\n  (max-k arr k))\n", "  (define (max-k arr k)\n    (if (zero? k)\n\
    \        '()\n        (cons (apply max arr)\n              (max-k (remove (apply\
    \ max arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (sort arr >))\n", "  (define\
    \ (max-k arr k)\n    (if (= k 0)\n        '()\n        (let ([max (apply max arr)])\n\
    \          (cons max (max-k (remove max arr) (- k 1))))))\n  (max-k arr k))\n",
  "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n      \
    \  (cons (max lst) (max-k (remove (max lst) lst) (- k 1)))))\n  (max-k arr k))\n",
  "  (define (helper arr k acc)\n    (cond\n      [(empty? arr) (reverse acc)]\n \
    \     [(= k 0) (reverse acc)]\n      [else (helper (cdr arr) (- k 1) (cons (max\
    \ (car arr) (car acc)) (cdr acc)))]))\n  (helper arr k (list (car arr))))\n",
  "  (sort (sublist arr 0 k) >))\n", "  (define (max-k-helper arr k)\n    (if (= k\
    \ 0)\n        '()\n        (let ([max-val (apply max arr)])\n          (cons max-val\
    \ (max-k-helper (remove max-val arr) (- k 1))))))\n  (max-k-helper arr k))\n",
  "  (define (max-k-nums arr k)\n    (if (zero? k)\n        '()\n        (cons (apply\
    \ max arr)\n              (max-k-nums (remove (apply max arr) arr) (- k 1)))))\n\
    \  (sort (max-k-nums arr k) <))\n", "  (define (max-k-helper arr k)\n    (if (=\
    \ k 0)\n        '()\n        (let* ([max-index (max-index arr)]\n            \
    \   [max-val (vector-ref arr max-index)])\n          (cons max-val (max-k-helper\
    \ (vector-remove arr max-index) (- k 1))))))\n  (max-k-helper arr k))\n", "  (sort\
    \ arr >))\n", "  (define (max-heapify arr i)\n    (define (left i) (+ (* 2 i)\
    \ 1))\n    (define (right i) (+ (* 2 i) 2))\n    (define (swap arr i j)\n    \
    \  (define (swap-helper arr i j)\n        (define (swap-helper2 arr i j)\n   \
    \       (define (swap-helper3 arr i j)\n            (define (swap-helper4 arr\
    \ i j)\n              (define (swap-helper5 arr i j)\n                (define\
    \ (swap-helper6 arr i j)\n                  (define (swap-helper7 arr i j)\n \
    \                   (define (swap-helper8 arr i j)\n                      (define\
    \ (swap-helper9 arr i j)\n                        (define (swap-helper10 arr i\
    \ j)\n                          (define (swap-helper11 arr i j)\n            \
    \                (define (swap-helper12 arr i j)\n                           \
    \   (define (swap-helper13 arr i j)\n                                (define (swap-helper14\
    \ arr i j)\n                                  (define (swap-helper15 arr i j)\n\
    \                                    (define (swap-helper16 arr i j)\n       \
    \                               (define (swap-helper17 arr i j)\n            \
    \                            (define (swap-helper18 arr i j)\n               \
    \                           (define (swap-helper19 arr i j)\n                \
    \                            (define (swap-helper20 arr i j)\n               \
    \                               (define (swap-helper21 arr i j)\n            \
    \                                    (define (swap-helper22 arr i j)\n       \
    \                                           (define (swap-helper23 arr i j)\n\
    \                                                    (define (swap-helper24 arr\
    \ i j)\n                                                      (define (swap-helper25\
    \ arr i j)\n                                                        (define (swap-helper26\
    \ arr i j)\n                                                          (define\
    \ (swap-helper27 arr i j)\n                                                  \
    \          (define (swap-helper28 arr i j)\n                                 \
    \                             (define (sw", "  (sort arr >))\n", "  (sort arr\
    \ >))\n", "  (define (helper arr k)\n    (cond [(empty? arr) empty]\n        \
    \  [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (second arr)))]\n\
    \          [else (cons (max (first arr) (second arr))\n                      (helper\
    \ (rest arr) (- k 1)))]))\n  (helper arr k))\n", "  (define (max-k arr k)\n  \
    \  (if (= k 0)\n        '()\n        (cons (apply max arr)\n              (max-k\
    \ (remove (apply max arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (sort arr\
    \ >))\n", "  (define (max-k-helper arr k)\n    (if (= k 0)\n        '()\n    \
    \    (let ([max (apply max arr)])\n          (cons max (max-k-helper (remove max\
    \ arr) (- k 1))))))\n  (max-k-helper arr k))\n", "  (define (max-k lst k)\n  \
    \  (if (or (null? lst) (= k 0))\n        '()\n        (let ([max (apply max lst)])\n\
    \          (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n",
  "  (define (max-heapify arr i)\n    (define (left-child i) (+ i 1))\n    (define\
    \ (right-child i) (+ i 2))\n    (define (largest-index i)\n      (define l (left-child\
    \ i))\n      (define r (right-child i))\n      (define largest\n        (cond\
    \ [(>= l (length arr)) i]\n              [(>= r (length arr))\n              \
    \ (if (> (vector-ref arr l) (vector-ref arr i)) l i)]\n              [else\n \
    \              (if (> (vector-ref arr l) (vector-ref arr r)) l r)]))\n      (if\
    \ (> (vector-ref arr largest) (vector-ref arr i)) largest i))\n    (define (swap\
    \ arr i j)\n      (define temp (vector-ref arr i))\n      (vector-set! arr i (vector-ref\
    \ arr j))\n      (vector-set! arr j temp))\n    (define l (left-child i))\n  \
    \  (define r (right-child i))\n    (define largest (largest-index i))\n    (when\
    \ (/= largest i)\n      (swap arr i largest)\n      (max-heapify arr largest)))\n\
    \  (define (build-max-heap arr)\n    (for ([i (in-range (quotient (length arr)\
    \ 2) -1 -1)])\n      (max-heapify arr i)))\n  (define (heap-sort arr)\n    (build-max-heap\
    \ arr)\n    (for ([i (in-range (sub1 (length arr)) 0 -1)])\n      (swap arr 0\
    \ i)\n      (max-heapify (subvector arr 0 i) 0)))\n  (define (heap-sort-k arr\
    \ k)\n    (heap-sort arr)\n    (subvector arr 0 k))\n  (heap-sort-k arr k))\n",
  "  (define (max-k arr k)\n    (if (zero? k)\n        '()\n        (cons (apply max\
    \ arr)\n              (max-k (remove (apply max arr) arr) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (define (max-heapify arr i)\n    (define (left i) (+ (* 2 i)\
    \ 1))\n    (define (right i) (+ (* 2 i) 2))\n    (define (swap arr i j)\n    \
    \  (let ([tmp (vector-ref arr i)])\n        (vector-set! arr i (vector-ref arr\
    \ j))\n        (vector-set! arr j tmp)))\n    (define (max-heapify-rec arr i)\n\
    \      (let ([l (left i)]\n            [r (right i)])\n        (let ([largest\
    \ (if (< l (vector-length arr))\n                           (if (> (vector-ref\
    \ arr l) (vector-ref arr i))\n                               l\n             \
    \                  i)\n                           i)])\n          (let ([largest\
    \ (if (< r (vector-length arr))\n                             (if (> (vector-ref\
    \ arr r) (vector-ref arr largest))\n                                 r\n     \
    \                            largest)\n                             largest)])\n\
    \            (if (not (= largest i))\n                (begin\n               \
    \   (swap arr i largest)\n                  (max-heapify-rec arr largest))))))))\n\
    \    (max-heapify-rec arr i))\n  (define (build-max-heap arr)\n    (for ([i (in-range\
    \ (quotient (- (vector-length arr) 1) 2) -1 -1)])\n      (max-heapify arr i)))\n\
    \  (define (heap-sort arr)\n    (build-max-heap arr)\n    (for ([i (in-range (vector-length\
    \ arr) 1 -1)])\n      (swap arr 0 i)\n      (max-heapify arr 0 (sub1 i))))\n \
    \ (define (heap-max arr)\n    (vector-ref arr 0))\n  (define (heap-extract-max\
    \ arr)\n    (let ([max (heap-max arr)])\n      (vector-set! arr 0 (vector-ref\
    \ arr (sub1 (vector-length arr))))\n      (vector-set! arr (sub1 (vector-length\
    \ arr)) #f)\n      (max-heapify arr 0)\n      max))\n  (", "  (define (max-k arr\
    \ k)\n    (if (zero? k)\n        '()\n        (cons (apply max arr)\n        \
    \      (max-k (remove (apply max arr) arr) (- k 1)))))\n  (max-k arr k))\n", " \
    \ (define (helper arr k)\n    (if (zero? k)\n        '()\n        (let* ([max\
    \ (apply max arr)]\n               [index (index-of arr max)])\n          (cons\
    \ max (helper (remove-at arr index) (- k 1))))))\n  (helper arr k))\n", "  (define\
    \ (max-heapify arr i)\n    (define (left i) (+ (* 2 i) 1))\n    (define (right\
    \ i) (+ (* 2 i) 2))\n    (define (swap arr i j)\n      (define (swap-helper arr\
    \ i j)\n        (define (swap-helper-helper arr i j)\n          (define (swap-helper-helper-helper\
    \ arr i j)\n            (define (swap-helper-helper-helper-helper arr i j)\n \
    \             (define (swap-helper-helper-helper-helper-helper arr i j)\n    \
    \            (define (swap-helper-helper-helper-helper-helper-helper arr i j)\n\
    \                  (define (swap-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (sort (sublist arr k) >))\n", "  (define (max-k lst k)\n    (if (= k 0)\n   \
    \     '()\n        (cons (max-k-helper lst)\n              (max-k (remove (max-k-helper\
    \ lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k arr k)\n    (if\
    \ (zero? k)\n        '()\n        (cons (apply max arr)\n              (max-k\
    \ (remove (apply max arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k\
    \ lst k)\n    (if (or (= k 0) (null? lst))\n        '()\n        (let ([max (apply\
    \ max lst)])\n          (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k\
    \ arr k))\n", "  (define (max-k lst k)\n    (if (zero? k)\n        '()\n     \
    \   (cons (apply max lst)\n              (max-k (remove (apply max lst) lst) (-\
    \ k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (cond [(empty?\
    \ lst) empty]\n          [(= k 0) empty]\n          [(= k 1) (list (max (first\
    \ lst) (second lst)))]\n          [else (cons (max (first lst) (second lst)) (max-k\
    \ (rest lst) (- k 1)))]))\n  (max-k arr k))\n", "  (define (max-k arr k)\n   \
    \ (if (= k 0)\n        '()\n        (cons (max-k-helper arr)\n              (max-k\
    \ (remove (max-k-helper arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (define\
    \ (max-k lst k)\n    (cond\n      [(empty? lst) empty]\n      [(= k 0) empty]\n\
    \      [else\n       (define (max-k-helper lst k)\n         (cond\n          \
    \ [(empty? lst) empty]\n           [(= k 0) empty]\n           [else\n       \
    \     (define (max-k-helper-helper lst k)\n              (cond\n             \
    \   [(empty? lst) empty]\n                [(= k 0) empty]\n                [else\n\
    \                 (define (max-k-helper-helper-helper lst k)\n               \
    \    (cond\n                     [(empty? lst) empty]\n                     [(=\
    \ k 0) empty]\n                     [else\n                      (define (max-k-helper-helper-helper-helper\
    \ lst k)\n                        (cond\n                          [(empty? lst)\
    \ empty]\n                          [(= k 0) empty]\n                        \
    \  [else\n                           (define (max-k-helper-helper-helper-helper-helper\
    \ lst k)\n                             (cond\n                               [(empty?\
    \ lst) empty]\n                               [(= k 0) empty]\n              \
    \                 [else\n                                (define (max-k-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                  (cond\n                          \
    \          [(empty? lst) empty]\n                                    [(= k 0)\
    \ empty]\n                                    [else\n                        \
    \             (define (max-k-helper-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                       (cond\n                     \
    \                    [(empty? lst) empty]\n                                  \
    \       [(= k 0) empty]\n                                         [else\n    \
    \                                      (define (max-k-helper-helper-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                            (cond\n                \
    \                              [(empty? lst) empty]\n                        \
    \                      [(= k 0) empty]\n                                     \
    \         [else\n                                               (define (max-k-helper-helper-helper-helper-helper",
  "  (define (insert-sort lst)\n    (define (insert-item lst item)\n      (cond\n\
    \        [(null? lst) (list item)]\n        [(< item (car lst)) (cons item lst)]\n\
    \        [else (cons (car lst) (insert-item (cdr lst) item))]))\n    (define (insert-sort-iter\
    \ lst)\n      (cond\n        [(null? lst) '()]\n        [else (insert-item (insert-sort-iter\
    \ (cdr lst)) (car lst))]))\n    (insert-sort-iter lst))\n  (define (maximum-iter\
    \ arr k lst)\n    (cond\n      [(null? arr) lst]\n      [(= k 0) lst]\n      [else\
    \ (maximum-iter (cdr arr) (- k 1) (insert-sort (cons (car arr) lst)))]))\n  (maximum-iter\
    \ arr k '()))\n", "  (sort (take arr k) >))\n", "  (define (max-k-helper arr k)\n\
    \    (cond [(empty? arr) empty]\n          [(= k 0) empty]\n          [(= k 1)\
    \ (list (max (first arr) (max-k-helper (rest arr) (- k 1))))]\n          [else\
    \ (cons (max (first arr) (max-k-helper (rest arr) (- k 1)))\n                \
    \      (max-k-helper (rest arr) (- k 1)))]))\n  (max-k-helper arr k))\n", "  (sort\
    \ arr >))\n", "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n   \
    \     '()\n        (cons (max-k-helper lst) (max-k (remove (max-k-helper lst)\
    \ lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(= k 0) empty]\n      [else\n       (define\
    \ (max-k-helper lst k)\n         (cond\n           [(empty? lst) empty]\n    \
    \       [(= k 0) empty]\n           [else\n            (define (max-k-helper-helper\
    \ lst k)\n              (cond\n                [(empty? lst) empty]\n        \
    \        [(= k 0) empty]\n                [else\n                 (cons (max (first\
    \ lst) (first (max-k-helper-helper (rest lst) (sub1 k))))\n                  \
    \     (max-k-helper-helper (rest lst) (sub1 k)))]))\n            (cons (max (first\
    \ lst) (first (max-k-helper-helper (rest lst) (sub1 k))))\n                  (max-k-helper\
    \ (rest lst) (sub1 k)))]))\n       (max-k-helper lst k)]))\n  (max-k arr k))\n",
  "  (define (max-nums arr k)\n    (if (= k 0)\n        '()\n        (let ([max (apply\
    \ max arr)])\n          (cons max (max-nums (remove max arr) (- k 1))))))\n  (sort\
    \ (max-nums arr k) >))\n", "  (define (max-k-nums arr k)\n    (if (zero? k)\n\
    \        '()\n        (let ([max (apply max arr)])\n          (cons max (max-k-nums\
    \ (remove max arr) (- k 1))))))\n  (sort (max-k-nums arr k) <))\n", "  (define\
    \ (max-k lst k)\n    (cond\n      [(empty? lst) empty]\n      [(= k 0) empty]\n\
    \      [else\n       (define max-val (max (first lst) (max-k (rest lst) (- k 1))))\n\
    \       (cons max-val (max-k (remove max-val lst) (- k 1)))]))\n  (max-k arr k))\n",
  "  (define (max-k-nums arr k)\n    (if (= k 0)\n        '()\n        (cons (max-k-nums\
    \ (remove (max arr) arr) (- k 1))\n              (list (max arr)))))\n  (max-k-nums\
    \ arr k))\n", "  (define (max-heapify arr i)\n    (define (swap arr i j)\n   \
    \   (define (swap-helper arr i j)\n        (define (swap-helper-helper arr i j)\n\
    \          (define (swap-helper-helper-helper arr i j)\n            (define (swap-helper-helper-helper-helper\
    \ arr i j)\n              (define (swap-helper-helper-helper-helper-helper arr\
    \ i j)\n                (define (swap-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                  (define (swap-helper-helper-", " \
    \ (define (max-k arr k)\n    (if (= k 0)\n        '()\n        (let ([max (apply\
    \ max arr)])\n          (cons max (max-k (remove max arr) (- k 1))))))\n  (max-k\
    \ arr k))\n", "  (sort arr >))\n", "  (define (helper arr k acc)\n    (if (or\
    \ (null? arr) (= k 0))\n        acc\n        (let ([max (apply max arr)])\n  \
    \        (helper (remove max arr) (- k 1) (cons max acc)))))\n  (reverse (helper\
    \ arr k '())))\n", "  (define (insert-sort lst)\n    (define (insert-sort-helper\
    \ lst acc)\n      (cond [(empty? lst) acc]\n            [(empty? acc) (insert-sort-helper\
    \ (rest lst) (list (first lst))) ]\n            [else (insert-sort-helper (rest\
    \ lst) (insert (first lst) acc))]))\n    (insert-sort-helper lst '()))\n  (take\
    \ (insert-sort arr) k))\n", "  (sort arr >))\n", "  (sort arr >))\n", "  (define\
    \ (max-k arr k)\n    (if (= k 0)\n        '()\n        (cons (max-k-helper arr)\
    \ (max-k (remove (max-k-helper arr) arr) (- k 1)))))\n  (max-k arr k))\n", " \
    \ (define (max-k lst k)\n    (cond [(empty? lst) empty]\n          [(= k 0) empty]\n\
    \          [(= k 1) (list (max (first lst) (second lst)))]\n          [else (cons\
    \ (max (first lst) (second lst))\n                      (max-k (rest lst) (- k\
    \ 1)))]))\n  (max-k arr k))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n\
    \    (if (or (null? lst) (= k 0))\n        '()\n        (cons (apply max lst)\n\
    \              (max-k (remove (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n",
  "  (sort arr >))\n", "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n\
    \        '()\n        (let ([max (apply max lst)])\n          (cons max (max-k\
    \ (remove max lst) (- k 1))))))\n  (max-k arr k))\n", "  (sort arr >))\n", " \
    \ (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n     \
    \   (cons (apply max lst)\n              (max-k (remove (apply max lst) lst) (-\
    \ k 1)))))\n  (max-k arr k))\n", "  (define (helper arr k acc)\n    (if (or (null?\
    \ arr) (= k 0))\n        acc\n        (helper (cdr arr) (- k 1) (cons (car arr)\
    \ acc))))\n  (sort (helper arr k '()) >))\n", "  (sort arr >))\n", "  (define\
    \ (max-k arr k)\n    (if (= k 0)\n        '()\n        (cons (max-k-helper arr)\n\
    \              (max-k (remove (max-k-helper arr) arr) (- k 1)))))\n  (max-k arr\
    \ k))\n", "  (sort arr >))\n", "  (define (max-k lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(= k 0) empty]\n      [else\n       (define (max-k-helper\
    \ lst max-lst)\n         (cond\n           [(empty? lst) max-lst]\n          \
    \ [(= k (length max-lst)) max-lst]\n           [else\n            (define (max-k-helper-helper\
    \ lst max-lst)\n              (cond\n                [(empty? lst) max-lst]\n\
    \                [(> (first lst) (first max-lst)) (cons (first lst) (rest max-lst))]\n\
    \                [else (cons (first max-lst) (max-k-helper-helper (rest lst) (rest\
    \ max-lst)))]))\n            (max-k-helper (rest lst) (max-k-helper-helper lst\
    \ max-lst))]))\n       (max-k-helper (rest lst) (cons (first lst) empty))]))\n\
    \  (max-k arr))\n", "  (sort arr >))\n", "  (define (max-k arr k)\n    (if (zero?\
    \ k)\n        '()\n        (cons (apply max arr)\n              (max-k (remove\
    \ (apply max arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst\
    \ k)\n    (if (or (= k 0) (null? lst))\n        '()\n        (cons (car lst) (max-k\
    \ (cdr lst) (- k 1)))))\n  (sort (max-k arr k) >))\n", "  (define (max-k arr k)\n\
    \    (if (= k 0)\n        '()\n        (cons (max-k-helper arr)\n            \
    \  (max-k (remove (max-k-helper arr) arr) (- k 1)))))\n  (max-k arr k))\n", " \
    \ (define (max-k lst k)\n    (if (= k 0)\n        '()\n        (cons (max-k-helper\
    \ lst)\n              (max-k (remove lst (max-k-helper lst)) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (define (max-k arr k)\n    (if (= k 0)\n        '()\n       \
    \ (cons (max-k-helper arr)\n              (max-k (remove (max-k-helper arr) arr)\
    \ (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (if (or (null?\
    \ lst) (= k 0))\n        '()\n        (cons (apply max lst)\n              (max-k\
    \ (remove (apply max lst) lst) (- k 1)))))\n  (sort (max-k arr k) <))\n", "  (define\
    \ (max-k lst)\n    (if (null? lst)\n        '()\n        (cons (apply max lst)\n\
    \              (max-k (remove (apply max lst) lst)))))\n  (max-k arr))\n", " \
    \ (define (max-k arr k)\n    (cond [(= k 0) '()]\n          [(= k 1) (list (apply\
    \ max arr))]\n          [else (cons (apply max arr) (max-k (remove (apply max\
    \ arr) arr) (- k 1)))]))\n  (max-k arr k))\n", "  (sort arr < k))\n", "  (define\
    \ (max-k-nums arr k)\n    (cond [(empty? arr) empty]\n          [(= k 0) empty]\n\
    \          [(= k 1) (list (max (first arr) (max-k-nums (rest arr) 0)))]\n    \
    \      [else (cons (max (first arr) (max-k-nums (rest arr) (- k 1)))\n       \
    \               (max-k-nums (rest arr) (- k 1)))]))\n  (max-k-nums arr k))\n",
  "  (define (max-k arr k)\n    (if (or (= k 0) (empty? arr))\n        '()\n     \
    \   (let ([max (apply max arr)])\n          (cons max (max-k (remove max arr)\
    \ (- k 1))))))\n  (sort (max-k arr k) >))\n", "  (define (max-k lst k)\n    (if\
    \ (zero? k)\n        '()\n        (cons (apply max lst)\n              (max-k\
    \ (remove (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k-helper\
    \ arr k acc)\n    (cond ((= k 0) acc)\n          ((null? arr) acc)\n         \
    \ (else (max-k-helper (cdr arr) (- k 1) (cons (max (car arr) (car acc)) (cdr acc))))))\n\
    \  (max-k-helper arr k (list (car arr))))\n", "  (sort arr >))\n", "  (define\
    \ (max-k-helper arr k)\n    (if (= k 0)\n        '()\n        (cons (max (car\
    \ arr) (car (max-k-helper (cdr arr) (- k 1))))\n              (max-k-helper (cdr\
    \ arr) (- k 1)))))\n  (max-k-helper arr k))\n", "  (define (max-k lst k)\n   \
    \ (if (or (null? lst) (= k 0))\n        '()\n        (let ([max (apply max lst)])\n\
    \          (cons max (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n",
  "  (sort arr <))\n", "  (define (max-k arr k)\n    (if (or (= k 0) (null? arr))\n\
    \        '()\n        (let ([max (apply max arr)])\n          (cons max (max-k\
    \ (remove max arr) (- k 1))))))\n  (sort (max-k arr k) <))\n", "  (sort arr <\
    \ k))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n    (if (or (null? lst)\
    \ (= k 0))\n        '()\n        (cons (max-k-helper lst)\n              (max-k\
    \ (remove (max-k-helper lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (sort (sublist\
    \ arr 0 k) >))\n", "  (sort arr >))\n", "  (define (max-k arr k)\n    (if (= k\
    \ 0)\n        '()\n        (let ([max (apply max arr)])\n          (cons max (max-k\
    \ (remove max arr) (- k 1))))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n\
    \    (if (or (null? lst) (= k 0))\n        '()\n        (cons (max lst) (max-k\
    \ (remove (max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k lst\
    \ k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (cons (apply max\
    \ lst) (max-k (remove (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n", " \
    \ (sort arr >))\n", "  (sort arr >))\n", "  (sort arr >))\n", "  (define (max-k\
    \ lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (let* ([max (apply\
    \ max lst)]\n               [rest (filter (lambda (x) (< x max)) lst)])\n    \
    \      (cons max (max-k rest (- k 1))))))\n  (max-k arr k))\n", "  (define (max-k\
    \ lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (cons (max-k-helper\
    \ lst)\n              (max-k (remove (max-k-helper lst) lst) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (define (max-nums arr k)\n    (cond [(empty? arr) empty]\n  \
    \        [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (max-nums\
    \ (rest arr) 0)))]\n          [else (cons (max (first arr) (max-nums (rest arr)\
    \ 0))\n                      (max-nums (rest arr) (- k 1)))]))\n  (max-nums arr\
    \ k))\n", "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n       \
    \ '()\n        (cons (max lst) (max-k (remove lst (max lst)) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (define (max-heapify arr i)\n    (define (max-heapify-helper\
    \ arr i)\n      (define left (+ i 1))\n      (define right (+ i 2))\n      (define\
    \ largest (if (< i (array-length arr)) i -1))\n      (if (< left (array-length\
    \ arr))\n          (if (> (array-ref arr left) (array-ref arr largest))\n    \
    \          (set! largest left)))\n      (if (< right (array-length arr))\n   \
    \       (if (> (array-ref arr right) (array-ref arr largest))\n              (set!\
    \ largest right)))\n      (if (not (= largest i))\n          (begin\n        \
    \    (array-swap! arr i largest)\n            (max-heapify-helper arr largest))))\n\
    \    (max-heapify-helper arr i))\n  (define (build-max-heap arr)\n    (define\
    \ (build-max-heap-helper arr i)\n      (if (< i (array-length arr))\n        \
    \  (begin\n            (max-heapify arr i)\n            (build-max-heap-helper\
    \ arr (+ i 1)))))\n    (build-max-heap-helper arr (/ (- (array-length arr) 1)\
    \ 2)))\n  (define (heap-sort arr)\n    (build-max-heap arr)\n    (define (heap-sort-helper\
    \ arr i)\n      (if (< i (array-length arr))\n          (begin\n            (array-swap!\
    \ arr 0 i)\n            (max-heapify arr 0)\n            (heap-sort-helper arr\
    \ (+ i 1)))))\n    (heap-sort-helper arr 0))\n  (define (get-max arr k)\n    (heap-sort\
    \ arr)\n    (define (get-max-helper arr i k)\n      (if (= i k)\n          (list)\n\
    \          (cons (array-ref arr i) (get-max-helper arr (+ i 1) k))))\n    (get-max-helper\
    \ arr 0 k))\n  (get-max arr k))\n", "  (define (max-nums arr k)\n    (if (empty?\
    \ arr)\n        '()\n        (let ([max (apply max arr)])\n          (cons max\
    \ (max-nums (filter (lambda (x) (not (= x max))) arr) (- k 1))))))\n  (sort (max-nums\
    \ arr k) <))\n", "  (define (max-k lst k)\n    (if (= k 0)\n        '()\n    \
    \    (cons (max (car lst) (car (cdr lst)))\n              (max-k (cdr lst) (-\
    \ k 1)))))\n  (max-k arr k))\n", "  (sort arr >))\n", "  (sort arr <))\n", " \
    \ (sort arr >))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n    (if (null?\
    \ lst)\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n", "  (let loop ([arr\
    \ arr] [k k] [result '()])\n    (if (or (null? arr) (= k 0))\n        result\n\
    \        (loop (cdr arr) (- k 1) (cons (car arr) result)))))\n", "  (sort arr\
    \ >))\n", "  (define (max-k arr k)\n    (if (= k 0)\n        '()\n        (cons\
    \ (max-k-helper arr)\n              (max-k (remove (max-k-helper arr) arr) (-\
    \ k 1)))))\n  (max-k arr k))\n", "  (define (helper arr k)\n    (if (= k 0)\n\
    \        '()\n        (let* ([max (apply max arr)]\n               [index (index-of\
    \ arr max)]\n               [new-arr (remove-at arr index)])\n          (cons\
    \ max (helper new-arr (- k 1))))))\n  (helper arr k))\n", "  (define (max-k lst\
    \ k)\n    (cond\n      [(empty? lst) empty]\n      [(= k 0) empty]\n      [else\n\
    \       (define max-val (max (first lst) (max-k (rest lst) (- k 1))))\n      \
    \ (cons max-val (max-k (remove max-val lst) (- k 1)))]))\n  (max-k arr k))\n",
  "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n      \
    \  (cons (apply max lst) (max-k (remove (apply max lst) lst) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (sort arr <))\n", "  (define (max-k lst k)\n    (if (or (null?\
    \ lst) (= k 0))\n        '()\n        (let* ([max (apply max lst)]\n         \
    \      [max-index (index-of max lst)])\n          (cons max (max-k (remove-at\
    \ max-index lst) (- k 1))))))\n  (max-k arr k))\n", "  (sort arr >))\n", "  (define\
    \ (max-k arr k)\n    (if (= k 0)\n        '()\n        (let ([max (apply max arr)])\n\
    \          (cons max (max-k (remove max arr) (- k 1))))))\n  (sort (max-k arr\
    \ k) <))\n", "  (define (max-k lst)\n    (cond\n      [(empty? lst) empty]\n \
    \     [(= 1 (length lst)) lst]\n      [else (cons (max (first lst) (second lst))\
    \ (max-k (rest lst)))]))\n  (define (max-k-helper lst k)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(= 1 k) lst]\n      [else (max-k-helper (max-k lst) (- k\
    \ 1))]))\n  (max-k-helper arr k))\n", "  (sort arr >))\n", "  (define (helper\
    \ arr k)\n    (if (empty? arr)\n        '()\n        (let ([max (apply max arr)])\n\
    \          (cons max (helper (remove max arr) (- k 1))))))\n  (helper arr k))\n",
  "  (define (max-k arr k)\n    (if (or (null? arr) (= k 0))\n        '()\n      \
    \  (let ([max (apply max arr)])\n          (cons max (max-k (remove max arr) (-\
    \ k 1))))))\n  (sort (max-k arr k) <))\n", "  (define (max-k-nums arr k)\n   \
    \ (define (max-k-nums-iter arr k acc)\n      (if (zero? k)\n          acc\n  \
    \        (max-k-nums-iter (remove (max arr) arr) (sub1 k) (cons (max arr) acc))))\n\
    \    (max-k-nums-iter arr k '()))\n  (max-k-nums arr k))\n", "  (sort arr >))\n",
  "  (define (helper arr k)\n    (if (zero? k)\n        '()\n        (let ([max (apply\
    \ max arr)])\n          (cons max (helper (remove max arr) (- k 1))))))\n  (helper\
    \ arr k))\n", "  (define (max-k-nums arr k)\n    (if (zero? k)\n        '()\n\
    \        (cons (apply max arr)\n              (max-k-nums (remove (apply max arr)\
    \ arr) (- k 1)))))\n  (max-k-nums arr k))\n", "  (define (max-k lst k)\n    (if\
    \ (or (null? lst) (= k 0))\n        '()\n        (let* ([max (apply max lst)]\n\
    \               [max-index (find-max lst max)])\n          (cons max (max-k (remove-at\
    \ lst max-index) (- k 1))))))\n  (max-k arr k))\n", "  (define (max-k lst)\n \
    \   (cond\n      [(empty? lst) empty]\n      [(= k 0) empty]\n      [else\n  \
    \     (define m (max (first lst) (max-k (rest lst))))\n       (cons m (max-k (remove\
    \ m lst)))]))\n  (max-k arr))\n", "  (define (max-k lst k)\n    (if (or (null?\
    \ lst) (= k 0))\n        '()\n        (cons (apply max lst) (max-k (remove (apply\
    \ max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (max-k arr k)\n \
    \   (if (= k 0)\n        '()\n        (cons (max (car arr) (max-k (cdr arr) (-\
    \ k 1)))\n              (max-k (cdr arr) (- k 1)))))\n  (sort (max-k arr k) >))\n",
  "  (sort arr >))\n", "  (sort arr >))\n", "  (define (max-k arr k)\n    (if (= k\
    \ 0)\n        '()\n        (cons (max-k-helper arr) (max-k (remove (max-k-helper\
    \ arr) arr) (- k 1)))))\n  (max-k arr k))\n", "  (sort arr >))\n", "  (sort arr\
    \ >))\n", "  (define (max-k lst k)\n    (cond\n      [(empty? lst) empty]\n  \
    \    [(= k 0) empty]\n      [else\n       (define max-val (apply max lst))\n \
    \      (define max-pos (position max-val lst))\n       (cons max-val (max-k (remove\
    \ max-pos lst) (- k 1)))]))\n  (max-k arr k))\n", "  (define (max-k arr k)\n \
    \   (if (or (null? arr) (= k 0))\n        '()\n        (let ([m (apply max arr)])\n\
    \          (cons m (max-k (remove m arr) (- k 1))))))\n  (sort (max-k arr k) <))\n",
  "  (define (maximum-helper arr k result)\n    (cond [(empty? arr) result]\n    \
    \      [(> k (length result))\n           (maximum-helper (rest arr) k (cons (first\
    \ arr) result))]\n          [(< (first arr) (first result))\n           (maximum-helper\
    \ (rest arr) k result)]\n          [else\n           (maximum-helper (rest arr)\
    \ k (cons (first arr) (rest result)))]))\n  (maximum-helper arr k (list (first\
    \ arr))))\n", "  (define (helper arr k)\n    (cond\n      [(empty? arr) empty]\n\
    \      [(= k 0) empty]\n      [else\n       (define max-index (max-index arr))\n\
    \       (cons (list-ref arr max-index)\n             (helper (remove-at arr max-index)\
    \ (- k 1)))]))\n  (helper arr k))\n", "  (sort arr >))\n", "  (define (insert-sort\
    \ arr)\n    (define (insert-sort-helper arr i)\n      (if (= i 0)\n          arr\n\
    \          (let* ([x (vector-ref arr i)]\n                 [j (sub1 i)])\n   \
    \         (while (and (>= j 0) (< (vector-ref arr j) x))\n              (vector-set!\
    \ arr (add1 j) (vector-ref arr j))\n              (set! j (sub1 j)))\n       \
    \     (vector-set! arr (add1 j) x)\n            (insert-sort-helper arr (sub1\
    \ i)))))\n    (insert-sort-helper arr (sub1 (vector-length arr))))\n  (define\
    \ (max-k arr k)\n    (define (max-k-helper arr k i)\n      (if (= i k)\n     \
    \     arr\n          (let* ([x (vector-ref arr i)]\n                 [j (add1\
    \ i)])\n            (while (< j (vector-length arr))\n              (if (> (vector-ref\
    \ arr j) x)\n                  (begin\n                    (vector-set! arr i\
    \ (vector-ref arr j))\n                    (vector-set! arr j x)\n           \
    \         (set! x (vector-ref arr i)))\n                  (void))\n          \
    \    (set! j (add1 j)))\n            (max-k-helper arr k (add1 i)))))\n    (max-k-helper\
    \ arr k 0))\n  (max-k (insert-sort arr) k))\n", "  (define (max-k-helper arr k)\n\
    \    (if (= k 0)\n        '()\n        (let ([max (apply max arr)])\n        \
    \  (cons max (max-k-helper (remove max arr) (- k 1))))))\n  (max-k-helper arr\
    \ k))\n", "  (sort (sublist arr k) >))\n", "  (define (max-k-nums arr k)\n   \
    \ (if (zero? k)\n        '()\n        (let ([max-num (apply max arr)])\n     \
    \     (cons max-num (max-k-nums (remove max-num arr) (- k 1))))))\n  (max-k-nums\
    \ arr k))\n", "  (sort arr >))\n", "  (define (max-k lst k)\n    (if (or (null?\
    \ lst) (= k 0))\n        '()\n        (cons (apply max lst)\n              (max-k\
    \ (remove (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define (insert-sort\
    \ arr)\n    (define (insert-sort-iter arr sorted)\n      (cond [(empty? arr) sorted]\n\
    \            [(empty? sorted) (insert-sort-iter (rest arr) (list (first arr)))\
    \ ]\n            [else (insert-sort-iter (rest arr) (insert (first arr) sorted))]))\n\
    \    (insert-sort-iter arr empty))\n  (define (insert x lst)\n    (cond [(empty?\
    \ lst) (list x)]\n          [(> x (first lst)) (cons x lst)]\n          [else\
    \ (cons (first lst) (insert x (rest lst)))]))\n  (take (insert-sort arr) k))\n",
  "  (define (max-k lst k)\n    (cond\n      [(empty? lst) empty]\n      [(= k 0)\
    \ empty]\n      [else (cons (max-k-helper lst) (max-k (remove lst (max-k-helper\
    \ lst)) (- k 1)))]))\n  (max-k arr k))\n", "  (define (max-heapify arr i)\n  \
    \  (define (left i) (+ (* 2 i) 1))\n    (define (right i) (+ (* 2 i) 2))\n   \
    \ (define (swap arr i j)\n      (define (swap-helper arr i j)\n        (define\
    \ (swap-helper-helper arr i j)\n          (define (swap-helper-helper-helper arr\
    \ i j)\n            (define (swap-helper-helper-helper-helper arr i j)\n     \
    \         (define (swap-helper-helper-helper-helper-helper arr i j)\n        \
    \        (define (swap-helper-helper-helper-helper-helper-helper arr i j)\n  \
    \                (define (swap-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (max-k-nums arr k)\n    (if (empty? arr)\n        '()\n        (let ([max-num\
    \ (apply max arr)])\n          (cons max-num (max-k-nums (remove max-num arr)\
    \ (- k 1))))))\n  (max-k-nums arr k))\n", "  (sort arr >))\n", "  (define (max-k\
    \ lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (cons (apply\
    \ max lst)\n              (max-k (remove (apply max lst) lst) (- k 1)))))\n  (max-k\
    \ arr k))\n", "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n   \
    \     '()\n        (let ([max (apply max lst)])\n          (cons max (max-k (remove\
    \ max lst) (- k 1))))))\n  (max-k arr k))\n", "  (define (max-k lst k)\n    (if\
    \ (= k 0)\n        '()\n        (cons (max-k-helper lst)\n              (max-k\
    \ (remove (max-k-helper lst) lst) (- k 1)))))\n  (max-k arr k))\n", "  (define\
    \ (max-k arr k)\n    (if (empty? arr)\n        '()\n        (define (max-k-helper\
    \ arr k)\n          (if (empty? arr)\n              '()\n              (let ([max\
    \ (max (first arr) (first (max-k-helper (rest arr) k)))])\n                (cons\
    \ max (max-k-helper (remove max arr) (- k 1))))))\n        (max-k-helper arr k)))\n\
    \  (sort (max-k arr k) >))\n", "  (define (max-k lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(= k 0) empty]\n      [else\n       (define max-val (apply\
    \ max lst))\n       (cons max-val (max-k (remove max-val lst)))]))\n  (max-k arr))\n",
  "  (define (max-k lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n      \
    \  (cons (car (sort > lst)) (max-k (remove (car (sort > lst)) lst) (- k 1)))))\n\
    \  (max-k arr k))\n", "  (define (max-k-heap arr k)\n    (define (max-k-heap-helper\
    \ arr k i)\n      (define (swap arr i j)\n        (define (swap-helper arr i j)\n\
    \          (if (= i j)\n              arr\n              (begin\n            \
    \    (define temp (vector-ref arr i))\n                (vector-set! arr i (vector-ref\
    \ arr j))\n                (vector-set! arr j temp)\n                arr)))\n\
    \        (swap-helper arr i j))\n      (define (left i)\n        (+ i i 1))\n\
    \      (define (right i)\n        (+ i i 2))\n      (define (parent i)\n     \
    \   (quotient i 2))\n      (define (max-heapify arr i)\n        (define (max-heapify-helper\
    \ arr i)\n          (define l (left i))\n          (define r (right i))\n    \
    \      (define largest\n            (cond\n              [(< l k)\n          \
    \     (if (> (vector-ref arr l) (vector-ref arr i))\n                   l\n  \
    \                 i)]\n              [else\n               i]))\n          (define\
    \ largest\n            (if (> (vector-ref arr r) (vector-ref arr largest))\n \
    \               r\n                largest))\n          (if (= largest i)\n  \
    \            arr\n              (begin\n                (swap arr i largest)\n\
    \                (max-heapify-helper arr largest))))\n        (max-heapify-helper\
    \ arr i))\n      (if (< i (quotient k 2))\n          (begin\n            (max-heapify-helper\
    \ arr i)\n            (max-k-heap-helper arr k (+ i 1)))\n          arr))\n  \
    \  (max-k-heap-helper arr k 0))\n  (define (build-max-k-heap arr k)\n    (define\
    \ (build-max-k-heap-helper arr k i)\n      (define (left i)\n        (+ i i 1))\n\
    \      (define (right i)\n        (+ i i 2))\n      (define (parent i)\n     \
    \   (quotient i 2))\n      (define ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
