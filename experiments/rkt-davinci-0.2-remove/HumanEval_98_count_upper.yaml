name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n(define (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     \
    \  (loop (rest s) (add1 i) (add1 count))]\n      [else (loop (rest s) (add1 i)\
    \ count)])))\n", "  (define (count_upper_helper s i acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(= i 0) (count_upper_helper (rest s) 1 (if (member (first s)\
    \ '#(#\\A #\\E #\\I #\\O #\\U)) (+ acc 1) acc))]\n      [else (count_upper_helper\
    \ (rest s) 0 acc)]))\n  (count_upper_helper s 0 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is_vowel? c)\n\
    \    (or (equal? c #\\A)\n        (equal? c #\\E)\n        (equal? c #\\I)\n \
    \       (equal? c #\\O)\n        (equal? c #\\U)))\n  (define (is_upper? c)\n\
    \    (and (char-upper-case? c)\n         (is_vowel? c)))\n  (define (count_upper_even\
    \ s)\n    (cond ((null? s) 0)\n          ((is_upper? (car s))\n           (+ 1\
    \ (count_upper_even (cdr s))))\n          (else (count_upper_even (cdr s)))))\n\
    \  (count_upper_even (cddr s)))\n</code>\n", "  (define (count_upper_helper s\
    \ n)\n    (cond\n      [(empty? s) n]\n      [(and (even? (length s)) (vowel?\
    \ (first s))) (count_upper_helper (rest s) (+ n 1))]\n      [else (count_upper_helper\
    \ (rest s) n)]))\n  (count_upper_helper s 0))\n", "  (define (is_upper? c)\n \
    \   (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count-upper-vowels s)\n    (cond ((null? s) 0)\n          ((is_upper?\
    \ (car s))\n           (+ 1 (count-upper-vowels (cdr s))))\n          (else (count-upper-vowels\
    \ (cdr s)))))\n  (count-upper-vowels (even-index-chars s)))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(and (even? (string-length s))\n          (vowel? (string-ref\
    \ s 0))\n          (char-upper-case? (string-ref s 0)))\n     (+ 1 (count_upper\
    \ (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count_upper_vowels_even_indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is_even? (string-length s))\n      \
    \ (+ (if (and (is_upper? (first s)) (is_vowel? (first s))) 1 0)\n          (count_upper_vowels_even_indices\
    \ (rest s)))]\n      [else\n       (count_upper_vowels_even_indices (rest s))]))\n\
    \  (count_upper_vowels_even_indices s))\n", "  (define (count_upper_helper s i)\n\
    \    (cond\n      [(empty? s) 0]\n      [(= i 0) (+ (count_upper_helper (rest\
    \ s) 1)\n                  (if (char-upper-case? (first s)) 1 0))]\n      [else\
    \ (count_upper_helper (rest s) (- i 1))]))\n  (count_upper_helper s 0))\n", " \
    \ (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n   \
    \   [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i\
    \ 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is_upper? c)\n  \
    \  (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n   \
    \   [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices (rest s)))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and\
    \ (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is_upper? c)\n  \
    \  (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n\
    \    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count_upper_vowels_in_even_indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(and (is_even? (car s)) (is_upper? (car s)) (is_vowel?\
    \ (car s)))\n       (+ 1 (count_upper_vowels_in_even_indices (cdr s)))]\n    \
    \  [else (count_upper_vowels_in_even_indices (cdr s))]))\n  (count_upper_vowels_in_even_indices\
    \ (string->list s)))\n", "  (let ([s (string-upcase s)])\n    (for/sum ([i (in-range\
    \ (string-length s))]\n              #:when (even? i)\n              #:when (member\
    \ (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n      1)))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(and (even? (index s)) (vowel? (first s)))\n     (+ 1\
    \ (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (even? i) (vowel? (first s)))\n       (loop (rest s) (+\
    \ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(even? (string-length s))\n     (+ (count_upper (rest\
    \ s))\n        (if (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)) 1 0))]\n  \
    \  [else (count_upper (rest s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n\
    \      [(= i (string-length s)) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (index s))\n     (+ (if (member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n        (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-even-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-even-upper-vowels (rest\
    \ s)))]\n      [else (count-even-upper-vowels (rest s))]))\n  (count-even-upper-vowels\
    \ (even-indexes s)))\n", "  (define (count-upper-helper s i)\n    (if (= i (string-length\
    \ s))\n        0\n        (if (and (vowel? (string-ref s i))\n               \
    \  (upper? (string-ref s i)))\n            (+ 1 (count-upper-helper s (+ i 2)))\n\
    \            (count-upper-helper s (+ i 2)))))\n  (count-upper-helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\n          (even? (index-of\
    \ (first s) s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_even-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (+ 1 (count_even-upper-vowels (rest s)))]\n      [else (count_even-upper-vowels\
    \ (rest s))]))\n  (count_even-upper-vowels (rest s)))\n", "  (let loop ([i 0]\
    \ [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and (char-upper-case?\
    \ (string-ref s i))\n            (vowel? (string-ref s i)))\n       (loop (+ i\
    \ 2) (+ count 1))]\n      [else (loop (+ i 2) count)])))\n", "  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first\
    \ s)))\n       (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (define (count_upper_helper\
    \ s i)\n    (if (or (eq? i (string-length s))\n            (not (vowel? (string-ref\
    \ s i))))\n        0\n        (+ (if (char-upper-case? (string-ref s i)) 1 0)\n\
    \           (count_upper_helper s (+ i 2)))))\n  (count_upper_helper s 0))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? (remainder i 2)))\n       (count_upper_helper\
    \ (rest s) (+ i 1))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n \
    \ (count_upper_helper s 0))\n", "  (let ([count 0])\n    (for ([i (in-range (string-length\
    \ s))])\n      (when (and (even? i)\n                 (member (string-ref s i)\
    \ '(#\\A #\\E #\\I #\\O #\\U)))\n        (set! count (+ count 1))))\n    count))\n",
  "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-even-indices\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is_upper? (first s))\n      \
    \          (is_vowel? (first s))\n                (is_even? (sub1 (length s))))\n\
    \           (+ 1 (count-upper-vowels-even-indices (rest s)))]\n          [else\
    \ (count-upper-vowels-even-indices (rest s))]))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n\
    \      [(and (char-upper-case? (first s))\n            (even? (add1 i)))\n   \
    \    (count_upper_helper (rest s) (add1 i))]\n      [else (count_upper_helper\
    \ (rest s) i)]))\n  (count_upper_helper s 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (member\
    \ (string-ref s i) \"AEIOU\"))\n       (loop (+ i 1) (+ count 1))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s))\n          (even? (index s))\n          (upper? (first s)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is-upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is-even? (string-length s))\n      \
    \ (+ (if (and (is-upper? (first s)) (is-vowel? (first s))) 1 0)\n          (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (= (modulo i 2)\
    \ 0)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (let loop ([s s] [n 0])\n    (cond [(empty? s) n]\n          [(and (vowel? (first\
    \ s))\n                (upper? (first s)))\n           (loop (rest s) (+ n 1))]\n\
    \          [else (loop (rest s) n)])))\n", "  (let loop ([i 0] [acc 0])\n    (cond\
    \ [(= i (string-length s)) acc]\n          [(and (char-upper-case? (string-ref\
    \ s i))\n                (vowel? (string-ref s i)))\n           (loop (+ i 2)\
    \ (+ acc 1))]\n          [else (loop (+ i 2) acc)])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (vowel? (first s))\n          (even? (index s))\n         \
    \ (upper? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count_upper_vowels_in_even_indices s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(is_even? (string-length s))\n       (+ (if (and (is_upper? (first s)) (is_vowel?\
    \ (first s))) 1 0)\n          (count_upper_vowels_in_even_indices (rest s)))]\n\
    \      [else (count_upper_vowels_in_even_indices (rest s))]))\n  (count_upper_vowels_in_even_indices\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s))\n     (+ (if (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n        (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (index s))\n     (+ (if (member (first s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n\
    \        (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-even-indices\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is_upper? (first s))\n      \
    \          (is_vowel? (first s))\n                (is_even? (string-length s)))\n\
    \           (+ 1 (count-upper-vowels-even-indices (rest s)))]\n          [else\
    \ (count-upper-vowels-even-indices (rest s))]))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member\
    \ c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-even-upper s)\n    (if (null?\
    \ s)\n        0\n        (+ (if (is_upper? (car s)) 1 0)\n           (count-even-upper\
    \ (cddr s)))))\n  (count-even-upper s))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(and (even? (index s)) (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-vowels-even-indices s)\n    (cond\n      [(empty? s) 0]\n     \
    \ [(is_even? (string-length s))\n       (+ (if (and (is_upper? (first s)) (is_vowel?\
    \ (first s))) 1 0)\n          (count-upper-vowels-even-indices (rest s)))]\n \
    \     [else\n       (count-upper-vowels-even-indices (rest s))]))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\A)\n        (char=? c\
    \ #\\E)\n        (char=? c #\\I)\n        (char=? c #\\O)\n        (char=? c #\\\
    U)))\n  (define (is-upper? c)\n    (and (char-upper-case? c)\n         (is-vowel?\
    \ c)))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(is-upper? (first s))\n       (+ 1 (count-upper-vowels (rest s)))]\n   \
    \   [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-indexes\
    \ s)))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+\
    \ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (cond [(empty?\
    \ s) 0]\n        [(and (vowel? (first s))\n              (even? (index s)))\n\
    \         (+ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (even? i) (vowel? (first s)))\n       (+ 1 (count_upper_helper (rest s) (+ i\
    \ 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\A)\n        (char=?\
    \ c #\\E)\n        (char=? c #\\I)\n        (char=? c #\\O)\n        (char=? c\
    \ #\\U)))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(and (is_vowel? (first s))\n            (char-upper-case? (first s)))\n\
    \       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (even-index-chars s)))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n          [(and\
    \ (even? i) (vowel? (string-ref s i)))\n           (loop (+ i 1) (+ count 1))]\n\
    \          [else (loop (+ i 1) count)])))\n", "  (let loop ([s s] [count 0])\n\
    \    (cond [(empty? s) count]\n          [(and (char-vowel? (first s))\n     \
    \           (char-upper-case? (first s)))\n           (loop (rest s) (+ count\
    \ 1))]\n          [else (loop (rest s) count)])))\n", "  (define (is_upper? c)\n\
    \    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n\
    \    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-even-upper-vowels s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (is_even? (string-length s))\n            (is_upper? (string-ref\
    \ s 0))\n            (is_vowel? (string-ref s 0)))\n       (+ 1 (count-even-upper-vowels\
    \ (substring s 1)))]\n      [else (count-even-upper-vowels (substring s 1))]))\n\
    \  (count-even-upper-vowels s))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (is_even? i)\n    (= (remainder i 2) 0))\n  (define (count_upper_vowels_even_indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even? (first s)) (is_upper?\
    \ (second s)) (is_vowel? (second s)))\n       (+ 1 (count_upper_vowels_even_indices\
    \ (rest (rest s))))]\n      [else (count_upper_vowels_even_indices (rest (rest\
    \ s)))]))\n  (count_upper_vowels_even_indices (string->list s)))\n", "  (count-if\
    \ (lambda (x) (and (vowel? x) (upper? x)))\n            (even-index-chars s)))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (vowel? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_upper? (first s))\n       (+ 1 (count-upper-vowels (rest s)))]\n \
    \     [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-indexed\
    \ s)))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \  (define (is_even? i)\n    (= (remainder i 2) 0))\n  (define (count_upper_vowels_in_even_indices\
    \ s)\n    (for/fold ([count 0]) ([i (in-range (string-length s))])\n      (if\
    \ (and (is_even? i) (is_upper? (string-ref s i)) (is_vowel? (string-ref s i)))\n\
    \          (+ count 1)\n          count)))\n  (count_upper_vowels_in_even_indices\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (index s))\n     (+ (if (member\
    \ (first s) '#(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n        (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(and\
    \ (char-upper-case? (first s))\n              (vowel? (first s)))\n         (+\
    \ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(even? (index s))\n     (+ (if (char-upper-case? (first\
    \ s)) 1 0)\n        (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n     \
    \ [(empty? s) 0]\n      [(is_upper? (first s))\n       (+ 1 (count-upper-vowels\
    \ (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels\
    \ (even-indexes s)))\n", "  (let loop ([i 0] [acc 0])\n    (if (equal? i (string-length\
    \ s))\n        acc\n        (let ([c (string-ref s i)])\n          (if (and (char-upper-case?\
    \ c)\n                   (member c '(#\\A #\\E #\\I #\\O #\\U)))\n           \
    \   (loop (+ i 1) (+ acc 1))\n              (loop (+ i 1) acc))))))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(even?\
    \ (length s))\n       (cond\n         [(char-upper-case? (first s))\n        \
    \  (count_upper_helper (rest s) (+ i 1))]\n         [else\n          (count_upper_helper\
    \ (rest s) i)])]\n      [else\n       (count_upper_helper (rest s) i)]))\n  (count_upper_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\n     \
    \     (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper_helper s i)\n    (if (or (= i (string-length\
    \ s))\n            (not (char-vowel? (string-ref s i))))\n        0\n        (+\
    \ (if (char-upper-case? (string-ref s i)) 1 0)\n           (count_upper_helper\
    \ s (+ i 2)))))\n  (count_upper_helper s 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (if (eq? i (string-length s))\n        count\n        (let ([c (string-ref\
    \ s i)])\n          (if (and (char-upper-case? c)\n                   (member\
    \ c '#(#\\A #\\E #\\I #\\O #\\U)))\n              (loop (+ i 1) (+ count 1))\n\
    \              (loop (+ i 1) count))))))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i)\n   \
    \         (char-upper-case? (string-ref s i))\n            (member (string-ref\
    \ s i) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n   \
    \   [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (count-if pred lst)\n    (if (null? lst)\n    \
    \    0\n        (+ (if (pred (car lst)) 1 0)\n           (count-if pred (cdr lst)))))\n\
    \  (count-if (lambda (c) (and (is_upper? c) (is_vowel? c)))\n            (filter\
    \ even? (string-&gt;list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (is-upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(and (is-even? (length s)) (is-upper? (first s)) (is-vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(even? (index s))\n     (+ (if (member (first s) '#(#\\A #\\E #\\\
    I #\\O #\\U)) 1 0)\n        (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even?\
    \ (position (first s) s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is_even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count_upper_vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(and (is_even? (string-length s)) (is_upper? (string-ref s 0)) (is_vowel?\
    \ (string-ref s 0)))\n       (+ 1 (count_upper_vowels (substring s 1)))]\n   \
    \   [else (count_upper_vowels (substring s 1))]))\n  (count_upper_vowels s))\n",
  "  (define (is_upper c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_even i)\n    (= (remainder i 2) 0))\n  (define (count-vowels s)\n    (for/fold\
    \ ([count 0]) ([i (in-range (string-length s))])\n      (if (and (is_even i) (is_upper\
    \ (string-ref s i)) (is_vowel (string-ref s i)))\n          (+ count 1)\n    \
    \      count)))\n  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (index s))\n     (+ (if (char-upper-case? (first s)) 1 0)\n        (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is-upper? c)\n\
    \    (char-upper-case? c))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is-even? i)\n    (= (remainder i 2) 0))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (define (count-upper-vowels-in-even-indices-iter\
    \ s i acc)\n      (cond\n        [(empty? s) acc]\n        [(and (is-upper? (first\
    \ s))\n              (is-vowel? (first s))\n              (is-even? i))\n    \
    \     (count-upper-vowels-in-even-indices-iter (rest s) (+ i 1) (+ acc 1))]\n\
    \        [else (count-upper-vowels-in-even-indices-iter (rest s) (+ i 1) acc)]))\n\
    \    (count-upper-vowels-in-even-indices-iter s 0 0))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (define (count_upper_helper s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(and (char-upper-case? (first s)) (even? (length s)))\n       (count_upper_helper\
    \ (rest s) (+ n 1))]\n      [else (count_upper_helper (rest s) n)]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\A)\n        (equal?\
    \ c #\\E)\n        (equal? c #\\I)\n        (equal? c #\\O)\n        (equal? c\
    \ #\\U)))\n  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (is_vowel?\
    \ c)))\n  (define (count_upper_even s i)\n    (if (&gt;= i (string-length s))\n\
    \        0\n        (+ (if (is_upper? (string-ref s i)) 1 0)\n           (count_upper_even\
    \ s (+ i 2)))))\n  (count_upper_even s 0))\n</code>\n", "  (define (count_upper_helper\
    \ s i)\n    (if (or (equal? i (string-length s))\n            (not (char-upper-case?\
    \ (string-ref s i))))\n        0\n        (+ 1 (count_upper_helper s (+ i 2)))))\n\
    \  (count_upper_helper s 0))\n", "  (define (count_upper_helper s i acc)\n   \
    \ (cond\n      [(empty? s) acc]\n      [(and (even? i) (vowel? (first s)) (upper?\
    \ (first s)))\n       (count_upper_helper (rest s) (+ i 1) (+ acc 1))]\n     \
    \ [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper s\
    \ 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (index s)) (vowel?\
    \ (first s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (char-upper-case? (first s))\n            (vowel? (first s))\n      \
    \      (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even?\
    \ (length s))\n          (vowel? (first s))\n          (upper? (first s)))\n \
    \    (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (index s))\n     (+ (if (member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n        (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (even? (index s)) (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even? (string-length\
    \ s)) (is_upper? (string-ref s 0)) (is_vowel? (string-ref s 0)))\n       (+ 1\
    \ (count-vowels (substring s 1)))]\n      [else (count-vowels (substring s 1))]))\n\
    \  (count-vowels s))\n", "  (define (count_upper_helper s i acc)\n    (cond [(empty?\
    \ s) acc]\n          [(and (char-upper-case? (first s))\n                (even?\
    \ i))\n           (count_upper_helper (rest s) (+ i 1) (+ acc 1))]\n         \
    \ [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper s\
    \ 0 0))\n", "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (char-vowel? (first s))\n            (char-upper-case? (first s))\n\
    \            (even? (length s)))\n       (loop (rest s) (+ count 1))]\n      [else\
    \ (loop (rest s) count)])))\n", "  (let ([s (string-upcase s)])\n    (for/sum\
    \ ([i (in-range (string-length s))]\n              #:when (even? i)\n        \
    \      #:when (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n      1)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\
    \ (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (vowel? (first s)) (even? i)) (loop (rest s) (add1 i)\
    \ (add1 count))]\n      [else (loop (rest s) (add1 i) count)])))\n", "  (define\
    \ (count_upper_helper s i acc)\n    (cond\n      [(empty? s) acc]\n      [(and\
    \ (even? i) (vowel? (first s))) (count_upper_helper (rest s) (+ i 1) (+ acc 1))]\n\
    \      [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\n   \
    \       (even? (index s))\n          (upper? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count_upper-helper s i acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(and (even? i) (vowel? (first s)))\n       (count_upper-helper (rest s)\
    \ (+ i 1) (+ acc 1))]\n      [else (count_upper-helper (rest s) (+ i 1) acc)]))\n\
    \  (count_upper-helper s 0 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-vowel? (string-ref s 0))\n          (char-upper-case? (string-ref s 0)))\n\
    \     (+ 1 (count_upper (string-drop s 2)))]\n    [else (count_upper (string-drop\
    \ s 2))]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\A)\n        (char=?\
    \ c #\\E)\n        (char=? c #\\I)\n        (char=? c #\\O)\n        (char=? c\
    \ #\\U)))\n  (define (is_upper c)\n    (char-upper-case? c))\n  (define (count-vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((and (is_vowel (car s))\n          \
    \      (is_upper (car s)))\n           (+ 1 (count-vowels (cdr s))))\n       \
    \   (else (count-vowels (cdr s)))))\n  (count-vowels (cddr s)))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let ([s (string-upper-case s)])\n    (for/sum ([i (in-range (string-length\
    \ s))]\n              #:when (even? i)\n              #:when (member (string-ref\
    \ s i) '(#\\A #\\E #\\I #\\O #\\U)))\n      1)))\n", "  (cond [(empty? s) 0]\n\
    \        [(and (vowel? (first s))\n              (even? (index s)))\n        \
    \ (+ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_upper_vowels_even_indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (+ 1 (count_upper_vowels_even_indices (rest s)))]\n    \
    \  [else (count_upper_vowels_even_indices (rest s))]))\n  (count_upper_vowels_even_indices\
    \ (even-indexes s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (index\
    \ s)) (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even? (length s)) (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (define (is_upper? c)\n    (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count-even-upper-vowels s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (is_even? (string-length s))\n            (is_upper? (string-ref\
    \ s 0))\n            (is_vowel? (string-ref s 0)))\n       (+ 1 (count-even-upper-vowels\
    \ (substring s 1)))]\n      [else (count-even-upper-vowels (substring s 1))]))\n\
    \  (count-even-upper-vowels s))\n", "  (let loop ([s s] [count 0])\n    (cond\
    \ [(empty? s) count]\n          [(and (vowel? (first s))\n                (upper?\
    \ (first s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop\
    \ (rest s) count)])))\n", "  (let ([vowels #rx\"[AEIOU]\"])\n    (for/fold ([count\
    \ 0]) ([i (in-range (string-length s))])\n      (if (and (regexp-match? vowels\
    \ (string-ref s i))\n               (even? i))\n          (add1 count)\n     \
    \     count))))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\
    \ (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n\
    \    (if (null? s)\n        0\n        (+ (if (and (is_upper? (car s)) (is_vowel?\
    \ (car s))) 1 0)\n           (if (even? (car (cdr s))) (count-upper-vowels (cdr\
    \ s)) 0))))\n  (count-upper-vowels (string->list s)))\n", "  (define (is_upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count_upper_vowels_in_even_indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is_even? (string-length s))\n      \
    \ (+ (if (and (is_upper? (first s)) (is_vowel? (first s))) 1 0)\n          (count_upper_vowels_in_even_indices\
    \ (rest s)))]\n      [else (count_upper_vowels_in_even_indices (rest s))]))\n\
    \  (count_upper_vowels_in_even_indices s))\n", "  (define (is_upper? c)\n    (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count_upper_vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_even? (string-length s))\n       (+ (if (and (is_upper? (first s))\
    \ (is_vowel? (first s))) 1 0)\n          (count_upper_vowels (rest s)))]\n   \
    \   [else (count_upper_vowels (rest s))]))\n  (count_upper_vowels s))\n", "  (cond\
    \ [(empty? s) 0]\n        [(and (vowel? (first s))\n              (even? (index\
    \ s)))\n         (+ 1 (count_upper (rest s)))]\n        [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (string-index s))\n   \
    \  (+ (if (char-upper-case? (first s)) 1 0)\n        (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(and (is_even? (length s)) (is_upper? (first s)) (is_vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first\
    \ s)))\n       (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n      [else (count_upper-helper\
    \ (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\A)\n        (char=? c #\\E)\n        (char=? c #\\\
    I)\n        (char=? c #\\O)\n        (char=? c #\\U)))\n  (define (is_upper? c)\n\
    \    (and (char-alphabetic? c)\n         (char-upper-case? c)))\n  (define (count-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s))\n   \
    \         (is_vowel? (first s))\n            (even? (remainder (length s) 2)))\n\
    \       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels s))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(even? (index s))\n     (+ (if (char-upper-case? (first s)) 1 0)\n      \
    \  (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0)\n            (member (string-ref s i) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (string-length\
    \ s))\n          (vowel? (string-ref s 0))\n          (char-upper-case? (string-ref\
    \ s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (index s)) (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond [(= i (string-length s))\
    \ count]\n          [(and (even? i) (vowel? (string-ref s i)))\n           (loop\
    \ (+ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is_even? (length s)) (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s))\n          (even? (index s))\n          (upper? (first s)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\A)\n        (char=? c #\\E)\n        (char=?\
    \ c #\\I)\n        (char=? c #\\O)\n        (char=? c #\\U)))\n  (define (count-vowels\
    \ s)\n    (if (string-empty? s)\n        0\n        (if (is-vowel? (string-ref\
    \ s 0))\n            (+ 1 (count-vowels (substring s 1)))\n            (count-vowels\
    \ (substring s 1)))))\n  (count-vowels s))\n", "  (define (is_upper? c)\n    (and\
    \ (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define\
    \ (count-upper-vowels s)\n    (cond ((null? s) 0)\n          ((is_upper? (car\
    \ s))\n           (+ 1 (count-upper-vowels (cdr s))))\n          (else (count-upper-vowels\
    \ (cdr s)))))\n  (count-upper-vowels (filter even? (string->list s))))\n", " \
    \ (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(=\
    \ (remainder i 2) 0)\n       (cond\n         [(char-upper-case? (first s)) (+\
    \ 1 (count_upper-helper (rest s) (+ i 1)))]\n         [else (count_upper-helper\
    \ (rest s) (+ i 1))])]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (string-index\
    \ s))\n     (+ (if (vowel? (string-ref s 0)) 1 0)\n        (count_upper (substring\
    \ s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is_vowel? c)\n\
    \    (or (char=? c #\\A)\n        (char=? c #\\E)\n        (char=? c #\\I)\n \
    \       (char=? c #\\O)\n        (char=? c #\\U)))\n  (define (is_upper? c)\n\
    \    (char-upper-case? c))\n  (define (count-upper-vowels s)\n    (if (null? s)\n\
    \        0\n        (+ (if (and (is_vowel? (car s))\n                   (is_upper?\
    \ (car s)))\n               1\n               0)\n           (count-upper-vowels\
    \ (cdr s)))))\n  (count-upper-vowels (cddr s)))\n", "  (let loop ([s s] [i 0]\
    \ [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (vowel?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (define (count_upper_helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(= i 0) (+ (count_upper_helper (rest s) 1)\n   \
    \               (if (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)) 1 0))]\n \
    \     [else (count_upper_helper (rest s) (- i 1))]))\n  (count_upper_helper s\
    \ 0))\n", "  (cond [(empty? s) 0]\n        [(and (even? (string-index s))\n  \
    \            (member (string-ref s 0) '(#\\A #\\E #\\I #\\O #\\U)))\n        \
    \ (+ 1 (count_upper (string-drop s 1)))]\n        [else (count_upper (string-drop\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (index s))\n     (+ (if\
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0)\n        (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (vowel? (first s))\n          (even? (index s))\n          (upper?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let ((count 0))\n    (for ([i (in-range (string-length s))])\n\
    \      (when (and (even? i)\n                 (member (string-ref s i) '(#\\A\
    \ #\\E #\\I #\\O #\\U)))\n        (set! count (+ count 1))))\n    count))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (even? i) (vowel? (first s)))\n       (+ 1 (count_upper_helper (rest s) (+ i\
    \ 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s)\
    \ i]\n      [(and (even? (length s)) (vowel? (first s))) (count_upper_helper (rest\
    \ s) (+ i 1))]\n      [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(= (remainder i 2) 0)\n       (cond\n         [(char-upper-case?\
    \ (first s)) (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n         [else (count_upper_helper\
    \ (rest s) (+ i 1))])]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n\
    \  (count_upper_helper s 0))\n", "  (cond [(empty? s) 0]\n        [(and (even?\
    \ (length s)) (vowel? (first s)))\n         (+ 1 (count_upper (rest s)))]\n  \
    \      [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(vowel?\
    \ (first s))\n     (if (even? (length s))\n         (+ 1 (count_upper (rest s)))\n\
    \         (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count_upper_vowels_in_even_indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_even? (string-length s))\n \
    \      (+ (if (and (is_upper? (first s)) (is_vowel? (first s))) 1 0)\n       \
    \   (count_upper_vowels_in_even_indices (rest s)))]\n      [else (count_upper_vowels_in_even_indices\
    \ (rest s))]))\n  (count_upper_vowels_in_even_indices s))\n", "  (let loop ([s\
    \ s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-vowel? (car\
    \ s))\n                (char-upper-case? (car s)))\n           (loop (cdr s) (+\
    \ count 1))]\n          [else (loop (cdr s) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels s)\n    (cond\n     \
    \ [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel? (first s)))\n \
    \      (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels (rest\
    \ s))]))\n  (count-upper-vowels (filter is_even? (enumerate s))))\n", "  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_even? (string-length s))\n \
    \      (+ (if (and (is_upper? (first s)) (is_vowel? (first s))) 1 0)\n       \
    \   (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(even? (index s))\n     (+ (if (char-upper-case? (first s)) 1 0)\n\
    \        (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-vowels s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel? (first s))\
    \ (is-even? (length s)))\n       (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (count-vowels s))\n", "  (let loop ([i 0] [count 0])\n    (cond\
    \ [(= i (string-length s)) count]\n          [(and (char-upper-case? (string-ref\
    \ s i))\n                (vowel? (string-ref s i)))\n           (loop (+ i 2)\
    \ (+ count 1))]\n          [else (loop (+ i 2) count)])))\n", "  (define (is_vowel\
    \ c)\n    (or (char=? c #\\A)\n        (char=? c #\\E)\n        (char=? c #\\\
    I)\n        (char=? c #\\O)\n        (char=? c #\\U)))\n  (define (count_upper_helper\
    \ s i)\n    (if (and (not (eq? i (string-length s)))\n             (is_vowel (string-ref\
    \ s i)))\n        (if (even? i)\n            (+ 1 (count_upper_helper s (+ i 1)))\n\
    \            (count_upper_helper s (+ i 1)))\n        (if (not (eq? i (string-length\
    \ s)))\n            (count_upper_helper s (+ i 1))\n            0)))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-even? (string-length s))\n \
    \      (+ (if (and (is-upper? (first s)) (is-vowel? (first s))) 1 0)\n       \
    \   (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (let loop ([s\
    \ s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (vowel? (first s))\n            (even? i))\n       (loop\
    \ (rest s) (add1 i) (add1 count))]\n      [else (loop (rest s) (add1 i) count)])))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\A #\\E #\\I #\\O #\\U)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is_even? (length s)) (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (let ([s (string-upcase s)])\n\
    \    (for/sum ([i (in-range (string-length s))]\n              #:when (even? i)\n\
    \              #:when (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \      1)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even?\
    \ (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond [(empty? s) 0]\n        [(and (vowel? (first s))\n     \
    \         (even? (length s)))\n         (+ 1 (count_upper (rest s)))]\n      \
    \  [else (count_upper (rest s))]))\n", "  (let ([s (string-upcase s)])\n    (for/sum\
    \ ([i (in-range (string-length s))]\n              #:when (even? i)\n        \
    \      #:when (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n      1)))\n",
  "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (vowel?\
    \ (first s))\n                (char-upper-case? (first s)))\n           (loop\
    \ (rest s) (+ count 1))]\n          [else (loop (rest s) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (position (first s) s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and\
    \ (even? (length s)) (vowel? (first s))) (count_upper_helper (rest s) (+ i 1))]\n\
    \      [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(vowel? (string-ref s 0))\n     (if (even? (string-length\
    \ s))\n         (+ 1 (count_upper (substring s 1)))\n         (count_upper (substring\
    \ s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (let loop ([i 0]\
    \ [acc 0])\n    (cond\n      [(= i (string-length s)) acc]\n      [(and (even?\
    \ i) (char-upcase? (string-ref s i)))\n       (loop (+ i 1) (+ acc 1))]\n    \
    \  [else (loop (+ i 1) acc)])))\n", "  (let loop ([s s] [i 0] [count 0])\n   \
    \ (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (member (first s) '#(#\\A #\\E #\\I #\\O #\\U))\n            (even?\
    \ i))\n       (loop (rest s) (add1 i) (add1 count))]\n      [else (loop (rest\
    \ s) (add1 i) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n     \
    \ [(= i (string-length s)) count]\n      [(and (even? i) (member (string-ref s\
    \ i) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n     \
    \ [else (loop (+ i 1) count)])))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-even-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even?\
    \ (string-length s))\n            (is_upper? (string-ref s 0))\n            (is_vowel?\
    \ (string-ref s 0)))\n       (+ 1 (count-even-upper-vowels (substring s 1)))]\n\
    \      [else (count-even-upper-vowels (substring s 1))]))\n  (count-even-upper-vowels\
    \ s))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+\
    \ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count_upper_even s i)\n    (if (or (null? s)\n        \
    \    (= i (string-length s)))\n        0\n        (+ (if (is_upper? (string-ref\
    \ s i)) 1 0)\n           (count_upper_even s (+ i 2)))))\n  (count_upper_even\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (even? i) (vowel? (first s)))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (define (is-upper? c) (char-upper-case? c))\n  (define\
    \ (is-vowel? c) (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (count-vowels (filter even? (enumerate s))))\n", "  (define\
    \ (count_upper_helper s i)\n    (if (or (= i (string-length s))\n            (not\
    \ (char-vowel? (string-ref s i))))\n        0\n        (+ (if (char-upper-case?\
    \ (string-ref s i)) 1 0)\n           (count_upper_helper s (+ i 2)))))\n  (count_upper_helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(char-upper-case? (first s))\n       (if (even? i)\n        \
    \   (loop (rest s) (add1 i) (add1 count))\n           (loop (rest s) (add1 i)\
    \ count))]\n      [else (loop (rest s) (add1 i) count)])))\n", "  (let loop ([i\
    \ 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and\
    \ (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (count-upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (even? (length s)) (vowel?\
    \ (first s))) (count-upper-helper (rest s) (+ i 1))]\n      [else (count-upper-helper\
    \ (rest s) i)]))\n  (count-upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (remainder i 2)))\n       (count_upper_helper\
    \ (rest s) (+ i 1))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n \
    \ (count_upper_helper s 0))\n", "  (define (count_upper_helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(= (modulo i 2) 0)\n       (cond\n         [(char-upper-case?\
    \ (first s)) (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n         [else (count_upper_helper\
    \ (rest s) (+ i 1))])]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n\
    \  (count_upper_helper s 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n \
    \     [(= i (string-length s)) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (let loop ([i 0] [acc 0])\n    (cond [(= i (string-length s)) acc]\n       \
    \   [(and (vowel? (string-ref s i))\n                (even? i))\n           (loop\
    \ (+ i 1) (+ acc 1))]\n          [else (loop (+ i 1) acc)])))\n", "  (let loop\
    \ ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? (index\
    \ s))\n            (vowel? (first s))\n            (upper? (first s)))\n     \
    \  (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n", " \
    \ (define vowels '(#\\A #\\E #\\I #\\O #\\U))\n  (define (is_upper? c)\n    (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member\
    \ c vowels))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(is_vowel? (first s)) (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (is_upper? (first s)) (is_vowel? (first s))) (+ 1 (count-upper-vowels\
    \ (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n  (define (count-upper-vowels-even\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)) (even? (count-vowels s))) (+ 1 (count-upper-vowels-even (rest s)))]\n\
    \      [else (count-upper-vowels-even (rest s))]))\n  (count-upper-vowels-even\
    \ s))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n\
    \      [(and (even? i) (vowel? (first s)))\n       (+ 1 (count_upper_helper (rest\
    \ s) (+ i 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (string-index s))\n\
    \          (member (string-ref s 0) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (count-if\
    \ (lambda (c) (and (char-upper-case? c) (vowel? c)))\n            (even-indexes\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-vowel? (first s)) (char-upper-case?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
