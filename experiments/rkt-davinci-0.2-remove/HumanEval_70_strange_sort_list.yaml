name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n(define (strange_sort_list lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (let* ([min (apply min lst)]\n               [max (apply\
    \ max lst)]\n               [new-lst (remove min (remove max lst))])\n       \
    \   (strange_sort_list_helper new-lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let ([min (apply min lst)]\n              [max (apply\
    \ max lst)])\n          (strange_sort_list_helper (remove min (remove max lst))\n\
    \                                    (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n\
    \      (list (min lst))\n      (list (max (remove (min lst) lst)))\n      (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) lst)))]))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max lst)\n    (if (null? lst)\n        (values 0 0)\n        (let*\
    \ ([min (apply min lst)]\n               [max (apply max lst)]\n             \
    \  [min-index (index-of min lst)]\n               [max-index (index-of max lst)])\n\
    \          (values min max min-index max-index))))\n  (define (index-of x lst)\n\
    \    (let loop ([lst lst] [i 0])\n      (if (null? lst)\n          #f\n      \
    \    (if (equal? x (car lst))\n              i\n              (loop (cdr lst)\
    \ (+ i 1))))))\n  (define (remove-at i lst)\n    (if (zero? i)\n        (cdr lst)\n\
    \        (cons (car lst) (remove-at (- i 1) (cdr lst)))))\n  (define (strange-sort\
    \ lst)\n    (if (null? lst)\n        '()\n        (let* ([min-max (min-max lst)]\n\
    \               [min (car min-max)]\n               [max (cadr min-max)]\n   \
    \            [min-index (caddr min-max)]\n               [max-index (cadddr min-max)])\n\
    \          (cons min (cons max (strange-sort (remove-at min-index (remove-at max-index\
    \ lst))))))))\n  (strange-sort lst))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let ([min (apply min lst)]\n              [max (apply max lst)])\n \
    \         (strange_sort_list_helper (remove min (remove max lst))\n          \
    \                          (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max-list lst)\n    (define (min-max-list-iter\
    \ lst min max)\n      (cond [(empty? lst) (list min max)]\n            [(< (first\
    \ lst) min) (min-max-list-iter (rest lst) (first lst) max)]\n            [(> (first\
    \ lst) max) (min-max-list-iter (rest lst) min (first lst))]\n            [else\
    \ (min-max-list-iter (rest lst) min max)]))\n    (min-max-list-iter lst (first\
    \ lst) (first lst)))\n  (define (strange-sort-list-iter lst min-max-lst)\n   \
    \ (cond [(empty? lst) min-max-lst]\n          [(empty? (rest lst)) (append min-max-lst\
    \ (list (first lst)))]\n          [else (strange-sort-list-iter (rest lst) (append\
    \ min-max-lst (list (first lst) (first (rest lst)))))]))\n  (strange-sort-list-iter\
    \ (rest lst) (min-max-list lst)))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max lst)\n\
    \    (if (null? lst)\n        '()\n        (cons (apply min lst)\n           \
    \   (cons (apply max lst)\n                    (min-max (remove (apply min lst)\n\
    \                                     (remove (apply max lst)\n              \
    \                               lst)))))))\n  (min-max lst))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (define min (min (first lst) (second lst)))\n\
    \       (define max (max (first lst) (second lst)))\n       (define rest (rest\
    \ (rest lst)))\n       (strange_sort_list_helper rest (append acc (list min max)))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort lst acc)\n\
    \    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n    \
    \           [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort new-lst (append acc (list min max))))))\n\
    \  (strange_sort lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n\
    \    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n    \
    \           [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max lst)\n\
    \    (let loop ((lst lst) (min (car lst)) (max (car lst)))\n      (cond ((null?\
    \ lst) (list min max))\n            ((< (car lst) min) (loop (cdr lst) (car lst)\
    \ max))\n            ((> (car lst) max) (loop (cdr lst) min (car lst)))\n    \
    \        (else (loop (cdr lst) min max)))))\n  (define (strange-sort lst)\n  \
    \  (if (null? lst) '()\n        (let ((min-max (min-max lst)))\n          (append\
    \ (list (car min-max) (cadr min-max))\n                  (strange-sort (remove\
    \ (car min-max) (remove (cadr min-max) lst)))))))\n  (strange-sort lst))\n", " \
    \ (define (min-max lst)\n    (let ((min (apply min lst))\n          (max (apply\
    \ max lst)))\n      (values min max)))\n  (define (strange-sort lst)\n    (if\
    \ (null? lst)\n        '()\n        (let ((min (apply min lst))\n            \
    \  (max (apply max lst)))\n          (append (list min max)\n                \
    \  (strange-sort (remove min (remove max lst)))))))\n  (strange-sort lst))\n",
  "  (define (strange_sort_list_helper lst min max)\n    (if (null? lst)\n       \
    \ '()\n        (if (null? (cdr lst))\n            (list (car lst))\n         \
    \   (if (equal? min max)\n                (list min)\n                (append\
    \ (list min)\n                        (strange_sort_list_helper (remove min lst)\n\
    \                                                  (apply min lst)\n         \
    \                                         (apply max lst))\n                 \
    \       (list max)\n                        (strange_sort_list_helper (remove\
    \ max lst)\n                                                  (apply min lst)\n\
    \                                                  (apply max lst)))))))\n  (strange_sort_list_helper\
    \ lst (apply min lst) (apply max lst)))\n", "  (define (strange_sort lst acc)\n\
    \    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n    \
    \           [max (apply max lst)]\n               [lst (remove min lst)]\n   \
    \            [lst (remove max lst)])\n          (strange_sort lst (append acc\
    \ (list min max))))))\n  (strange_sort lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (let* ([min (apply min lst)]\n              [max\
    \ (apply max lst)]\n              [lst (remove min lst)]\n              [lst (remove\
    \ max lst)])\n         (strange_sort_list_helper lst (append acc (list min max))))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (helper lst acc)\n    (if\
    \ (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n           \
    \    [max (apply max lst)]\n               [lst (remove min lst)]\n          \
    \     [lst (remove max lst)])\n          (helper lst (append acc (list min max))))))\n\
    \  (helper lst '()))\n", "  (if (null? lst)\n      '()\n      (let* ([min (apply\
    \ min lst)]\n             [max (apply max lst)]\n             [lst (remove min\
    \ lst)]\n             [lst (remove max lst)])\n        (append (list min max)\
    \ (strange_sort_list lst)))))\n", "  (define (strange_sort_list_helper lst acc)\n\
    \    (if (null? lst)\n        acc\n        (strange_sort_list_helper (remove (min\
    \ lst) lst)\n                                  (cons (min lst)\n             \
    \                           (strange_sort_list_helper (remove (max lst) lst)\n\
    \                                                                  (cons (max\
    \ lst) acc))))))\n  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n\
    \      '()\n      (let* ([min (apply min lst)]\n             [max (apply max lst)]\n\
    \             [lst (remove min lst)]\n             [lst (remove max lst)])\n \
    \       (append (list min max) (strange_sort_list lst)))))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_list_iter lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (rest lst)) (append acc lst)]\n      [else\n       (let* ([min\
    \ (apply min lst)]\n              [max (apply max lst)]\n              [rest (remove\
    \ min (remove max lst))])\n         (strange_sort_list_iter rest (append acc (list\
    \ min max))))]))\n  (strange_sort_list_iter lst '()))\n", "  (define (strange_sort_list_iter\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_iter lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let ([min (apply min lst)]\n              [max (apply\
    \ max lst)])\n          (strange_sort_list_helper (remove min (remove max lst))\n\
    \                                    (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max-lst lst)\n    (let ([min (apply min lst)]\n\
    \          [max (apply max lst)])\n      (list min max)))\n  (define (remove-min-max\
    \ lst)\n    (let ([min-max (min-max-lst lst)])\n      (remove (car min-max) (remove\
    \ (cadr min-max) lst))))\n  (define (strange-sort lst)\n    (if (null? lst)\n\
    \        '()\n        (append (min-max-lst lst) (strange-sort (remove-min-max\
    \ lst)))))\n  (strange-sort lst))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (if (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n           \
    \  [max (apply max lst)]\n             [lst (remove min lst)]\n             [lst\
    \ (remove max lst)])\n        (cons min (cons max (strange_sort_list lst))))))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [new-lst (remove min (remove max lst))])\n          (strange_sort_list_helper\
    \ new-lst (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n",
  "  (define (strange_sort_helper lst acc)\n    (if (null? lst)\n        acc\n   \
    \     (let* ([min (apply min lst)]\n               [max (apply max lst)]\n   \
    \            [new-lst (remove min (remove max lst))])\n          (strange_sort_helper\
    \ new-lst (append acc (list min max))))))\n  (strange_sort_helper lst '()))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (strange_sort_list_helper (remove (min lst) lst)\n                  \
    \                (cons (min lst)\n                                        (strange_sort_list_helper\
    \ (remove (max lst) lst)\n                                                   \
    \               (cons (max lst) acc))))))\n  (strange_sort_list_helper lst '()))\n",
  "  (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min-val (apply min lst)]\n               [max-val (apply max\
    \ lst)]\n               [min-idx (list-index min-val lst)]\n               [max-idx\
    \ (list-index max-val lst)])\n          (strange_sort_list_iter (remove-at min-idx\
    \ lst)\n                                  (append acc (list min-val max-val))))))\n\
    \  (strange_sort_list_iter lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst min max)\n    (cond\n      [(null? lst) '()]\n      [(= (car lst) min) (cons\
    \ min (strange_sort_list_helper (cdr lst) (min (car lst) (car (cdr lst))) (max\
    \ (car lst) (car (cdr lst)))))]\n      [(= (car lst) max) (cons max (strange_sort_list_helper\
    \ (cdr lst) (min (car lst) (car (cdr lst))) (max (car lst) (car (cdr lst)))))]\n\
    \      [else (strange_sort_list_helper (cdr lst) min max)]))\n  (strange_sort_list_helper\
    \ lst (min (car lst) (car (cdr lst))) (max (car lst) (car (cdr lst)))))\n</code>\n",
  "  (define (min-max-lst lst)\n    (define (min-max-lst-iter lst min max)\n     \
    \ (if (null? lst)\n          (list min max)\n          (let ([curr (car lst)])\n\
    \            (if (&lt; curr min)\n                (min-max-lst-iter (cdr lst)\
    \ curr max)\n                (if (&gt; curr max)\n                    (min-max-lst-iter\
    \ (cdr lst) min curr)\n                    (min-max-lst-iter (cdr lst) min max))))))\n\
    \    (min-max-lst-iter lst (car lst) (car lst)))\n  (define (strange-sort-lst-iter\
    \ lst min max)\n    (if (null? lst)\n        '()\n        (let ([curr (car lst)])\n\
    \          (if (&lt; curr min)\n              (strange-sort-lst-iter (cdr lst)\
    \ curr max)\n              (if (&gt; curr max)\n                  (strange-sort-lst-iter\
    \ (cdr lst) min curr)\n                  (cons curr (strange-sort-lst-iter (cdr\
    \ lst) min max)))))))\n  (let ([min-max (min-max-lst lst)])\n    (strange-sort-lst-iter\
    \ lst (car min-max) (cadr min-max))))\n</code>\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min lst)\n\
    \    (if (null? (cdr lst))\n        (car lst)\n        (if (< (car lst) (min (cdr\
    \ lst)))\n            (car lst)\n            (min (cdr lst)))))\n  (define (max\
    \ lst)\n    (if (null? (cdr lst))\n        (car lst)\n        (if (> (car lst)\
    \ (max (cdr lst)))\n            (car lst)\n            (max (cdr lst)))))\n  (define\
    \ (remove_min lst)\n    (if (null? (cdr lst))\n        '()\n        (if (= (car\
    \ lst) (min lst))\n            (cdr lst)\n            (cons (car lst) (remove_min\
    \ (cdr lst))))))\n  (define (remove_max lst)\n    (if (null? (cdr lst))\n    \
    \    '()\n        (if (= (car lst) (max lst))\n            (cdr lst)\n       \
    \     (cons (car lst) (remove_max (cdr lst))))))\n  (define (strange_sort lst)\n\
    \    (if (null? lst)\n        '()\n        (cons (min lst)\n              (cons\
    \ (max lst)\n                    (strange_sort (append (remove_min lst) (remove_max\
    \ lst)))))))\n  (strange_sort lst))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max-lst lst)\n    (define (min-max-lst-helper lst min max)\n  \
    \    (cond\n        [(empty? lst) (list min max)]\n        [(< (first lst) min)\
    \ (min-max-lst-helper (rest lst) (first lst) max)]\n        [(> (first lst) max)\
    \ (min-max-lst-helper (rest lst) min (first lst))]\n        [else (min-max-lst-helper\
    \ (rest lst) min max)]))\n    (min-max-lst-helper lst (first lst) (first lst)))\n\
    \  (define (strange-sort-lst-helper lst min max)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= (first lst) min) (cons min (strange-sort-lst-helper (rest\
    \ lst) (first (min-max-lst (rest lst))) max))]\n      [(= (first lst) max) (cons\
    \ max (strange-sort-lst-helper (rest lst) min (first (min-max-lst (rest lst)))))]\n\
    \      [else (strange-sort-lst-helper (rest lst) min max)]))\n  (strange-sort-lst-helper\
    \ lst (first (min-max-lst lst)) (first (rest (min-max-lst lst)))))\n```\n\n###\
    \ Problem 3\n\n```racket\n#lang racket\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_helper lst acc)\n    (if (null? lst)\n        acc\n  \
    \      (let* ([min (apply min lst)]\n               [max (apply max lst)]\n  \
    \             [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_helper lst (append acc (list min max))))))\n  (strange_sort_helper\
    \ lst '()))\n", "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [new-lst (remove min (remove max lst))])\n          (helper new-lst\
    \ (append acc (list min max))))))\n  (helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= (length lst)\
    \ 1) (cons (first lst) empty)]\n      [else\n       (cons min\n             (cons\
    \ max\n                   (strange_sort_list_helper (remove min (remove max lst))\n\
    \                                             (min (remove min (remove max lst)))\n\
    \                                             (max (remove min (remove max lst))))))]))\n\
    \  (strange_sort_list_helper lst (min lst) (max lst)))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list (min lst))\n\
    \      (list (max (remove (min lst) lst)))\n      (strange_sort_list (remove (max\
    \ (remove (min lst) lst)) lst)))]))\n", "  (define (helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [new-lst (remove min (remove max lst))])\n\
    \          (helper new-lst (append acc (list min max))))))\n  (helper lst '()))\n",
  "  (define (min-max lst)\n    (if (null? lst)\n        (values 0 0)\n        (let*\
    \ ([min (apply min lst)]\n               [max (apply max lst)]\n             \
    \  [min-index (index-of min lst)]\n               [max-index (index-of max lst)])\n\
    \          (values min max min-index max-index))))\n  (define (index-of x lst)\n\
    \    (if (null? lst)\n        -1\n        (if (equal? x (car lst))\n         \
    \   0\n            (+ 1 (index-of x (cdr lst))))))\n  (define (remove-at index\
    \ lst)\n    (if (equal? index 0)\n        (cdr lst)\n        (cons (car lst) (remove-at\
    \ (- index 1) (cdr lst)))))\n  (define (strange-sort lst)\n    (if (null? lst)\n\
    \        '()\n        (let* ([min-max-values (min-max lst)]\n               [min\
    \ (car min-max-values)]\n               [max (cadr min-max-values)]\n        \
    \       [min-index (caddr min-max-values)]\n               [max-index (cadddr\
    \ min-max-values)])\n          (cons min (cons max (strange-sort (remove-at min-index\
    \ (remove-at max-index lst))))))))\n  (strange-sort lst))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max-list lst)\n    (define (min-max-helper lst min max)\n     \
    \ (cond\n        [(empty? lst) (list min max)]\n        [(< (first lst) min) (min-max-helper\
    \ (rest lst) (first lst) max)]\n        [(> (first lst) max) (min-max-helper (rest\
    \ lst) min (first lst))]\n        [else (min-max-helper (rest lst) min max)]))\n\
    \    (min-max-helper lst (first lst) (first lst)))\n  (define (strange-sort-helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= (first lst) min)\
    \ (cons min (strange-sort-helper (rest lst) (first lst) max))]\n      [(= (first\
    \ lst) max) (cons max (strange-sort-helper (rest lst) min (first lst)))]\n   \
    \   [else (strange-sort-helper (rest lst) min max)]))\n  (strange-sort-helper\
    \ lst (first (min-max-list lst)) (second (min-max-list lst))))\n", "  (define\
    \ (strange_sort_list_helper lst acc)\n    (cond [(empty? lst) acc]\n         \
    \ [(empty? (rest lst)) (append acc lst)]\n          [else\n           (let* ([min\
    \ (apply min lst)]\n                  [max (apply max lst)]\n                \
    \  [lst (remove min lst)]\n                  [lst (remove max lst)])\n       \
    \      (strange_sort_list_helper lst (append acc (list min max))))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (let loop ([lst lst] [acc '()])\n    (if (null? lst)\n    \
    \    acc\n        (let ([min (apply min lst)]\n              [max (apply max lst)])\n\
    \          (loop (remove min lst) (cons min (cons max acc)))))))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else\n     (append\n      (list (min lst))\n \
    \     (list (max (remove (min lst) lst)))\n      (strange_sort_list (remove (max\
    \ (remove (min lst) lst)) lst)))]))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(= (length lst) 1) (append acc lst)]\n      [else\n       (define min\
    \ (apply min lst))\n       (define max (apply max lst))\n       (define lst-without-min\
    \ (remove min lst))\n       (define lst-without-max (remove max lst-without-min))\n\
    \       (strange_sort_list_helper lst-without-max (append acc (list min max)))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst result)\n    (if (null? lst)\n        result\n        (let* ([min (apply\
    \ min lst)]\n               [max (apply max lst)]\n               [lst (remove\
    \ min lst)]\n               [lst (remove max lst)])\n          (strange_sort_list_helper\
    \ lst (append result (list min max))))))\n  (strange_sort_list_helper lst '()))\n",
  "  (let loop ([lst lst] [acc '()])\n    (if (null? lst)\n        acc\n        (let\
    \ ([min (apply min lst)]\n              [max (apply max lst)])\n          (loop\
    \ (remove min lst) (cons min (cons max acc)))))))\n", "  (define (strange_sort_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_helper lst '()))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (define min (min (first lst) (second lst)))\n\
    \       (define max (max (first lst) (second lst)))\n       (strange_sort_list_helper\
    \ (rest (rest lst)) (append acc (list min max)))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [lst (remove min lst)]\n               [lst\
    \ (remove max lst)])\n          (strange_sort_list_helper lst (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n\
    \      '()\n      (let* ([min (apply min lst)]\n             [max (apply max lst)]\n\
    \             [rest (remove min (remove max lst))])\n        (append (list min\
    \ max) (strange_sort_list rest)))))\n", "  (define (strange_sort_list_iter lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_iter lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [lst (remove min lst)]\n               [lst\
    \ (remove max lst)])\n          (strange_sort_list_helper lst (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n\
    \      '()\n      (let* ([min (apply min lst)]\n             [max (apply max lst)]\n\
    \             [lst (remove min lst)]\n             [lst (remove max lst)])\n \
    \       (cons min (cons max (strange_sort_list lst))))))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min_max_list\
    \ lst)\n    (define (min_max_list_iter lst min max)\n      (cond\n        [(empty?\
    \ lst) (list min max)]\n        [(< (first lst) min) (min_max_list_iter (rest\
    \ lst) (first lst) max)]\n        [(> (first lst) max) (min_max_list_iter (rest\
    \ lst) min (first lst))]\n        [else (min_max_list_iter (rest lst) min max)]))\n\
    \    (min_max_list_iter lst (first lst) (first lst)))\n  (define (strange_sort_list_iter\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= (first lst) min)\
    \ (cons min (strange_sort_list_iter (rest lst) min max))]\n      [(= (first lst)\
    \ max) (cons max (strange_sort_list_iter (rest lst) min max))]\n      [else (strange_sort_list_iter\
    \ (rest lst) min max)]))\n  (define (strange_sort_list_iter_2 lst min max)\n \
    \   (cond\n      [(empty? lst) empty]\n      [(= (first lst) min) (cons min (strange_sort_list_iter_2\
    \ (rest lst) min max))]\n      [(= (first lst) max) (cons max (strange_sort_list_iter_2\
    \ (rest lst) min max))]\n      [else (strange_sort_list_iter_2 (rest lst) min\
    \ max)]))\n  (define (strange_sort_list_iter_3 lst min max)\n    (cond\n     \
    \ [(empty? lst) empty]\n      [(= (first lst) min) (cons min (strange_sort_list_iter_3\
    \ (rest lst) min max))]\n      [(= (first lst) max) (cons max (strange_sort_list_iter_3\
    \ (rest lst) min max))]\n      [else (strange_sort_list_iter_", "  (define (min-max\
    \ lst)\n    (let ([min (apply min lst)]\n          [max (apply max lst)])\n  \
    \    (list min max)))\n  (define (min-max-list lst)\n    (if (null? lst)\n   \
    \     '()\n        (append (min-max lst) (min-max-list (remove (apply min lst)\
    \ lst)))))\n  (min-max-list lst))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max lst)\n    (if (null? lst)\n        (values 0 0)\n        (let*\
    \ ([min (apply min lst)]\n               [max (apply max lst)]\n             \
    \  [min-index (index-of min lst)]\n               [max-index (index-of max lst)])\n\
    \          (values min max min-index max-index))))\n  (define (index-of x lst)\n\
    \    (define (index-of-iter x lst index)\n      (if (null? lst)\n          -1\n\
    \          (if (= x (car lst))\n              index\n              (index-of-iter\
    \ x (cdr lst) (+ index 1)))))\n    (index-of-iter x lst 0))\n  (define (remove-at\
    \ index lst)\n    (if (= index 0)\n        (cdr lst)\n        (cons (car lst)\
    \ (remove-at (- index 1) (cdr lst)))))\n  (define (strange-sort-iter lst result)\n\
    \    (if (null? lst)\n        result\n        (let* ([min-max-values (min-max\
    \ lst)]\n               [min (car min-max-values)]\n               [max (cadr\
    \ min-max-values)]\n               [min-index (caddr min-max-values)]\n      \
    \         [max-index (cadddr min-max-values)])\n          (strange-sort-iter (remove-at\
    \ min-index (remove-at max-index lst))\n                             (append result\
    \ (list min max))))))\n  (strange-sort-iter lst '()))\n", "  (define (strange_sort_list_iter\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_iter (remove\
    \ min (remove max lst))\n                                  (append acc (list min\
    \ max))))))\n  (strange_sort_list_iter lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (strange_sort_list_helper\
    \ (remove (min lst) lst)\n                                  (cons (min lst) acc))\n\
    \        (strange_sort_list_helper (remove (max lst) lst)\n                  \
    \                (cons (max lst) acc))))\n  (strange_sort_list_helper lst '()))\n",
  "  (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_iter lst (append acc (list min max))))))\n  (strange_sort_list_iter\
    \ lst '()))\n", "  (define (min-max lst)\n    (define (min-max-helper lst min\
    \ max)\n      (cond\n        [(empty? lst) (list min max)]\n        [(< (first\
    \ lst) min) (min-max-helper (rest lst) (first lst) max)]\n        [(> (first lst)\
    \ max) (min-max-helper (rest lst) min (first lst))]\n        [else (min-max-helper\
    \ (rest lst) min max)]))\n    (min-max-helper lst (first lst) (first lst)))\n\
    \  (define (strange-sort-helper lst min max)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(= (first lst) min) (cons min (strange-sort-helper (rest lst) (first (min-max\
    \ (rest lst))) (second (min-max (rest lst)))))]\n      [(= (first lst) max) (cons\
    \ max (strange-sort-helper (rest lst) (first (min-max (rest lst))) (second (min-max\
    \ (rest lst)))))]\n      [else (strange-sort-helper (rest lst) min max)]))\n \
    \ (strange-sort-helper lst (first (min-max lst)) (second (min-max lst))))\n",
  "  (define (strange_sort_list_iter lst_iter acc)\n    (if (null? lst_iter)\n   \
    \     acc\n        (let* ([min (apply min lst_iter)]\n               [max (apply\
    \ max lst_iter)]\n               [lst_iter (remove min lst_iter)]\n          \
    \     [lst_iter (remove max lst_iter)])\n          (strange_sort_list_iter lst_iter\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst '()))\n", " \
    \ (define (min-max lst)\n    (let ((min (apply min lst))\n          (max (apply\
    \ max lst)))\n      (list min max)))\n  (define (strange-sort lst)\n    (if (empty?\
    \ lst)\n        empty\n        (append (min-max lst) (strange-sort (remove (apply\
    \ min lst) (remove (apply max lst) lst))))))\n  (strange-sort lst))\n", "  (define\
    \ (strange_sort lst acc)\n    (if (null? lst)\n        acc\n        (let ([min\
    \ (apply min lst)]\n              [max (apply max lst)])\n          (strange_sort\
    \ (remove min (remove max lst))\n                        (append acc (list min\
    \ max))))))\n  (strange_sort lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n\
    \      '()\n      (let* ([min (apply min lst)]\n             [max (apply max lst)]\n\
    \             [lst (remove min lst)]\n             [lst (remove max lst)])\n \
    \       (append (list min max) (strange_sort_list lst)))))\n", "  (let loop ([lst\
    \ lst] [acc '()])\n    (if (null? lst)\n        acc\n        (let ([min (apply\
    \ min lst)]\n              [max (apply max lst)])\n          (loop (remove min\
    \ lst) (cons min (cons max acc)))))))\n", "  (define (strange_sort_list_helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= min max) empty]\n\
    \      [else\n       (cons min\n             (cons max\n                   (strange_sort_list_helper\
    \ (remove min (remove max lst))\n                                            \
    \ (min (remove min (remove max lst)))\n                                      \
    \       (max (remove min (remove max lst))))))]))\n  (strange_sort_list_helper\
    \ lst (min lst) (max lst)))\n", "  (define (strange_sort_list_iter lst acc)\n\
    \    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n     \
    \         [max (apply max lst)])\n          (strange_sort_list_iter (remove min\
    \ (remove max lst))\n                                  (append acc (list min max))))))\n\
    \  (strange_sort_list_iter lst '()))\n", "  (define (min_max lst)\n    (define\
    \ (min_max_helper lst min max)\n      (cond\n        [(empty? lst) (list min max)]\n\
    \        [(< (first lst) min) (min_max_helper (rest lst) (first lst) max)]\n \
    \       [(> (first lst) max) (min_max_helper (rest lst) min (first lst))]\n  \
    \      [else (min_max_helper (rest lst) min max)]))\n    (min_max_helper lst (first\
    \ lst) (first lst)))\n  (define (strange_sort_helper lst min max)\n    (cond\n\
    \      [(empty? lst) (list min max)]\n      [(> (first lst) min) (strange_sort_helper\
    \ (rest lst) (first lst) max)]\n      [(< (first lst) max) (strange_sort_helper\
    \ (rest lst) min (first lst))]\n      [else (strange_sort_helper (rest lst) min\
    \ max)]))\n  (strange_sort_helper (rest lst) (first lst) (first lst)))\n", " \
    \ (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_iter lst (append acc (list min max))))))\n  (strange_sort_list_iter\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (cond\n   \
    \   [(empty? lst) (reverse acc)]\n      [else\n       (let ([min (apply min lst)]\n\
    \             [max (apply max lst)])\n         (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                   (cons min (cons max\
    \ acc))))]))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (let* ([min (apply min lst)]\n              [max\
    \ (apply max lst)]\n              [new-lst (remove min (remove max lst))])\n \
    \        (strange_sort_list_helper new-lst (append acc (list min max))))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n      '()\n   \
    \   (let* ([min (apply min lst)]\n             [max (apply max lst)]\n       \
    \      [lst (remove min lst)]\n             [lst (remove max lst)])\n        (append\
    \ (list min max) (strange_sort_list lst)))))\n", "  (let loop ([lst lst] [acc\
    \ '()])\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (loop (remove min lst) (cons\
    \ min (cons max acc)))))))\n", "  (if (null? lst)\n      '()\n      (let* ([min\
    \ (apply min lst)]\n             [max (apply max lst)]\n             [lst (remove\
    \ min lst)]\n             [lst (remove max lst)])\n        (append (list min max)\
    \ (strange_sort_list lst)))))\n", "  (define (min-max-list lst)\n    (if (null?\
    \ lst)\n        '()\n        (cons (min lst) (cons (max lst) '()))))\n  (define\
    \ (min-max-sort lst)\n    (if (null? lst)\n        '()\n        (append (min-max-list\
    \ lst) (min-max-sort (remove (min lst) (remove (max lst) lst))))))\n  (min-max-sort\
    \ lst))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (let* ([min-val (apply min lst)]\n               [max-val\
    \ (apply max lst)]\n               [new-lst (remove min-val (remove max-val lst))])\n\
    \          (strange_sort_list_helper new-lst (append acc (list min-val max-val))))))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (if (null? lst)\n      '()\n   \
    \   (let* ([min (apply min lst)]\n             [max (apply max lst)]\n       \
    \      [lst (remove min lst)]\n             [lst (remove max lst)])\n        (cons\
    \ min (cons max (strange_sort_list lst))))))\n", "  (define (min-max-list lst)\n\
    \    (if (null? lst)\n        '()\n        (cons (min lst) (cons (max lst) '()))))\n\
    \  (define (min-max-list-helper lst)\n    (if (null? lst)\n        '()\n     \
    \   (cons (min lst) (cons (max lst) (min-max-list-helper (remove (min lst) (remove\
    \ (max lst) lst)))))))\n  (min-max-list-helper lst))\n", "  (define (strange_sort_list_helper\
    \ lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (let ([min (apply min\
    \ lst1)]\n              [max (apply max lst1)])\n          (strange_sort_list_helper\
    \ (remove min lst1)\n                                    (append lst2 (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (define min (min (first lst) (second lst)))\n\
    \       (define max (max (first lst) (second lst)))\n       (strange_sort_list_helper\
    \ (rest (rest lst)) (append acc (list min max)))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (min\
    \ lst)\n           (cons (max (remove (min lst) lst))\n                 (strange_sort_list\
    \ (remove (max (remove (min lst) lst))\n                                     \
    \       (remove (min lst) lst)))))]))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [else\n     \
    \  (let* ([min (apply min lst)]\n              [max (apply max lst)]\n       \
    \       [new-lst (remove min (remove max lst))])\n         (strange_sort_list_helper\
    \ new-lst (cons min (cons max acc))))]))\n  (strange_sort_list_helper lst '()))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (min\
    \ lst)\n           (cons (max (remove (min lst) lst))\n                 (strange_sort_list\
    \ (remove (max (remove (min lst) lst))\n                                     \
    \       (remove (min lst) lst)))))]))\n", "  (define (strange_sort_list_iter lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_iter lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst '()))\n", " \
    \ (if (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n           \
    \  [max (apply max lst)]\n             [lst (remove min lst)]\n             [lst\
    \ (remove max lst)])\n        (append (list min max) (strange_sort_list lst)))))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min-val (apply min lst)]\n               [max-val (apply max\
    \ lst)]\n               [min-pos (position min-val lst)]\n               [max-pos\
    \ (position max-val lst)])\n          (strange_sort_list_helper (remove (list-ref\
    \ lst min-pos) lst)\n                                    (append acc (list (list-ref\
    \ lst min-pos)\n                                                      (list-ref\
    \ lst max-pos)))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max\
    \ lst)\n    (let ((min (apply min lst))\n          (max (apply max lst)))\n  \
    \    (list min max)))\n  (define (min-max-list lst)\n    (if (null? lst)\n   \
    \     '()\n        (append (min-max lst) (min-max-list (remove (apply min lst)\
    \ (remove (apply max lst) lst))))))\n  (min-max-list lst))\n", "  (define (min-max\
    \ lst)\n    (let ((min (apply min lst))\n          (max (apply max lst)))\n  \
    \    (values min max)))\n  (define (min-max-list lst)\n    (if (null? lst)\n \
    \       '()\n        (let ((min (apply min lst))\n              (max (apply max\
    \ lst)))\n          (append (list min max) (min-max-list (remove min (remove max\
    \ lst)))))))\n  (min-max-list lst))\n", "  (define (strange_sort_list_helper lst\
    \ min max)\n    (if (null? lst)\n        '()\n        (if (null? (cdr lst))\n\
    \            (list (car lst))\n            (if (equal? min max)\n            \
    \    (list (car lst))\n                (append (list (car lst))\n            \
    \            (strange_sort_list_helper (cdr lst)\n                           \
    \                       (if (equal? (car lst) min)\n                         \
    \                             (car lst)\n                                    \
    \                  min)\n                                                  (if\
    \ (equal? (car lst) max)\n                                                   \
    \   (car lst)\n                                                      max)))))))\n\
    \  (strange_sort_list_helper lst (apply min lst) (apply max lst)))\n", "  (define\
    \ (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n     \
    \   (let* ([min (apply min lst)]\n               [max (apply max lst)]\n     \
    \          [lst (remove min lst)]\n               [lst (remove max lst)])\n  \
    \        (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max-list lst)\n    (define (min-max-list-iter\
    \ lst min max)\n      (cond\n        [(empty? lst) (list min max)]\n        [(>\
    \ (first lst) max) (min-max-list-iter (rest lst) min (first lst))]\n        [(<\
    \ (first lst) min) (min-max-list-iter (rest lst) (first lst) max)]\n        [else\
    \ (min-max-list-iter (rest lst) min max)]))\n    (min-max-list-iter lst (first\
    \ lst) (first lst)))\n  (define (strange-sort-list-iter lst min max)\n    (cond\n\
    \      [(empty? lst) (list min max)]\n      [(> (first lst) max) (strange-sort-list-iter\
    \ (rest lst) min (first lst))]\n      [(< (first lst) min) (strange-sort-list-iter\
    \ (rest lst) (first lst) max)]\n      [else (strange-sort-list-iter (rest lst)\
    \ min max)]))\n  (strange-sort-list-iter lst (first lst) (first lst)))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max lst)\n    (let* ([min (apply min lst)]\n \
    \          [max (apply max lst)]\n           [min-index (index-of min lst)]\n\
    \           [max-index (index-of max lst)])\n      (if (equal? min-index max-index)\n\
    \          (list min max)\n          (list max min))))\n  (define (index-of x\
    \ lst)\n    (let loop ([lst lst] [index 0])\n      (cond [(empty? lst) #f]\n \
    \           [(equal? x (first lst)) index]\n            [else (loop (rest lst)\
    \ (+ index 1))])))\n  (define (strange-sort lst)\n    (if (empty? lst)\n     \
    \   empty\n        (append (min-max lst) (strange-sort (remove (apply min lst)\
    \ (remove (apply max lst) lst))))))\n  (strange-sort lst))\n", "  (define (strange_sort_list_helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) lst2]\n      [(empty? lst2) lst1]\n\
    \      [else\n       (append\n        (list (min (car lst1) (car lst2)))\n   \
    \     (list (max (car lst1) (car lst2)))\n        (strange_sort_list_helper (cdr\
    \ lst1) (cdr lst2)))]))\n  (strange_sort_list_helper (sort lst <) (sort lst >)))\n",
  "  (cond [(empty? lst) empty]\n        [else (append (list (min lst))\n        \
    \              (list (max (remove (min lst) lst)))\n                      (strange_sort_list\
    \ (remove (max (remove (min lst) lst))\n                                     \
    \            (remove (min lst) lst))))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else\n     (append\n      (list (min lst))\n      (list (max (remove (min\
    \ lst) lst)))\n      (strange_sort_list (remove (max (remove (min lst) lst)) lst)))]))\n",
  "  (define (min-max lst)\n    (let* ([min (apply min lst)]\n           [max (apply\
    \ max lst)]\n           [min-index (position min lst)]\n           [max-index\
    \ (position max lst)])\n      (if (eq? min-index max-index)\n          (list min)\n\
    \          (list min max))))\n  (define (strange-sort lst)\n    (if (empty? lst)\n\
    \        empty\n        (append (min-max lst)\n                (strange-sort (remove\
    \ (first lst)\n                                      (remove (second lst)\n  \
    \                                            lst))))))\n  (strange-sort lst))\n",
  "  (if (null? lst)\n      '()\n      (append (list (min lst))\n              (list\
    \ (max (remove (min lst) lst)))\n              (strange_sort_list (remove (max\
    \ (remove (min lst) lst))\n                                         (remove (min\
    \ lst) lst))))))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [lst (remove min lst)]\n               [lst\
    \ (remove max lst)])\n          (strange_sort_list_helper lst (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (rest lst)) (append acc lst)]\n      [else\n       (define min-val\
    \ (apply min lst))\n       (define max-val (apply max (remove min-val lst)))\n\
    \       (strange_sort_list_helper (remove max-val (remove min-val lst))\n    \
    \                             (append acc (list min-val max-val)))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (if (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n\
    \             [max (apply max lst)]\n             [min-index (index-of min lst)]\n\
    \             [max-index (index-of max lst)]\n             [new-lst (remove-at\
    \ min-index lst)]\n             [new-lst (remove-at max-index new-lst)])\n   \
    \     (append (list min max) (strange_sort_list new-lst)))))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([max (apply max lst)]\n\
    \               [min (apply min lst)]\n               [lst (remove max (remove\
    \ min lst))])\n          (strange_sort_list_helper lst (append acc (list max min))))))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else\n     (append\n      (list (min lst) (max lst))\n      (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst))))]))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max lst)\n    (define (min-max-helper lst min max)\n      (cond\n\
    \        [(empty? lst) (list min max)]\n        [(< (first lst) min) (min-max-helper\
    \ (rest lst) (first lst) max)]\n        [(> (first lst) max) (min-max-helper (rest\
    \ lst) min (first lst))]\n        [else (min-max-helper (rest lst) min max)]))\n\
    \    (min-max-helper lst (first lst) (first lst)))\n  (define (strange-sort-helper\
    \ lst acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [else (strange-sort-helper\
    \ (rest lst) (append acc (min-max lst)))]))\n  (strange-sort-helper lst '()))\n",
  "  (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_iter lst (append acc (list min max))))))\n  (strange_sort_list_iter\
    \ lst '()))\n", "  (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n\
    \        acc\n        (let* ([min (apply min lst)]\n               [max (apply\
    \ max lst)]\n               [lst (remove min lst)]\n               [lst (remove\
    \ max lst)])\n          (strange_sort_list_iter lst (append acc (list min max))))))\n\
    \  (strange_sort_list_iter lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max-list lst)\n    (if (null? lst)\n        '()\n        (cons\
    \ (min lst) (cons (max lst) '()))))\n  (define (min-max-list-helper lst)\n   \
    \ (if (null? lst)\n        '()\n        (append (min-max-list lst) (min-max-list-helper\
    \ (remove (min lst) (remove (max lst) lst))))))\n  (min-max-list-helper lst))\n",
  "  (define (strange_sort_list_iter lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_iter lst (append acc (list min max))))))\n  (strange_sort_list_iter\
    \ lst '()))\n", "  (cond [(empty? lst) empty]\n        [else\n         (let* ([min\
    \ (apply min lst)]\n                [max (apply max lst)]\n                [lst\
    \ (remove min lst)]\n                [lst (remove max lst)])\n           (append\
    \ (list min max) (strange_sort_list lst)))]))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max-lst\
    \ lst)\n    (if (null? lst)\n        '()\n        (cons (apply min lst)\n    \
    \          (cons (apply max lst)\n                    (min-max-lst (remove (apply\
    \ min lst) (remove (apply max lst) lst)))))))\n  (min-max-lst lst))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (list (min lst))\n              (list\
    \ (max (remove (min lst) lst)))\n              (strange_sort_list (remove (max\
    \ (remove (min lst) lst))\n                                         (remove (min\
    \ lst) lst))))))\n", "  (if (null? lst)\n      '()\n      (append (list (min lst)\
    \ (max lst))\n              (strange_sort_list (remove (min lst) (remove (max\
    \ lst) lst))))))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let ([min (apply min lst)]\n              [max (apply\
    \ max lst)])\n          (strange_sort_list_helper (remove min (remove max lst))\n\
    \                                    (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [lst (remove min lst)]\n               [lst\
    \ (remove max lst)])\n          (strange_sort_list_helper lst (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= min max) empty]\n\
    \      [else\n       (cons min (cons max (helper (remove min (remove max lst))\n\
    \                                   (min (remove min (remove max lst)))\n    \
    \                               (max (remove min (remove max lst))))))]))\n  (helper\
    \ lst (min lst) (max lst)))\n", "  (cond [(empty? lst) empty]\n        [else\n\
    \         (append (list (min lst) (max lst))\n                 (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst))))]))\n", "  (if (null? lst)\n    \
    \  '()\n      (let ([min (apply min lst)]\n            [max (apply max lst)])\n\
    \        (cons min (cons max (strange_sort_list (remove min (remove max lst))))))))\n",
  "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min\
    \ (apply min lst)]\n               [max (apply max lst)]\n               [new-lst\
    \ (remove min (remove max lst))])\n          (helper new-lst (append acc (list\
    \ min max))))))\n  (helper lst '()))\n", "  (define (min-max-list lst)\n    (define\
    \ (min-max-helper lst min max)\n      (cond\n        [(empty? lst) (values min\
    \ max)]\n        [(< (first lst) min) (min-max-helper (rest lst) (first lst) max)]\n\
    \        [(> (first lst) max) (min-max-helper (rest lst) min (first lst))]\n \
    \       [else (min-max-helper (rest lst) min max)]))\n    (min-max-helper lst\
    \ (first lst) (first lst)))\n  (define (strange-sort-helper lst min max)\n   \
    \ (cond\n      [(empty? lst) '()]\n      [(= (first lst) min) (cons min (strange-sort-helper\
    \ (rest lst) (first lst) max))]\n      [(= (first lst) max) (cons max (strange-sort-helper\
    \ (rest lst) min (first lst)))]\n      [else (strange-sort-helper (rest lst) min\
    \ max)]))\n  (let ([min (first (min-max-list lst))]\n        [max (second (min-max-list\
    \ lst))])\n    (strange-sort-helper lst min max)))\n", "  (define (helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (helper lst (append acc (list\
    \ min max))))))\n  (helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (min-max lst)\n    (define (min-max-helper lst min max)\n      (cond\n\
    \        [(empty? lst) (list min max)]\n        [(< (first lst) min) (min-max-helper\
    \ (rest lst) (first lst) max)]\n        [(> (first lst) max) (min-max-helper (rest\
    \ lst) min (first lst))]\n        [else (min-max-helper (rest lst) min max)]))\n\
    \    (min-max-helper lst (first lst) (first lst)))\n  (define (strange-sort-helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= (first lst) min)\
    \ (cons min (strange-sort-helper (rest lst) (first (min-max (rest lst))) (second\
    \ (min-max (rest lst)))))]\n      [(= (first lst) max) (cons max (strange-sort-helper\
    \ (rest lst) (first (min-max (rest lst))) (second (min-max (rest lst)))))]\n \
    \     [else (strange-sort-helper (rest lst) min max)]))\n  (strange-sort-helper\
    \ lst (first (min-max lst)) (second (min-max lst))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (append\n      (list (min lst))\n      (list (max\
    \ (remove (min lst) lst)))\n      (strange_sort_list (remove (max (remove (min\
    \ lst) lst)) lst)))]))\n", "  (define (strange_sort_list_iter lst acc)\n    (if\
    \ (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n           \
    \    [max (apply max lst)]\n               [new-lst (remove min (remove max lst))])\n\
    \          (strange_sort_list_iter new-lst (append acc (list min max))))))\n \
    \ (strange_sort_list_iter lst '()))\n", "  (define (min-max-lst lst)\n    (define\
    \ (min-max-lst-iter lst min max)\n      (cond\n        [(empty? lst) (list min\
    \ max)]\n        [(< (first lst) min) (min-max-lst-iter (rest lst) (first lst)\
    \ max)]\n        [(> (first lst) max) (min-max-lst-iter (rest lst) min (first\
    \ lst))]\n        [else (min-max-lst-iter (rest lst) min max)]))\n    (min-max-lst-iter\
    \ lst (first lst) (first lst)))\n  (define (strange-sort-lst-iter lst acc)\n \
    \   (cond\n      [(empty? lst) acc]\n      [else (strange-sort-lst-iter (rest\
    \ lst) (append acc (min-max-lst lst)))]))\n  (strange-sort-lst-iter lst '()))\n",
  "  (define (strange_sort_list_helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n\
    \        (let ([min (apply min lst1)]\n              [max (apply max lst1)])\n\
    \          (strange_sort_list_helper (remove min lst1)\n                     \
    \               (append lst2 (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max-lst lst)\n    (if (null? lst)\n        (values\
    \ 0 0)\n        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [min-index (index-of min lst)]\n               [max-index (index-of\
    \ max lst)])\n          (values min max min-index max-index))))\n  (define (index-of\
    \ val lst)\n    (define (index-of-iter val lst index)\n      (if (null? lst)\n\
    \          -1\n          (if (= val (car lst))\n              index\n        \
    \      (index-of-iter val (cdr lst) (+ index 1)))))\n    (index-of-iter val lst\
    \ 0))\n  (define (remove-at index lst)\n    (if (= index 0)\n        (cdr lst)\n\
    \        (cons (car lst) (remove-at (- index 1) (cdr lst)))))\n  (define (strange-sort-iter\
    \ lst result)\n    (if (null? lst)\n        result\n        (let* ([min (apply\
    \ min lst)]\n               [max (apply max lst)]\n               [min-index (index-of\
    \ min lst)]\n               [max-index (index-of max lst)]\n               [new-lst\
    \ (remove-at min-index (remove-at max-index lst))])\n          (strange-sort-iter\
    \ new-lst (append result (list min max))))))\n  (strange-sort-iter lst '()))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (cond [(empty? lst) acc]\n  \
    \        [(empty? (rest lst)) (append acc lst)]\n          [else\n           (define\
    \ min (min (first lst) (second lst)))\n           (define max (max (first lst)\
    \ (second lst)))\n           (strange_sort_list_helper (remove min (remove max\
    \ lst))\n                                     (append acc (list min max)))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (let* ([min (apply min lst)]\n              [max\
    \ (apply max lst)]\n              [lst (remove min lst)]\n              [lst (remove\
    \ max lst)])\n         (strange_sort_list_helper lst (append acc (list min max))))]))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (min-max lst)\n    (define\
    \ (min-max-helper lst min max)\n      (cond\n        [(empty? lst) (list min max)]\n\
    \        [(< (first lst) min) (min-max-helper (rest lst) (first lst) max)]\n \
    \       [(> (first lst) max) (min-max-helper (rest lst) min (first lst))]\n  \
    \      [else (min-max-helper (rest lst) min max)]))\n    (min-max-helper lst (first\
    \ lst) (first lst)))\n  (define (strange-sort-helper lst min max)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(= (first lst) min) (cons min (strange-sort-helper\
    \ (rest lst) (first (min-max (rest lst))) (second (min-max (rest lst)))))]\n \
    \     [(= (first lst) max) (cons max (strange-sort-helper (rest lst) (first (min-max\
    \ (rest lst))) (second (min-max (rest lst)))))]\n      [else (strange-sort-helper\
    \ (rest lst) min max)]))\n  (strange-sort-helper lst (first (min-max lst)) (second\
    \ (min-max lst))))\n", "  (define (strange_sort_list_helper lst acc)\n    (if\
    \ (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n           \
    \    [max (apply max lst)]\n               [lst (remove min lst)]\n          \
    \     [lst (remove max lst)])\n          (strange_sort_list_helper lst (append\
    \ acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (min lst))\n              (list (max (remove\
    \ (min lst) lst)))\n              (strange_sort_list (remove (max (remove (min\
    \ lst) lst)) (remove (min lst) lst))))))\n", "  (define (min_max lst)\n    (define\
    \ (min_max_iter lst min max)\n      (cond\n        [(empty? lst) (list min max)]\n\
    \        [(< (first lst) min) (min_max_iter (rest lst) (first lst) max)]\n   \
    \     [(> (first lst) max) (min_max_iter (rest lst) min (first lst))]\n      \
    \  [else (min_max_iter (rest lst) min max)]))\n    (min_max_iter lst (first lst)\
    \ (first lst)))\n  (define (strange_sort_iter lst acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [else (strange_sort_iter (rest lst) (append acc (min_max\
    \ lst)))]))\n  (strange_sort_iter lst '()))\n", "  (define (min-max-list lst)\n\
    \    (if (null? lst)\n        '()\n        (cons (apply min lst)\n           \
    \   (cons (apply max lst)\n                    (min-max-list (remove (apply min\
    \ lst)\n                                          (remove (apply max lst)\n  \
    \                                                lst)))))))\n  (min-max-list lst))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (rest lst)) (append acc lst)]\n      [else\n       (define min\
    \ (min (first lst) (second lst)))\n       (define max (max (first lst) (second\
    \ lst)))\n       (strange_sort_list_helper (rest (rest lst)) (append acc (list\
    \ min max)))]))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max\
    \ lst)\n    (let ([min (apply min lst)]\n          [max (apply max lst)])\n  \
    \    (list min max)))\n  (define (min-max-list lst)\n    (if (null? lst)\n   \
    \     '()\n        (let ([min-max (min-max lst)])\n          (append min-max (min-max-list\
    \ (remove (first min-max) lst))))))\n  (min-max-list lst))\n", "  (define (min-max\
    \ lst)\n    (define (min-max-helper lst min max)\n      (cond\n        [(empty?\
    \ lst) (list min max)]\n        [(< (first lst) min) (min-max-helper (rest lst)\
    \ (first lst) max)]\n        [(> (first lst) max) (min-max-helper (rest lst) min\
    \ (first lst))]\n        [else (min-max-helper (rest lst) min max)]))\n    (min-max-helper\
    \ lst (first lst) (first lst)))\n  (define (strange-sort-helper lst result)\n\
    \    (cond\n      [(empty? lst) result]\n      [else (strange-sort-helper (rest\
    \ lst) (append result (min-max lst)))]))\n  (strange-sort-helper lst '()))\n",
  "  (define (strange_sort_list_helper lst min max)\n    (if (null? lst)\n       \
    \ '()\n        (if (null? min)\n            (strange_sort_list_helper (cdr lst)\
    \ (car lst) (car lst))\n            (if (null? max)\n                (strange_sort_list_helper\
    \ (cdr lst) min (car lst))\n                (if (< (car lst) min)\n          \
    \          (strange_sort_list_helper (cdr lst) (car lst) max)\n              \
    \      (if (> (car lst) max)\n                        (strange_sort_list_helper\
    \ (cdr lst) min (car lst))\n                        (cons min (cons max (strange_sort_list_helper\
    \ (cdr lst) (car lst) (car lst)))))))))\n  (strange_sort_list_helper lst '() '()))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max-list lst)\n    (if (null? lst)\n        '()\n\
    \        (cons (min lst) (cons (max lst) '()))))\n  (define (min-max-list-helper\
    \ lst)\n    (if (null? lst)\n        '()\n        (append (min-max-list lst) (min-max-list-helper\
    \ (remove (min lst) (remove (max lst) lst))))))\n  (min-max-list-helper lst))\n",
  "  (define (min-max lst)\n    (define (min-max-helper lst min max)\n      (cond\n\
    \        [(empty? lst) (list min max)]\n        [(< (first lst) min) (min-max-helper\
    \ (rest lst) (first lst) max)]\n        [(> (first lst) max) (min-max-helper (rest\
    \ lst) min (first lst))]\n        [else (min-max-helper (rest lst) min max)]))\n\
    \    (min-max-helper lst (first lst) (first lst)))\n  (define (strange-sort-helper\
    \ lst min max)\n    (cond\n      [(empty? lst) empty]\n      [(= (first lst) min)\
    \ (cons min (strange-sort-helper (rest lst) (first (min-max (rest lst))) (second\
    \ (min-max (rest lst)))))]\n      [(= (first lst) max) (cons max (strange-sort-helper\
    \ (rest lst) (first (min-max (rest lst))) (second (min-max (rest lst)))))]\n \
    \     [else (strange-sort-helper (rest lst) min max)]))\n  (strange-sort-helper\
    \ lst (first (min-max lst)) (second (min-max lst))))\n", "  (define (strange_sort_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_helper lst '()))\n", "  (define (min-max-lst lst)\n    (define\
    \ (min-max-lst-helper lst min max)\n      (cond\n        [(empty? lst) (list min\
    \ max)]\n        [(< (first lst) min) (min-max-lst-helper (rest lst) (first lst)\
    \ max)]\n        [(> (first lst) max) (min-max-lst-helper (rest lst) min (first\
    \ lst))]\n        [else (min-max-lst-helper (rest lst) min max)]))\n    (min-max-lst-helper\
    \ lst (first lst) (first lst)))\n  (define (strange-sort-lst-helper lst res)\n\
    \    (cond\n      [(empty? lst) res]\n      [else (strange-sort-lst-helper (rest\
    \ lst) (append res (min-max-lst lst)))]))\n  (strange-sort-lst-helper lst '()))\n",
  "  (if (null? lst)\n      '()\n      (append (list (min lst))\n              (list\
    \ (max (remove (min lst) lst)))\n              (strange_sort_list (remove (max\
    \ (remove (min lst) lst))\n                                         (remove (min\
    \ lst) lst))))))\n", "  (define (min-max-list lst)\n    (let ((min (apply min\
    \ lst))\n          (max (apply max lst)))\n      (list min max)))\n  (define (strange-sort\
    \ lst)\n    (if (null? lst)\n        '()\n        (append (min-max-list lst)\n\
    \                (strange-sort (remove (apply min lst)\n                     \
    \                 (remove (apply max lst) lst))))))\n  (strange-sort lst))\n",
  "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (min-max lst)\n    (define (min-max-helper lst min\
    \ max)\n      (cond\n        [(empty? lst) (list min max)]\n        [(< (first\
    \ lst) min) (min-max-helper (rest lst) (first lst) max)]\n        [(> (first lst)\
    \ max) (min-max-helper (rest lst) min (first lst))]\n        [else (min-max-helper\
    \ (rest lst) min max)]))\n    (min-max-helper lst (first lst) (first lst)))\n\
    \  (define (strange-sort-helper lst res)\n    (cond\n      [(empty? lst) res]\n\
    \      [else (strange-sort-helper (rest lst) (append res (min-max lst)))]))\n\
    \  (strange-sort-helper lst '()))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (rest lst)) (append\
    \ acc lst)]\n      [else\n       (define min (min (first lst) (second lst)))\n\
    \       (define max (max (first lst) (second lst)))\n       (define rest (rest\
    \ (rest lst)))\n       (strange_sort_list_helper rest (append acc (list min max)))]))\n\
    \  (strange_sort_list_helper lst empty))\n", "  (define (strange_sort_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_helper lst '()))\n", "  (define (min-max lst)\n    (if (null?\
    \ lst)\n        (values 0 0)\n        (let* ([min (apply min lst)]\n         \
    \      [max (apply max lst)]\n               [min-idx (index-of min lst)]\n  \
    \             [max-idx (index-of max lst)])\n          (values min max min-idx\
    \ max-idx))))\n  (define (index-of val lst)\n    (for/fold ([idx 0]) ([x lst])\n\
    \      (if (equal? x val)\n          idx\n          (+ idx 1))))\n  (define (remove-at\
    \ idx lst)\n    (if (zero? idx)\n        (cdr lst)\n        (cons (car lst) (remove-at\
    \ (- idx 1) (cdr lst)))))\n  (define (strange-sort lst)\n    (if (null? lst)\n\
    \        '()\n        (let* ([min-max (min-max lst)]\n               [min (car\
    \ min-max)]\n               [max (cadr min-max)]\n               [min-idx (caddr\
    \ min-max)]\n               [max-idx (cadddr min-max)])\n          (cons min (cons\
    \ max (strange-sort (remove-at min-idx (remove-at max-idx lst))))))))\n  (strange-sort\
    \ lst))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (let* ([min (apply min lst)]\n               [max (apply\
    \ max lst)]\n               [new-lst (remove min (remove max lst))])\n       \
    \   (strange_sort_list_helper new-lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [new-lst (remove min (remove max lst))])\n\
    \          (strange_sort_list_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (rest lst)) (append acc lst)]\n      [else\n       (define min\
    \ (min (first lst) (second lst)))\n       (define max (max (first lst) (second\
    \ lst)))\n       (strange_sort_list_helper (rest (rest lst)) (append acc (list\
    \ min max)))]))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let ([min (apply min lst)]\n\
    \              [max (apply max lst)])\n          (strange_sort_list_helper (remove\
    \ min (remove max lst))\n                                    (append acc (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort lst (append acc\
    \ (list min max))))))\n  (strange_sort lst '()))\n", "  (define (min-max-list\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n\
    \      [else\n       (let* ([min (apply min lst)]\n              [max (apply max\
    \ lst)]\n              [min-pos (position min lst)]\n              [max-pos (position\
    \ max lst)])\n         (cond\n           [(= min-pos max-pos) (cons min (min-max-list\
    \ (remove min lst)))]\n           [(< min-pos max-pos) (cons min (cons max (min-max-list\
    \ (remove min (remove max lst)))))]\n           [else (cons max (cons min (min-max-list\
    \ (remove min (remove max lst)))))]))]))\n  (min-max-list lst))\n", "  (define\
    \ (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n  \
    \    [(empty? (rest lst)) (append acc lst)]\n      [else\n       (define min-val\
    \ (min (first lst) (second lst)))\n       (define max-val (max (first lst) (second\
    \ lst)))\n       (strange_sort_list_helper (rest (rest lst)) (append acc (list\
    \ min-val max-val)))]))\n  (strange_sort_list_helper lst empty))\n", "  (define\
    \ (strange_sort_list_helper lst acc)\n    (cond\n      [(empty? lst) acc]\n  \
    \    [(empty? (rest lst)) (append acc lst)]\n      [else\n       (define min (min\
    \ (first lst) (second lst)))\n       (define max (max (first lst) (second lst)))\n\
    \       (strange_sort_list_helper (remove min (remove max lst))\n            \
    \                     (append acc (list min max)))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (cond\n   \
    \   [(empty? lst) acc]\n      [(empty? (rest lst)) (append acc lst)]\n      [else\n\
    \       (define min (min-list lst))\n       (define max (max-list lst))\n    \
    \   (strange_sort_list_helper (remove min (remove max lst))\n                \
    \                 (append acc (list min max)))]))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [new-lst (remove min (remove max lst))])\n\
    \          (strange_sort_list_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst res)\n    (if (null? lst)\n        res\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [remaining (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper remaining (append res (list\
    \ min max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [new-lst (remove min (remove\
    \ max lst))])\n          (strange_sort_list_helper new-lst (append acc (list min\
    \ max))))))\n  (strange_sort_list_helper lst '()))\n", "  (define (min-max-list\
    \ lst)\n    (if (null? lst)\n        '()\n        (cons (min lst) (cons (max lst)\
    \ '()))))\n  (define (min-max-list-helper lst acc)\n    (if (null? lst)\n    \
    \    acc\n        (min-max-list-helper (remove (min lst) (remove (max lst) lst))\n\
    \                             (append acc (min-max-list lst)))))\n  (min-max-list-helper\
    \ lst '()))\n", "  (define (strange_sort_helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (let* ([min (apply min lst)]\n               [max (apply\
    \ max lst)]\n               [lst (remove min lst)]\n               [lst (remove\
    \ max lst)])\n          (strange_sort_helper lst (append acc (list min max))))))\n\
    \  (strange_sort_helper lst '()))\n", "  (define (strange_sort_list_helper lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list (min lst))\n\
    \      (list (max (remove (min lst) lst)))\n      (strange_sort_list (remove (max\
    \ (remove (min lst) lst)) lst)))]))\n", "  (define (strange_sort_list_iter lst\
    \ acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_iter lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst '()))\n", " \
    \ (define (min-max lst)\n    (let ([min (apply min lst)]\n          [max (apply\
    \ max lst)])\n      (list min max)))\n  (define (strange-sort lst)\n    (if (empty?\
    \ lst)\n        empty\n        (let ([min-max (min-max lst)])\n          (append\
    \ min-max (strange-sort (remove min-max lst))))))\n  (strange-sort lst))\n", " \
    \ (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let* ([min (apply min lst)]\n               [max (apply max lst)]\n\
    \               [lst (remove min lst)]\n               [lst (remove max lst)])\n\
    \          (strange_sort_list_helper lst (append acc (list min max))))))\n  (strange_sort_list_helper\
    \ lst '()))\n", "  (define (strange_sort_list_helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (let* ([min (apply min lst)]\n               [max\
    \ (apply max lst)]\n               [new-lst (remove min (remove max lst))])\n\
    \          (strange_sort_list_helper new-lst (append acc (list min max))))))\n\
    \  (strange_sort_list_helper lst '()))\n", "  (define (strange_sort_list_helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_helper lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
