name: HumanEval_162_string_to_md5
language: rkt
prompt: "#lang racket\n\n;; Given a string 'text', return its md5 hash equivalent\
  \ string.\n;; If 'text' is an empty string, return None.\n(define (string_to_md5\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n\
  \    (check-equal? (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\"\
  )\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate \"A B C\"\
  ) \"0ef78513b0cb8cef12743f5aeb35f888\")\n    (check-equal? (candidate \"password\"\
  ) \"5f4dcc3b5aa765d61d8327deb882cf99\")\n))\n\n(test-humaneval)"
completions: ["  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (cond\n    [(empty?\
    \ text)\n     (error \"Empty string\")]\n    [else\n     (hash-ref (md5 text)\
    \ 'digest)]))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5\
    \ text) 'hash)))\n", "  (cond\n    [(empty? text) #f]\n    [else (hash-ref (md5\
    \ text) 'digest)]))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 (string->bytes/utf-8 text)) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? \"\" text)\n\
    \      #f\n      (md5 text)))\n", "  (cond\n    [(string=? text \"\")\n     #f]\n\
    \    [else\n     (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)]))\n", " \
    \ (define (md5-bytes-to-hex-string bytes)\n    (define (byte-to-hex-string byte)\n\
    \      (define (byte-to-hex-digit byte)\n        (cond ((= byte 0) #\\0)\n   \
    \           ((= byte 1) #\\1)\n              ((= byte 2) #\\2)\n             \
    \ ((= byte 3) #\\3)\n              ((= byte 4) #\\4)\n              ((= byte 5)\
    \ #\\5)\n              ((= byte 6) #\\6)\n              ((= byte 7) #\\7)\n  \
    \            ((= byte 8) #\\8)\n              ((= byte 9) #\\9)\n            \
    \  ((= byte 10) #\\a)\n              ((= byte 11) #\\b)\n              ((= byte\
    \ 12) #\\c)\n              ((= byte 13) #\\d)\n              ((= byte 14) #\\\
    e)\n              ((= byte 15) #\\f)))\n      (string-append (byte-to-hex-digit\
    \ (quotient byte 16))\n                     (byte-to-hex-digit (remainder byte\
    \ 16))))\n    (define (bytes-to-hex-string bytes)\n      (cond ((null? bytes)\
    \ \"\")\n            (else (string-append (byte-to-hex-string (car bytes))\n \
    \                                (bytes-to-hex-string (cdr bytes))))))\n    (bytes-to-hex-string\
    \ bytes))\n  (define (md5-string-to-bytes text)\n    (define (string-to-bytes\
    \ text)\n      (cond ((null? text) '())\n            (else (cons (char->integer\
    \ (car text))\n                        (string-to-bytes (cdr text))))))\n    (string-to-bytes\
    \ (md5 text)))\n  (define (md5-string-to-hex-string text)\n    (md5-bytes-to-hex-string\
    \ (md5-string-to-bytes text)))\n  (md5-string-to-hex-string text))\n", "  (if\
    \ (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", " \
    \ (if (equal? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (hash 'md5 text)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n\
    \    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (equal? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'hash)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ \"\" text)\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (equal?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (define\
    \ (hex-string->number hex-string)\n    (string->number hex-string 16))\n  (define\
    \ (hex-string->bytes hex-string)\n    (map (\u03BB (x) (hex-string->number x))\n\
    \         (string-split hex-string #\\space)))\n  (define (bytes->string bytes)\n\
    \    (string-join bytes))\n  (define (md5-hash text)\n    (bytes->string (hex-string->bytes\
    \ (md5 text))))\n  (if (string=? text \"\")\n      #f\n      (md5-hash text)))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (md5 text)]))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond\n    [(empty? text) #f]\n    [else (md5 text)]))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      'None\n      (md5 text)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (cond\n    [(empty? text) #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(empty? text) #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(string=? text \"\")\n     #f]\n    [else\n     (hash-ref (md5 text)\
    \ 'digest)]))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n\
    \    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n\
    \    [(empty? text) #f]\n    [else (hash-ref (md5 text) 'digest)]))\n", "  (if\
    \ (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (equal? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      '()\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (define (hex-string->int hex-string)\n    (string->number hex-string 16))\n \
    \ (define (hex-string->byte-list hex-string)\n    (map (lambda (hex-char)\n  \
    \         (hex-string->int (string hex-char)))\n         (string-&gt;list hex-string)))\n\
    \  (define (byte-list->int byte-list)\n    (bytes-&gt;integer/big-endian byte-list))\n\
    \  (define (int-&gt;hex-string int)\n    (number-&gt;string int 16))\n  (define\
    \ (byte-list-&gt;hex-string byte-list)\n    (int-&gt;hex-string (byte-list->int\
    \ byte-list)))\n  (define (md5-hash-string text)\n    (byte-list-&gt;hex-string\
    \ (md5 (string-&gt;bytes/utf-8 text))))\n  (if (string=? text \"\")\n      #f\n\
    \      (md5-hash-string text)))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (let ([md5 (md5 text)])\n        (bytes->string/utf-8\
    \ md5))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (cond\n    [(empty? text)\n     #f]\n    [else\n     (hash-ref\
    \ (string->bytes/utf-8 text) 'md5)]))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n    \
    \  #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond [(string=? text \"\") #f]\n        [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (equal? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (md5 text)]))\n", "  (cond\n\
    \    [(string=? text \"\") #f]\n    [else (md5 text)]))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n    [(empty?\
    \ text) (error \"Cannot hash an empty string\")]\n    [else (md5 text)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(empty? text) #f]\n    [else (bytes->string/utf-8 (md5 (string->bytes/utf-8\
    \ text)))]))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond\n    [(string=? text \"\") #f]\n    [else (md5 text)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(empty? text)\n     #f]\n    [else\n     (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (equal? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond [(string=? text \"\") #f]\n        [else (md5 text)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (cond\n    [(empty? text)\n     #f]\n    [else\n\
    \     (hash-ref (md5 text) 'digest)]))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (md5 text) 'digest)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
