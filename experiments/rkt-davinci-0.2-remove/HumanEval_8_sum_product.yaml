name: HumanEval_8_sum_product
language: rkt
prompt: "#lang racket\n\n;; For a given list of integers, return a tuple consisting\
  \ of a sum and a product of all the integers in a list.\n;; Empty sum should be\
  \ equal to 0 and empty product should be equal to 1.\n(define (sum_product numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n\
  \    (check-equal? (candidate (list )) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 1 1)) (list 3 1))\n    (check-equal? (candidate (list 100 0)) (list 100\
  \ 0))\n    (check-equal? (candidate (list 3 5 7)) (list 15 105))\n    (check-equal?\
  \ (candidate (list 10)) (list 10 10))\n))\n\n(test-humaneval)"
completions: ["  (let* ([sum (apply + numbers)]\n         [product (apply * numbers)])\n\
    \    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product\
    \ (apply * numbers)])\n    (cons sum product)))\n", "  (let* ([sum (apply + numbers)]\n\
    \         [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (values sum product)))\n",
  "  (let* ([sum (apply + numbers)]\n         [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n\
    \        sum\n        (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define\
    \ (product-helper numbers product)\n    (if (null? numbers)\n        product\n\
    \        (product-helper (cdr numbers) (* product (car numbers)))))\n  (cons (sum-helper\
    \ numbers 0) (product-helper numbers 1)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([number numbers])\n      (set! sum (+ sum\
    \ number))\n      (set! product (* product number)))\n    (values sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (values sum\
    \ product)))\n", "  (define (sum_product_helper numbers sum product)\n    (if\
    \ (null? numbers)\n        (cons sum product)\n        (sum_product_helper (cdr\
    \ numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (define\
    \ (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n        (sum-helper\
    \ (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n\
    \    (if (null? numbers)\n        product\n        (product-helper (cdr numbers)\
    \ (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let* ([sum (apply + numbers)]\n\
    \         [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (list sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum\
    \ (+ sum n))\n      (set! product (* product n)))\n    (values sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (cons sum\
    \ product)))\n", "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n\
    \        sum\n        (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define\
    \ (product-helper numbers product)\n    (if (null? numbers)\n        product\n\
    \        (product-helper (cdr numbers) (* product (car numbers)))))\n  (cons (sum-helper\
    \ numbers 0) (product-helper numbers 1)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (values\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (cons sum\
    \ product)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n\
    \    (list sum product)))\n", "  (define (sum lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [else (+ (first lst) (sum (rest lst)))]))\n  (define (product\
    \ lst)\n    (cond\n      [(empty? lst) 1]\n      [else (* (first lst) (product\
    \ (rest lst)))]))\n  (cons (sum numbers) (product numbers)))\n", "  (cond\n  \
    \  [(empty? numbers) (cons 0 1)]\n    [else (let ([s (sum_product (rest numbers))])\n\
    \            (cons (+ (first numbers) (car s))\n                  (* (first numbers)\
    \ (cdr s))))]))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (list sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (list\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n\
    \        sum\n        (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define\
    \ (product-helper numbers product)\n    (if (null? numbers)\n        product\n\
    \        (product-helper (cdr numbers) (* product (car numbers)))))\n  (cons (sum-helper\
    \ numbers 0) (product-helper numbers 1)))\n", "  (define (sum lst)\n    (if (null?\
    \ lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (product\
    \ lst)\n    (if (null? lst)\n        1\n        (* (car lst) (product (cdr lst)))))\n\
    \  (cons (sum numbers) (product numbers)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (match numbers\n    [(list) (values 0 1)]\n    [(cons head tail)\n     (let ([(s\
    \ p) (sum_product tail)])\n       (values (+ s head) (* p head)))]))\n", "  (define\
    \ (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n        (sum-helper\
    \ (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n\
    \    (if (null? numbers)\n        product\n        (product-helper (cdr numbers)\
    \ (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let ((sum 0)\n        (product 1))\n    (for ([number\
    \ numbers])\n      (set! sum (+ sum number))\n      (set! product (* product number)))\n\
    \    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product\
    \ (apply * numbers)])\n    (list sum product)))\n", "  (define (sum_product_helper\
    \ numbers sum product)\n    (if (null? numbers)\n        (cons sum product)\n\
    \        (sum_product_helper (cdr numbers) (+ sum (car numbers)) (* product (car\
    \ numbers)))))\n  (sum_product_helper numbers 0 1))\n", "  (define (sum numbers)\n\
    \    (if (null? numbers)\n        0\n        (+ (car numbers) (sum (cdr numbers)))))\n\
    \  (define (product numbers)\n    (if (null? numbers)\n        1\n        (* (car\
    \ numbers) (product (cdr numbers)))))\n  (cons (sum numbers) (product numbers)))\n",
  "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n    \
    \    (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper\
    \ numbers product)\n    (if (null? numbers)\n        product\n        (product-helper\
    \ (cdr numbers) (* product (car numbers)))))\n  (list (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let* ([sum (apply + numbers)]\n\
    \         [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (list sum product)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (values\
    \ sum product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (define (sum numbers)\n \
    \   (if (null? numbers)\n        0\n        (+ (car numbers) (sum (cdr numbers)))))\n\
    \  (define (product numbers)\n    (if (null? numbers)\n        1\n        (* (car\
    \ numbers) (product (cdr numbers)))))\n  (cons (sum numbers) (product numbers)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (match numbers\n    [(list) '(0 1)]\n    [(list x xs)\n     (let ([s (sum_product\
    \ xs)])\n       (cons (+ (car s) x) (* (cdr s) x)))]))\n", "  (let ([sum (apply\
    \ + numbers)]\n        [product (apply * numbers)])\n    (list sum product)))\n",
  "  (define (sum numbers)\n    (if (null? numbers)\n        0\n        (+ (car numbers)\
    \ (sum (cdr numbers)))))\n  (define (product numbers)\n    (if (null? numbers)\n\
    \        1\n        (* (car numbers) (product (cdr numbers)))))\n  (cons (sum\
    \ numbers) (product numbers)))\n", "  (define (sum_product_iter numbers sum product)\n\
    \    (if (null? numbers)\n        (cons sum product)\n        (sum_product_iter\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_iter\
    \ numbers 0 1))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (list sum product)))\n", "  (define (sum_product_iter numbers\
    \ sum product)\n    (if (null? numbers)\n        (cons sum product)\n        (sum_product_iter\
    \ (cdr numbers)\n                          (+ sum (car numbers))\n           \
    \               (* product (car numbers)))))\n  (sum_product_iter numbers 0 1))\n",
  "  (let* ([sum (apply + numbers)]\n         [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let* ([sum (apply + numbers)]\n\
    \         [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (if (null? numbers)\n      (cons 0 1)\n      (let ((rest (sum_product (cdr numbers))))\n\
    \        (cons (+ (car numbers) (car rest))\n              (* (car numbers) (cdr\
    \ rest))))))\n", "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n\
    \        sum\n        (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define\
    \ (product-helper numbers product)\n    (if (null? numbers)\n        product\n\
    \        (product-helper (cdr numbers) (* product (car numbers)))))\n  (cons (sum-helper\
    \ numbers 0) (product-helper numbers 1)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let loop\
    \ ([numbers numbers] [sum 0] [product 1])\n    (if (null? numbers)\n        (values\
    \ sum product)\n        (loop (cdr numbers) (+ sum (car numbers)) (* product (car\
    \ numbers))))))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n   \
    \     (+ (car lst) (sum (cdr lst)))))\n  (define (product lst)\n    (if (null?\
    \ lst)\n        1\n        (* (car lst) (product (cdr lst)))))\n  (cons (sum numbers)\
    \ (product numbers)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (define (sum-helper numbers\
    \ sum)\n    (if (null? numbers)\n        sum\n        (sum-helper (cdr numbers)\
    \ (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n    (if\
    \ (null? numbers)\n        product\n        (product-helper (cdr numbers) (* product\
    \ (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper numbers 1)))\n",
  "  (define (sum_product_helper numbers sum product)\n    (cond\n      [(empty? numbers)\
    \ (cons sum product)]\n      [else (sum_product_helper (rest numbers) (+ sum (first\
    \ numbers)) (* product (first numbers)))]))\n  (sum_product_helper numbers 0 1))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (cons sum\
    \ product)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n\
    \    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product\
    \ (apply * numbers)])\n    (cons sum product)))\n", "  (define (sum_product_helper\
    \ numbers sum product)\n    (if (null? numbers)\n        (values sum product)\n\
    \        (sum_product_helper (cdr numbers) (+ sum (car numbers)) (* product (car\
    \ numbers)))))\n  (sum_product_helper numbers 0 1))\n", "  (define (sum_product_iter\
    \ numbers sum product)\n    (if (null? numbers)\n        (cons sum product)\n\
    \        (sum_product_iter (cdr numbers) (+ sum (car numbers)) (* product (car\
    \ numbers)))))\n  (sum_product_iter numbers 0 1))\n", "  (let ([sum 0]\n     \
    \   [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set!\
    \ product (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply\
    \ + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum\
    \ (+ sum n))\n      (set! product (* product n)))\n    (values sum product)))\n",
  "  (define (sum_product_helper numbers sum product)\n    (cond\n      [(empty? numbers)\
    \ (cons sum product)]\n      [else (sum_product_helper (rest numbers) (+ sum (first\
    \ numbers)) (* product (first numbers)))]))\n  (sum_product_helper numbers 0 1))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n\
    \      (set! product (* product n)))\n    (values sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (product lst)\n    (if (null? lst)\n        1\n   \
    \     (* (car lst) (product (cdr lst)))))\n  (cons (sum numbers) (product numbers)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum\
    \ (+ sum n))\n      (set! product (* product n)))\n    (values sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (cons sum\
    \ product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (define (sum_product_iter sum product numbers)\n    (if\
    \ (null? numbers)\n        (cons sum product)\n        (sum_product_iter (+ sum\
    \ (car numbers)) (* product (car numbers)) (cdr numbers))))\n  (sum_product_iter\
    \ 0 1 numbers))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (list sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (define\
    \ (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n        (sum-helper\
    \ (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n\
    \    (if (null? numbers)\n        product\n        (product-helper (cdr numbers)\
    \ (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply *\
    \ numbers)])\n    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (values sum product)))\n", "  (let\
    \ ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum\
    \ product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (define (sum lst)\n    (if (null?\
    \ lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (product\
    \ lst)\n    (if (null? lst)\n        1\n        (* (car lst) (product (cdr lst)))))\n\
    \  (cons (sum numbers) (product numbers)))\n", "  (define (sum_product_iter numbers\
    \ sum product)\n    (cond\n      [(empty? numbers) (cons sum product)]\n     \
    \ [else (sum_product_iter (rest numbers) (+ sum (first numbers)) (* product (first\
    \ numbers)))]))\n  (sum_product_iter numbers 0 1))\n", "  (define (sum lst)\n\
    \    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define\
    \ (product lst)\n    (if (null? lst)\n        1\n        (* (car lst) (product\
    \ (cdr lst)))))\n  (cons (sum numbers) (product numbers)))\n", "  (let ([sum (apply\
    \ + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (let ((sum 0)\n        (product 1))\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (values sum\
    \ product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply *\
    \ numbers)])\n    (cons sum product)))\n", "  (define (sum numbers)\n    (if (null?\
    \ numbers)\n        0\n        (+ (car numbers) (sum (cdr numbers)))))\n  (define\
    \ (product numbers)\n    (if (null? numbers)\n        1\n        (* (car numbers)\
    \ (product (cdr numbers)))))\n  (cons (sum numbers) (product numbers)))\n", " \
    \ (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([number\
    \ numbers])\n      (set! sum (+ sum number))\n      (set! product (* product number)))\n\
    \    (cons sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product\
    \ (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n       \
    \ [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set!\
    \ product (* product n)))\n    (values sum product)))\n", "  (define (sum-helper\
    \ numbers sum)\n    (if (null? numbers)\n        sum\n        (sum-helper (cdr\
    \ numbers) (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n\
    \    (if (null? numbers)\n        product\n        (product-helper (cdr numbers)\
    \ (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply *\
    \ numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum\
    \ (+ sum n))\n      (set! product (* product n)))\n    (values sum product)))\n",
  "  (define (sum_product_helper numbers sum product)\n    (if (null? numbers)\n \
    \       (cons sum product)\n        (sum_product_helper (cdr numbers) (+ sum (car\
    \ numbers)) (* product (car numbers)))))\n  (sum_product_helper numbers 0 1))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (define (sum_product_iter numbers sum product)\n    (if\
    \ (null? numbers)\n        (cons sum product)\n        (sum_product_iter (cdr\
    \ numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_iter\
    \ numbers 0 1))\n", "  (define (sum_product_helper numbers sum product)\n    (cond\
    \ [(empty? numbers) (cons sum product)]\n          [else (sum_product_helper (rest\
    \ numbers) (+ sum (first numbers)) (* product (first numbers)))]))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (let ((sum 0)\n        (product 1))\n    (for ([number\
    \ numbers])\n      (set! sum (+ sum number))\n      (set! product (* product number)))\n\
    \    (values sum product)))\n", "  (define (sum_product_helper numbers sum product)\n\
    \    (if (null? numbers)\n        (values sum product)\n        (sum_product_helper\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (let loop ([numbers numbers] [sum 0] [product 1])\n   \
    \ (cond [(empty? numbers) (values sum product)]\n          [else (loop (rest numbers)\
    \ (+ sum (first numbers)) (* product (first numbers)))])))\n", "  (define (sum_product_helper\
    \ numbers sum product)\n    (cond\n      [(empty? numbers) (cons sum product)]\n\
    \      [else (sum_product_helper (rest numbers) (+ sum (first numbers)) (* product\
    \ (first numbers)))]))\n  (sum_product_helper numbers 0 1))\n", "  (let ([sum\
    \ (apply + numbers)]\n        [product (apply * numbers)])\n    (cons sum product)))\n",
  "  (define (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n    \
    \    (sum-helper (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper\
    \ numbers product)\n    (if (null? numbers)\n        product\n        (product-helper\
    \ (cdr numbers) (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (define (sum-helper numbers sum)\n\
    \    (if (null? numbers)\n        sum\n        (sum-helper (cdr numbers) (+ sum\
    \ (car numbers)))))\n  (define (product-helper numbers product)\n    (if (null?\
    \ numbers)\n        product\n        (product-helper (cdr numbers) (* product\
    \ (car numbers)))))\n  (list (sum-helper numbers 0) (product-helper numbers 1)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (list\
    \ sum product)))\n", "  (define (sum numbers)\n    (if (null? numbers)\n     \
    \   0\n        (+ (car numbers) (sum (cdr numbers)))))\n  (define (product numbers)\n\
    \    (if (null? numbers)\n        1\n        (* (car numbers) (product (cdr numbers)))))\n\
    \  (cons (sum numbers) (product numbers)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n\
    \      (set! product (* product n)))\n    (values sum product)))\n", "  (define\
    \ (sum_product_helper numbers sum product)\n    (if (null? numbers)\n        (cons\
    \ sum product)\n        (sum_product_helper (cdr numbers) (+ sum (car numbers))\
    \ (* product (car numbers)))))\n  (sum_product_helper numbers 0 1))\n", "  (let\
    \ ([sum 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum\
    \ n))\n      (set! product (* product n)))\n    (values sum product)))\n", " \
    \ (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let loop ([numbers numbers] [sum 0] [product 1])\n  \
    \  (cond [(empty? numbers) (values sum product)]\n          [else (loop (rest\
    \ numbers) (+ sum (first numbers)) (* product (first numbers)))])))\n", "  (define\
    \ (sum-helper numbers sum)\n    (if (null? numbers)\n        sum\n        (sum-helper\
    \ (cdr numbers) (+ sum (car numbers)))))\n  (define (product-helper numbers product)\n\
    \    (if (null? numbers)\n        product\n        (product-helper (cdr numbers)\
    \ (* product (car numbers)))))\n  (cons (sum-helper numbers 0) (product-helper\
    \ numbers 1)))\n", "  (define (sum_product_helper numbers sum product)\n    (if\
    \ (null? numbers)\n        (cons sum product)\n        (sum_product_helper (cdr\
    \ numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (define (sum lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [else (+ (first lst) (sum (rest lst)))]))\n  (define (product lst)\n  \
    \  (cond\n      [(empty? lst) 1]\n      [else (* (first lst) (product (rest lst)))]))\n\
    \  (cons (sum numbers) (product numbers)))\n", "  (define (sum_product_iter numbers\
    \ sum product)\n    (if (null? numbers)\n        (cons sum product)\n        (sum_product_iter\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_iter\
    \ numbers 0 1))\n", "  (cond\n    [(empty? numbers) (cons 0 1)]\n    [else (let\
    \ ([sum (sum_product (rest numbers))]\n                [product (sum_product (rest\
    \ numbers))])\n            (cons (+ (first numbers) (car sum))\n             \
    \     (* (first numbers) (cdr product))))]))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (cons sum product)))\n</code>\n", " \
    \ (let* ([sum (apply + numbers)]\n         [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (define (sum_product_iter numbers\
    \ sum product)\n    (if (null? numbers)\n        (list sum product)\n        (sum_product_iter\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_iter\
    \ numbers 0 1))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([number\
    \ numbers])\n      (set! sum (+ sum number))\n      (set! product (* product number)))\n\
    \    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n        [product\
    \ (apply * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n       \
    \ [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set!\
    \ product (* product n)))\n    (values sum product)))\n", "  (let ([sum 0]\n \
    \       [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n   \
    \   (set! product (* product n)))\n    (values sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([number numbers])\n      (set! sum (+ sum\
    \ number))\n      (set! product (* product number)))\n    (values sum product)))\n",
  "  (let ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (list\
    \ sum product)))\n", "  (define (sum_product_helper numbers sum product)\n   \
    \ (if (null? numbers)\n        (values sum product)\n        (sum_product_helper\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (let ([sum (apply + numbers)]\n        [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (define (sum numbers)\n    (if\
    \ (null? numbers)\n        0\n        (+ (car numbers) (sum (cdr numbers)))))\n\
    \  (define (product numbers)\n    (if (null? numbers)\n        1\n        (* (car\
    \ numbers) (product (cdr numbers)))))\n  (cons (sum numbers) (product numbers)))\n",
  "  (define (sum_product_helper numbers sum product)\n    (cond\n      [(empty? numbers)\
    \ (cons sum product)]\n      [else (sum_product_helper (rest numbers) (+ sum (first\
    \ numbers)) (* product (first numbers)))]))\n  (sum_product_helper numbers 0 1))\n",
  "  (let* ([sum (apply + numbers)]\n         [product (apply * numbers)])\n    (cons\
    \ sum product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ((sum 0)\n        (product\
    \ 1))\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([number numbers])\n      (set! sum (+ sum number))\n      (set!\
    \ product (* product number)))\n    (list sum product)))\n", "  (match numbers\n\
    \    [(list) '(0 1)]\n    [(list x xs)\n     (let ([s (sum_product xs)])\n   \
    \    (values (+ x (car s)) (* x (cadr s))))]))\n", "  (apply values (map * numbers)\
    \ (map + numbers)))\n", "  (define (sum_product_iter numbers sum product)\n  \
    \  (if (null? numbers)\n        (cons sum product)\n        (sum_product_iter\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_iter\
    \ numbers 0 1))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (cons sum\
    \ product)))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n      \
    \  (+ (car lst) (sum (cdr lst)))))\n  (define (product lst)\n    (if (null? lst)\n\
    \        1\n        (* (car lst) (product (cdr lst)))))\n  (cons (sum numbers)\
    \ (product numbers)))\n", "  (define (sum_product_helper numbers sum product)\n\
    \    (if (null? numbers)\n        (cons sum product)\n        (sum_product_helper\
    \ (cdr numbers) (+ sum (car numbers)) (* product (car numbers)))))\n  (sum_product_helper\
    \ numbers 0 1))\n", "  (let ([sum 0]\n        [product 1])\n    (for ([n numbers])\n\
    \      (set! sum (+ sum n))\n      (set! product (* product n)))\n    (values\
    \ sum product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply\
    \ * numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (let ([sum (apply + numbers)]\n\
    \        [product (apply * numbers)])\n    (list sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n\
    \      (set! product (* product n)))\n    (values sum product)))\n", "  (let ([sum\
    \ 0]\n        [product 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n\
    \      (set! product (* product n)))\n    (values sum product)))\n", "  (define\
    \ (sum_product_helper numbers sum product)\n    (if (null? numbers)\n        (cons\
    \ sum product)\n        (sum_product_helper (cdr numbers) (+ sum (car numbers))\
    \ (* product (car numbers)))))\n  (sum_product_helper numbers 0 1))\n", "  (define\
    \ (sum_product_iter numbers sum product)\n    (if (null? numbers)\n        (cons\
    \ sum product)\n        (sum_product_iter (cdr numbers) (+ sum (car numbers))\
    \ (* product (car numbers)))))\n  (sum_product_iter numbers 0 1))\n", "  (let\
    \ ([sum (apply + numbers)]\n        [product (apply * numbers)])\n    (values\
    \ sum product)))\n", "  (match numbers\n    [(list) '(0 1)]\n    [(list x xs)\n\
    \     (let ([sum (apply + (cons x (map first (sum_product xs))))]\n          \
    \ [product (apply * (cons x (map second (sum_product xs))))])\n       (list sum\
    \ product))]))\n", "  (let ([sum (apply + numbers)]\n        [product (apply *\
    \ numbers)])\n    (cons sum product)))\n", "  (let* ([sum (apply + numbers)]\n\
    \         [product (apply * numbers)])\n    (cons sum product)))\n", "  (let ((sum\
    \ 0)\n        (product 1))\n    (for ([n numbers])\n      (set! sum (+ sum n))\n\
    \      (set! product (* product n)))\n    (cons sum product)))\n", "  (define\
    \ (sum lst)\n    (cond\n      [(empty? lst) 0]\n      [else (+ (first lst) (sum\
    \ (rest lst)))]))\n  (define (product lst)\n    (cond\n      [(empty? lst) 1]\n\
    \      [else (* (first lst) (product (rest lst)))]))\n  (cons (sum numbers) (product\
    \ numbers)))\n", "  (cond\n    [(empty? numbers) (cons 0 1)]\n    [else (cons\
    \ (+ (first numbers) (car (sum_product (rest numbers))))\n                 (*\
    \ (first numbers) (cdr (sum_product (rest numbers)))))]))\n", "  (let ([sum (apply\
    \ + numbers)]\n        [product (apply * numbers)])\n    (values sum product)))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (product lst)\n    (if (null? lst)\n        1\n   \
    \     (* (car lst) (product (cdr lst)))))\n  (cons (sum numbers) (product numbers)))\n",
  "  (let ([sum 0]\n        [product 1])\n    (for ([number numbers])\n      (set!\
    \ sum (+ sum number))\n      (set! product (* product number)))\n    (values sum\
    \ product)))\n", "  (let* ([sum (apply + numbers)]\n         [product (apply *\
    \ numbers)])\n    (cons sum product)))\n", "  (let ([sum 0]\n        [product\
    \ 1])\n    (for ([n numbers])\n      (set! sum (+ sum n))\n      (set! product\
    \ (* product n)))\n    (values sum product)))\n", "  (define (sum lst)\n    (if\
    \ (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (product\
    \ lst)\n    (if (null? lst)\n        1\n        (* (car lst) (product (cdr lst)))))\n\
    \  (cons (sum numbers) (product numbers)))\n", "  (define (sum_product_helper\
    \ numbers sum product)\n    (if (null? numbers)\n        (values sum product)\n\
    \        (sum_product_helper (cdr numbers) (+ sum (car numbers)) (* product (car\
    \ numbers)))))\n  (sum_product_helper numbers 0 1))\n", "  (define (sum_product_iter\
    \ numbers sum product)\n    (cond\n      [(empty? numbers) (cons sum product)]\n\
    \      [else (sum_product_iter (rest numbers) (+ sum (first numbers)) (* product\
    \ (first numbers)))]))\n  (sum_product_iter numbers 0 1))\n", "  (let* ([sum (apply\
    \ + numbers)]\n         [product (apply * numbers)])\n    (cons sum product)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
