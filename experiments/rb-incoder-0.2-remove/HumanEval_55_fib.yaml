name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  if n <= 0\n    0\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  else\n\
    \    if n == 0\n      0\n    elsif n == 1\n      1\n    else\n      fib(n-1) +\
    \ fib(n-2)\n    end\n  end\nend", "  if n <= 0\n    raise(ArgumentError, \"n must\
    \ be positive\")\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    puts \"Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n\
    \  end\nend", "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  elsif\
    \ n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n  else\n \
    \   puts fib(n - 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n    puts \"Invalid\
    \ input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n  elsif n\
    \ <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n   \
    \ raise ArgumentError, \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n\
    \ == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n\
    \    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <=\
    \ 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n \
    \   1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    if n == 0\n      0\n    elsif n == 1\n    \
    \  1\n    else\n      fib(n-1) + fib(n-2)\n    end\n  end\nend", "  if n <= 0\n\
    \    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\
    \n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n\
    \ == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n  \
    \  return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    puts \"Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n\
    \  end\n  a, b = 0, 1\n  while a < n\n    puts a\n    a, b = b, a+b\n  end\nend",
  "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return\
    \ 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\n\
    end", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    puts \"Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1)} #{fib(n -\
    \ 2)}\"\n  end\nend", "  if n < 0\n    raise ArgumentError, \"negative number\"\
    \n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n\
    \  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit 1\n  end\n  if\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n \
    \   raise ArgumentError, \"negative argument\"\n  elsif n == 0\n    return 0\n\
    \  elsif n == 1\n    return 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\n\
    end", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\
    \n  else\n    puts \"#{n} is #{fib(n - 1) + fib(n - 2)}\"\n  end\nend", "  if\
    \ n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  else\n    puts \"#{n}.\
    \ #{fib(n - 1) + fib(n - 2)}\"\n  end\nend", "  if n <= 0\n    puts \"Invalid\
    \ input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 1\n    fib\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n\
    \ == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n  \
    \  0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n < 0\n    raise ArgumentError, \"negative argument\"\n  elsif n == 0\n \
    \   return 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    raise(ArgumentError, \"n must be positive\")\n\
    \  else\n    fibs = [0]\n    fibs << fibs.last + fibs.last\n    n.times { fibs\
    \ << fibs.last + fibs.last }\n    fibs.last\n  end\nend", "  if n <= 0\n    0\n\
    \  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    0\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n \
    \ end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n\
    \    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage:\
    \ fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n == 0\n    fib(1)\n  elsif n == 1\n    fib(2)\n  else\n \
    \   fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n   \
    \ return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise\
    \ ArgumentError, \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n\
    \ == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n\
    \  end\nend", "  if n <= 0\n    puts \"fib(n) called with n <= 0\"\n  else\n \
    \   puts \"fib(n) = #{fib(n-1)} + #{fib(n-2)}\"\n  end\nend", "  if n <= 0\n \
    \   puts \"Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n == 1\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n  elsif\
    \ n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n < 0\n\
    \    raise ArgumentError, \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  if n\
    \ == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n   \
    \ raise ArgumentError, \"negative number\"\n  elsif n == 0\n    return 0\n  elsif\
    \ n == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n\
    \  end\nend", "  if n <= 0\n    raise(ArgumentError, \"n must be positive\")\n\
    \  else\n    if n == 1\n      1\n    else\n      fib(n-1) + fib(n-2)\n    end\n\
    \  end\nend", "  if n == 0\n    fib(0)\n  elsif n == 1\n    fib(1)\n  else\n \
    \   fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n  \
    \  1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n\
    \    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n \
    \ end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n  \
    \  return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib\
    \ n\"\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 0\n    puts \"Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1)}\
    \ #{fib(n - 2)}\"\n  end\nend", "  if n < 0\n    puts \"Usage: fib n\"\n    exit\
    \ 1\n  end\n  a, b = 0, 1\n  while n > 0\n    puts b\n    a, b = b, a + b\n  \
    \  n -= 1\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n \
    \   fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError, \"\
    negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts\
    \ \"Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend", " \
    \ if n <= 0\n    puts \"Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while\
    \ n > 0\n    puts b\n    a, b = b, a + b\n    n -= 1\n  end\nend", "  if n <=\
    \ 0\n    puts \"Usage: fib n\"\n  elsif n == 1\n    puts \"fib(1) is 0\"\n  elsif\
    \ n == 2\n    puts \"fib(2) is 1\"\n  else\n    puts \"fib(#{n}) is #{fib(n-1)+fib(n-2)}\"\
    \n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  else\n    puts \"#{n}.\
    \ #{fib(n - 1) + fib(n - 2)}\"\n  end\nend", "  if n <= 0\n    puts \"Invalid\
    \ input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n    exit\n\
    \  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if\
    \ n <= 0\n    puts \"Usage: fib n\"\n  else\n    puts fib_cache[n]\n  end\nend",
  "  if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  if n < 0\n    raise ArgumentError, \"negative number\"\n  elsif n == 0\n    return\
    \ 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if\
    \ n <= 0\n    puts \"n must be > 0\"\n  elsif n == 1\n    puts \"1\"\n  elsif\
    \ n == 2\n    puts \"2\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    puts \"Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    puts \"Usage: fib n\"\n  elsif n <= 1\n    1\n  else\n    fib(n -\
    \ 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n < 0\n    raise ArgumentError, \"negative argument\"\n  elsif\
    \ n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 1\n    fib\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n < 0\n    raise ArgumentError, \"negative number\"\n  elsif n ==\
    \ 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1) +\
    \ fib(n-2)\n  end\nend", "  if n <= 0\n    raise(ArgumentError, \"n must be positive\"\
    )\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return\
    \ 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 0\n    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 1\n    fib\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <=\
    \ 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"negative number\"\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n\
    \    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib\
    \ n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    puts \"Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n\
    \ - 2)}\"\n  end\nend", "  if n <= 0\n    puts \"Usage: fib n\"\n  else\n    puts\
    \ \"#{n}th Fibonacci number is #{fib(n-1)} + #{fib(n-2)}\"\n  end\nend", "  if\
    \ n <= 0\n    raise(ArgumentError, \"n must be positive\")\n  else\n    fibs =\
    \ [0]\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fib", "  if n < 0\n    raise\
    \ ArgumentError, \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n\
    \ == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n\
    \ <= 0\n    puts \"Usage: fib n\"\n    exit 1\n  end\n  if n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError, \"\
    negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage:\
    \ fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n < 0\n    raise ArgumentError, \"negative number\"\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid\
    \ input\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 1\n \
    \   fib\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts\
    \ \"Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while a < n\n    puts a\n\
    \    a, b = b, a + b\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    puts \"Usage: fib n\"\n \
    \   exit\n  end\n  if n == 0\n    return 0\n  end\n  if n == 1\n    return 1\n\
    \  end\n  return fib(n-1) + fib(n-2)\nend", "  if n <= 0\n    puts \"Invalid input\"\
    \n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n  end\nend", "  if n\
    \ <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n  \
    \  puts \"Usage: fib n\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n  \
    \  return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib\
    \ n\"\n    exit\n  end\n  a, b = 0, 1\n  while n > 0\n    puts a\n    a, b = b,\
    \ a + b\n    n -= 1\n  end\nend", "  if n < 0\n    raise ArgumentError, \"negative\
    \ number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n\
    \    return fib(n-2) + fib(n-1)\n  end\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ if n <= 0\n    puts \"fib(n) called with n <= 0\"\n    return nil\n  end\n \
    \ if n == 1\n    return 0\n  end\n  if n == 2\n    return 1\n  end\n  fibs = fib(n-1)\
    \ + fib(n-2)\n  return fibs\nend", "  if n <= 1\n    n\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError, \"\
    negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return\
    \ 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return\
    \ 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts\
    \ \"Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n - 1)\
    \ + fib(n - 2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if\
    \ n <= 0\n    puts \"fib(n) called with n <= 0\"\n  elsif n == 1\n    puts \"\
    fib(n) called with n == 1\"\n  else\n    puts \"fib(n) called with n > 1\"\n \
    \   puts fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Usage: fib\
    \ n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n\
    \    return 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <=\
    \ 0\n    puts \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n\
    \  else\n    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n <= 0\n    puts \"Usage:\
    \ fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    puts \"n must be > 0\"\n  elsif n <= 1\n    puts\
    \ \"n must be > 1\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"negative number\"\n  else\n    if n == 0\n\
    \      0\n    elsif n == 1\n      1\n    else\n      fib(n-1) + fib(n-2)\n   \
    \ end\n  end\nend", "  if n <= 0\n    raise(ArgumentError, \"n must be positive\"\
    )\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise\
    \ ArgumentError, \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n - 1) + fib(n - 2)\n  end\n\
    end", "  if n <= 0\n    puts \"Usage: fib n\"\n  else\n    puts Fib(n) if n <=\
    \ 1\n  end\nend", "  if n < 0\n    raise ArgumentError, \"negative number\"\n\
    \  elsif n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    return 0\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n == 0\n    fib1 = 0\n    fib2 = 1\n  elsif n == 1\n    fib1 = 1\n\
    \    fib2 = 1\n  else\n    fib1 = fib(n-1) + fib(n-2)\n    fib2 = fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 0\n    0\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 0\n    puts \"Invalid input\"\n  else\n    puts fib(n - 1) + fib(n -\
    \ 2)\n  end\nend", "  if n <= 0\n    puts \"Invalid input\"\n  elsif n == 1\n\
    \    1\n  elsif n == 2\n    2\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend",
  "  if n <= 0\n    puts \"Usage: fib n\"\n  else\n    puts Fibonacci.fib(n)\n  end\n\
    end", "  if n == 0\n    fib = 0\n  elsif n == 1\n    fib = fib - 1\n  else\n \
    \   fib = fib + fib - fib + fib - 1\n  end\n  fib\nend", "  if n <= 0\n    puts\
    \ \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n   \
    \ 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    puts \"Usage:\
    \ fib n\"\n    exit 1\n  end\n  if n == 0\n    1\n  elsif n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError, \"\
    negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend", "  if n <= 0\n    return\
    \ 0\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n <= 0\n    puts\
    \ \"Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  if n < 0\n    raise ArgumentError, \"\
    negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  end\n  fib_n = fib(n-1) + fib(n-2)\n  return fib_n\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
