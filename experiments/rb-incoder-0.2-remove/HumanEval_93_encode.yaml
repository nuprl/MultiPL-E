name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.downcase == char\n\
    \      new_message << char.downcase\n    elsif char.upcase == char.downcase\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |c|\n    if c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message\
    \ += \"D\"\n    elsif c.upcase == \"O\"\n      new_message += \"G\"\n    elsif\
    \ c.upcase == \"U\"\n      new_message += \"H\"\n    elsif c.upcase == \"Y\"\n\
    \      new_message += \"J\"\n    elsif c.upcase == \"a\"\n      new_message +=\
    \ \"b\"\n    elsif c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase\
    \ == \"i\"\n      new_message += \"d\"\n    elsif c.upcase == \"o\"\n      new_message\
    \ += \"g\"\n    elsif c.upcase == \"u\"\n      new_message += \"h\"\n    elsif\
    \ c.upcase == \"y\"\n      new_message += \"j\"\n    elsif c.upcase == \"b\"\n\
    \      new_message += \"a\"\n    elsif c.upcase == \"f\"\n      new_message +=\
    \ \"e\"\n    elsif c.upcase == \"d\"\n      new_message += \"i\"\n    elsif c.upcase\
    \ == \"g\"\n      new_message += \"o\"\n    elsif c.upcase == \"h\"\n      new_message\
    \ += \"u\"\n    elsif c.upcase == \"j\"\n      new_message += \"y\"\n    elsif\
    \ c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase == \"E\"\n\
    \      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message +=\
    \ \"D\"\n    elsif c.upcase == \"O\"\n      new_message += \"G\"\n    elsif c.upcase\
    \ == \"U\"\n      new_message += \"H\"\n    elsif c.upcase == \"Y\"\n      new_message\
    \ += \"J\"\n    elsif c.upcase == \"a\"\n      new_message += \"b\"\n    elsif\
    \ c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase == \"i\"\n\
    \      new_message += \"d\"\n    elsif c.upcase == \"o\"\n      new_message +=\
    \ \"g\"\n    elsif c.upcase == \"u\"\n      new_message += \"h\"\n    elsi", " \
    \ new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  new_message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  new_message\nend", "  new_message = \"\"\n  message.split(\"\
    \").each do |letter|\n    letter = letter.upcase if letter.upcase != letter\n\
    \    letter = letter.gsub(/[aeiou]/, 'A')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'B')\n    letter = letter.gsub(/[aeiou]/, 'C')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'D')\n    letter = letter.gsub(/[aeiou]/, 'E')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'F')\n    letter = letter.gsub(/[aeiou]/, 'G')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'H')\n    letter = letter.gsub(/[aeiou]/, 'I')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'J')\n    letter = letter.gsub(/[aeiou]/, 'K')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'L')\n    letter = letter.gsub(/[aeiou]/, 'M')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'N')\n    letter = letter.gsub(/[aeiou]/, 'O')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'P')\n    letter = letter.gsub(/[aeiou]/, 'Q')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'R')\n    letter = letter.gsub(/[aeiou]/, 'S')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'T')\n    letter = letter.gsub(/[aeiou]/, 'U')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'V')\n    letter = letter.gsub(/[aeiou]/, 'W')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'X')\n    letter = letter.gsub(/[aeiou]/, 'Y')\n    letter = letter.gsub(/[aeiou]/,\
    \ 'Z')\n    new_message += letter\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase if letter.upcase\
    \ == \"A\" || letter.upcase == \"E\" || letter.upcase == \"I\" || letter.upcase\
    \ == \"O\" || letter.upcase == \"U\"\n    letter.downcase if letter.downcase ==\
    \ \"a\" || letter.downcase == \"e\" || letter.downcase == \"i\" || letter.downcase\
    \ == \"o\" || letter.downcase == \"u\"\n    new_message += letter\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    if letter.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif letter.upcase == \"E\"\n   \
    \   new_message += \"F\"\n    elsif letter.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif letter.upcase == \"O\"\n      new_message += \"K\"\n   \
    \ elsif letter.upcase == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase\
    \ == \"Y\"\n      new_message += \"M\"\n    elsif letter.upcase == \"a\"\n   \
    \   new_message += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif letter.upcase == \"i\"\n      new_message += \"j\"\n   \
    \ elsif letter.upcase == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif letter.upcase == \"y\"\n   \
    \   new_message += \"m\"\n    elsif letter.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif letter.upcase == \"E\"\n      new_message += \"F\"\n   \
    \ elsif letter.upcase == \"I\"\n      new_message += \"J\"\n    elsif letter.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif letter.upcase == \"U\"\n   \
    \   new_message += \"L\"\n    elsif letter.upcase == \"Y\"\n      new_message\
    \ += \"M\"\n    elsif letter.upcase == \"a\"\n      new_message += \"b\"\n   \
    \ elsif letter.upcase == \"e\"\n      new_message += \"f\"\n    elsif letter.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif letter.upcase == \"o\"\n   \
    \   new_message += \"k\"\n    elsif letter.upcase == \"u\"\n      new_message\
    \ += \"l\"\n    elsif letter.upcase == \"y\"\n      new_message += \"m\"\n   \
    \ else\n      new_message += letter\n    end\n  end\n  return new_message\nend",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.downcase == char\n      new_message\
    \ << char.downcase\n    elsif char.upcase == char.downcase\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.upcase.downcase\n      new_message\
    \ << char.upcase.downcase\n    end\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub", "  new_message = ''\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.upcase\n\
    \    else\n      new_message << char.next\n    end\n  end\n  new_message\nend",
  "  new_message = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message\
    \ = message.downcase\n  new_message.gsub!(vowels, vowels[2])\n  new_message.gsub!(\"\
    a\", \"b\")\n  new_message.gsub!(\"e\", \"f\")\n  new_message.gsub!(\"i\", \"\
    g\")\n  new_message.gsub!(\"o\", \"h\")\n  new_message.gsub!(\"u\", \"j\")\n \
    \ new_message.gsub!(\"b\", \"c\")\n  new_message.gsub!(\"f\", \"d\")\n  new_message.gsub!(\"\
    g\", \"e\")\n  new_message.gsub!(\"h\", \"f\")\n  new_message.gsub!(\"j\", \"\
    g\")\n  new_message.gsub!(\"c\", \"b\")\n  new_message.gsub!(\"d\", \"f\")\n \
    \ new_message.gsub!(\"e\", \"g\")\n  new_message.gsub!(\"f\", \"h\")\n  new_message.gsub!(\"\
    g\", \"j\")\n  new_message.gsub!(\"h\", \"c\")\n  new_message.gsub!(\"j\", \"\
    b\")\n  new_message.gsub!(\"c\", \"d\")\n  new_message.gsub!(\"b\", \"e\")\n \
    \ new_message.gsub!(\"d\", \"g\")\n  new_message.gsub!(\"e\", \"h\")\n  new_message.gsub!(\"\
    f\", \"j\")\n  new_message.gsub!(\"g\", \"c\")\n  new_message.gsub!(\"h\", \"\
    b\")\n  new_message.gsub!(\"j\", \"d\")\n  new_message.gsub!(\"c\", \"e\")\n \
    \ new_message.gsub!(\"b\", \"f\")\n  new_message.gsub!(\"d\", \"g\")\n  new_message.gsub!(\"\
    e\", \"h\")\n  new_message.gsub!(\"f\", \"j\")\n  new_message.gsub!(\"g\", \"\
    c\")\n  new_message.gsub!(\"h\", \"b\")\n  new_message.gsub!(\"j\", \"d\")\n \
    \ new_message.gsub!(\"c\", \"e\")\n  new_message.gsub!(\"b\", \"f\")\n  new_message.gsub!(\"\
    d\", \"g\")\n  new_message.gsub!(\"e\", \"h\")\n  new_message.gsub!(\"f\", \"\
    j\")\n  new_message.gsub!(\"g\", \"c\")\n  new_message.gsub!(\"h\", \"b\")\n \
    \ new_message.gsub!(\"j\", \"d\")\n  new_message.gsub!(\"c\", \"e\")\n  new_",
  "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase if char.upcase\
    \ == \"A\" || char.upcase == \"E\" || char.upcase == \"I\" || char.upcase == \"\
    O\" || char.upcase == \"U\"\n    char.downcase if char.downcase == \"a\" || char.downcase\
    \ == \"e\" || char.downcase == \"i\" || char.downcase == \"o\" || char.downcase\
    \ == \"u\"\n    new_message << char\n  end\n  new_message\nend", "    \n    #\
    \ Write your code here\n    \n    return encoded\n    ", "  new_message = \"\"\
    \n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"B\"\n      new_message += \"A\"\n    elsif\
    \ char.upcase == \"C\"\n      new_message += \"D\"\n    elsif char.upcase == \"\
    D\"\n      new_message += \"C\"\n    elsif char.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif char.upcase == \"F\"\n      new_message += \"E\"\n    elsif\
    \ char.upcase == \"G\"\n      new_message += \"H\"\n    elsif char.upcase == \"\
    H\"\n      new_message += \"G\"\n    elsif char.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif char.upcase == \"J\"\n      new_message += \"I\"\n    elsif\
    \ char.upcase == \"K\"\n      new_message += \"L\"\n    elsif char.upcase == \"\
    L\"\n      new_message += \"K\"\n    elsif char.upcase == \"M\"\n      new_message\
    \ += \"N\"\n    elsif char.upcase == \"N\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"O\"\n      new_message += \"P\"\n    elsif char.upcase == \"\
    P\"\n      new_message += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message\
    \ += \"R\"\n    elsif char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif\
    \ char.upcase == \"S\"\n      new_message += \"T\"\n    elsif char.upcase == \"\
    T\"\n      new_message += \"S\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"V\"\n    elsif char.upcase == \"V\"\n      new_message += \"U\"\n    elsif\
    \ char.upcase == \"W\"\n      new_message += \"X\"\n    elsif char.upcase == \"\
    X\"\n      new_message += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message\
    \ += \"Z\"\n    elsif char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif\
    \ char.upcase ", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.swapcase if char.swapcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.upcase if char.upcase == char\n    char.swapcase ",
  "    \n    alphabet = string.ascii_lowercase\n    vowels = string.ascii_lowercase\n\
    \    \n    message = message.lower()\n    \n    message = message.replace(vowels,\
    \ alphabet[alphabet.index(vowels[2])+1])\n    \n    message = message.replace(vowels[3],\
    \ alphabet[alphabet.index(vowels[4])+1])\n    \n    message = message.replace(vowels[5],\
    \ alphabet[alphabet.index(vowels[6])+1])\n    \n    message = message.replace(vowels[7],\
    \ alphabet[alphabet.index(vowels[8])+1])\n    \n    message = message.replace(vowels[9],\
    \ alphabet[alphabet.index(vowels[10])+1])\n    \n    message = message.replace(vowels[11],\
    \ alphabet[alphabet.index(vowels[12])+1])\n    \n    message = message.replace(vowels[13],\
    \ alphabet[alphabet.index(vowels[14])+1])\n    \n    message = message.replace(vowels[15],\
    \ alphabet[alphabet.index(vowels[16])+1])\n    \n    message = message.replace(vowels[17],\
    \ alphabet[alphabet.index(vowels[18])+1])\n    \n    message = message.replace(vowels[19],\
    \ alphabet[alphabet.index(vowels[20])+1])\n    \n    message = message.replace(vowels[21],\
    \ alphabet[alphabet.index(vowels[22])+1])\n    \n    message = message.replace(vowels[23],\
    \ alphabet[alphabet.index(vowels[24])+1])\n    \n    message = message.replace(vowels[25],\
    \ alphabet[alphabet.index(vowels[26])+1])\n    \n    message = message.replace(vowels[27],\
    \ alphabet[alphabet.index(vowels[28])+1])\n    \n    message = message.replace(vowels[29],\
    \ alphabet[alphabet.index(vowels[30])+1])\n    \n    message = message.replace(vowels[31],\
    \ alphabet[alphabet.index(vowels[32])+1])\n    \n    message = message.replace(vowels[33],\
    \ alphabet[alphabet.index(vowels[34])+1])\n    \n    message = message.replace(vowels[35],\
    \ alphabet[alphabet.index(vowels[36])+1])\n    \n    message = message.replace(vowels[37],\
    \ alphabet[alphabet.index(vowels[38])+1])\n    \n    message = message.replace(vowels[39],\
    \ alphabet[alphabet.index(vowels[40])+1])\n    \n    message = message.replace(vowels[41],\
    \ alphabet[alphabet.index(vowels[42])+1])\n    \n    message = message.replace(vowels[43],\
    \ alphabet[alphabet.index(vowels[44])+1])\n    \n    message = message.replace(vowels[45],\
    \ alphabet[alphabet.index(", "  new_message = \"\"\n  vowels = \"aeiouAEIOU\"\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message << vowels.index(i)\
    \ + 1\n    else\n      new_message << i\n    end\n  end\n  new_message\nend",
  "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\n    char.downcase!\n\
    \    char.gsub!(/[aeiou]/, 'z')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'y')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[",
  "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase!\n\
    \    letter.gsub!(/[aeiou]/, 'e')\n    letter.gsub!(/[aeiou]/, 'a')\n    letter.gsub!(/[aeiou]/,\
    \ 'o')\n    letter.gsub!(/[aeiou]/, 'u')\n    letter.gsub!(/[aeiou]/, 'y')\n \
    \   letter.gsub!(/[aeiou]/, 'i')\n    letter.gsub!(/[aeiou]/, 'o')\n    letter.gsub!(/[aeiou]/,\
    \ 'u')\n    letter.gsub!(/[aeiou]/, 'y')\n    letter.gsub!(/[aeiou]/, 'i')\n \
    \   letter.gsub!(/[aeiou]/, 'o')\n    letter.gsub!(/[aeiou]/, 'u')\n    letter.gsub!(/[aeiou]/,\
    \ 'y')\n    letter.gsub!(/[aeiou]/, 'i')\n    letter.gsub!(/[aeiou]/, 'o')\n \
    \   letter.gsub!(/[aeiou]/, 'u')\n    letter.gsub!(/[aeiou]/, 'y')\n    letter.gsub!(/[aeiou]/,\
    \ 'i')\n    letter.gsub!(/[aeiou]/, 'o')\n    letter.gsub!(/[aeiou]/, 'u')\n \
    \   letter.gsub!(/[aeiou]/, 'y')\n    letter.gsub!(/[aeiou]/, 'i')\n    letter.gsub!(/[aeiou]/,\
    \ 'o')\n    letter.gsub!(/[aeiou]/, 'u')\n    letter.gsub!(/[aeiou]/, 'y')\n \
    \   letter.gsub!(/[aeiou]/, 'i')\n    letter.gsub!(/[aeiou]/, 'o')\n    letter.gsub!(/[aeiou]/,\
    \ 'u')\n    letter.gsub!(/[aeiou]/, 'y')\n    letter.gsub!(/[aeiou]/, 'i')\n \
    \   letter.gsub!(/[aeiou]/, 'o')\n    letter.gsub!(/[aeiou]/, 'u')\n    letter.gsub!(/[aeiou]/,\
    \ 'y')\n    letter.g", "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    \n    message = message.downcase\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) + 1])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 1])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 2])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 3])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 4])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 5])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 6])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 7])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 8])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 9])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 10])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 11])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 12])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 13])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 14])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 15])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphabet.upcase($0)) - 16])\n    \n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(alphab", "    \n    # Write your code here\n    \n \
    \   return encoded\n</cell>\n<cell>", "  new_message = \"\"\n  message.each_char\
    \ do |c|\n    if c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif c.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ c.upcase == \"U\"\n      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n\
    \      new_message += \"M\"\n    elsif c.upcase == \"a\"\n      new_message +=\
    \ \"b\"\n    elsif c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif c.upcase == \"o\"\n      new_message\
    \ += \"k\"\n    elsif c.upcase == \"u\"\n      new_message += \"l\"\n    elsif\
    \ c.upcase == \"y\"\n      new_message += \"m\"\n    elsif c.upcase == \"A\"\n\
    \      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n\
    \      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message +=\
    \ \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif c.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    end\n  end\n  return new_message\nend", "  new_message = ''\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char\n    else\n      new_message << char.upcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    alphabet[alphabet.index(char.upcase) + 1]\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    else\n  \
    \    new_message += char\n    end\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  vowels = \"aeiouAEIOU\"\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  return new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the help. I appreciate it.\n<|/ c |>\n<| c |>\nNo problem.\
    \ Good luck!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    message = message.downcase\n\
    \    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : m }\n    \n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m.upcase : ", "  new_message = ''\n  message.each_char\
    \ do |c|\n    if c.upcase == 'A'\n      new_message += 'B'\n    elsif c.upcase\
    \ == 'B'\n      new_message += 'A'\n    elsif c.upcase == 'C'\n      new_message\
    \ += 'D'\n    elsif c.upcase == 'D'\n      new_message += 'C'\n    elsif c.upcase\
    \ == 'E'\n      new_message += 'F'\n    elsif c.upcase == 'F'\n      new_message\
    \ += 'E'\n    elsif c.upcase == 'G'\n      new_message += 'H'\n    elsif c.upcase\
    \ == 'H'\n      new_message += 'G'\n    elsif c.upcase == 'I'\n      new_message\
    \ += 'J'\n    elsif c.upcase == 'J'\n      new_message += 'I'\n    elsif c.upcase\
    \ == 'K'\n      new_message += 'L'\n    elsif c.upcase == 'L'\n      new_message\
    \ += 'K'\n    elsif c.upcase == 'M'\n      new_message += 'N'\n    elsif c.upcase\
    \ == 'N'\n      new_message += 'M'\n    elsif c.upcase == 'O'\n      new_message\
    \ += 'P'\n    elsif c.upcase == 'P'\n      new_message += 'O'\n    elsif c.upcase\
    \ == 'Q'\n      new_message += 'R'\n    elsif c.upcase == 'R'\n      new_message\
    \ += 'Q'\n    elsif c.upcase == 'S'\n      new_message += 'T'\n    elsif c.upcase\
    \ == 'T'\n      new_message += 'S'\n    elsif c.upcase == 'U'\n      new_message\
    \ += 'V'\n    elsif c.upcase == 'V'\n      new_message += 'U'\n    elsif c.upcase\
    \ == 'W'\n      new_message += 'X'\n    elsif c.upcase == 'X'\n      new_message\
    \ += 'W'\n    elsif c.upcase == 'Y'\n      new_message += 'Z'\n    elsif c.upcase\
    \ == 'Z'\n      new_message += 'Y'\n    end\n  end\n  new_message\nend", "   \
    \ message = message.downcase\n    vowels = %w[a e i o u]\n    vowels.each do |vowel|\n\
    \        message.gsub!(vowel, vowel.upcase)\n    end\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.gsub!(/[aeiou]/,\
    \ /[aeiou]/)\n    message.gsub!(/[aeiou]/, /[aeiou]/)\n    message.", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    elsif char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    elsif char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    ", "  new_message = \"\
    \"\n  message.split(\"\").each do |letter|\n    if letter.upcase == \"A\"\n  \
    \    new_message += \"B\"\n    elsif letter.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif letter.upcase == \"I\"\n      new_message += \"J\"\n   \
    \ elsif letter.upcase == \"O\"\n      new_message += \"K\"\n    elsif letter.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase == \"Y\"\n   \
    \   new_message += \"M\"\n    elsif letter.upcase == \"a\"\n      new_message\
    \ += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message += \"f\"\n   \
    \ elsif letter.upcase == \"i\"\n      new_message += \"j\"\n    elsif letter.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase == \"u\"\n   \
    \   new_message += \"l\"\n    elsif letter.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    elsif letter.upcase == \"b\"\n      new_message += \"a\"\n   \
    \ elsif letter.upcase == \"f\"\n      new_message += \"e\"\n    elsif letter.upcase\
    \ == \"j\"\n      new_message += \"i\"\n    elsif letter.upcase == \"k\"\n   \
    \   new_message += \"o\"\n    elsif letter.upcase == \"l\"\n      new_message\
    \ += \"u\"\n    elsif letter.upcase == \"m\"\n      new_message += \"y\"\n   \
    \ elsif letter.upcase == \"A\"\n      new_message += \"B\"\n    elsif letter.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif letter.upcase == \"I\"\n   \
    \   new_message += \"J\"\n    elsif letter.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif letter.upcase == \"U\"\n      new_message += \"L\"\n   \
    \ elsif letter.upcase == \"Y\"\n      new_message += \"M\"\n    elsif letter.upcase\
    \ == \"a\"\n      new_message += \"b\"\n    elsif letter.upcase == \"e\"\n   \
    \   new_message += \"f\"\n    elsif letter.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    el", "  new_message = \"\"\n  message.downcase!\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    else\n      new_message += char\n    end\n  end\n  new_message\n\
    end", "    encoded = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message:\n\
    \        if letter in vowels:\n            index = vowels.index(letter)\n    \
    \        encoded += letter + vowels[index + 2]\n        else:\n            encoded\
    \ += letter\n    return encoded", "    alphabet = %w[a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z]\n    vowels = %w[a e i o u]\n    message.gsub(/[aeiou]/)\
    \ { |vowel| alphabet[alphabet.index(vowel) + 2] }\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified even more.\
    \ `alphabet[alphabet.index(vowel) + 2]` can be replaced with `alphabet.index(vowel)\
    \ + 2`.\n<|/ c |>\n<| c |>\n: Yes, that is a much better improvement. Thanks.\n\
    <|/ c |>\n<| a tags=ruby,string,encoding |>\n<code>", "    \n    # Write your\
    \ code here\n    \n    return encoded_message\n</cell>\n<cell>", "    \n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    encoded = \"\"\n    \n    for letter\
    \ in message:\n        \n        if letter in alphabet:\n            \n      \
    \      index = alphabet.find(letter)\n            \n            encoded = encoded\
    \ + (alphabet[(index+1)%len(alphabet)] + letter)\n            \n        else:\n\
    \            \n            encoded = encoded + letter\n            \n    return\
    \ encoded\n    \n    ", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels\
    \ = 'aeiou'\n    message = message.downcase\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n", "  new_message = ''\n  message.each\
    \ do |letter|\n    if letter.upcase == 'A'\n      new_message += 'B'\n    elsif\
    \ letter.upcase == 'B'\n      new_message += 'A'\n    elsif letter.upcase == 'C'\n\
    \      new_message += 'D'\n    elsif letter.upcase == 'D'\n      new_message +=\
    \ 'C'\n    elsif letter.upcase == 'E'\n      new_message += 'F'\n    elsif letter.upcase\
    \ == 'F'\n      new_message += 'E'\n    elsif letter.upcase == 'G'\n      new_message\
    \ += 'H'\n    elsif letter.upcase == 'H'\n      new_message += 'G'\n    elsif\
    \ letter.upcase == 'I'\n      new_message += 'J'\n    elsif letter.upcase == 'J'\n\
    \      new_message += 'I'\n    elsif letter.upcase == 'K'\n      new_message +=\
    \ 'L'\n    elsif letter.upcase == 'L'\n      new_message += 'K'\n    elsif letter.upcase\
    \ == 'M'\n      new_message += 'N'\n    elsif letter.upcase == 'N'\n      new_message\
    \ += 'M'\n    elsif letter.upcase == 'O'\n      new_message += 'P'\n    elsif\
    \ letter.upcase == 'P'\n      new_message += 'O'\n    elsif letter.upcase == 'Q'\n\
    \      new_message += 'R'\n    elsif letter.upcase == 'R'\n      new_message +=\
    \ 'Q'\n    elsif letter.upcase == 'S'\n      new_message += 'T'\n    elsif letter.upcase\
    \ == 'T'\n      new_message += 'S'\n    elsif letter.upcase == 'U'\n      new_message\
    \ += 'V'\n    elsif letter.upcase == 'V'\n      new_message += 'U'\n    elsif\
    \ letter.upcase == 'W'\n      new_message += 'X'\n    elsif letter.upcase == 'X'\n\
    \      new_message += 'W'\n    elsif letter.upcase == 'Y'\n      new_message +=\
    \ 'Z'\n    elsif letter.upcase == 'Z'\n      new_message += 'Y'\n    end\n  end\n\
    \  new_message\nend", "  new_message = \"\"\n  message.each_char do |c|\n    new_message\
    \ += c.swapcase\n    new_message += c.gsub(/[aeiou]/, 'A')\n    new_message +=\
    \ c.gsub(/[aeiou]/, 'A')\n  end\n  new_message\nend", "  new_message = \"\"\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else \n      new_message += i.downcase\n \
    \   end\n  end\n  return new_message\nend", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = \"aeiou\"\n    message = message.downcase\n    message.gsub!(vowels,\
    \ alphabet[alphabet.index(vowels.next)])\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)]\
    \ }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m|\
    \ alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)]\
    \ }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m|\
    \ alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)]\
    \ }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m|\
    \ alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)]\
    \ }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m.next)] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet[", "  new_message = \"\"\n  message.each_char do |char|\n   \
    \ char.upcase if char.upcase == \"A\"\n    char.downcase if char.downcase == \"\
    a\"\n    char.upcase if char.upcase == \"E\"\n    char.downcase if char.downcase\
    \ == \"e\"\n    char.upcase if char.upcase == \"I\"\n    char.downcase if char.downcase\
    \ == \"i\"\n    char.upcase if char.upcase == \"O\"\n    char.downcase if char.downcase\
    \ == \"o\"\n    char.upcase if char.upcase == \"U\"\n    char.downcase if char.downcase\
    \ == \"u\"\n    char.upcase if char.upcase == \"Y\"\n    char.downcase if char.downcase\
    \ == \"y\"\n    new_message << char\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub!(/[aeiou]/, \n    lambda { |vowel| \n      alphabet[alphabet.index(vowel)\
    \ + 2].upcase \n    })\n  new_message.gsub!(/[aeiou]/, \n    lambda { |vowel|\
    \ \n      alphabet[alphabet.index(vowel) - 2].downcase \n    })\n  new_message\n\
    end", "    \n    # Write your code here\n    \n    return encodedMessage\n    ",
  "    \n    alphabet = string.ascii_lowercase\n    vowels = string.ascii_lowercase[:26]\n\
    \    \n    message = message.lower()\n    \n    message = message.replace(vowels,\
    \ alphabet[alphabet.index(vowels[2])+1])\n    \n    return message\n    ", " \
    \ new_message = \"\"\n  message.split(\"\").each do |letter|\n    if letter.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif letter.upcase == \"E\"\n   \
    \   new_message += \"F\"\n    elsif letter.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif letter.upcase == \"O\"\n      new_message += \"K\"\n   \
    \ elsif letter.upcase == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase\
    \ == \"Y\"\n      new_message += \"M\"\n    elsif letter.upcase == \"a\"\n   \
    \   new_message += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif letter.upcase == \"i\"\n      new_message += \"j\"\n   \
    \ elsif letter.upcase == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif letter.upcase == \"y\"\n   \
    \   new_message += \"m\"\n    elsif letter.upcase == \"b\"\n      new_message\
    \ += \"a\"\n    elsif letter.upcase == \"f\"\n      new_message += \"e\"\n   \
    \ elsif letter.upcase == \"j\"\n      new_message += \"i\"\n    elsif letter.upcase\
    \ == \"k\"\n      new_message += \"o\"\n    elsif letter.upcase == \"l\"\n   \
    \   new_message += \"u\"\n    elsif letter.upcase == \"m\"\n      new_message\
    \ += \"y\"\n    elsif letter.upcase == \"A\"\n      new_message += \"B\"\n   \
    \ elsif letter.upcase == \"E\"\n      new_message += \"F\"\n    elsif letter.upcase\
    \ == \"I\"\n      new_message += \"J\"\n    elsif letter.upcase == \"O\"\n   \
    \   new_message += \"K\"\n    elsif letter.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif letter.upcase == \"Y\"\n      new_message += \"M\"\n   \
    \ elsif letter.upcase == \"a\"\n      new_message += \"b\"\n    elsif letter.upcase\
    \ == \"e\"\n      new_message += \"f\"\n    elsif letter.upcase == \"i\"\n   \
    \   new_message += \"j\"\n    el", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    elsif char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    else\n      new_message += char\n    end\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\
    \ if char.upcase >= 'A' && char.upcase <= 'Z'\n    char = char.downcase if char.downcase\
    \ >= 'a' && char.downcase <= 'z'\n    char = char.swapcase\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'e')\n    new_message << char\n  end\n  new_message\nend", "  new_message =\
    \ \"\"\n  message.split(\"\").each do |letter|\n    letter = letter.upcase\n \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if letter == vowel\n        new_message << letter.next\n      end\n   \
    \ end\n  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    elsif char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"m\"\n    else\n      new_message += char\n    end\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/) {\
    \ |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.downcase \n  }\n  message.gsub(/[aeiou]/)\
    \ { |letter| \n    ", "  new_message = \"\"\n  message.each_char do |char|\n \
    \   if char.upcase == char\n      new_message << char.upcase\n    else\n     \
    \ new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/,\
    \ 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'u')\n  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'y')\n\
    \  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, '", "  new_message = \"\"\n  message.downcase!\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message\nend", "  new_message = \"\"\n  message.each_char do |char|\n \
    \   if char.upcase == char\n      new_message << char.upcase\n    else\n     \
    \ new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) + 2 }\n  new_message.gsub!(/[aeiou]/) { |vowel|\
    \ alphabet.index(vowel) - 2 }\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it! I did try it out and it\
    \ worked perfectly. Thank you so much!\n<|/ c |>\n<| c |>\nNo problem! Glad I\
    \ could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  new_message = \"\"\n  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.", "  new_message = ''\n  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, '", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"B\"\n      new_message += \"A\"\n    elsif\
    \ char.upcase == \"C\"\n      new_message += \"D\"\n    elsif char.upcase == \"\
    D\"\n      new_message += \"C\"\n    elsif char.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif char.upcase == \"F\"\n      new_message += \"E\"\n    elsif\
    \ char.upcase == \"G\"\n      new_message += \"H\"\n    elsif char.upcase == \"\
    H\"\n      new_message += \"G\"\n    elsif char.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif char.upcase == \"J\"\n      new_message += \"I\"\n    elsif\
    \ char.upcase == \"K\"\n      new_message += \"L\"\n    elsif char.upcase == \"\
    L\"\n      new_message += \"K\"\n    elsif char.upcase == \"M\"\n      new_message\
    \ += \"N\"\n    elsif char.upcase == \"N\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"O\"\n      new_message += \"P\"\n    elsif char.upcase == \"\
    P\"\n      new_message += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message\
    \ += \"R\"\n    elsif char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif\
    \ char.upcase == \"S\"\n      new_message += \"T\"\n    elsif char.upcase == \"\
    T\"\n      new_message += \"S\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"V\"\n    elsif char.upcase == \"V\"\n      new_message += \"U\"\n    elsif\
    \ char.upcase == \"W\"\n      new_message += \"X\"\n    elsif char.upcase == \"\
    X\"\n      new_message += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message\
    \ += \"Z\"\n    elsif char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif\
    \ char.upcase ", "  new_message = \"\"\n  message.each_char do |char|\n    if\
    \ char.upcase == char\n      new_message << char.upcase\n    else\n      new_message\
    \ << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel)\
    \ + 2 }\n  new_message\nend", "  new_message = \"\"\n  message.split(\"\").each\
    \ do |letter|\n    letter = letter.upcase\n    letter = letter.gsub(/[aeiou]/,\
    \ \"#{$1}\")\n    letter = letter.gsub(/[aeiou]/, \"#{$1}\")\n    new_message\
    \ += letter\n  end\n  return new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"\
    C\"\n      new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message\
    \ += \"C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"\
    G\"\n      new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message\
    \ += \"G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ char.upcase == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"\
    K\"\n      new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif\
    \ char.upcase == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message\
    \ += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif\
    \ char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"\
    S\"\n      new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message\
    \ += \"S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif\
    \ char.upcase == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"\
    W\"\n      new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message\
    \ += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif\
    \ char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", " \
    \   message = message.downcase\n    vowels = %w[a e i o u]\n    vowels.each do\
    \ |vowel|\n        message = message.gsub(vowel, vowel.upcase)\n    end\n    message\
    \ = message.gsub(/[aeiou]/, 'e')\n    message = message.gsub(/[aeiou]/, 'i')\n\
    \    message = message.gsub(/[aeiou]/, 'o')\n    message = message.gsub(/[aeiou]/,\
    \ 'u')\n    message = message.gsub(/[aeiou]/, 'a')\n    message = message.gsub(/[aeiou]/,\
    \ 'e')\n    message = message.gsub(/[aeiou]/, 'i')\n    message = message.gsub(/[aeiou]/,\
    \ 'o')\n    message = message.gsub(/[aeiou]/, 'u')\n    message = message.gsub(/[aeiou]/,\
    \ 'a')\n    message = message.gsub(/[aeiou]/, 'e')\n    message = message.gsub(/[aeiou]/,\
    \ 'i')\n    message = message.gsub(/[aeiou]/, 'o')\n    message = message.gsub(/[aeiou]/,\
    \ 'u')\n    message = message.gsub(/[aeiou]/, 'a')\n    message = message.gsub(/[aeiou]/,\
    \ 'e')\n    message = message.gsub(/[aeiou]/, 'i')\n    message = message.gsub(/[aeiou]/,\
    \ 'o')\n    message = message.gsub(/[aeiou]/, 'u')\n    message = message.gsub(/[aeiou]/,\
    \ 'a')\n    message = message.gsub(/[aeiou]/, 'e')\n    message = message.gsub(/[aeiou]/,\
    \ 'i')\n    message = message.gsub(/[aeiou]/, 'o')\n    message = message.gsub(/[aeiou]/,\
    \ 'u')\n    message = message.gsub(/[aeiou]/, 'a')\n    message = message.gsub(/[aeiou]/,\
    \ 'e')\n    message = message.gsub(/[aeiou]/, 'i')\n    message = message.gsub(/[aeiou]/,\
    \ 'o')\n    message = message.gsub(/[aeiou]/, 'u')\n    message = message.gsub(/[aeiou]/,\
    \ 'a')\n    message = message.gsub(/[aeiou]/, 'e')\n    message = message.gsub(/[aeiou]/,\
    \ 'i')\n    message = message.gsub(/[aeiou]/, 'o')\n    message = message.gsub(/[aeiou]/,\
    \ 'u')\n", "  new_message = \"\"\n  message.each_char do |c|\n    if c.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ c.upcase == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n\
    \      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message +=\
    \ \"N\"\n    elsif c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase\
    \ == \"e\"\n      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ c.upcase == \"u\"\n      new_message += \"l\"\n    elsif c.upcase == \"y\"\n\
    \      new_message += \"n\"\n    elsif c.upcase == \"b\"\n      new_message +=\
    \ \"a\"\n    elsif c.upcase == \"f\"\n      new_message += \"e\"\n    elsif c.upcase\
    \ == \"j\"\n      new_message += \"i\"\n    elsif c.upcase == \"k\"\n      new_message\
    \ += \"o\"\n    elsif c.upcase == \"l\"\n      new_message += \"u\"\n    elsif\
    \ c.upcase == \"n\"\n      new_message += \"y\"\n    elsif c.upcase == \"A\"\n\
    \      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"N\"\n    elsif\
    \ c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n\
    \      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message +=\
    \ \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase\
    \ == \"u\"\n      ", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels\
    \ = 'aeiou'\n    encoded = \"\"\n    \n    for letter in message:\n        if\
    \ letter in alphabet:\n            index = alphabet.find(letter)\n           \
    \ encoded = encoded + alphabet[(index+2)%len(alphabet)]\n        else:\n     \
    \       encoded = encoded + letter\n    return encoded", "    alphabet = %w[a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z]\n    vowels = %w[a e i o\
    \ u]\n    message.gsub(/[aeiou]/) { |vowel| alphabet.index(vowel) + 2 }\n    message.gsub(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) + 1 }\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub(/[aeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]\n  end\nend", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    message = message.downcase\n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[/[aeiou]/].next)])\n\
    \    message = message.g", "    alphabet = %w(a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z)\n    message.gsub(/[aeiou]/) do |letter|\n        alphabet[alphabet.index(letter)\
    \ + 2].upcase\n    end\nend", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    char = char.upcase if char.upcase >= 'A' && char.upcase <= 'Z'\n    char\
    \ = char.downcase if char.downcase >= 'a' && char.downcase <= 'z'\n    new_message\
    \ << char\n  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"\
    C\"\n      new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message\
    \ += \"C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"\
    G\"\n      new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message\
    \ += \"G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ char.upcase == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"\
    K\"\n      new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif\
    \ char.upcase == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message\
    \ += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif\
    \ char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"\
    S\"\n      new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message\
    \ += \"S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif\
    \ char.upcase == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"\
    W\"\n      new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message\
    \ += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif\
    \ char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", " \
    \ new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter = letter.upcase\n\
    \    letter = letter.gsub(/[aeiou]/, \"#{$1}\")\n    letter = letter.gsub(/[aeiou]/,\
    \ \"#{$1}\")\n    new_message << letter\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[aeiou]/i,\
    \ \"AEIOU\")\n  message.gsub!(/[aeiou]/i, \"AEIOU\")\n  message.gsub!(/[ae", " \
    \ new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase!\n\
    \    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/,\
    \ 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n \
    \   letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou]/, 'z')\n    letter.gsub!(/[aeiou",
  "  new_message = ''\n  vowels = 'aeiouAEIOU'\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  \n  message.downcase!\n  \n  message.each_char do |char|\n    if vowels.include?(char)\n\
    \      new_message << letters[letters.index(char) + 2]\n    else\n      new_message\
    \ << char\n    end\n  end\n  \n  new_message\nend", "  new_message = ''\n  message.each_char\
    \ do |char|\n    if char.upcase == 'A'\n      new_message += char.upcase\n   \
    \ elsif char.upcase == 'E'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'I'\n      new_message += char.upcase\n    elsif char.upcase == 'O'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'U'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'Y'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'a'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'e'\n      new_message += char.upcase\n    elsif char.upcase == 'i'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'o'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'u'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'y'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'A'\n      new_message += char.upcase\n    elsif char.upcase == 'E'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'I'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'O'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'U'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'Y'\n      new_message += char.upcase\n    elsif char.upcase == 'a'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'e'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'i'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'o'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'u'\n      new_message += char.upcase\n    elsif char.upcase == 'y'\n   \
    \   new_message += char.upcase\n    elsif char.upcase ", "  new_message = \"\"\
    \n  message.split(\"\").each do |letter|\n    letter.upcase!\n    letter.gsub!(/[aeiou]/,\
    \ \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\"\
    )\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n  \
    \  letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/,\
    \ \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\"\
    )\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n  \
    \  letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/,\
    \ \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\"\
    )\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n  \
    \  letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/,\
    \ \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\"\
    )\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n  \
    \  letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/,\
    \ \"z\")\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou]/, \"z\"\
    )\n    letter.gsub!(/[aeiou]/, \"z\")\n    letter.gsub!(/[aeiou", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase\n    if char.match(/[AEIOU]/)\n\
    \      new_message << char.match(/[AEIOU]/)[1]\n    else\n      new_message <<\
    \ char\n    end\n  end\n  new_message\nend", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n\
    \    else \n      new_message += i.downcase\n    end\n  end\n  return new_message\n\
    end", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter\
    \ = letter.upcase\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each\
    \ do |vowel|\n      if letter.include?(vowel)\n        letter = letter.gsub(vowel,\
    \ vowel.upcase)\n      end\n    end\n    new_message << letter\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n\
    \    else\n      new_message += i.downcase\n    end\n  end\n  new_message\nend",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub(/[aeiou]/) do |char|\n    alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)\n  end\nend", "  new_message = ''\n  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub!(/[aeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + 2]\n  end\n  new_message\nend", "  new_message = \"\"\n  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  return new_message\nend", "  new_message = \"\"\n  message.downcase!\n\
    \  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    elsif char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    else\n\
    \      new_message += char\n    end\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.each_char do |c|\n    if c.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif c.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase == \"O\"\n\
    \      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message +=\
    \ \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"M\"\n    elsif c.upcase\
    \ == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif c.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase == \"u\"\n\
    \      new_message += \"l\"\n    elsif c.upcase == \"y\"\n      new_message +=\
    \ \"m\"\n    elsif c.upcase == \"b\"\n      new_message += \"a\"\n    elsif c.upcase\
    \ == \"f\"\n      new_message += \"e\"\n    elsif c.upcase == \"j\"\n      new_message\
    \ += \"i\"\n    elsif c.upcase == \"k\"\n      new_message += \"o\"\n    elsif\
    \ c.upcase == \"l\"\n      new_message += \"u\"\n    elsif c.upcase == \"m\"\n\
    \      new_message += \"y\"\n    elsif c.upcase == \"A\"\n      new_message +=\
    \ \"B\"\n    elsif c.upcase == \"E\"\n      new_message += \"F\"\n    elsif c.upcase\
    \ == \"I\"\n      new_message += \"J\"\n    elsif c.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif c.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ c.upcase == \"Y\"\n      new_message += \"M\"\n    elsif c.upcase == \"a\"\n\
    \      new_message += \"b\"\n    elsif c.upcase == \"e\"\n      new_message +=\
    \ \"f\"\n    elsif c.upcase == \"i\"\n      new_message += \"j\"\n    elsif c.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif c.upcase == \"u\"\n      new_message ",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\
    \n      new_message += \"B\"\n    elsif char.upcase == \"B\"\n      new_message\
    \ += \"A\"\n    elsif char.upcase == \"C\"\n      new_message += \"D\"\n    elsif\
    \ char.upcase == \"D\"\n      new_message += \"C\"\n    elsif char.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif char.upcase == \"F\"\n      new_message\
    \ += \"E\"\n    elsif char.upcase == \"G\"\n      new_message += \"H\"\n    elsif\
    \ char.upcase == \"H\"\n      new_message += \"G\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"J\"\n      new_message\
    \ += \"I\"\n    elsif char.upcase == \"K\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"L\"\n      new_message += \"K\"\n    elsif char.upcase == \"\
    M\"\n      new_message += \"N\"\n    elsif char.upcase == \"N\"\n      new_message\
    \ += \"M\"\n    elsif char.upcase == \"O\"\n      new_message += \"P\"\n    elsif\
    \ char.upcase == \"P\"\n      new_message += \"O\"\n    elsif char.upcase == \"\
    Q\"\n      new_message += \"R\"\n    elsif char.upcase == \"R\"\n      new_message\
    \ += \"Q\"\n    elsif char.upcase == \"S\"\n      new_message += \"T\"\n    elsif\
    \ char.upcase == \"T\"\n      new_message += \"S\"\n    elsif char.upcase == \"\
    U\"\n      new_message += \"V\"\n    elsif char.upcase == \"V\"\n      new_message\
    \ += \"U\"\n    elsif char.upcase == \"W\"\n      new_message += \"X\"\n    elsif\
    \ char.upcase == \"X\"\n      new_message += \"W\"\n    elsif char.upcase == \"\
    Y\"\n      new_message += \"Z\"\n    elsif char.upcase == \"Z\"\n      new_message\
    \ += \"Y\"\n    elsif char.upcase ", "  new_message = \"\"\n  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub(/[aeiou]/) do |char|\n    alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)\n  end\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"\
    C\"\n      new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message\
    \ += \"C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"\
    G\"\n      new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message\
    \ += \"G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ char.upcase == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"\
    K\"\n      new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif\
    \ char.upcase == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message\
    \ += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif\
    \ char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"\
    S\"\n      new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message\
    \ += \"S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif\
    \ char.upcase == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"\
    W\"\n      new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message\
    \ += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif\
    \ char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", " \
    \ new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/) do |letter|\n\
    \    letter_index = alphabet.index(letter)\n    letter_index + 2\n  end\n  message.gsub(/[aeiou]/)\
    \ do |letter|\n    letter_index = alphabet.index(letter)\n    alphabet[letter_index]\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `alphabet\
    \ = %w[a b c d e f g h i j k l m n o p q r s t u v w x y z]` `message = \"hello\
    \ world\"` `encoded = encode(message)` `puts encoded` `=> \"hleelllloowwoorrlldd\"\
    `\n<|/ c |>\n<| c |>\nYeah, I forgot to add that to the answer. I'll edit it now.\n\
    <|/ c |>\n<| c |>\nI edited the answer again. Now it works.\n<|/ c |>\n<| c |>\n\
    I edited the answer again. Now it works.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ again. Now it works.\n<|/ c |>\n<| a |>\n<code>", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    encoded = message\n    \n    # Write your code here\n\
    \    \n    return encoded\n    ", "  new_message = \"\"\n  message.each_char do\
    \ |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase\
    \ == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"C\"\n     \
    \ new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message += \"\
    C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase\
    \ == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"G\"\n     \
    \ new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message += \"\
    G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase\
    \ == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"K\"\n     \
    \ new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message += \"\
    K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif char.upcase\
    \ == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"O\"\n     \
    \ new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message += \"\
    O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif char.upcase\
    \ == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"S\"\n     \
    \ new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message += \"\
    S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif char.upcase\
    \ == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"W\"\n     \
    \ new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message += \"\
    W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif char.upcase\
    \ == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", "    encoded\
    \ = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message\n        if letter\
    \ in vowels\n            letter = letter.upcase\n            encoded += letter\n\
    \        else\n            letter = letter.downcase\n            encoded += letter\n\
    \    end\n    return encoded\nend", "    alphabet = %w[a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z]\n    vowels = %w[a e i o u]\n    \n    message.gsub(/./)\
    \ do |char|\n        alphabet.index(char) ? alphabet[alphabet.index(char) + 1]\
    \ : char\n    end.gsub(/[aeiou]/) do |char|\n        vowels.index(char) ? vowels[vowels.index(char)\
    \ + 1] : char\n    end\nend", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase\
    \ == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"C\"\n     \
    \ new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message += \"\
    C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase\
    \ == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"G\"\n     \
    \ new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message += \"\
    G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase\
    \ == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"K\"\n     \
    \ new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message += \"\
    K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif char.upcase\
    \ == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"O\"\n     \
    \ new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message += \"\
    O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif char.upcase\
    \ == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"S\"\n     \
    \ new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message += \"\
    S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif char.upcase\
    \ == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"W\"\n     \
    \ new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message += \"\
    W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif char.upcase\
    \ == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub(/[aeiou]/) do |char|\n    index = alphabet.index(char.upcase)\n\
    \    alphabet[index + 1]\n  end\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"N\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    elsif char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message += \"N\"\n    elsif char.upcase == \"\
    a\"\n      new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif\
    \ char.upcase == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"\
    u\"\n      new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    else\n      new_message += char\n    end\n  end\n  new_message\n\
    end", "    alphabet = %w[a b c d e f g h i j k l m n o p q r s t u v w x y z]\n\
    \    vowels = %w[a e i o u]\n    \n    message.gsub(/./){|c| alphabet.index(c.upcase)\
    \ }.\n        gsub(/[aeiou]/){|c| vowels.index(c) }.\n        each_char.\n   \
    \     join\nend", "  new_message = \"\"\n  message.each_char do |char|\n    char\
    \ = char.upcase if char.upcase == \"A\"\n    char = char.downcase if char.downcase\
    \ == \"a\"\n    char = char.swapcase if char.swapcase == \"A\"\n    char = char.swapcase\
    \ if char.swapcase == \"a\"\n    new_message += char\n  end\n  new_message\nend",
  "  new_message = ''\n  message.each_char do |char|\n    if char.upcase == 'A'\n\
    \      new_message << char.upcase\n    elsif char.upcase == 'E'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'I'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'O'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'U'\n      new_message << char.upcase\n    elsif char.upcase == 'Y'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'a'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'e'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'i'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'o'\n      new_message << char.upcase\n    elsif char.upcase == 'u'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'y'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'h'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'j'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'k'\n      new_message << char.upcase\n    elsif char.upcase == 'l'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'm'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'n'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'p'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'r'\n      new_message << char.upcase\n    elsif char.upcase == 's'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 't'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'v'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'w'\n      new_message << char.upcase\n    elsif char.upcase ",
  "  new_message = ''\n  message.downcase!\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, '", "    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    \n    message = message.lower()\n    \n    message = message.replace('a',\
    \ 'z')\n    message = message.replace('b', 'y')\n    message = message.replace('c',\
    \ 'x')\n    message = message.replace('d', 'w')\n    message = message.replace('e',\
    \ 'v')\n    message = message.replace('f', 'u')\n    message = message.replace('g',\
    \ 't')\n    message = message.replace('h', 'r')\n    message = message.replace('i',\
    \ 'q')\n    message = message.replace('j', 'p')\n    message = message.replace('k',\
    \ 'o')\n    message = message.replace('l', 's')\n    message = message.replace('m',\
    \ 'q')\n    message = message.replace('n', 't')\n    message = message.replace('o',\
    \ 'p')\n    message = message.replace('p', 'b')\n    message = message.replace('q',\
    \ 'd')\n    message = message.replace('r', 'h')\n    message = message.replace('s',\
    \ 'f')\n    message = message.replace('t', 'g')\n    message = message.replace('u',\
    \ 'i')\n    message = message.replace('v', 'j')\n    message = message.replace('w',\
    \ 'k')\n    message = message.replace('x', 'l')\n    message = message.replace('y',\
    \ 'm')\n    message = message.replace('z', 'a')\n    \n    message = message.replace('a',\
    \ 'a')\n    message = message.replace('b', 'b')\n    message = message.replace('c',\
    \ 'c')\n    message = message.replace('d', 'd')\n    message = message.replace('e',\
    \ 'e')\n    message = message.replace('f', 'f')\n    message = message.replace('g',\
    \ 'g')\n    message = message.replace('h', 'h')\n    message = message.replace('i',\
    \ 'i')\n    message = message.replace('j', 'j')\n    message = message.replace('k',\
    \ 'k')\n    message = message.replace('l', 'l')\n    message = message.replace('m',\
    \ 'm')\n    message = message.replace('n', 'n')\n    message = message.replace('o',\
    \ 'o')\n    message = message.replace('p', 'p')\n    message = message.replace('q',\
    \ 'q')\n    message = message.replace('r', 'r')\n    message = message.replace('s',\
    \ 's')\n    message = message.replace('t', 't')\n    message = message.replace('u',\
    \ 'u')\n    message = message.replace('v', 'v')\n    message = message.replace('w',\
    \ 'w')\n    message = message.replace('x', 'x')\n    message = message.replace('y',\
    \ 'y')\n    message = message.replace('z', 'z')\n    \n    message = message.replace('a',\
    \ 'e')\n    message = message.replace('b', 'f')\n    message = message.replace('c',\
    \ 'g')\n    message = message.replace('d', 'h')\n    message = message.replace('e',\
    \ 'i')\n    message = message.replace('f', 'j')\n    message = message.replace('g',\
    \ 'k')\n    message = message.replace('h', 'l')", "    alphabet = %w[a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z]\n    vowels = %w[a e i o u]\n   \
    \ message.gsub(/[aeiou]/) { |letter| alphabet.index(letter) + alphabet.index(letter)\
    \ + 1 }\n    message.gsub(/[aeiou]/) { |letter| alphabet.index(letter) + alphabet.index(letter)\
    \ + 1 }\n    message.gsub(/[aeiou]/) { |letter| alphabet.index(letter) + alphabet.index(letter)\
    \ + 1 }\nend", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n\
    \    letter.upcase if letter.upcase == \"A\" || letter.upcase == \"E\" || letter.upcase\
    \ == \"I\" || letter.upcase == \"O\" || letter.upcase == \"U\"\n    letter.downcase\
    \ if letter.downcase == \"a\" || letter.downcase == \"e\" || letter.downcase ==\
    \ \"i\" || letter.downcase == \"o\" || letter.downcase == \"u\"\n    new_message\
    \ << letter.upcase << letter.downcase\n  end\n  return new_message\nend", "  new_message\
    \ = ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char\n    else\n      new_message << char.upcase\n    end\n  end\n  new_message.gsub(/[aeiou]/)\
    \ do |char|\n    alphabet.index(char.upcase) + 1\n  end\nend", "    \n    # Write\
    \ your code here\n    \n    return encoded\n    ", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char.upcase if char.upcase == \"A\" || char.upcase == \"E\" ||\
    \ char.upcase == \"I\" || char.upcase == \"O\" || char.upcase == \"U\"\n    char.downcase\
    \ if char.downcase == \"a\" || char.downcase == \"e\" || char.downcase == \"i\"\
    \ || char.downcase == \"o\" || char.downcase == \"u\"\n    new_message << char\n\
    \  end\n  new_message\nend", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  \
    \  message = message.downcase\n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet[alphabet.index($1)-1])+1])\n\
    \    message = message.g", "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = \"aeiou\"\n    \n    encoded_message = \"\"\n    \n    for letter\
    \ in message:\n        if letter in alphabet:\n            encoded_message +=\
    \ alphabet[alphabet.index(letter) + 2]\n        else:\n            encoded_message\
    \ += letter\n    \n    return encoded_message\n    \nprint(encode('hello'))\n\
    print(encode('hello '))\nprint(encode('hello world'))\nprint(encode('hello world\
    \ '))\nprint(encode('hello world !'))\nprint(encode('hello world ! '))\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a message, and encodes in such\
    \ a way that it swaps case of all letters, replaces all vowels in the message\
    \ with the letter that appears 2 places ahead of that vowel in the english alphabet.\
    \ Assume only letters. \nExamples:", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == char\n      new_message << char.upcase\n  \
    \  else\n      new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    alphabet.index(char.upcase) + alphabet.index(char.downcase)\n\
    \  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char do |c|\n\
    \    if c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif c.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ c.upcase == \"U\"\n      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n\
    \      new_message += \"M\"\n    elsif c.upcase == \"a\"\n      new_message +=\
    \ \"b\"\n    elsif c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif c.upcase == \"o\"\n      new_message\
    \ += \"k\"\n    elsif c.upcase == \"u\"\n      new_message += \"l\"\n    elsif\
    \ c.upcase == \"y\"\n      new_message += \"m\"\n    elsif c.upcase == \"b\"\n\
    \      new_message += \"a\"\n    elsif c.upcase == \"f\"\n      new_message +=\
    \ \"e\"\n    elsif c.upcase == \"j\"\n      new_message += \"i\"\n    elsif c.upcase\
    \ == \"k\"\n      new_message += \"o\"\n    elsif c.upcase == \"l\"\n      new_message\
    \ += \"u\"\n    elsif c.upcase == \"m\"\n      new_message += \"y\"\n    elsif\
    \ c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase == \"E\"\n\
    \      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message +=\
    \ \"J\"\n    elsif c.upcase == \"O\"\n      new_message += \"K\"\n    elsif c.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message\
    \ += \"M\"\n    elsif c.upcase == \"a\"\n      new_message += \"b\"\n    elsif\
    \ c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase == \"i\"\n\
    \      new_message += \"j\"\n    elsif c.upcase == \"o\"\n      new_message +=\
    \ \"k\"\n    elsif c.upcase == \"u\"\n      new_message ", "  new_message = \"\
    \"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    elsif char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    else\n      new_message += char\n    end\n\
    \  end\n  return new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase ", "  new_message = \"\"\n  message.each_char do\
    \ |char|\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.swapcase ", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    message = message.split(\"\")\n    encoded = \"\"\n    \n    message.each\
    \ do |letter|\n        letter = letter.upcase\n        letter = letter.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(letter) + 1])\n        encoded += letter\n    end\n\
    \    \n    return encoded\nend", "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    \n    message = message.split(\"\")\n    \n    encoded = \"\"\n    \n  \
    \  for i in message:\n        \n        if i in alphabet:\n            \n    \
    \        index = alphabet.index(i)\n            \n            encoded = encoded\
    \ + alphabet[(index + 1)]\n            \n        else:\n            \n       \
    \     encoded = encoded + i\n            \n    return encoded\n    \nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"\
    I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\n\
    print(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"\
    I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\n\
    print(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"\
    I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\n\
    print(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"\
    I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\n\
    print(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"\
    I hate you\"))\nprint(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\n\
    print(encode(\"I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"\
    I love you\"))\nprint(encode(\"I hate you\"))\nprint(encode(\"I love you\"))\n\
    print(", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    end\n  end\n\
    \  new_message\nend", "  new_message = \"\"\n  message.each_char do |char|\n \
    \   if char.upcase == char\n      new_message << char\n    else\n      new_message\
    \ << char.upcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/, \n    lambda\
    \ { |vowel| alphabet.index(vowel) + 2 })\n  new_message.gsub!(/[aeiou]/, \n  \
    \  lambda { |vowel| alphabet.index(vowel) + 1 })\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase\n    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n      if char\
    \ == vowel\n        new_message << vowel\n      end\n    end\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    else\n  \
    \    new_message += char\n    end\n  end\n  new_message\nend", "  new_message\
    \ = ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.downcase\n      new_message <<\
    \ char.downcase\n    else\n      new_message << char.upcase.next\n    end\n  end\n\
    \  new_message\nend", "  new_message = ''\n  message.each_char do |char|\n   \
    \ if char.upcase == 'A'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'E'\n      new_message << char.upcase\n    elsif char.upcase == 'I'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'O'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'U'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'Y'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'a'\n      new_message << char.upcase\n    elsif char.upcase == 'e'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'i'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'o'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'u'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'y'\n      new_message << char.upcase\n    elsif char.upcase == 'B'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'C'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'D'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'F'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'G'\n      new_message << char.upcase\n    elsif char.upcase == 'H'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'J'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'K'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'L'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'M'\n      new_message << char.upcase\n    elsif char.upcase == 'N'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'P'\n      new_message\
    \ << char.upcase\n    elsi", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    char = char.upcase if char.upcase >= \"A\" && char.upcase <= \"Z\"\n    char\
    \ = char.downcase if char.downcase >= \"a\" && char.downcase <= \"z\"\n    new_message\
    \ << char\n  end\n  new_message\nend", "    \n    # Write your code here\n   \
    \ \n    return encodedMessage\n    ", "    \n    # Write your code here\n    \n\
    \    return encoded_message\n    ", "  new_message = \"\"\n  message.each_char\
    \ do |c|\n    new_message << case c\n      when 'a' then 'b'\n      when 'e' then\
    \ 'f'\n      when 'i' then 'j'\n      when 'o' then 'k'\n      when 'u' then 'l'\n\
    \      when 'y' then 'm'\n      else c\n    end\n  end\n  new_message\nend", " \
    \ new_message = \"\"\n  vowels = \"aeiouAEIOU\"\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  return new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char = char.upcase\n    vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    vowels.each do |vowel|\n      if char == vowel\n        new_message\
    \ << vowel\n      end\n    end\n  end\n  new_message\nend", "  new_message = \"\
    \"\n  message.downcase!\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, '", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char = char.upcase if char.upcase == \"A\"\n    char = char.downcase\
    \ if char.downcase == \"a\"\n    char = char.swapcase\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ \"#{$&.upcase}\")\n    new_message << char\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, '", "    \n    alphabet = string.ascii_lowercase\n\
    \    vowels = string.ascii_lowercase[:26]\n    \n    message = message.lower()\n\
    \    \n    message = message.replace(vowels, alphabet[alphabet.index(vowels[2])+1])\n\
    \    \n    message = message.replace(vowels[2:], alphabet[alphabet.index(vowels[2])+1])\n\
    \    \n    message = message.replace(vowels[:2], alphabet[alphabet.index(vowels[2])+1])\n\
    \    \n    return message\n    \nprint(encode('hello'))\nprint(encode('hello '))\n\
    print(encode('hello world'))\nprint(encode('hello world '))\nprint(encode('hello\
    \ world !'))\nprint(encode('hello world ! '))\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes a message, and encodes in such a way that it swaps case\
    \ of all letters, replaces all vowels in the message with the letter that appears\
    \ 2 places ahead of that vowel in the english alphabet. Assume only letters. \n\
    Examples:\nprint(encode('hello'))\nprint(encode('hello '))\nprint(encode('hello\
    \ world'))\nprint(encode('hello world '))\nprint(encode('hello world !'))\nprint(encode('hello\
    \ world ! '))", "    encoded = \"\"\n    vowels = \"aeiouAEIOU\"\n    letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    for letter in message:\n       \
    \ if letter in vowels:\n            encoded = encoded + letters[letters.index(letter)-1]\n\
    \        else:\n            encoded = encoded + letter\n    \n    return encoded\n\
    \    \nprint(encode(\"Hello World\"))\nprint(encode(\"Hello World!\"))\nprint(encode(\"\
    Hello World!!\"))\nprint(encode(\"Hello World!!!\"))\nprint(encode(\"Hello World!!!!\"\
    ))\nprint(encode(\"Hello World!!!!!\"))\nprint(encode(\"Hello World!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\")) \n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World!!!!!!!\"))\nprint(encode(\"Hello World!!!!!!!\"))\n\
    print(encode(\"Hello World", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    if char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.downcase\n      new_message << char.downcase\n    else\n      new_message\
    \ << char.upcase.next\n    end\n  end\n  new_message\nend", "    alphabet = %w(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n    vowels = %w(a e i o\
    \ u)\n    message.gsub(/[aeiou]/) { |m| alphabet[alphabet.index(m) + 1] }\n  \
    \  message.gsub(/[aeiou]/) { |m| vowels[vowels.index(m) + 1] }\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error `undefined method `gsub' for nil:NilClass`\n<|/ c |>\n<| c |>\nI\
    \ added the code I used to test the code. Can you try it again?\n<|/ c |>\n<|\
    \ c |>\nI still get the same error `undefined method gsub' for nil:NilClass`\n\
    <|/ c |>\n<| c |>\nI added the code I used to test the code. Can you try it again?\n\
    <|/ c |>\n<| c |>\nI still get the same error `undefined method gsub' for nil:NilClass`\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  new_message = \"\"\n  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ '", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[",
  "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase if\
    \ char.upcase != char\n    char = char.downcase if char.downcase != char\n   \
    \ char = char.swapcase\n    char = char.gsub(/[aeiou]/, 'e')\n    char = char.gsub(/[aeiou]/,\
    \ 'o')\n    char = char.gsub(/[aeiou]/, 'a')\n    char = char.gsub(/[aeiou]/,\
    \ 'i')\n    new_message << char\n  end\n  new_message\nend", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    message = message.downcase\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n    message = message.gsub(/[aeiou]/,\
    \ alphabet[alphabet.index(vowels.next)])\n", "  new_message = \"\"\n  message.downcase!\n\
    \  message.gsub(/[aeiou]/) do |letter|\n    letter_index = alphabet.index(letter)\n\
    \    letter_index + 2\n  end\n  message.gsub(/[aeiou]/) do |letter|\n    letter_index\
    \ = alphabet.index(letter)\n    alphabet[letter_index + 1]\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I appreciate it. I tried your\
    \ code and it didn't work. I think it's because I didn't specify what to do in\
    \ the case where a letter is repeated more than twice. For example, if the message\
    \ is \"Hello\", the output should be \"Hleelo\". Any ideas?\n<|/ c |>\n<| c |>\n\
    I added a second gsub to fix that issue. Does that work for you?\n<|/ c |>\n<|\
    \ c |>\nYes, it works! Thank you so much! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a tags=ruby,string |>\n\
    <code>", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\
    \ unless char.upcase?\n    char.downcase! unless char.downcase?\n    char.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    new_message << char\n  end\n  new_message\nend",
  "  new_message = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/, \"z\")\n\
    \  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\"\
    )\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/,\
    \ \"z\")\n  message.gsub!(/[aeiou]/, \"z\")\n  message.gsub!(/[aeiou]/, \"", " \
    \ new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\n    char.downcase!\n\
    \    char.each_char do |other_char|\n      new_message << other_char if other_char.upcase\
    \ == char\n    end\n  end\n  new_message\nend", "    alphabet = %w[a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z]\n    vowels = %w[a e i o u]\n    message\
    \ = message.downcase\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)",
  "    message = message.downcase\n    vowels = %w[a e i o u]\n    message = message.gsub(/[aeiou]/)\
    \ { |vowel| vowels.index(vowel) + 2 }\n    message = message.gsub(/[aeiou]/) {\
    \ |vowel| vowels.index(vowel) + 1 }\n    message = message.gsub(/[aeiou]/) { |vowel|\
    \ vowels.index(vowel) }\n    puts message\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try it with the string \"aAeEiIoOuU\"\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added a test case to my answer. Did you try\
    \ it?\n<|/ c |>\n<| c |>\nYes, I did. Your code doesn't work. Try it with the\
    \ string \"aAeEiIoOuU\"\n<|/ c |>\n<| c |>\nI added a test case to my answer.\
    \ Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. Your code doesn't work. Try\
    \ it with the string \"aAeEiIoOuU\"\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  \
    \  \n    # Write your code here\n    \n    return message\n</cell>\n<cell>", " \
    \ new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == \"\
    A\"\n      new_message += \"B\"\n    elsif char.upcase == \"B\"\n      new_message\
    \ += \"A\"\n    elsif char.upcase == \"C\"\n      new_message += \"D\"\n    elsif\
    \ char.upcase == \"D\"\n      new_message += \"C\"\n    elsif char.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif char.upcase == \"F\"\n      new_message\
    \ += \"E\"\n    elsif char.upcase == \"G\"\n      new_message += \"H\"\n    elsif\
    \ char.upcase == \"H\"\n      new_message += \"G\"\n    elsif char.upcase == \"\
    I\"\n      new_message += \"J\"\n    elsif char.upcase == \"J\"\n      new_message\
    \ += \"I\"\n    elsif char.upcase == \"K\"\n      new_message += \"L\"\n    elsif\
    \ char.upcase == \"L\"\n      new_message += \"K\"\n    elsif char.upcase == \"\
    M\"\n      new_message += \"N\"\n    elsif char.upcase == \"N\"\n      new_message\
    \ += \"M\"\n    elsif char.upcase == \"O\"\n      new_message += \"P\"\n    elsif\
    \ char.upcase == \"P\"\n      new_message += \"O\"\n    elsif char.upcase == \"\
    Q\"\n      new_message += \"R\"\n    elsif char.upcase == \"R\"\n      new_message\
    \ += \"Q\"\n    elsif char.upcase == \"S\"\n      new_message += \"T\"\n    elsif\
    \ char.upcase == \"T\"\n      new_message += \"S\"\n    elsif char.upcase == \"\
    U\"\n      new_message += \"V\"\n    elsif char.upcase == \"V\"\n      new_message\
    \ += \"U\"\n    elsif char.upcase == \"W\"\n      new_message += \"X\"\n    elsif\
    \ char.upcase == \"X\"\n      new_message += \"W\"\n    elsif char.upcase == \"\
    Y\"\n      new_message += \"Z\"\n    elsif char.upcase == \"Z\"\n      new_message\
    \ += \"Y\"\n    elsif char.upcase ", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == char\n      new_message << char.upcase\n  \
    \  else\n      new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    alphabet[alphabet.index(char.upcase) + 1]\n  end\n  new_message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    end\n  end\n\
    \  return new_message\nend", "  new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/)\
    \ do |letter|\n    letter_index = alphabet.index(letter)\n    letter_index + 2\n\
    \  end\nend", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\
    \ if char.upcase == char\n    char.downcase! if char.downcase == char\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/,\
    \ 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/,\
    \ 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/,\
    \ 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/,\
    \ 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/,\
    \ 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/,\
    \ 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, '", "    message.downcase!\n    message.gsub(/[aeiou]/)\
    \ do |letter|\n        letter = letter.upcase\n        letter.gsub(/[aeiou]/)\
    \ do |vowel|\n            vowel = vowel.upcase\n            vowel.index(vowel.next)\
    \ do |index|\n                vowel.next = (index+1).chr\n            end\n  \
    \      end\n    end\n    message.upcase!\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer! I appreciate it! I ran your code, and it gave\
    \ me this error: \"undefined method `gsub' for nil:NilClass\". Any ideas?\n<|/\
    \ c |>\n<| c |>\nI edited my answer. There was a typo in the first gsub. Try it\
    \ now.\n<|/ c |>\n<| c |>\nThanks again! I ran your code, and it gave me this\
    \ error: \"undefined method `gsub' for nil:NilClass\". Any ideas?\n<|/ c |>\n\
    <| c |>\nI edited my answer. There was a typo in the first gsub. Try it now.\n\
    <|/ c |>\n<| c |>\nThanks again! I ran your code, and it gave me this error: \"\
    undefined method `gsub' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"B\"\n     \
    \ new_message += \"A\"\n    elsif char.upcase == \"C\"\n      new_message += \"\
    D\"\n    elsif char.upcase == \"D\"\n      new_message += \"C\"\n    elsif char.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"F\"\n     \
    \ new_message += \"E\"\n    elsif char.upcase == \"G\"\n      new_message += \"\
    H\"\n    elsif char.upcase == \"H\"\n      new_message += \"G\"\n    elsif char.upcase\
    \ == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"J\"\n     \
    \ new_message += \"I\"\n    elsif char.upcase == \"K\"\n      new_message += \"\
    L\"\n    elsif char.upcase == \"L\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"M\"\n      new_message += \"N\"\n    elsif char.upcase == \"N\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"O\"\n      new_message += \"\
    P\"\n    elsif char.upcase == \"P\"\n      new_message += \"O\"\n    elsif char.upcase\
    \ == \"Q\"\n      new_message += \"R\"\n    elsif char.upcase == \"R\"\n     \
    \ new_message += \"Q\"\n    elsif char.upcase == \"S\"\n      new_message += \"\
    T\"\n    elsif char.upcase == \"T\"\n      new_message += \"S\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"V\"\n    elsif char.upcase == \"V\"\n     \
    \ new_message += \"U\"\n    elsif char.upcase == \"W\"\n      new_message += \"\
    X\"\n    elsif char.upcase == \"X\"\n      new_message += \"W\"\n    elsif char.upcase\
    \ == \"Y\"\n      new_message += \"Z\"\n    elsif char.upcase == \"Z\"\n     \
    \ new_message += \"Y\"\n    elsif char.upcase ", "  new_message = ''\n  message.each_char\
    \ do |c|\n    if ('A' <= c && c <= 'Z') || (('a' <= c && c <= 'z') && c != 'A'\
    \ && c != 'a')\n      new_message << c.upcase\n    else\n      new_message <<\
    \ c\n    end\n  end\n  new_message\nend", "  new_message = ''\n  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ '", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase if\
    \ char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase\
    \ if char.swapcase == char\n    char.upcase if char.upcase == char\n    char.downcase\
    \ if char.downcase == char\n    char.swapcase if char.swapcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.swapcase ",
  "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    message = message.downcase\n\
    \    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n    \n    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(alphabet.upcase($0))\
    \ + 1])\n", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\
    \ if char.upcase == char\n    char.downcase! if char.downcase == char\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/,\
    \ 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/,\
    \ 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/,\
    \ 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/,\
    \ 'i')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/,\
    \ 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/, 'i')\n    char.gsub!(/[aeiou]/,\
    \ 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    char.gsub!(/[aeiou]/,\
    \ 'e')\n    char.gsub!(/[aeiou]/, '", "    message = message.downcase\n    vowels\
    \ = %w[a e i o u]\n    vowels.each do |vowel|\n        message = message.gsub(vowel,\
    \ vowel.upcase)\n    end\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n  \
    \  message = message.gsub(/[aeou]/, /[aeiou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = message.gsub(/[aeiou]/,\
    \ /[aeou]/)\n    message = message.gsub(/[aeiou]/, /[aeou]/)\n    message = ",
  "  new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/i) { |vowel|\
    \ \n    index = vowel.index(0)\n    vowel.upcase + vowel.slice!(0...index) + vowel.slice!(index+1..-1)\n\
    \  }\n  message.gsub(/[aeiou]/i) { |vowel| \n    index = vowel.index(0)\n    vowel.upcase\
    \ + vowel.slice!(0...index) + vowel.slice!(index+1..-1)\n  }\n  new_message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but I don't\
    \ think it solves the problem. Your code doesn't take into account the fact that\
    \ \"a\" should stay \"a\" and not \"A\". The problem is that \"a\" should stay\
    \ \"a\" and not \"A\".\n<|/ c |>\n<| c |>\nI updated my answer to account for\
    \ that. Let me know if that works for you.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ answer, but I don't think it solves the problem. Your code doesn't take into\
    \ account the fact that \"a\" should stay \"a\" and not \"A\". The problem is\
    \ that \"a\" should stay \"a\" and not \"A\".\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to account for that. Let me know if that works for you.\n<|/ c |>\n<|\
    \ c |>\nI appreciate your answer, but I don't think it solves the problem. Your\
    \ code doesn't take into account the fact that \"a\" should stay \"a\" and not\
    \ \"A\". The problem is that \"a\" should stay \"a\" and not \"A\".\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n\
    \  \n  message.downcase!\n  \n  message.each_char do |char|\n    if vowels.include?(char)\n\
    \      new_message << vowels[vowels.index(char) + 1]\n    else\n      new_message\
    \ << char\n    end\n  end\n  \n  new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.swapcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.swapcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase ", "  new_message = \"\"\n  message.each_char do\
    \ |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"I\"\n     \
    \ new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message += \"\
    K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif char.upcase\
    \ == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"a\"\n     \
    \ new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message += \"\
    f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif char.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"u\"\n     \
    \ new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message += \"\
    m\"\n    elsif char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"I\"\n     \
    \ new_message += \"J\"\n    elsif char.upcase == \"O\"\n      new_message += \"\
    K\"\n    elsif char.upcase == \"U\"\n      new_message += \"L\"\n    elsif char.upcase\
    \ == \"Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"a\"\n     \
    \ new_message += \"b\"\n    elsif char.upcase == \"e\"\n      new_message += \"\
    f\"\n    elsif char.upcase == \"i\"\n      new_message += \"j\"\n    elsif char.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif char.upcase == \"u\"\n     \
    \ new_message += \"l\"\n    elsif char.upcase == \"y\"\n      new_message += \"\
    m\"\n    end\n  end\n  return new_message\nend", "  new_message = ''\n  message.each_char\
    \ do |char|\n    if char.upcase == char\n      new_message << char.upcase\n  \
    \  else\n      new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[", "  new_message = \"\"\n  message.downcase!\n\
    \  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ << \"B\"\n    elsif char.upcase == \"E\"\n      new_message << \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message << \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message << \"P\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ << \"Y\"\n    elsif char.upcase == \"Y\"\n      new_message << \"Z\"\n    elsif\
    \ char.upcase == \"B\"\n      new_message << \"A\"\n    elsif char.upcase == \"\
    F\"\n      new_message << \"E\"\n    elsif char.upcase == \"J\"\n      new_message\
    \ << \"I\"\n    elsif char.upcase == \"P\"\n      new_message << \"O\"\n    elsif\
    \ char.upcase == \"Y\"\n      new_message << \"U\"\n    elsif char.upcase == \"\
    Z\"\n      new_message << \"Y\"\n    end\n  end\n  new_message\nend", "  new_message\
    \ = \"\"\n  vowels = \"aeiouAEIOU\"\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  new_message\nend", "    \n    # Write your code here\n    \n\
    \    return encoded\n    ", "  new_message = \"\"\n  vowels = \"aeiouAEIOU\"\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n\
    \    else\n      new_message += i.downcase\n    end\n  end\n  return new_message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"B\"\n     \
    \ new_message += \"A\"\n    elsif char.upcase == \"C\"\n      new_message += \"\
    D\"\n    elsif char.upcase == \"D\"\n      new_message += \"C\"\n    elsif char.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif char.upcase == \"F\"\n     \
    \ new_message += \"E\"\n    elsif char.upcase == \"G\"\n      new_message += \"\
    H\"\n    elsif char.upcase == \"H\"\n      new_message += \"G\"\n    elsif char.upcase\
    \ == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"J\"\n     \
    \ new_message += \"I\"\n    elsif char.upcase == \"K\"\n      new_message += \"\
    L\"\n    elsif char.upcase == \"L\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"M\"\n      new_message += \"N\"\n    elsif char.upcase == \"N\"\n     \
    \ new_message += \"M\"\n    elsif char.upcase == \"O\"\n      new_message += \"\
    P\"\n    elsif char.upcase == \"P\"\n      new_message += \"O\"\n    elsif char.upcase\
    \ == \"Q\"\n      new_message += \"R\"\n    elsif char.upcase == \"R\"\n     \
    \ new_message += \"Q\"\n    elsif char.upcase == \"S\"\n      new_message += \"\
    T\"\n    elsif char.upcase == \"T\"\n      new_message += \"S\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"V\"\n    elsif char.upcase == \"V\"\n     \
    \ new_message += \"U\"\n    elsif char.upcase == \"W\"\n      new_message += \"\
    X\"\n    elsif char.upcase == \"X\"\n      new_message += \"W\"\n    elsif char.upcase\
    \ == \"Y\"\n      new_message += \"Z\"\n    elsif char.upcase == \"Z\"\n     \
    \ new_message += \"Y\"\n    elsif char.upcase ", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char = char.upcase if char.upcase == char\n    char = char.downcase\
    \ if char.downcase == char\n    char = char.swapcase\n    char = char.gsub(/[aeiou]/,\
    \ 'e')\n    char = char.gsub(/[aeiou]/, 'o')\n    char = char.gsub(/[aeiou]/,\
    \ 'a')\n    char = char.gsub(/[aeiou]/, 'i')\n    new_message += char\n  end\n\
    \  new_message\nend", "  new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"E\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"I\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"O\"\n      new_message << char.upcase\n    elsif char.upcase == \"U\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"a\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"e\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"i\"\n      new_message << char.upcase\n    elsif char.upcase == \"o\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"u\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"b\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"c\"\n      new_message << char.upcase\n    elsif char.upcase == \"d\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"f\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"g\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"h\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"j\"\n      new_message << char.upcase\n    elsif char.upcase == \"k\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"l\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"m\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"n\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"p\"\n      new_message << char.upcase\n    elsif char.up", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message\nend", "    \n    # Write your code here\n    \n    return encoded\n\
    \    ", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter\
    \ = letter.upcase if letter.upcase != letter\n    letter = letter.downcase if\
    \ letter.downcase != letter\n    letter = letter.gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/, letter).gsub(/[aeiou]/,\
    \ letter).gsub(", "  new_message = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n\
    \    else\n      new_message += i.downcase\n    end\n  end\n  new_message\nend",
  "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    message = message.downcase\n\
    \    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+2] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)-1] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+1] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+3] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+4]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+5] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+6] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+7]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+8] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+9] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+10]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+11] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+12] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+13]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+14] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+15] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+16]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+17] }\n    message.gsub!(/[aeiou]/)\
    \ { alphabet[alphabet.index($0)+18] }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.index($0)+19]\
    \ }\n    message.gsub!(/[aeiou]/) { alphabet[alphabet.", "  new_message = \"\"\
    \n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |char|\n    alphabet.index(char.upcase) + 1\n\
    \  end\n  new_message\nend", "  new_message = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/i,\
    \ \"z\")\n  message.gsub!(/[aeiou]/i, \"y\")\n  message.gsub!(/[aeiou]/i, \"x\"\
    )\n  message.gsub!(/[aeiou]/i, \"w\")\n  message.gsub!(/[aeiou]/i, \"v\")\n  message.gsub!(/[aeiou]/i,\
    \ \"u\")\n  message.gsub!(/[aeiou]/i, \"t\")\n  message.gsub!(/[aeiou]/i, \"s\"\
    )\n  message.gsub!(/[aeiou]/i, \"r\")\n  message.gsub!(/[aeiou]/i, \"q\")\n  message.gsub!(/[aeiou]/i,\
    \ \"p\")\n  message.gsub!(/[aeiou]/i, \"o\")\n  message.gsub!(/[aeiou]/i, \"n\"\
    )\n  message.gsub!(/[aeiou]/i, \"m\")\n  message.gsub!(/[aeiou]/i, \"l\")\n  message.gsub!(/[aeiou]/i,\
    \ \"k\")\n  message.gsub!(/[aeiou]/i, \"j\")\n  message.gsub!(/[aeiou]/i, \"h\"\
    )\n  message.gsub!(/[aeiou]/i, \"g\")\n  message.gsub!(/[aeiou]/i, \"f\")\n  message.gsub!(/[aeiou]/i,\
    \ \"e\")\n  message.gsub!(/[aeiou]/i, \"d\")\n  message.gsub!(/[aeiou]/i, \"c\"\
    )\n  message.gsub!(/[aeiou]/i, \"b\")\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[aeiou]/i,\
    \ \"z\")\n  message.gsub!(/[aeiou]/i, \"y\")\n  message.gsub!(/[aeiou]/i, \"x\"\
    )\n  message.gsub!(/[aeiou]/i, \"w\")\n  message.gsub!(/[aeiou]/i, \"v\")\n  message.gsub!(/[aeiou]/i,\
    \ \"u\")\n  message.gsub!(/[aeiou]/i, \"t\")\n  message.gsub!(/[aeiou]/i, \"s\"\
    )\n  message.gsub!(/[aeiou]/i, \"r\")\n  ", "  new_message = \"\"\n  vowels =\
    \ \"aeiouAEIOU\"\n  for i in message\n    if vowels.include?(i)\n      new_message\
    \ << vowels.index(i).to_s + vowels.index(i+1).to_s\n    else\n      new_message\
    \ << i\n    end\n  end\n  return new_message\nend", "  new_message = \"\"\n  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.", "  new_message = ''\n  message.each_char do |char|\n\
    \    if char.upcase == char\n      new_message << char\n    else\n      new_message\
    \ << char.upcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/,\
    \ 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/,\
    \ 'u')\n  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'e')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/,\
    \ 'a')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'u')\n\
    \  new_message.gsub!(/[aeiou]/, 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'a')\n\
    \  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/,\
    \ 'y')\n  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'e')\n\
    \  new_message.gsub!(/[aeiou]/, 'o')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'i')", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n\
    \    \n    encoded_message = ''\n    \n    for letter in message:\n        if\
    \ letter in alphabet:\n            encoded_message += alphabet[alphabet.index(letter)\
    \ + 2]\n        else:\n            encoded_message += letter\n    \n    return\
    \ encoded_message\n    \nprint(encode('hello'))\nprint(encode('hey'))\nprint(encode('hi'))\n\
    print(encode('hey there'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\nprint(encode('hi'))\n\
    print(encode('", "  new_message = \"\"\n  message.each_char do |char|\n    if\
    \ char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ char.upcase == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"\
    Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message\
    \ += \"b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif\
    \ char.upcase == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"\
    o\"\n      new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message\
    \ += \"l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif\
    \ char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ char.upcase == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"\
    Y\"\n      new_message += \"M\"\n    elsif char.upcase == \"a\"\n      new_message\
    \ += \"b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif\
    \ char.upcase == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"\
    o\"\n      new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message\
    \ += \"l\"\n    elsif char.upcase == \"y\"\n      new_message += \"m\"\n    elsif\
    \ char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"\
    E\"\n      new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    ", "  new_message = \"\"\n  message.each_char do |c|\n    if c.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ c.upcase == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n\
    \      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message +=\
    \ \"M\"\n    elsif c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase\
    \ == \"e\"\n      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ c.upcase == \"u\"\n      new_message += \"l\"\n    elsif c.upcase == \"y\"\n\
    \      new_message += \"m\"\n    elsif c.upcase == \"b\"\n      new_message +=\
    \ \"a\"\n    elsif c.upcase == \"f\"\n      new_message += \"e\"\n    elsif c.upcase\
    \ == \"j\"\n      new_message += \"i\"\n    elsif c.upcase == \"k\"\n      new_message\
    \ += \"o\"\n    elsif c.upcase == \"l\"\n      new_message += \"u\"\n    elsif\
    \ c.upcase == \"m\"\n      new_message += \"y\"\n    elsif c.upcase == \"A\"\n\
    \      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n\
    \      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message +=\
    \ \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase\
    \ == \"u\"\n      new_message ", "    message = message.downcase\n    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    message = message.gsub(/[aeiou]/) {\
    \ |vowel| vowels[vowels.index(vowel) + 1] }\n    message = message.gsub(/[aeiou]/)\
    \ { |vowel| vowels[vowels.index(vowel) - 1] }\n    puts message\nend", "  new_message\
    \ = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/, 'z').gsub(/[aeiou]/,\
    \ 'z')\n  message.scan(/[aeiou]/).each do |letter|\n    index = letter.index(letter)\n\
    \    new_message << letter.upcase if index > 0 && index + 2 < message.length\n\
    \    new_message << letter.downcase if index > 0 && index + 2 > message.length\n\
    \  end\n  new_message\nend", "  new_message = \"\"\n  message.split(\"\").each\
    \ do |letter|\n    letter = letter.upcase\n    vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    vowels.each do |vowel|\n      if letter.include?(vowel)\n\
    \        letter = letter.gsub(vowel, letter.index(vowel) + 2)\n      end\n   \
    \ end\n    new_message << letter\n  end\n  new_message\nend", "  new_message =\
    \ \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    elsif char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"M\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"m\"\n    else\n      new_message += char\n    end\n\
    \  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif char.upcase\
    \ == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"C\"\n     \
    \ new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message += \"\
    C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif char.upcase\
    \ == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"G\"\n     \
    \ new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message += \"\
    G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase\
    \ == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"K\"\n     \
    \ new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message += \"\
    K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif char.upcase\
    \ == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"O\"\n     \
    \ new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message += \"\
    O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif char.upcase\
    \ == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"S\"\n     \
    \ new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message += \"\
    S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif char.upcase\
    \ == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"W\"\n     \
    \ new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message += \"\
    W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif char.upcase\
    \ == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", "  new_message\
    \ = \"\"\n  message.downcase!\n  message.gsub!(/[aeiou]/i, \"A\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"a\")\n  message.gsub!(/[bcdfghjklmnpqrstvwxyz]/i, \"B\")\n  message.gsub!(/[BCDEFGHJKLMNPQRSTVWXYZ]/i,\
    \ \"b\")\n  message.gsub!(/[qwertyuiop]/i, \"Q\")\n  message.gsub!(/[QWERTYUIOP]/i,\
    \ \"q\")\n  message.gsub!(/[asdfghjkl]/i, \"C\")\n  message.gsub!(/[ASDFGHJKL]/i,\
    \ \"c\")\n  message.gsub!(/[zxcvbnm]/i, \"Z\")\n  message.gsub!(/[ZXCVBNM]/i,\
    \ \"z\")\n  message.gsub!(/[1234567890]/i, \"0\")\n  message.gsub!(/[1234567890]/i,\
    \ \"0\")\n  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n\
    \  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\\
    -=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\
    ,.<>\\/?]/i, \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]/i,\
    \ \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n\
    \  message.gsub!(/[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\\
    -=\\[\\]{};':\",.<>\\/?]/i, \"_\")\n  message.gsub!(/[!@#$%^&*()_+\\-=\\", " \
    \ new_message = \"\"\n  message.split(\"\").each do |letter|\n    if letter.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif letter.upcase == \"E\"\n   \
    \   new_message += \"F\"\n    elsif letter.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif letter.upcase == \"O\"\n      new_message += \"K\"\n   \
    \ elsif letter.upcase == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase\
    \ == \"Y\"\n      new_message += \"M\"\n    elsif letter.upcase == \"a\"\n   \
    \   new_message += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message\
    \ += \"f\"\n    elsif letter.upcase == \"i\"\n      new_message += \"j\"\n   \
    \ elsif letter.upcase == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif letter.upcase == \"y\"\n   \
    \   new_message += \"m\"\n    elsif letter.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif letter.upcase == \"E\"\n      new_message += \"F\"\n   \
    \ elsif letter.upcase == \"I\"\n      new_message += \"J\"\n    elsif letter.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif letter.upcase == \"U\"\n   \
    \   new_message += \"L\"\n    elsif letter.upcase == \"Y\"\n      new_message\
    \ += \"M\"\n    elsif letter.upcase == \"a\"\n      new_message += \"b\"\n   \
    \ elsif letter.upcase == \"e\"\n      new_message += \"f\"\n    elsif letter.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif letter.upcase == \"o\"\n   \
    \   new_message += \"k\"\n    elsif letter.upcase == \"u\"\n      new_message\
    \ += \"l\"\n    elsif letter.upcase == \"y\"\n      new_message += \"m\"\n   \
    \ else\n      new_message += letter\n    end\n  end\n  return new_message\nend",
  "  new_message = \"\"\n  vowels = \"aeiouAEIOU\"\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message << vowels.index(i) + 1\n    else\n      new_message << i\n\
    \    end\n  end\n  new_message\nend", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message += \"B\"\n    elsif\
    \ char.upcase == \"B\"\n      new_message += \"A\"\n    elsif char.upcase == \"\
    C\"\n      new_message += \"D\"\n    elsif char.upcase == \"D\"\n      new_message\
    \ += \"C\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"F\"\n      new_message += \"E\"\n    elsif char.upcase == \"\
    G\"\n      new_message += \"H\"\n    elsif char.upcase == \"H\"\n      new_message\
    \ += \"G\"\n    elsif char.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ char.upcase == \"J\"\n      new_message += \"I\"\n    elsif char.upcase == \"\
    K\"\n      new_message += \"L\"\n    elsif char.upcase == \"L\"\n      new_message\
    \ += \"K\"\n    elsif char.upcase == \"M\"\n      new_message += \"N\"\n    elsif\
    \ char.upcase == \"N\"\n      new_message += \"M\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"P\"\n    elsif char.upcase == \"P\"\n      new_message\
    \ += \"O\"\n    elsif char.upcase == \"Q\"\n      new_message += \"R\"\n    elsif\
    \ char.upcase == \"R\"\n      new_message += \"Q\"\n    elsif char.upcase == \"\
    S\"\n      new_message += \"T\"\n    elsif char.upcase == \"T\"\n      new_message\
    \ += \"S\"\n    elsif char.upcase == \"U\"\n      new_message += \"V\"\n    elsif\
    \ char.upcase == \"V\"\n      new_message += \"U\"\n    elsif char.upcase == \"\
    W\"\n      new_message += \"X\"\n    elsif char.upcase == \"X\"\n      new_message\
    \ += \"W\"\n    elsif char.upcase == \"Y\"\n      new_message += \"Z\"\n    elsif\
    \ char.upcase == \"Z\"\n      new_message += \"Y\"\n    elsif char.upcase ", " \
    \ new_message = \"\"\n  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel|\
    \ \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ\
    \ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.", "    message.downcase!\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n \
    \   message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/, 'z')\n    message.gsub(/[aeiou]/,\
    \ 'z')\n    message.gsub(/[aeiou]/, 'z')", "    alphabet = %w(a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z)\n    message.each_char do |c|\n       \
    \ alphabet[alphabet.index(c) + 1].upcase + alphabet[alphabet.index(c) - 1].downcase\n\
    \    end\nend", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n\
    \    letter.upcase!\n    letter.gsub!(/[aeiou]/, \"A\")\n    letter.gsub!(/[AEIOU]/,\
    \ \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\"\
    )\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n  \
    \  letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/,\
    \ \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\"\
    )\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n  \
    \  letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/,\
    \ \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\"\
    )\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n  \
    \  letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/,\
    \ \"A\")\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\"\
    )\n    letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n  \
    \  letter.gsub!(/[AEIOU]/, \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIOU]/,\
    \ \"a\")\n    letter.gsub!(/[AEIOU]/, \"A\")\n    letter.gsub!(/[AEIO", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase if char.upcase\
    \ >= 'A' && char.upcase <= 'Z'\n    char = char.downcase if char.downcase >= 'a'\
    \ && char.downcase <= 'z'\n    new_message << char\n  end\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n  new_message.gsub!(/[aeiou]/,\
    \ 'e')\n  new_message.gsub!(/[aeiou]/, 'i')\n  new_message.gsub!(/[aeiou]/, 'o')\n\
    \  new_message.gsub!(/[aeiou]/, 'u')\n  new_message.gsub!(/[aeiou]/, 'a')\n",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
