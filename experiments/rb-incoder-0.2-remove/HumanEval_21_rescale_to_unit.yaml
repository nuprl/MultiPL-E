name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  numbers.each do |number|\n    number = (number - numbers.min) / numbers.max\n\
    \    number = (number - 0.5) * 2.0\n  end\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n / numbers.max }\nend", "  numbers.each do |number|\n  \
    \  number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend",
  "  numbers.each do |number|\n    number = (number - numbers.min) / (numbers.max\
    \ - numbers.min)\n  end\nend", "  numbers.each do |number|\n    number = number\
    \ / numbers.max\n  end\nend", "  numbers.map! {|n| n / numbers.max}\nend", " \
    \ numbers.min!\n  numbers.max!\n  numbers.map! {|n| n / numbers.max}\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI came up with this solution:\n\
    <code>", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map! {|x| x/numbers.max}\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n / numbers.max }\nend", "  numbers.each do |number|\n  \
    \  number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend",
  "  numbers.each do |number|\n    number = number / numbers.max\n  end\nend", " \
    \ numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.each do |number|\n    number = (number -\
    \ numbers.min) / (numbers.max - numbers.min)\n  end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.each do |number|\n    number = (number - numbers.min) / (numbers.max\
    \ - numbers.min)\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\nI wrote a gem that does this for you:\nhttps://github.com/jamesgolick/ruby-range\n\
    <code>\nrequire 'ruby-range'", "  numbers.each do |n|\n    n.times { |i| numbers[i]\
    \ /= (numbers.max - numbers.min) }\n  end\nend", "  numbers.map! do |number|\n\
    \    number / numbers.max\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much! I ended up doing something similar, but I used\
    \ the map method instead of collect. Thanks again!\n<|/ c |>\n<| c |>\n`collect`\
    \ will also work, but `map` will return a `Array` instead of an `Enumerable` so\
    \ you won't be able to call `max` on it.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n / numbers.max }\nend", "  numbers.map! {|x| x/numbers.max}\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks\
    \ for the answer. I'm going to try this out and see how it works. I appreciate\
    \ your time.\n<|/ c |>\n<| c |>\nThis worked perfectly. Thank you so much! I really\
    \ appreciate it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <code>", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map! {|x| x/numbers.max}\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n\
    \ * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map\
    \ { |n| n * 1.0 / numbers.max }\nend", "  numbers.each do |number|\n    number\
    \ /= (numbers.min - numbers.max)\n  end\nend", "  numbers.each do |number|\n \
    \   number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a ruby gem that does this\
    \ for you:\nhttps://github.com/jamesrobertson/range-transform\n<code>\nrequire\
    \ 'range_transform'", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n *\
    \ 1.0 / numbers.max }\nend", "  numbers.each do |number|\n    number = (number\
    \ - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.map! do\
    \ |number|\n    number / numbers.max\n  end\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each do |number|\n    number = (number - numbers.min) /\
    \ numbers.max\n    number = number + 0.5\n    number = number / 2\n  end\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\nend", "  numbers.map! do |number|\n\
    \    number / numbers.max\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nI like your answer but I'm getting an error when I try to use it.\
    \  I added the code to the question.  Thanks!\n<|/ c |>\n<| c |>\nThe error I\
    \ get is `undefined method 'map' for #<Array:0x000000051c9f28>`\n<|/ c |>\n<|\
    \ c |>\nI added the code to the question.  Thanks!\n<|/ c |>\n<| c |>\nI added\
    \ the code to the question.  Thanks!\n<|/ c |>\n<| c |>\nI added the code to the\
    \ question.  Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n|\
    \ n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map!\
    \ {|n| n/numbers.max}\nend", "  numbers.min!\n  numbers.max!\n  numbers.map {\
    \ |n| n * 1.0 / numbers.max }\nend", "  numbers.each do |number|\n    number =\
    \ (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.map!\
    \ {|n| n/numbers.min}\nend", "  numbers.min!\n  numbers.max!\n  numbers.map {\
    \ |n| n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map\
    \ { |n| n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map\
    \ { |n| n * 1.0 / numbers.max }\nend", "  numbers.map! do |number|\n    number\
    \ / numbers.max\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer! I guess I didn't explain my problem clearly enough. My problem is that\
    \ I don't want to rescale my numbers. I want to rescale them so that they become\
    \ between 0 and 1. So if my numbers are [1,2,3,4,5] then I want [0.5,1,1.5,2,2.5]\
    \ to be the output. Does that make sense?\n<|/ c |>\n<| c |>\nAh, I see. In that\
    \ case my answer should work. Just replace `numbers.max` with `numbers.max * 2`.\n\
    <|/ c |>\n<| c |>\nThanks again! I guess I didn't explain my problem clearly enough.\
    \ My problem is that I don't want to rescale my numbers. I want to rescale them\
    \ so that they become between 0 and 1. So if my numbers are [1,2,3,4,5] then I\
    \ want [0.5,1,1.5,2,2.5] to be the output. Does that make sense?\n<|/ c |>\n<|\
    \ c |>\nAh, I see. In that case my answer should work. Just replace `numbers.max`\
    \ with `numbers.max * 2`.\n<|/ c |>\n<| c |>\nThanks again! I guess I didn't explain\
    \ my problem clearly enough. My problem is that I don't want to rescale my numbers.\
    \ I want to rescale them so that they become between 0 and 1. So if my numbers\
    \ are [1,2,3,4,5] then I want [0.5,1,1.5,2,2.5] to be the output. Does that make\
    \ sense?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\nend", "  numbers.map! { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.each do |number|\n    number = (number\
    \ - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\nend", "  numbers.map { |n| n / numbers.max }\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\nend", "  numbers.each\
    \ do |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \  end\nend", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map! {|n| n / numbers.max}\nend\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, but I wonder if there's a way to avoid the division altogether.\
    \ Maybe there's some clever way to map the numbers onto the range [0,1]?\n<|/\
    \ c |>\n<| c |>\n: Yes, I thought of that, but I didn't want to get into it because\
    \ I didn't want to get into it because I didn't want to get into it because I\
    \ didn't want to get into it because I didn't want to get into it because I didn't\
    \ want to get into it because I didn't want to get into it because I didn't want\
    \ to get into it because I didn't want to get into it because I didn't want to\
    \ get into it because I didn't want to get into it because I didn't want to get\
    \ into it because I didn't want to get into it because I didn't want to get into\
    \ it because I didn't want to get into it because I didn't want to get into it\
    \ because I didn't want to get into it because I didn't want to get into it because\
    \ I didn't want to get into it because I didn't want to get into it because I\
    \ didn't want to get into it because I didn't want to get into it because I didn't\
    \ want to get into it because I didn't want to get into it because I didn't want\
    \ to get into it because I didn't want to get into it because I didn't want to\
    \ get into it because I didn't want to get into it because I didn't want to get\
    \ into it because I didn't want to get into it because I didn't want to get into\
    \ it because I didn't want to get into it because I didn't want to get into it\
    \ because I didn't want to get into it because I didn't want to get into it because\
    \ I didn't want to get into it because I didn't want to get into it because I\
    \ didn't want to get into it because I didn't want to get into it because I didn't\
    \ want to get into it because I didn't want to get into it because I didn't want\
    \ to get into it because I didn't want to get into it because I didn't want to\
    \ get into it because I didn't want to get into it because I didn't want to get\
    \ into it because I didn't want to get into it because I didn't want to get into\
    \ it because I didn't want to get into it because I didn't want to get into it\
    \ because I didn't want to get into it because I didn't want to get into it because\
    \ I didn't want to get into it because I didn't want to get into it because I\
    \ didn't want to get into it because I didn't want to get into it because I didn't\
    \ want to get into it because I didn't want to get into it because I didn't want\
    \ to get into it because I didn't want to get into it because I didn't want to\
    \ get ", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / numbers.max\n  end\nend", "  numbers.map!\
    \ do |number|\n    number / numbers.max\n  end\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map! do |number|\n    number\
    \ / numbers.max\n  end\nend", "  numbers.each do |number|\n    number = (number\
    \ - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map! { |n| n / numbers.max }\nend", "  numbers.each\
    \ do |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \  end\nend", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / numbers.max\n    number *= 2\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.2 |>\nI wrote a gem\
    \ to solve this problem called \"range-transform\"\n<code>\nrequire 'range_transform'",
  "  numbers.map! do |number|\n    number / numbers.max\n  end\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each do |number|\n    number\
    \ = (number - numbers.min) / numbers.max\n  end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't seem to work. `numbers` should be an array of numbers,\
    \ right? But `numbers.min` gives an error. `numbers.min` gives `nil`.\n<|/ c |>\n\
    <| c |>\nYes, `numbers` is an array of numbers. `numbers.min` gives the minimum\
    \ number in `numbers`. `numbers.max` gives the maximum number in `numbers`. `numbers.min`\
    \ gives `nil` if `numbers` is empty.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for\
    \ clarifying.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't seem to work.\
    \ `numbers` should be an array of numbers, right? But `numbers.min` returns `nil`.\n\
    <|/ c |>\n<| c |>\nYes, `numbers` should be an array of numbers. `numbers.min`\
    \ returns `nil` because `numbers` is an empty array. Try `numbers = [1,2,3]; numbers.min`\
    \ - it returns `nil`.\n<|/ c |>\n<| c |>\nOh, I see. `numbers.min` returns `nil`\
    \ because `numbers` is an empty array. Try `numbers = [1,2,3]; numbers.min` -\
    \ it returns `nil`.\n<|/ c |>\n<| c |>\nYes, that's right. `numbers.min` returns\
    \ `nil` because `numbers` is an empty array. Try `numbers = [1,2,3]; numbers.min`\
    \ - it returns `nil`.\n<|/ c |>\n<| c |>\nYes, that's right. `numbers.min` returns\
    \ `nil` because `numbers` is an empty array. Try `numbers = [1,2,3]; numbers.min`\
    \ - it returns `nil`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map { |n| n / numbers.max }\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.each do |number|\n    number = (number -\
    \ numbers.min) / (numbers.max - numbers.min)\n    numbers.min = 0\n    numbers.max\
    \ = number\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map! do |number|\n    number / numbers.max\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nI like\
    \ this solution, but I get the following error when I try to run it: `NoMethodError:\
    \ undefined method 'map!' for #<Array:0x0000000525a888>`\n<|/ c |>\n<| c |>\n\
    I added a note about why I chose to not use `map!`\n<|/ c |>\n<| c |>\nI added\
    \ a note about why I chose to not use `map!`\n<|/ c |>\n<| c |>\nI added a note\
    \ about why I chose to not use `map!`\n<|/ c |>\n<| c |>\nI added a note about\
    \ why I chose to not use `map!`\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 /\
    \ numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nI like your solution,\
    \ but I get the following error when I try it: `undefined method 'min' for nil:NilClass`\n\
    <|/ c |>\n<| c |>\n: It means your array is empty. Make sure you pass it an array.\n\
    <|/ c |>\n<| c |>\nI added a check to make sure it isn't nil. Thanks!\n<|/ c |>\n\
    <| c |>\nI added a check to make sure it isn't nil. Thanks!\n<|/ c |>\n<| c |>\n\
    I added a check to make sure it isn't nil. Thanks!\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n / numbers.max}\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I get the\
    \ following error when I try to run it: undefined method `min' for nil:NilClass.\
    \ Any ideas?\n<|/ c |>\n<| c |>\nI added a check to see if `numbers` was nil.\n\
    <|/ c |>\n<| c |>\nThanks, that fixed it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nI like\
    \ this solution, but I get the following error when I try to use it: `undefined\
    \ method 'min' for #<Array:0x0000000539dcc0>`\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't require the Array extension.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't require the Array extension.\n<|/ c |>\n<| a |>\n<code>", "  numbers.map\
    \ { |n| n / numbers.max }\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for\
    \ the answer. I'm sorry I didn't mention this before, but I need the numbers to\
    \ be in descending order. I've edited my question to reflect this.\n<|/ c |>\n\
    <| c |>\nI added a solution that will do that for you.\n<|/ c |>\n<| c |>\nThanks\
    \ for the answer. I'm sorry I didn't mention this before, but I need the numbers\
    \ to be in descending order. I've edited my question to reflect this.\n<|/ c |>\n\
    <| c |>\nI added a solution that will do that for you.\n<|/ c |>\n<| c |>\nThanks\
    \ for the answer. I'm sorry I didn't mention this before, but I need the numbers\
    \ to be in descending order. I've edited my question to reflect this.\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.map\
    \ { |n| n * 1.0 / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map! {|x| x/numbers.max}\nend",
  "  numbers.map! {|n| n / numbers.max}\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `numbers.max` will return the maximum value of the array, not\
    \ the maximum value of the list. Try `[1,2,3].max` vs `[1,2,3].map(&:max).max`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated my answer to reflect\
    \ that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try `[1,2,3].map(&:max).max`\
    \ vs `[1,2,3].max`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ my answer to reflect that.\n<|/ c |>\n<| a |>\n<code>", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map! {|n| n/numbers.max}\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\n\
    This doesn't work if you have negative numbers. `[-0.5, -0.1]` returns `[-0.5,\
    \ 0]` instead of `[-0.5, 1]`\n<|/ c |>\n<| c |>\n: Good point. I've updated the\
    \ answer to take that into account.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n / numbers.max}\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional gems. However, it does require that your array be sorted in ascending\
    \ order. Otherwise, the `min` and `max` values will be incorrect. Also, `min`\
    \ and `max` will return the minimum and maximum values of the array, respectively,\
    \ not the minimum and maximum values of the array after applying the transformation.\n\
    <|/ c |>\n<| c |>\nGood points. I added a note about sorting to the answer.\n\
    <|/ c |>\n<| c |>\nI like your solution, however it fails when you pass in an\
    \ array of negative numbers. I modified your solution to handle negative numbers\
    \ as well. `numbers.min!; numbers.max!; numbers.map! {|n| n / numbers.max if n\
    \ > 0}`\n<|/ c |>\n<| c |>\nI added a note about handling negative numbers to\
    \ the answer. Thanks for pointing that out.\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  numbers.each do |number|\n    number = number / numbers.max\n  end\n\
    end", "  numbers.each do |number|\n    number = (number - numbers.min) / (numbers.max\
    \ - numbers.min)\n  end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>",
  "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.each\
    \ do |n|\n    n.times { |i| numbers[i] /= (numbers.max - numbers.min) }\n  end\n\
    end", "  numbers.map! do |n|\n    n / numbers.max\n  end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.each\
    \ do |number|\n    number = number / numbers.max\n    numbers.min == 0 ? numbers.max\
    \ = 1 : numbers.max = number\n  end\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n|\
    \ n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks for the answer. I'm going to try this out and see how it\
    \ goes. I appreciate it.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify what I'm looking for. Thanks again.\n<|/ c |>\n<| c |>\nI added a\
    \ comment to the question to clarify what I'm looking for. Thanks again.\n<|/\
    \ c |>\n<| c |>\nI added a comment to the question to clarify what I'm looking\
    \ for. Thanks again.\n<|/ c |>\n<| c |>\nI added a comment to the question to\
    \ clarify what I'm looking for. Thanks again.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n| n/numbers.min\
    \ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\n\
    Thanks for your answer. I'm still getting a strange error though. I've updated\
    \ my question to reflect the new error. Thanks again.\n<|/ c |>\n<| c |>\n: I\
    \ updated my answer to include a solution that should work. Let me know if it\
    \ doesn't.\n<|/ c |>\n<| c |>\nThanks again for your help. I'm still getting a\
    \ strange error though. I've updated my question to reflect the new error. Thanks\
    \ again.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that\
    \ should work. Let me know if it doesn't.\n<|/ c |>\n<| c |>\nThanks again for\
    \ your help. I'm still getting a strange error though. I've updated my question\
    \ to reflect the new error. Thanks again.\n<|/ c |>\n<| a |>\nThe error you're\
    \ getting is because you're trying to call a method on nil. \n<code>", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map!\
    \ {|n| n/numbers.max}\nend", "  numbers.min!\n  numbers.max!\n  numbers.map {\
    \ |n| n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=0 |>\n\
    <code>", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map! do |number|\n    number\
    \ / numbers.max\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks so much for your help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad to help!\n<|/ c |>\n<| a dscore=0 |>\nI believe that your problem is that\
    \ you're trying to use an instance variable in a class method. Try this:\n<code>",
  "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend",
  "  numbers.map! {|n| n / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI used the code from and\
    \ added a little bit of error checking to it:\n<code>", "  numbers.map! do |n|\n\
    \    n / numbers.max\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for the answer. I am not trying to rescale the numbers, I am trying to rescale\
    \ the numbers in the array so that they all have the same range. For example,\
    \ if I have an array [1,2,3,4,5,6,7,8,9,10], I want to rescale it so that it becomes\
    \ [0,0,1,0,1,1,1,0,1,1]\n<|/ c |>\n<| c |>\nOh I see, I misunderstood your question.\
    \ I'll edit my answer in a bit.\n<|/ c |>\n<| c |>\nThanks for the answer. I am\
    \ not trying to rescale the numbers, I am trying to rescale the numbers in the\
    \ array so that they all have the same range. For example, if I have an array\
    \ [1,2,3,4,5,6,7,8,9,10], I want to rescale it so that it becomes [0,0,1,0,1,1,1,0,1,1]\n\
    <|/ c |>\n<| c |>\nOh I see, I misunderstood your question. I'll edit my answer\
    \ in a bit.\n<|/ c |>\n<| c |>\nThanks for the answer. I am not trying to rescale\
    \ the numbers, I am trying to rescale the numbers in the array so that they all\
    \ have the same range. For example, if I have an array [1,2,3,4,5,6,7,8,9,10],\
    \ I want to rescale it so that it becomes [0,0,1,0,1,1,1,0,1,1]\n<|/ c |>\n<|\
    \ a tags=ruby,arrays |>\n<code>", "  numbers.each do |number|\n    number /= (numbers.min\
    \ - numbers.max).abs\n  end\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n \
    \ numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\n  numbers.min!\n  numbers.max!\n  numbers.", "  numbers.each\
    \ do |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \  end\nend", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n  end\nend", "  numbers.map { |n| n/numbers.max\
    \ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.2\
    \ |>\n<| c |>\nThanks so much for your answer! I really appreciate it. I will\
    \ try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI got this error\
    \ when trying to run your code: `undefined method 'map' for nil:NilClass`\n<|/\
    \ c |>\n<| c |>\nIt looks like `numbers` was nil. Try `numbers.try(:map)` instead\
    \ of `numbers.map`.\n<|/ c |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI got this error when trying to run your code: `undefined method 'map'\
    \ for nil:NilClass`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.map! {|n|\
    \ n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This doesn't work if you have negative numbers. `numbers.min` will give you `0`\
    \ instead of `-1`.\n<|/ c |>\n<| c |>\nI added a version that handles negative\
    \ numbers. I didn't want to change the code too much since it wasn't the focus\
    \ of the question.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map! {|n| n/numbers.max}\nend", "  numbers.min!\n \
    \ numbers.max!\n  numbers.min!\nend", "  numbers.map { |n| n / numbers.max }\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without having to use an external library. Also, why\
    \ would you not want to use an external library?\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't require an external library. Also, I don't want to use\
    \ an external library because it's overkill for this simple task. Also, it's more\
    \ efficient to just use an external library than to write your own solution that\
    \ does the same thing.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without having to use an external library. Also,\
    \ why would you not want to use an external library?\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't require an external library. Also, I don't want to use\
    \ an external library because it's overkill for this simple task. Also, it's more\
    \ efficient to just use an external library than to write your own solution that\
    \ does the same thing.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without having to use an external library. Also,\
    \ why would you not want to use an external library?\n<|/ c |>\n<| a |>\n<code>",
  "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend",
  "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map!{|x| x/numbers.max}\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so `numbers.max` returns `nil`, so `numbers.min` returns `nil`, so `numbers.max`\
    \ returns `nil`, so `numbers.min` returns `nil`, so `numbers.max` returns `nil`,\
    \ so `numbers.min` returns `nil`, so `numbers.max` returns `nil`, so `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so `numbers.max` returns `nil`, so `numbers.min` returns `nil`, so `numbers.max`\
    \ returns `nil`, so `numbers.min` returns `nil`, so `numbers.max` returns `nil`,\
    \ so `numbers.min` returns `nil`, so `numbers.max` returns `nil`, so `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so `numbers.max` returns `nil`, so `numbers.min` returns `nil`, so `numbers.max`\
    \ returns `nil`, so `numbers.min` returns `nil`, so `numbers.max` returns `nil`,\
    \ so `numbers.min` returns `nil`, so `numbers.max` returns `nil`, so `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so `numbers.max` returns `nil`, so `numbers.min` returns `nil`, so `numbers.max`\
    \ returns `nil`, so `numbers.min` returns `nil`, so `numbers.max` returns `nil`,\
    \ so `numbers.min` returns `nil`, so `numbers.max` returns `nil`, so `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so `numbers.max` returns `nil`, so `numbers.min` returns `nil`, so `numbers.max`\
    \ returns `nil`, so `numbers.min` returns `nil`, so `numbers.max` returns `nil`,\
    \ so `numbers.min` returns `nil`, so `numbers.max` returns `nil`, so `numbers.min`\
    \ returns `nil`, so `numbers.max` returns `nil`, so `numbers.min` returns `nil`,\
    \ so ", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. Your solution works great for arrays with\
    \ two elements, but fails for arrays with more than two elements. For example,\
    \ `[1,2,3]` becomes `[1/3, 2/3, 3/3]`, which is not what I want. I've updated\
    \ my question to clarify this.\n<|/ c |>\n<| c |>\n: I updated my answer to address\
    \ your updated question.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ works great for arrays with two elements, but fails for arrays with more than\
    \ two elements. For example, `[1,2,3]` becomes `[1/3, 2/3, 3/3]`, which is not\
    \ what I want. I've updated my question to clarify this.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to address your updated question.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n    numbers.min += number\n    numbers.max +=\
    \ number\n  end\nend", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n  end\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\nend", "  numbers.each do |n|\n    n /= (numbers.max\
    \ - numbers.min) if numbers.min != numbers.max\n  end\nend", "  numbers.min!\n\
    \  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map! {|n| n / numbers.max}\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like your solution, but\
    \ I wanted to avoid using map or collect because I thought they were more expensive\
    \ than a for loop. I'm going to try your solution and see how it compares.\n<|/\
    \ c |>\n<| c |>\nI tested your solution and it works great. Thanks for your help!\n\
    <|/ c |>\n<| c |>\nI tested your solution and it works great. Thanks for your\
    \ help!\n<|/ c |>\n<| a |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\nend", "  numbers.map! {|n| n/numbers.max}\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for your answer! I added some more information to my question\
    \ to clarify my intentions. I hope that makes it clearer. :)\n<|/ c |>\n<| c |>\n\
    I updated my answer to reflect your updated question. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I added some more information to my question\
    \ to clarify my intentions. I hope that makes it clearer. :)\n<|/ c |>\n<| c |>\n\
    I updated my answer to reflect your updated question. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I added some more information to my question\
    \ to clarify my intentions. I hope that makes it clearer. :)\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't seem to work. `numbers.max` returns `nil` because\
    \ `numbers` is an array. `numbers.max` returns `nil` because `numbers` is an array.\
    \ `numbers.max` returns `nil` because `numbers` is an array. `numbers.max` returns\
    \ `nil` because `numbers` is an array. `numbers.max` returns `nil` because `numbers`\
    \ is an array. `numbers.max` returns `nil` because `numbers` is an array. `numbers.max`\
    \ returns `nil` because `numbers` is an array. `numbers.max` returns `nil` because\
    \ `numbers` is an array. `numbers.max` returns `nil` because `numbers` is an array.\
    \ `numbers.max` returns `nil` because `numbers` is an array. `numbers.max` returns\
    \ `nil` because `numbers` is an array. `numbers.max` returns `nil` because `numbers`\
    \ is an array. `numbers.max` returns `nil` because `numbers` is an array. `numbers.max`\
    \ returns `nil` because `numbers` is an array. `numbers.max` returns `nil` because\
    \ `numbers` is an array. `numbers.max` returns `nil` because `numbers` is an array.\
    \ `numbers.max` returns `nil` because `numbers` is an array. `numbers.max` returns\
    \ `nil` because `numbers` is an array. `numbers.max` returns `nil` because `numbers`\
    \ is an array. `numbers.max` returns `nil` because `numbers` is an array. `numbers.max`\
    \ returns `nil` because `numbers` is an array. `numbers.max` returns `nil` because\
    \ `numbers` is an array. `numbers.max` returns `nil` because `numbers` is an array.\
    \ `numbers.max` returns `nil` because `numbers` is an array. `numbers.max` returns\
    \ `nil` because `numbers` is an array. `numbers.max` returns `nil` because `numbers`\
    \ is an array. `numbers.max` returns `nil` because `numbers` is an array. `numbers.max`\
    \ returns `nil` because `numbers` is an array. `numbers.max` returns `nil` because\
    \ `numbers` is an array. `numbers.max` returns `nil` because `numbers` is an array.\
    \ `numbers.max` returns `nil` because `numbers` is an array. `numbers.max` returns\
    \ `nil", "  numbers.map! {|n| n / numbers.max}\nend", "  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\n  numbers.max!\nend", "  numbers.each do |number|\n    number\
    \ = (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend", "  numbers.each\
    \ do |n|\n    n.to_f / numbers.min.to_f\n  end\nend", "  numbers.map { |n| n /\
    \ numbers.max }\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n/numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\nend", "  numbers.each\
    \ do |number|\n    number = (number - numbers.min) / (numbers.max - numbers.min)\n\
    \  end\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.each do |number|\n    number = number / numbers.max\n  end\n\
    end", "  numbers.min!\n  numbers.max!\n  numbers.map { |n| n * 1.0 / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each do |number|\n\
    \    number = (number - numbers.min) / (numbers.max - numbers.min)\n    numbers.min\
    \ -= number\n    numbers.max += number\n  end\nend", "  numbers.map! do |number|\n\
    \    number / numbers.max\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately I cannot use your solution as it requires me\
    \ to change my data structure to something else. I am looking for a solution that\
    \ does not require me to change my data structure.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer with a solution that does not require you to change your data structure.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use your solution\
    \ as it requires me to change my data structure to something else. I am looking\
    \ for a solution that does not require me to change my data structure.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer with a solution that does not require you to\
    \ change your data structure.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use your solution as it requires me to change my data structure to\
    \ something else. I am looking for a solution that does not require me to change\
    \ my data structure.\n<|/ c |>\n<| a dscore=1 |>\nI believe this should work:\n\
    <code>", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `numbers.map {\
    \ |n| n / numbers.max }` will divide by `nil` instead of `0`.\n<|/ c |>\n<| c\
    \ |>\nYes, you're right. I've updated my answer to handle negative numbers. Thanks.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map { |n| n * 1.0 / numbers.max }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.min!\n  numbers.max!\n  numbers.map! {|n| n/numbers.max}\n\
    end", "  numbers.map! { |n| n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks for your answer. I am not very familiar with Ruby, so I\
    \ might not understand your answer completely. Could you please explain what exactly\
    \ is happening in the `rescale_to_unit` method?\n<|/ c |>\n<| c |>\nI added some\
    \ explanation. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nThe simplest way is\
    \ to use Enumerable#minmax\n<code>\n[1,2,3,4,5].minmax", "  numbers.min!\n  numbers.max!\n\
    \  numbers.map! {|n| n/numbers.max}\nend", "  numbers.min!\n  numbers.max!\n \
    \ numbers.map! {|x| x/numbers.max}\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n\
    \  numbers.max!\nend", "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    \  numbers.min!\nend", "  numbers.each do |number|\n    number = (number - numbers.min)\
    \ / (numbers.max - numbers.min)\n  end\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>", "  numbers.min!\n  numbers.max!\n  numbers.min!\n  numbers.max!\n\
    end", "  numbers.map! { |n| n / numbers.max }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
