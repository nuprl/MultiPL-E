name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.each do |n|\n    sum = 0\n    while n > 0\n      sum += n % 10\n\
    \      n /= 10\n    end\n    return sum if sum > 0\n  end\n  return 0\nend", " \
    \ arr.each do |n|\n    if n.to_s.split('').map(&:to_i).sum > 0\n      puts \"\
    #{n} has a sum of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n \
    \   if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n \
    \   end\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n = -n\n    end\n    digits = n.to_s.split('').map(&:to_i)\n    digits.each\
    \ do |d|\n      next if d.zero?\n      d += 1 if d > 9\n      break if d > 0 &&\
    \ digits.count { |d| d > d }\n    end\n  end\n  arr.count\nend", "  arr.each do\
    \ |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n   \
    \ sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |s| s > 0 }.count\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |d|\n      d > 0\
    \ ? num += d : num -= d\n    end\n  end\n  num\nend", "  arr.each do |num|\n \
    \   if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very elegant and efficient. However I cannot\
    \ accept it because I cannot use any extra data structures. I only need to solve\
    \ this problem using arrays. I edited my question to reflect this.\n<|/ c |>\n\
    <| c |>\nI added a solution that does not use extra data structures.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I think I understand your solution. However I\
    \ cannot use any extra data structures. I only need to solve this problem using\
    \ arrays. I edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that does not use extra data structures.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I think I understand your solution. However I cannot use any\
    \ extra data structures. I only need to solve this problem using arrays. I edited\
    \ my question to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.each\
    \ do |n|\n    digits = n.to_s.split('')\n    digits.each do |d|\n      next if\
    \ d.to_i < 0\n      sum = 0\n      d.times { sum += d }\n      return sum if sum\
    \ > 0\n    end\n  end\n  0\nend", "  arr.each do |num|\n    if num < 0\n     \
    \ num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      digit = num.abs\n      digit\
    \ = digit % 10\n      num -= digit\n    end\n    digit = num.abs\n    digit =\
    \ digit % 10\n    sum += digit\n  end\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num\
    \ % 10\n    end\n    sum += num\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it with `[1,2,-3]`.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `[1,2,-3]`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `[1,2,-3]`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `[1,2,-3]`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `[1,2,-3]`.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.each do |i|\n    sum = 0\n    i.to_s.split('').each do |j|\n\
    \      sum += j if j > 0\n    end\n    if sum > 0\n      puts \"#{i} has a sum\
    \ of digits > 0\"\n    end\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').each\
    \ do |d|\n      next if d.to_i < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 10\n      break if d > 9\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 10\n      break if d > 9\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 10\n      break if d > 9\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 10\n      break if d > 9\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 10\n      break if d > 9\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 10\n      break if ", "  arr.each do |num|\n    num = num.to_i\n    sum\
    \ = 0\n    until num == 0\n      sum += num % 10\n      num /= 10\n    end\n \
    \   if sum > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').each do |d|\n  \
    \    next if d.to_i < 0\n      break if d == '9'\n      break if d == '0'\n  \
    \    break if d == '1'\n      break if d == '2'\n      break if d == '3'\n   \
    \   break if d == '4'\n      break if d == '5'\n      break if d == '6'\n    \
    \  break if d == '7'\n      break if d == '8'\n      break if d == '9'\n     \
    \ break if d == '0'\n      break if d == '1'\n      break if d == '2'\n      break\
    \ if d == '3'\n      break if d == '4'\n      break if d == '5'\n      break if\
    \ d == '6'\n      break if d == '7'\n      break if d == '8'\n      break if d\
    \ == '9'\n      break if d == '0'\n      break if d == '1'\n      break if d ==\
    \ '2'\n      break if d == '3'\n      break if d == '4'\n      break if d == '5'\n\
    \      break if d == '6'\n      break if d == '7'\n      break if d == '8'\n \
    \     break if d == '9'\n      break if d == '0'\n      break if d == '1'\n  \
    \    break if d == '2'\n      break if d == '3'\n      break if d == '4'\n   \
    \   break if d == '5'\n      break if d == '6'\n      break if d == '7'\n    \
    \  break if d == '8'\n      break if d == '9'\n      break if d == '0'\n     \
    \ break if d == '1'\n      break if d == '2'\n      break if d == '3'\n      break\
    \ if d == '4'\n      break if d == '5'\n      break if d == '6'\n      break if\
    \ d == '7'\n      break if d == '8'\n      break if d == '9'\n      break if d\
    \ == '0'\n      break if d == '1'\n      break if d == '2'\n      break if d ==\
    \ '3'\n      break if d == '4'\n      break if d == '5'\n      break if d == '6'\n\
    \      break if d == '7'\n      break if d == '8'\n      break if d == '9'\n \
    \     break if d == '0'\n      break if d == '1'\n      break if d == '2'\n  \
    \    ", "  arr.each do |n|\n    if n.to_s.chars.map(&:to_i).reduce(:+) > 0 \n\
    \      puts \"#{n} has #{count_nums(n.to_s.chars.map(&:to_i))} digits\"\n    end\n\
    \  end\nend\ncount_nums(arr)\n</code>\n<|/ a tags=ruby,arrays,recursion |>\n<|\
    \ c |>\nI like the idea of using recursion to solve this problem. I'm going to\
    \ try it out and see how it works. Thanks!\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nI added a recursive solution to my\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.each do |num|\n    if num\
    \ < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n  \
    \  digits.each do |digit|\n      digit = digit.to_i\n      next if digit == 0\n\
    \      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    ", " \
    \ arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n\
    \      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do\
    \ |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n  \
    \    sum += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n\
    \  return 0\nend", "  arr.each do |n|\n    n.to_s.split('').each do |d|\n    \
    \  next if d.to_i < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n\
    \      break if d < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n\
    \      break if d < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n\
    \      break if d < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n\
    \      break if d < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d > 9\n\
    \      break if ", "  arr.each do |num|\n    if num < 0\n      num *= -1\n   \
    \ end\n    digits = num.to_s.split('')\n    digits.each do |digit|\n      if digit.to_i\
    \ > 9\n        digit = digit.to_i - 9\n      end\n      sum += digit\n    end\n\
    \  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n\
    \    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n \
    \   return sum if sum > 0\n  end\n  return 0\nend", "  arr.each do |n|\n    if\
    \ n < 0\n      n += 100\n    end\n    sum = 0\n    while n > 0\n      sum += n\
    \ % 10\n      n /= 10\n    end\n    if sum > 0\n      puts \"#{n} has a sum of\
    \ digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n \
    \     num *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits\
    \ = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum += digit\n\
    \    end\n  end\n  sum\nend", "  arr.each do |n|\n    n.to_s.split('').each do\
    \ |d|\n      next if d.to_i < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 10\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 0\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 0\n      break if d < 10\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 0\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 0\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 0\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 0\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 0\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 0\n      break if d < 10\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 0\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 0\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 0\n      break if d < 10\n      break\
    \ if d > 9\n      break if d < 0\n      break if d < 10\n      break if d > 9\n\
    \      break if d < 0\n      break if d < 10\n      break if d > 9\n      break\
    \ if d < 0\n      break if d < 10\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 9\n      break if d < 0\n      break\
    \ if d < 10\n      break if d > 9\n      break if d < 0\n      break if d < 10\n\
    \      break if d > 9\n      break if d < 0\n      break if d < 10\n      break\
    \ if d > 9\n      break if ", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n \
    \   end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      next\
    \ if digit < 0\n      break\n    end\n    puts \"#{num} has #{digits.length} digits\"\
    \n  end\nend", "  arr.each do |n|\n    n.to_s.split('').each do |d|\n      next\
    \ if d.to_i < 0\n      break if d > 9\n      break if d < 0\n      break if d\
    \ < 10\n      break if d > 10\n      break if d < 0\n      break if d > 9\n  \
    \    break if d < 0\n      break if d < 10\n      break if d > 10\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d < 10\n\
    \      break if d > 10\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d < 10\n      break if d > 10\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d < 10\n      break\
    \ if d > 10\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 10\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d < 10\n      break if d > 10\n\
    \      break if d < 0\n      break if d > 9\n      break if d < 0\n      break\
    \ if d < 10\n      break if d > 10\n      break if d < 0\n      break if d > 9\n\
    \      break if d < 0\n      break if d < 10\n      break if d > 10\n      break\
    \ if d < 0\n      break if d > 9\n      break if d < 0\n      break if d < 10\n\
    \      break if d > 10\n      break if d < 0\n      break if d > 9\n      break\
    \ if d < 0\n      break if d < 10\n      break if d > 10\n      break if d < 0\n\
    \      break if d > 9\n      break if d < 0\n      break if d < 10\n      break\
    \ if d > 10\n      break if d < 0\n      break if d > 9\n      break if d < 0\n\
    \      break if d < 10\n      break if d > 10\n      break if d < 0\n      break\
    \ if d > 9\n      break if d < 0\n      break if d < 10\n      break if d > 10\n\
    \      break if ", "  arr.each do |num|\n    if num < 0\n      num *= -1\n   \
    \ end\n    digits = num.to_s.split('').map(&:to_i)\n    digits.each do |digit|\n\
    \      next if digit < 0\n      break if digit == 0\n      break if digit > 9\n\
    \      break if digit < 10\n      break if digit > 99\n      break if digit <\
    \ 100\n      break if digit > 999\n      break if digit < 1000\n      break if\
    \ digit > 9999\n      break if digit < 10000\n      break if digit > 99999\n \
    \     break if digit < 100000\n      break if digit > 999999\n      break if digit\
    \ < 1000000\n      break if digit > 9999999\n      break if digit < 10000000\n\
    \      break if digit > 999999999\n      break if digit < 100000000\n      break\
    \ if digit > 99999999999\n      break if digit < 1000000000\n      break if digit\
    \ > 999999999000\n      break if digit < 10000000000\n      break if digit > 99999999999000\n\
    \      break if digit < 100000000000\n      break if digit > 999999999999999\n\
    \      break if digit < 10000000000000\n      break if digit > 9999999999999999\n\
    \      break if digit < 1000000000000000\n      break if digit > 9999999999999999999\n\
    \      break if digit < 10000000000000000\n      break if digit > 99999999999999999999\n\
    \      break if digit < 100000000000000000\n      break if digit > 99999999999999999999999\n\
    \      break if digit < 1000000000000000000\n      break if digit > 999999999999999999999999\n\
    \      break if digit < 10000000000000000000\n      break if digit > 999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000\n      break if digit > 9999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000\n      break if digit > 9999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000\n      break if digit > 99999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000\n      break if digit > 99999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000000\n      break if digit > 999999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000000\n      break if digit > 999999999999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000000\n      break if digit > ",
  "  arr.each do |num|\n    if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    if\
    \ num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n \
    \ end\n  sum\nend", "  arr.each do |i|\n    digits = i.to_s.split('')\n    digits.each\
    \ do |d|\n      digit = d.to_i\n      next if digit < 0\n      break if digit\
    \ == 0\n      sum += digit\n    end\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num = num.abs\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      next if digit < 0\n      break if digit ==\
    \ 0\n      break if digit > 9\n      break if digit < 10\n      break if digit\
    \ > 99\n      break if digit < 100\n      break if digit > 999\n      break if\
    \ digit < 1000\n      break if digit > 9999\n      break if digit < 10000\n  \
    \    break if digit > 99999\n      break if digit < 100000\n      break if digit\
    \ > 999999\n      break if digit < 1000000\n      break if digit > 9999999\n \
    \     break if digit < 10000000\n      break if digit > 999999999\n      break\
    \ if digit < 100000000\n      break if digit > 99999999999\n      break if digit\
    \ < 1000000000\n      break if digit > 999999999999999\n      break if digit <\
    \ 1000000000000\n      break if digit > 9999999999999999999\n      break if digit\
    \ < 1000000000000000\n      break if digit > 99999999999999999999999\n      break\
    \ if digit < 10000000000000000\n      break if digit > 999999999999999999999999999\n\
    \      break if digit < 1000000000000000000\n      break if digit > 9999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000\n      break if digit > 99999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000\n      break if digit > 999999999999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000\n      break if digit > 9999999999999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000\n      break if digit > 99999999999999999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000\n      break if digit > 999999999999999999999999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000\n      break if digit > 9999999999999999999999999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000000\n      break if digit > 99999999999999999999999999999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000000\n      break if digit > 999999999999999999999999999999999999999999999999999999999999999\n\
    \      break if digit < 100000000000000000000000000", "  arr.each do |i|\n   \
    \ i = i.to_i\n    break if i == 0\n    break if i < 0\n    break if i > 9\n  \
    \  break if i < 10\n    break if i > 99\n    break if i < 100\n    break if i\
    \ > 999\n    break if i < 1000\n    break if i > 9999\n    break if i < 10000\n\
    \    break if i > 99999\n    break if i < 100000\n    break if i > 999999\n  \
    \  break if i < 1000000\n    break if i > 9999999\n    break if i < 10000000\n\
    \    break if i > 999999999\n    break if i < 100000000\n    break if i > 99999999999\n\
    \    break if i < 1000000000\n    break if i > 999999999999\n    break if i <\
    \ 10000000000\n    break if i > 999999999999999\n    break if i < 1000000000000\n\
    \    break if i > 999999999999999999\n    break if i < 1000000000000000\n    break\
    \ if i > 999999999999999999999\n    break if i < 10000000000000000\n    break\
    \ if i > 9999999999999999999998\n    break if i < 100000000000000000\n    break\
    \ if i > 99999999999999999999987\n    break if i < 1000000000000000000\n    break\
    \ if i > 9999999999999999999998765\n    break if i < 10000000000000000000\n  \
    \  break if i > 99999999999999999999987654\n    break if i < 100000000000000000000\n\
    \    break if i > 9999999999999999999998765432\n    break if i < 1000000000000000000000\n\
    \    break if i > 999999999999999999999876543210\n    break if i < 10000000000000000000000\n\
    \    break if i > 999999999999999999999876543210123\n    break if i < 100000000000000000000000\n\
    \    break if i > 9999999999999999999998765432101234\n    break if i < 1000000000000000000000000\n\
    \    break if i > 99999999999999999999987654321012345\n    break if i < 10000000000000000000000000\n\
    \    break if i > 999999999999999999999876543210123456\n    break if i < 100000000000000000000000000\n\
    \    break if i > 9999999999999999999998765432101234567\n    break if i < 1000000000000000000000000000\n\
    \    break if i > 99999999999999999999987654321012345678\n    break if i < 10000000000000000000000000000\n\
    \    break if i > 999999999999999999999876543210123456789\n    break if i < 1000000000000000000000000000000\n\
    \    break if i > 99999999999999999999987654321012345678901\n    break if i <\
    \ 10000000000000000000000000000001\n    break if i > 999999999999999999999876543210123456789012\n\
    \    break", "  arr.each do |n|\n    n += n.to_s.chars.map(&:to_i).max\n  end\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n\
    \    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return sum\
    \ if sum > 0\n  end\n  0\nend", "  arr.each do |num|\n    num = num.to_i\n   \
    \ if num > 0\n      sum = 0\n      while num > 0\n        sum += num % 10\n  \
    \      num /= 10\n      end\n      return sum if sum > 0\n    end\n  end\n  0\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n    sum\
    \ += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", " \
    \ arr.each do |i|\n    if i < 0\n      i = -i - 1\n    end\n    digits = i.to_s.split(//).map(&:to_i)\n\
    \    digits.each do |d|\n      next if d < 0\n      break if d > 9\n      break\
    \ if d < 10\n      break if d > 99\n      break if d < 100\n      break if d >\
    \ 999\n      break if d < 1000\n      break if d > 9999\n      break if d < 10000\n\
    \      break if d > 99999\n      break if d < 100000\n      break if d > 999999\n\
    \      break if d < 1000000\n      break if d > 9999999\n      break if d < 10000000\n\
    \      break if d > 999999999\n      break if d < 100000000\n      break if d\
    \ > 99999999999\n      break if d < 1000000000\n      break if d > 999999999000\n\
    \      break if d < 10000000000\n      break if d > 99999999999000\n      break\
    \ if d < 100000000000\n      break if d > 999999999999999\n      break if d <\
    \ 10000000000000\n      break if d > 9999999999999999\n      break if d < 1000000000000000\n\
    \      break if d > 9999999999999999999\n      break if d < 10000000000000000\n\
    \      break if d > 99999999999999999999\n      break if d < 100000000000000000\n\
    \      break if d > 99999999999999999999999\n      break if d < 1000000000000000000\n\
    \      break if d > 999999999999999999999999\n      break if d < 10000000000000000000\n\
    \      break if d > 999999999999999999999999999\n      break if d < 100000000000000000000\n\
    \      break if d > 9999999999999999999999999999\n      break if d < 1000000000000000000000\n\
    \      break if d > 9999999999999999999999999999999\n      break if d < 10000000000000000000000\n\
    \      break if d > 99999999999999999999999999999999\n      break if d < 100000000000000000000000\n\
    \      break if d > 99999999999999999999999999999999999\n      break if d < 1000000000000000000000000\n\
    \      break if d > 999999999999999999999999999999999999\n      break if d < 10000000000000000000000000\n\
    \      break if d > 999999999999999999999999999999999999999\n      break if d\
    \ < 100000000000000000000000000\n      break if d > 9999999999999999999999999999",
  "  arr.each do |i|\n    if i < 0\n      i -= i.abs\n    end\n    break if i >= 10\n\
    \    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n  end\n  arr.each do |i|\n\
    \    arr[i] = arr[i].abs\n  end\n  arr.each do |i|\n    arr[i] = arr[i].to_i\n\
    \  end\n  arr.each do |i|\n    arr[i] = arr[i].abs\n  end", "  arr.each do |num|\n\
    \    num = num.to_i\n    if num > 0\n      num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    end\n    if num > 0\n      puts \"#{num}\"\n    end\n  end\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n\
    \      sum += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n\
    \  0\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n \
    \   sum = 0\n    while num > 0\n      sum += num % 10\n      num /= 10\n    end\n\
    \    return sum if sum > 0\n  end\n  0\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n \
    \     n /= 10\n    end\n    if sum > 0\n      puts \"#{n} has a sum of digits\
    \ > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend",
  "  arr.each do |n|\n    if n.to_s.split('').inject(:+) > 0 \n      puts \"#{n} has\
    \ #{count_nums(n.to_s.split('').map { |d| d.to_i })} digits\"\n    end\n  end\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n\
    \    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    if sum > 0\n\
    \      puts \"#{n} has a sum of digits > 0\"\n    end\n  end\nend", "  arr.each\
    \ do |i|\n    if i < 0\n      i += 9\n    end\n    break if i >= 10\n    break\
    \ if i >= 100\n    break if i >= 1000\n    break if i >= 10000\n    break if i\
    \ >= 100000\n    break if i >= 1000000\n    break if i >= 10000000\n    break\
    \ if i >= 100000000\n    break if i >= 1000000000\n    break if i >= 10000000000\n\
    \    break if i >= 100000000000\n    break if i >= 1000000000000\n    break if\
    \ i >= 10000000000000\n    break if i >= 100000000000000\n    break if i >= 1000000000000000\n\
    \    break if i >= 10000000000000000\n    break if i >= 100000000000000000\n \
    \   break if i >= 1000000000000000000\n  end\n  arr.count\nend", "  arr.each do\
    \ |num|\n    if num < 0\n      num *= -1\n      digit = num.abs\n      num -=\
    \ digit\n    end\n    digit = num.abs\n    sum = 0\n    while num > 0\n      sum\
    \ += num % 10\n      num /= 10\n    end\n    return sum if sum > 0\n  end\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n \
    \   end\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    n += n % 10\n  end\n  arr.count{ |n| n > 0 }\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n    digits = num.to_s.split(//).map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num.abs\n  \
    \  end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num <\
    \ 0\n      num *= -1\n    end\n    sum = 0\n    while num > 0\n      sum += num\
    \ % 10\n      num /= 10\n    end\n    if sum > 0\n      puts \"#{num} has a sum\
    \ of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      if digit > 0\n        puts \"#{num} has #{digit}\
    \ digits\"\n      else\n        puts \"#{num} has negative first digit #{digit}\"\
    \n      end\n    end\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    if num > 0\n      nums.times do |i|\n        if num % 10 == i\n         \
    \ nums -= 1\n        end\n      end\n    end\n  end\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    if num > 0\n      num = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    else\n      num = num.to_s.chars.map(&:to_i).reduce(:+) * -1\n    end\n \
    \ end\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(0) { |sum, digit|\
    \ sum + digit }\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n    end\n    digits = num.to_s.reverse.split('').reverse\n    digits.each\
    \ do |digit|\n      digit = digit.to_i\n      if digit > 0\n        sum += digit\n\
    \      end\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n  \
    \    n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n   \
    \   n /= 10\n    end\n    return sum if sum > 0\n  end\n  0\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n\
    \    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n \
    \   end\n    if sum > 0\n      puts \"#{n} has a sum of digits > 0\"\n    end\n\
    \  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign\
    \ = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=ruby,algorithm |>\n<code>", "  arr.each\
    \ do |num|\n    num = num.to_i\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n    num\
    \ = num.abs\n    ", "  arr.each do |num|\n    if num < 0\n      num = -num\n \
    \   end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      if digit > 0\n        digit = digit-1\n      end\n      break if digit\
    \ == 0\n    end\n    break if digits.size == 0\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n\
    \      sum += num % 10\n      num /= 10\n    end\n    if sum > 0\n      puts num\n\
    \    end\n  end\nend", "  arr.each do |i|\n    sum = 0\n    i.to_s.split('').each\
    \ do |j|\n      sum += j if j > 0\n    end\n    if sum > 0\n      puts \"#{i}\
    \ has #{sum} digits\"\n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n \
    \     n /= 10\n    end\n    if sum > 0\n      puts n\n    end\n  end\nend", " \
    \ arr.each do |n|\n    n += 1 if n.to_s.chars.map(&:to_i).sum > 0\n  end\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n \
    \   end\n    sum += num\n  end\n  sum\nend", "  arr.each do |n|\n    digits =\
    \ n.to_s.split('')\n    digits.each do |d|\n      next if d.to_i < 0\n      break\
    \ if d > 9\n      count += 1 if d >= 0\n    end\n  end\n  count\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n\
    \      sum += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n\
    \  0\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum\
    \ = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return\
    \ sum if sum > 0\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do\
    \ |digit|\n      next if digit < 0\n      break if digit == 0\n      break if\
    \ digit > 9\n      break if digit < 10\n      break if digit > 99\n      break\
    \ if digit < 100\n      break if digit > 999\n      break if digit < 1000\n  \
    \    break if digit > 9999\n      break if digit < 10000\n      break if digit\
    \ > 99999\n      break if digit < 100000\n      break if digit > 999999\n    \
    \  break if digit < 1000000\n      break if digit > 9999999\n      break if digit\
    \ < 10000000\n      break if digit > 999999999\n      break if digit < 100000000\n\
    \      break if digit > 99999999999\n      break if digit < 1000000000\n     \
    \ break if digit > 999999999000\n      break if digit < 100000000000\n      break\
    \ if digit > 99999999999000\n      break if digit < 1000000000000\n      break\
    \ if digit > 999999999999999\n      break if digit < 100000000000000\n      break\
    \ if digit > 9999999999999999\n      break if digit < 10000000000000000\n    \
    \  break if digit > 9999999999999999999\n      break if digit < 100000000000000000\n\
    \      break if digit > 99999999999999999999\n      break if digit < 1000000000000000000\n\
    \      break if digit > 99999999999999999999999\n      break if digit < 10000000000000000000\n\
    \      break if digit > 999999999999999999999999\n      break if digit < 100000000000000000000\n\
    \      break if digit > 999999999999999999999999999\n      break if digit < 1000000000000000000000\n\
    \      break if digit > 9999999999999999999999999999\n      break if digit < 10000000000000000000000\n\
    \      break if digit > 9999999999999999999999999999999\n      break if digit\
    \ < 100000000000000000000000\n      break if digit > 99999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000\n      break if digit > 99999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000000\n      break if digit > 999999999999999999999999999999999999\n\
    \      break if digit < 1000000000000000000000000000\n      break if digit > 999999999999999999999999999999999999999\n\
    \      break if digit < 10000000000000000000000000000\n      break if ", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n    end\n    n.to_s.split('').select {\
    \ |d| d > 0 }.count\n  end\nend", "  arr.each do |i|\n    if i.is_a? Integer\n\
    \      sum += i if i.to_s.chars.map(&:to_i).reduce(:+) > 0\n    end\n  end\n \
    \ sum\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm |>\n<| c |>\nI like your\
    \ solution, however it fails for negative numbers. I added a solution that works\
    \ for negative numbers. I hope you don't mind.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works for negative numbers. I hope you don't mind.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  arr.each do |n|\n    if n.is_a?(Integer) && n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0\n      puts \"#{n} has #{count_nums(n.to_s.chars.map(&:to_i).reduce(:+))}\
    \ digits\"\n    end\n  end\nend", "  arr.each do |n|\n    sum = 0\n    while n\
    \ > 0\n      sum += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n\
    \  end\n  0\nend", "  arr.each do |num|\n    num = num.to_i\n    return num if\
    \ num > 0\n    num = num.abs\n    num = num.to_s.chars.first\n    num = num.to_i\n\
    \    return num if num > 0\n  end\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      sum += digit\n    end\n  end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI added a solution that doesn't require any looping at all.\n<|/\
    \ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n      arr << n\n    end\n  end\n  arr.count{ |n| n > 0 }\nend",
  "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while\
    \ n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return sum if sum >\
    \ 0\n  end\n  0\nend", "  arr.each do |n|\n    if n < 0\n      n += 100\n    end\n\
    \    n -= n % 10\n  end\n  arr.count\nend", "  arr.each do |i|\n    if i < 0\n\
    \      i = -i\n    end\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n\
    \    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n \
    \   i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n  \
    \  i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n   \
    \ i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i\
    \ = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i =\
    \ i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n\
    \    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n \
    \   i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n  \
    \  i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n   \
    \ i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i\
    \ = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i =\
    \ i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n\
    \    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n \
    \   i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n  \
    \  i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n   \
    \ i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i\
    \ = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i =\
    \ i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n    i = i.abs\n\
    \    i = i.abs\n    i = i.abs\n", "  arr.each do |num|\n    num = num.to_i\n \
    \   return num if num > 0\n    num = num.abs\n    return num if num < 0\n  end\n\
    end", "  arr.each do |n|\n    sum = 0\n    while n > 0\n      sum += n % 10\n\
    \      n /= 10\n    end\n    return sum if sum > 0\n  end\nend", "  arr.each do\
    \ |num|\n    if num < 0\n      num = -num\n    end\n    sum = 0\n    while num\
    \ > 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum > 0\n     \
    \ puts num\n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n +=\
    \ 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n\
    \    end\n    return sum if sum > 0\n  end\nend", "  arr.each do |n|\n    if n\
    \ < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n %\
    \ 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    if num > 0\n      sum = 0\n      while num\
    \ > 0\n        sum += num % 10\n        num /= 10\n      end\n      if sum > 0\n\
    \        puts \"#{num} has a sum of digits > 0\"\n      end\n    end\n  end\n\
    end", "  arr.each do |n|\n    digits = n.to_s.split('').map(&:to_i)\n    digits.each\
    \ do |d|\n      next if d < 0\n      break if d > 9\n      break if d < 10\n \
    \     break if d > 99\n      break if d < 100\n      break if d > 999\n      break\
    \ if d < 1000\n      break if d > 9999\n      break if d < 10000\n      break\
    \ if d > 99999\n      break if d < 100000\n      break if d > 999999\n      break\
    \ if d < 1000000\n      break if d > 9999999\n      break if d < 10000000\n  \
    \    break if d > 999999999\n      break if d < 100000000\n      break if d >\
    \ 99999999999\n      break if d < 1000000000\n      break if d > 999999999999\n\
    \      break if d < 10000000000\n      break if d > 999999999999999\n      break\
    \ if d < 1000000000000\n      break if d > 999999999999999999\n      break if\
    \ d < 100000000000000\n      break if d > 999999999999999999999\n      break if\
    \ d < 10000000000000000\n      break if d > 999999999999999999999\n      break\
    \ if d < 100000000000000000\n      break if d > 999999999999999999999\n      break\
    \ if d < 1000000000000000000\n      break if d > 999999999999999999999\n     \
    \ break if d < 10000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 100000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 1000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 10000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 100000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 1000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 10000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 100000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 1000000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 10000000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 100000000000000000000000000000\n      break if d > 999999999999999999999\n\
    \      break if d < 1000000000000000000000000000000\n      ", "  arr.each do |n|\n\
    \    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n      break if d\
    \ == '9'\n      break if d == '8'\n      break if d == '7'\n      break if d ==\
    \ '6'\n      break if d == '5'\n      break if d == '4'\n      break if d == '3'\n\
    \      break if d == '2'\n      break if d == '1'\n      break if d == '0'\n \
    \     break if d == '-1'\n      break if d == '-2'\n      break if d == '-3'\n\
    \      break if d == '-4'\n      break if d == '-5'\n      break if d == '-6'\n\
    \      break if d == '-7'\n      break if d == '-8'\n      break if d == '-9'\n\
    \      break if d == '-10'\n      break if d == '-11'\n      break if d == '-12'\n\
    \      break if d == '-13'\n      break if d == '-14'\n      break if d == '-15'\n\
    \      break if d == '-16'\n      break if d == '-17'\n      break if d == '-18'\n\
    \      break if d == '-19'\n      break if d == '-20'\n      break if d == '-21'\n\
    \      break if d == '-22'\n      break if d == '-23'\n      break if d == '-24'\n\
    \      break if d == '-25'\n      break if d == '-26'\n      break if d == '-27'\n\
    \      break if d == '-28'\n      break if d == '-29'\n      break if d == '-30'\n\
    \      break if d == '-31'\n      break if d == '-32'\n      break if d == '-33'\n\
    \      break if d == '-34'\n      break if d == '-35'\n      break if d == '-36'\n\
    \      break if d == '-37'\n      break if d == '-38'\n      break if d == '-39'\n\
    \      break if d == '-40'\n      break if d == '-41'\n      break if d == '-42'\n\
    \      break if d == '-43'\n      break if d == '-44'\n      break if d == '-45'\n\
    \      break if d == '-46'\n      break if d == '-47'\n      break if d == '-48'\n\
    \      ", "  arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n   \
    \ digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum +=\
    \ digit\n    end\n  end\n  sum\nend", "  arr.each do |i|\n    if i.is_a? Integer\n\
    \      puts \"#{i} has signed digits #{i.abs}\"\n    elsif i.is_a? String\n  \
    \    puts \"#{i} has signed digits #{i.split('').map(&:to_i).map(&:abs).join(',')}\"\
    \n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n\
    \    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n \
    \   if sum > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    sum = 0\n    while num > 0\n      sum += num % 10\n \
    \     num /= 10\n    end\n    if sum > 0\n      puts \"#{num} has a sum of digits\
    \ > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", " \
    \ arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      if digit > 0\n  \
    \      sum += digit\n      end\n    end\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      if digit > 0\n        break digit\n      end\n\
    \    end\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    sum = 0\n\
    \    while num > 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum\
    \ > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |num|\n   \
    \ num = num.to_i\n    return num if num > 0\n    num = num.abs\n    num = num.to_i\n\
    \    return num if num > 0\n  end\nend", "  arr.each do |n|\n    if n < 0\n  \
    \    n += 10\n      n -= 1\n    end\n    sum = 0\n    while n > 0\n      sum +=\
    \ n % 10\n      n /= 10\n    end\n    if sum > 0\n      puts n\n    end\n  end\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    return num if num > 0\n  \
    \  num = num.abs\n    return num if num < 0\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n    end\n    digits = num.to_s.split('')\n \
    \   digits.each do |digit|\n      digit = digit.to_i\n      if digit > 0\n   \
    \     sum += digit\n      end\n    end\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n \
    \   end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      if digit > 0\n        puts digit\n      end\n    end\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a bit.\
    \ For example, `sum` can be replaced with `arr.inject(0){|sum, num| sum + num}`.\
    \ Also, the `if` statement can be replaced with `if num < 0`.\n<|/ c |>\n<| c\
    \ |>\nThanks for the suggestions. I agree that `sum` can be replaced with `arr.inject(0){|sum,\
    \ num| sum + num}`. However, I believe that `if` statement can be replaced with\
    \ `if num < 0` because `num` can be negative and `num % 10` will give the sign\
    \ of the number. Also, `num *= -1` can be replaced with `num -= num % 10`.\n<|/\
    \ c |>\n<| c |>\nI agree with your point about `if` statement, but I believe that\
    \ `num *= -1` can be replaced with `num -= num % 10`. `num *= -1` will multiply\
    \ `num` by -1 and `num -= num % 10` will subtract `num` by `num % 10`. So, `num\
    \ *= -1` will multiply `num` by -1 and `num -= num % 10` will subtract `num` by\
    \ `num % 10`.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that `num *= -1`\
    \ will multiply `num` by -1. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    I believe that `num *= -1` can be replaced with `num -= num % 10`. `num *= -1`\
    \ will multiply `num` by -1 and `num -= num % 10` will subtract `num` by `num\
    \ % 10`.\n<|/ c |>\n<| a |>\n<code>", "  arr.each do |num|\n    if num < 0\n \
    \     num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      sum += digit\n    end\n  end\nend", "  arr.each do |n|\n \
    \   n.to_s.split('').each do |c|\n      next if c.to_i < 0\n      break if c.to_i\
    \ == 0\n      break if c.to_i > 9\n      break if c.to_i < 10\n      break if\
    \ c.to_i > 99\n      break if c.to_i < 100\n      break if c.to_i > 999\n    \
    \  break if c.to_i < 1000\n      break if c.to_i > 9999\n      break if c.to_i\
    \ < 10000\n      break if c.to_i > 99999\n      break if c.to_i < 100000\n   \
    \   break if c.to_i > 999999\n      break if c.to_i < 1000000\n      break if\
    \ c.to_i > 9999999\n      break if c.to_i < 10000000\n      break if c.to_i >\
    \ 99999999\n      break if c.to_i < 100000000\n      break if c.to_i > 999999999\n\
    \      break if c.to_i < 1000000000\n      break if c.to_i > 99999999999\n   \
    \   break if c.to_i < 10000000000\n      break if c.to_i > 999999999999\n    \
    \  break if c.to_i < 100000000000\n      break if c.to_i > 999999999999999\n \
    \     break if c.to_i < 100000000000000\n      break if c.to_i > 999999999999999999\n\
    \      break if c.to_i < 10000000000000000\n      break if c.to_i > 9999999999999999999\n\
    \      break if c.to_i < 100000000000000000\n      break if c.to_i > 9999999999999999999999\n\
    \      break if c.to_i < 1000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 100000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 1000000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 10000000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 100000000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 1000000000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 10000000000000000000000000\n      break if c.to_i > 999999999999999999999\n\
    \      break if c.to_i < 100000000000000000000000000\n      break if c.to_i >\
    \ 999999999999999999999\n      break if c.to_i < 1000000000000000000000000000\n\
    \      break if c.to_i > 999999999999999999999\n      break if c.to_i < 10000000000000000000000000000\n\
    \      break if c.to_i > 999999999999999999999\n      break if ", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n\
    \    sum += num\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n\
    \    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n \
    \   end\n    return sum if sum > 0\n  end\n  return 0\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum\
    \ += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n  return\
    \ 0\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -=\
    \ num % 10\n    end\n    sum += num\n  end\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n \
    \ end\n  sum\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n      arr\
    \ << n\n    end\n  end\n  arr.inject(0) {|sum, n| sum + n if sum + n.to_s.split(//).sum.to_i\
    \ > 0 }\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      if\
    \ digit > 0\n        break digit\n      end\n    end\n  end\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    num = num.to_s.split('')\n    num = num.select { |x| x.to_i > 0}.count\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThanks for your answer.\
    \ Your solution works perfectly for positive numbers. But for negative numbers\
    \ it returns `0` instead of `-1`.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution for negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    digits\
    \ = n.to_s.chars.map(&:to_i)\n    digits.each do |d|\n      if d > 0\n       \
    \ puts \"#{n} has #{d} digits\"\n      end\n    end\n  end\nend", "  arr.each\
    \ do |n|\n    n.to_s.split('').each do |d|\n      d > 0 ? n += 1 : n\n    end\n\
    \  end\n  n\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n  \
    \  end\n    sum = 0\n    while num > 0\n      sum += num % 10\n      num /= 10\n\
    \    end\n    return sum if sum > 0\n  end\n  return 0\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    if num > 0\n      num = num.abs\n      sum = 0\n    \
    \  while num > 0\n        sum += num % 10\n        num /= 10\n      end\n    \
    \  if sum > 0\n        puts \"#{sum}\"\n      end\n    end\n  end\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.reduce(:+).to_i > 0\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the array. For example,\
    \ `count_nums([-1, -2, -3])` returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it before I saw your comment. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI added a version that doesn't require negative\
    \ numbers. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n    while\
    \ n > 0\n      sum += n % 10\n      n /= 10\n    end\n    if sum > 0\n      puts\
    \ \"#{n} has a sum of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a little more. `arr.each do |num| sum +=\
    \ num if num < 0 end` should do the trick.\n<|/ c |>\n<| c |>\nYes, that would\
    \ work. Thanks for the suggestion.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I believe it can be simplified a little more. `arr.each do |num| sum += num\
    \ if num < 0 end` should do the trick.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a little more. `arr.each do |num| sum +=\
    \ num if num < 0 end` should do the trick.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a little more. `arr.each do |num| sum +=\
    \ num if num < 0 end` should do the trick.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  arr.each do |n|\n    if n.to_s.split('').map(&:to_i).sum > 0\n      puts \"#{n}\
    \ has a sum of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    if num > 0\n      num = num.abs\n      num = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \      num += 1 if num > 9\n    end\n  end\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum = 0\n      while digit > 0\n        sum\
    \ += digit\n        digit -= 1\n      end\n      return sum if sum > 0\n    end\n\
    \  end\n  0\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n   \
    \   num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your solution, but I believe it would be better to use\
    \ a `while` loop to avoid the extra `if` statement in the `count_nums` method.\
    \ Also, `sum` should be initialized to `0` before the `each` loop.\n<|/ c |>\n\
    <| c |>\nThanks for the suggestions. I agree that a `while` loop would be better.\
    \ I also agree that `sum` should be initialized to `0` before the `each` loop.\
    \ I will update my answer.\n<|/ c |>\n<| c |>\nThanks for the answer. I am not\
    \ able to understand why you are using while loop. Can you please explain me the\
    \ logic behind it?\n<|/ c |>\n<| c |>\nThe `while` loop will continue until `sum`\
    \ is greater than `0`. When `sum` is greater than `0`, then `sum` will be incremented\
    \ by `num`. The `while` loop will continue until `sum` is greater than `0`. When\
    \ `sum` is greater than `0`, then `sum` will be incremented by `num`. The `while`\
    \ loop will continue until `sum` is greater than `0`. When `sum` is greater than\
    \ `0`, then `sum` will be incremented by `num`. The `while` loop will continue\
    \ until `sum` is greater than `0`. When `sum` is greater than `0`, then `sum`\
    \ will be incremented by `num`. The `while` loop will continue until `sum` is\
    \ greater than `0`. When `sum` is greater than `0`, then `sum` will be incremented\
    \ by `num`. The `while` loop will continue until `sum` is greater than `0`. When\
    \ `sum` is greater than `0`, then `sum` will be incremented by `num`. The `while`\
    \ loop will continue until `sum` is greater than `0`. When `sum` is greater than\
    \ `0`, then `sum` will be incremented by `num`. The `while` loop will continue\
    \ until `sum` is greater than `0`. When `sum` is greater than `0`, then `sum`\
    \ will be incremented by `num`. The `while` loop will continue until `sum` is\
    \ greater than `0`. When `sum` is greater than `0`, then `sum` will be incremented\
    \ by `num`. The `while` loop will continue until `sum` is greater than `0`. When ",
  "  arr.each do |n|\n    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n\
    \      break if d == '-'\n      break if d == '+'\n      break if d == '0'\n \
    \     break if d == '1'\n      break if d == '2'\n      break if d == '3'\n  \
    \    break if d == '4'\n      break if d == '5'\n      break if d == '6'\n   \
    \   break if d == '7'\n      break if d == '8'\n      break if d == '9'\n    \
    \  break if d == '0'\n      break if d == '1'\n      break if d == '2'\n     \
    \ break if d == '3'\n      break if d == '4'\n      break if d == '5'\n      break\
    \ if d == '6'\n      break if d == '7'\n      break if d == '8'\n      break if\
    \ d == '9'\n      break if d == '0'\n      break if d == '1'\n      break if d\
    \ == '2'\n      break if d == '3'\n      break if d == '4'\n      break if d ==\
    \ '5'\n      break if d == '6'\n      break if d == '7'\n      break if d == '8'\n\
    \      break if d == '9'\n      break if d == '0'\n      break if d == '1'\n \
    \     break if d == '2'\n      break if d == '3'\n      break if d == '4'\n  \
    \    break if d == '5'\n      break if d == '6'\n      break if d == '7'\n   \
    \   break if d == '8'\n      break if d == '9'\n      break if d == '0'\n    \
    \  break if d == '1'\n      break if d == '2'\n      break if d == '3'\n     \
    \ break if d == '4'\n      break if d == '5'\n      break if d == '6'\n      break\
    \ if d == '7'\n      break if d == '8'\n      break if d == '9'\n      break if\
    \ d == '0'\n      break if d == '1'\n      break if d == '2'\n      break if d\
    \ == '3'\n      break if d == '4'\n      break if d == '5'\n      break if d ==\
    \ '6'\n      break if d == '7'\n      break if d == '8'\n      break if d == '9'\n\
    \      break if d == '0'\n      break if d == '1'\n      break", "  arr.each do\
    \ |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += n % 10\n \
    \ end\n  arr.count{ |n| n > 0 }\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n    sum = 0\n\
    \    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return sum\
    \ if sum > 0\n  end\n  return 0\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    sum = 0\n    until num == 0\n      sum += num % 10\n      num /= 10\n   \
    \ end\n    if sum > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each\
    \ do |i|\n    i = i.abs\n    i = i.to_s\n    i = i.split(//)\n    i = i.map {\
    \ |e| e.to_i }\n    i = i.select { |e| e > 0 }\n    i = i.count\n  end\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      if digit > 0\n  \
    \      digit = digit.to_i\n      else\n        digit = digit.to_i\n      end\n\
    \    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 100\n    end\n\
    \    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n \
    \   return sum if sum > 0\n  end\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      num -= num.abs\n    end\n    puts num\n  end\nend", " \
    \ arr.each do |num|\n    num = num.to_i\n    return num if num > 0\n    num =\
    \ num.abs\n    num = num.to_i\n    return num if num > 0\n  end\n  0\nend", " \
    \ arr.each do |num|\n    num = num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      next if digit < 0\n      break if digit ==\
    \ 0\n      break if digit > 9\n      break if digit < 10\n      break if digit\
    \ > 99\n      break if digit < 100\n      break if digit > 999\n      break if\
    \ digit < 1000\n      break if digit > 9999\n      break if digit < 10000\n  \
    \    break if digit > 99999\n      break if digit < 100000\n      break if digit\
    \ > 999999\n      break if digit < 1000000\n      break if digit > 9999999\n \
    \     break if digit < 10000000\n      break if digit > 999999999\n      break\
    \ if digit < 100000000\n      break if digit > 99999999999\n      break if digit\
    \ < 1000000000\n      break if digit > 999999999000\n      break if digit < 10000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 1000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 10000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 1000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 10000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 1000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 10000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 1000000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 10000000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 1000000000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 10000000000000000000000000\n\
    \      break if digit > 99999999999000\n      break if digit < 100000000000000000000000000\n\
    \      break if digit > 99999999999000\n", "  arr.each do |num|\n    if num <\
    \ 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |n|\n    n.to_s.split('').each do |d|\n      d +=\
    \ 1 if d > 0\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe it can be improved. For example, `count_nums([-1,\
    \ -2, -3]) #=> 2` should be `count_nums([-1, -2, -3]) #=> 0`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 0` should be `count_nums([-1, -2, -3]) #=> 1`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 1` should be `count_nums([-1, -2, -3]) #=> 2`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 2` should be `count_nums([-1, -2, -3]) #=> 3`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 3` should be `count_nums([-1, -2, -3]) #=> 4`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 4` should be `count_nums([-1, -2, -3]) #=> 5`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 5` should be `count_nums([-1, -2, -3]) #=> 6`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 6` should be `count_nums([-1, -2, -3]) #=> 7`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 7` should be `count_nums([-1, -2, -3]) #=> 8`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 8` should be `count_nums([-1, -2, -3]) #=> 9`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 9` should be `count_nums([-1, -2, -3]) #=> 10`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 10` should be `count_nums([-1, -2, -3]) #=> 11`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 11` should be `count_nums([-1, -2, -3]) #=> 12`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 12` should be `count_nums([-1, -2, -3]) #=> 13`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 13` should be `count_nums([-1, -2, -3]) #=> 14`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 14` should be `count_nums([-1, -2, -3]) #=> 15`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 15` should be `count_nums([-1, -2, -3]) #=> 16`. Also, `count_nums([-1,\
    \ -2, -3]) #=> 16", "  arr.each do |num|\n    num = num.to_i\n    sum = 0\n  \
    \  while num > 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum\
    \ > 0\n      puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |n|\n    if\
    \ n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n\
    \ % 10\n      n /= 10\n    end\n    if sum > 0\n      puts \"#{sum}\"\n    end\n\
    \  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num\
    \ -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    return num if num > 0\n    num = num.abs\n    num = num.to_s.split('')\n\
    \    num = num.select { |x| x.to_i > 0 }\n    num = num.count\n  end\nend", " \
    \ arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num % 10\n\
    \    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work. Try\
    \ it with `[-123, -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, -18]`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `[-123, -456, -7, -9, -10, -12,\
    \ -13, -14, -15, -16, -17, -18]`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `[-123, -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, -18]`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with `[-123, -456, -7, -9, -10, -12, -13, -14,\
    \ -15, -16, -17, -18]`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `[-123,\
    \ -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, -18]`\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num\
    \ -= num % 10\n    end\n    sum += num\n  end\nend", "  arr.each do |num|\n  \
    \  if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\nend", "  arr.each do |num|\n    if num < 0\n      num = num.abs\n    \
    \  num -= num % 10\n    end\n    sum = 0\n    while num > 0\n      sum += num\
    \ % 10\n      num /= 10\n    end\n    if sum > 0\n      puts \"#{num} has a sum\
    \ of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    num = num.abs\n\
    \    num = num.abs\n    num = num.abs\n    num = num.abs\n    ", "  arr.each do\
    \ |n|\n    n.to_s.split('').each do |d|\n      next if d.to_i < 0\n      break\
    \ if d == '9'\n      break if d == '8'\n      break if d == '7'\n      break if\
    \ d == '6'\n      break if d == '5'\n      break if d == '4'\n      break if d\
    \ == '3'\n      break if d == '2'\n      break if d == '1'\n      break if d ==\
    \ '0'\n      break if d == '-1'\n      break if d == '-2'\n      break if d ==\
    \ '-3'\n      break if d == '-4'\n      break if d == '-5'\n      break if d ==\
    \ '-6'\n      break if d == '-7'\n      break if d == '-8'\n      break if d ==\
    \ '-9'\n      break if d == '-10'\n      break if d == '-11'\n      break if d\
    \ == '-12'\n      break if d == '-13'\n      break if d == '-14'\n      break\
    \ if d == '-15'\n      break if d == '-16'\n      break if d == '-17'\n      break\
    \ if d == '-18'\n      break if d == '-19'\n      break if d == '-20'\n      break\
    \ if d == '-21'\n      break if d == '-22'\n      break if d == '-23'\n      break\
    \ if d == '-24'\n      break if d == '-25'\n      break if d == '-26'\n      break\
    \ if d == '-27'\n      break if d == '-28'\n      break if d == '-29'\n      break\
    \ if d == '-30'\n      break if d == '-31'\n      break if d == '-32'\n      break\
    \ if d == '-33'\n      break if d == '-34'\n      break if d == '-35'\n      break\
    \ if d == '-36'\n      break if d == '-37'\n      break if d == '-38'\n      break\
    \ if d == '-39'\n      break if d == '-40'\n      break if d == '-41'\n      break\
    \ if d == '-42'\n      break if d == '-43'\n      break if d == '-44'\n      break\
    \ if d == '-45'\n      break if d == '-46'\n      break if d == '-47'\n      break\
    \ if d == '-48'\n      ", "  arr.each do |n|\n    if n < 0\n      n += 10\n  \
    \  end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n   \
    \ end\n    return sum if sum > 0\n  end\n  0\nend", "  arr.each do |n|\n    if\
    \ n < 0\n      n += 10\n    end\n    n.digits.each do |d|\n      next if d < 0\n\
    \      break if d > 9\n      break if d > n\n      n -= d\n    end\n  end\n  n\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    if num < 0\n      num = -num\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      sum += digit\n    end\n  end\n  sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your answer! I understand your solution, but I cannot use\
    \ it. I need to use only loops and conditionals.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that uses only loops and conditionals.\n<|/\
    \ c |>\n<| c |>\nThank you for your answer! I understand your solution, but I\
    \ cannot use it. I need to use only loops and conditionals.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution that uses only loops and conditionals.\n\
    <|/ c |>\n<| c |>\nThank you for your answer! I understand your solution, but\
    \ I cannot use it. I need to use only loops and conditionals.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", "  arr.each do |num|\n    if num < 0\n      num *= -1\n\
    \      num -= num % 10\n    end\n    sum += num\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution works, but I\
    \ wanted to use only loops and no other methods. I edited my question to make\
    \ it more clear.\n<|/ c |>\n<| c |>\nI added a solution which uses only loops.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I edited my question to make it more\
    \ clear. I want to count the numbers which has sum of digits > 0.\n<|/ c |>\n\
    <| c |>\nI added a solution which uses only loops.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  arr.each do |num|\n    num = num.to_i\n    if num > 0\n      puts\
    \ \"#{num} has #{count_nums(num.to_s.chars.map(&:to_i).reverse)} digits\"\n  \
    \  elsif num < 0\n      puts \"#{num} has #{count_nums(num.to_s.chars.map(&:to_i).reverse)}\
    \ digits\"\n    else\n      puts \"#{num} has #{count_nums(num.to_s.chars.map(&:to_i).reverse)}\
    \ digits\"\n    end\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |s| s.to_i > 0 }.count\n  end\nend", "  arr.each do |n|\n    sum = 0\n   \
    \ while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    if sum > 0\n \
    \     puts \"#{sum}\"\n    end\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    if num > 0\n      puts \"#{num} has #{count_nums(num.to_s.chars.reverse).to_s}\
    \ digits\"\n    else\n      puts \"#{num} has #{count_nums(num.to_s.chars.reverse).to_s}\
    \ digits\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n     \
    \ num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num = -num\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      if digit > 0\n        digit = digit.abs\n \
    \     end\n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n +=\
    \ 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n\
    \    end\n    return sum if sum > 0\n  end\n  0\nend", "  arr.each do |n|\n  \
    \  n.to_s.split('').select { |d| d > 0 }.count\n  end\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num = -num\n    end\n    sum_of_digits = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    if sum_of_digits > 0\n      puts \"#{num} has #{sum_of_digits} digits\"\n\
    \    end\n  end\nend\ncount_nums([-123, -456, -78, -90])", "  arr.each do |num|\n\
    \    num = num.to_i\n    if num < 0\n      num *= -1\n      num -= num % 10\n\
    \    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num\
    \ % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n  \
    \  if num < 0\n      num *= -1\n      digit = num.abs\n      num -= digit\n  \
    \  end\n    sum = 0\n    while num > 0\n      sum += num % 10\n      num /= 10\n\
    \    end\n    if sum > 0\n      puts \"#{num} has a sum of digits #{sum}\"\n \
    \   end\n  end\nend", "  arr.each do |n|\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ I was thinking about this problem and I thought about using recursion to solve\
    \ it, but I couldn't figure out how to do it. I will try to implement your solution\
    \ and see if it works.\n<|/ c |>\n<| c |>\nI added my solution to my original\
    \ post. Thanks again for your help.\n<|/ c |>\n<| a tags=ruby,recursion |>\nI\
    \ figured it out. Thanks again to everyone who helped me figure this out. Here\
    \ is the solution:\n<code>", "  arr.each do |n|\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work.\
    \ Try it with `[1,2,-3]`.\n<|/ c |>\n<| c |>\nI thought the OP was looking for\
    \ positive numbers. I added a comment to the question to clarify.\n<|/ c |>\n\
    <| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ My bad.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each do |n|\n \
    \   if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum\
    \ += n % 10\n      n /= 10\n    end\n    if sum > 0\n      puts \"#{n} has a sum\
    \ of digits > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      digit = digit.abs\n      break if digit == 0\n      sum +=\
    \ digit\n    end\n  end\n  sum\nend", "  arr.each do |n|\n    sum = 0\n    while\
    \ n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return sum if sum >\
    \ 0\n  end\n  0\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n    end\n\
    \    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n \
    \   return sum if sum > 0\n  end\n  return 0\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d > 0 }.count\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    if num > 0\n      num = num.to_s.chars.map(&:to_i).reduce(:+)\n    else\n\
    \      num = num.to_s.chars.map(&:to_i).reduce(:+) * -1\n    end\n    if num >\
    \ 0\n      puts \"#{num}\"\n    end\n  end\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      digit = num.abs\n      num -= digit\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(0) { |sum, digit|\
    \ sum + digit }\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI see what you're saying, but I'm having\
    \ trouble understanding how this would work. Could you explain how this would\
    \ work?\n<|/ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n\
    <|/ c |>\n<| c |>\nI see what you're saying, but I'm having trouble understanding\
    \ how this would work. Could you explain how this would work?\n<|/ c |>\n<| c\
    \ |>\nI added some comments to my answer, hope it helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num\
    \ -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like your solution,\
    \ however it fails for negative numbers. I added a solution that works for negative\
    \ numbers, please take a look.\n<|/ c |>\n<| a |>\n<code>", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum\
    \ += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n  return\
    \ 0\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -=\
    \ num % 10\n    end\n    sum += num\n  end\nend", "  arr.each do |n|\n    if n\
    \ < 0\n      n += 100\n    end\n    digits = n.to_s.split('').map(&:to_i)\n  \
    \  digits.each do |d|\n      if d > 0\n        puts d\n      end\n    end\n  end\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    if num > 0\n      nums.push\
    \ num\n    end\n  end\n  nums.count\nend", "  arr.each do |num|\n    if num <\
    \ 0\n      num = -num\n    end\n    num = num.to_i\n    count = 0\n    while num\
    \ > 0\n      count += 1\n      num -= 10\n    end\n    puts \"#{num} has #{count}\
    \ digits\"\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num *= -1\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      digit = digit.to_s\n      digit = digit.chars.map(&:to_i)\n      digits.count(digit)\
    \ > 0 ? digit : nil\n    end\n  end\nend", "  arr.each do |n|\n    if n < 0\n\
    \      n += 10\n    end\n    sum = 0\n    while n > 0\n      sum += n % 10\n \
    \     n /= 10\n    end\n    if sum > 0\n      puts \"#{n} has a sum of digits\
    \ > 0\"\n    end\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    if\
    \ num < 0\n      num = num * -1\n      num -= num % 10\n    end\n    sum += num\n\
    \  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
