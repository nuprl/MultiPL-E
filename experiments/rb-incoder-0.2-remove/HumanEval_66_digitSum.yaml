name: HumanEval_66_digitSum
language: rb
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
  \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
  \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
  abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
  \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
  ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
  \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
completions: ["  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= '0'\
    \ && c <= '9'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum +=\
    \ c if c >= '0' && c <= '9'\n  end\n  sum\nend", "    sum = 0\n    i = 0\n   \
    \ while i < s.length\n        sum += s.codePointAt(i)\n        i += 1\n    return\
    \ sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  sum = 0\n  s.each_byte\
    \ do |b|\n    sum += b if b.between?(48, 57)\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend",
  "    sum = 0\n    \n    # Write your solution here\n    \n    return sum", "  sum\
    \ = 0\n  s.each do |c|\n    sum += c.ord if c.ord >= 48 && c.ord <= 57\n  end\n\
    \  sum\nend", "    sum = 0\n    \n    for i in s:\n        if i.isupper():\n \
    \           sum += ord(i)\n    return sum", "  sum = 0\n  s.each_byte do |char|\n\
    \    sum += char if char >= '0' && char <= '9'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_char do |c|\n    sum += (c >= 'A') ? (c - 'A' + 10) : c\n \
    \ end\n  sum\nend", "    sum = 0\n    for c in s\n        if c.upcase == c.downcase\n\
    \            sum += c.upcase\n    return sum\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThanks for your answer. I've tried it and it works. But I still\
    \ don't understand why my code didn't work. Could you please explain it to me?\n\
    <|/ c |>\n<| c |>\nYour code didn't work because you were trying to call `upcase`\
    \ on a `String` object, which doesn't have that method. `upcase` was a method\
    \ of `String` objects since Ruby 1.9.\n<|/ c |>\n<| c |>\nOh, I see. Thanks for\
    \ your explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend", "    sum =\
    \ 0\n    for i in s\n        if i.upcase == true\n            sum += i.upcase\n\
    \        end\n    end\n    return sum\nend", "  sum = 0\n  s.each_byte do |char|\n\
    \    if char >= 48 && char <= 57\n      sum += char\n    end\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |b|\n    sum += b if b >= 'A' && b <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c\
    \ <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each do |c|\n    sum += c.ord -\
    \ 96 if c.ord >= 48 and c.ord <= 57\n  end\n  sum\nend", "    sum = 0\n    i =\
    \ 0\n    while i < s.length\n        sum += (s.codePointAt(i) - '0'.codePointAt(0))\
    \ * (s.codePointAt(i) - '0'.codePointAt(0))\n        i += 1\n    return sum\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI believe this would work,\
    \ but I believe it would be much more efficient to convert the string to a character\
    \ array and loop through it like you did in the first example. Thanks for the\
    \ help!\n<|/ c |>\n<| c |>\nI agree, that would be more efficient. I've updated\
    \ my answer with that solution.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sum =\
    \ 0\n  s.each_byte do |c|\n    if c >= '0' && c <= '9'\n      sum += c\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_byte do |char|\n    sum += char if char\
    \ >= '0' && char <= '9'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend", "  sum = 0\n  s.each\
    \ do |c|\n    sum += c.ord - 96 if c.ord >= 65 && c.ord <= 90\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A'\
    \ && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if\
    \ c >= 'A' && c <= 'Z' }\n  sum\nend", "    sum = 0\n    \n    for c in s\n  \
    \      if c.upcase == c.downcase\n            sum += c.upcase\n    end\n    \n\
    \    return sum\nend", "    sum = 0\n    for i in s\n        if i.upcase == true\n\
    \            sum += i.upcase\n        end\n    end\n    return sum\nend", "  sum\
    \ = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n\
    \  end\n  sum\nend\ndigitSum('abc123')", "  sum = 0\n  s.each_byte do |c|\n  \
    \  sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum =\
    \ 0\n    \n    for c in s\n        if c.upcase == true\n            sum += c.upcase\n\
    \        end\n    end\n    \n    return sum\nend", "  sum = 0\n  s.each_byte {\
    \ |c| sum += c if c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend\nputs digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\n\
    puts digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\n\
    puts digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\n\
    puts digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\n\
    puts digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\n\
    puts digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\n\
    puts digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\n\
    puts digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\n\
    puts digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\n\
    puts digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\n\
    puts digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\n\
    puts digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\n\
    puts digitSum('123')\nputs digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\n\
    puts digitSum('abc123')\nputs digitSum('abc')\nputs digitSum('123')\nputs digitSum('abc123')\n\
    puts digitSum('abc')\nputs digitSum('123')\nputs ", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 96 if c.ord >= 48 and c.ord <= 57\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A' && c <= 'Z' }\n  sum\n\
    end", "    sum = 0\n    i = 0\n    while i < s.length\n        sum += (s.codePointAt(i).upcase\
    \ - 'A'.upcase)\n        i += 1\n    return sum\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. `s.codePointAt(i)` returns `nil` when `i` is `s.length`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum = 0\n    \n\
    \    for c in s\n        if c.upcase == true\n            sum += c.upcase\n  \
    \  end\n    \n    return sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if\
    \ c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum\
    \ += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    if c >= 48 && c <= 57\n      sum += c\n    end\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |b|\n    sum += b if b.upcase == b\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A'\
    \ && c <= 'Z'\n  end\n  sum\nend\nputs digitSum('abc123')", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend", "    sum =\
    \ 0\n    i = 0\n    while i < s.length\n        sum += s.codePointAt(i)\n    \
    \    i += 1\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.5>\n", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "    sum = 0\n    i\
    \ = 0\n    while i < s.length\n        sum = sum + s.chars[i].to_i\n        i\
    \ += 1\n    return sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if\
    \ c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum\
    \ += c if c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte { |c|\
    \ sum += c if c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_char do\
    \ |c|\n    sum += c.ord - 48\n  end\n  sum\nend", "  sum = 0\n  s.each do |c|\n\
    \    sum += c.ord - 96 if c.ord >= 48 and c.ord <= 57\n  end\n  sum\nend", " \
    \   sum = 0\n    i = 0\n    while i < s.length\n        sum += s.codePointAt(i)\n\
    \        i += 1\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    abc\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc123\")\n</cell>\n<code language=julia-1.0>\n", "  sum = 0\n  s.each_byte\
    \ do |char|\n    sum += char.upcase\n  end\n  return sum\nend", "  sum = 0\n \
    \ s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |b|\n    sum += b if b.between?(48, 57)\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend\ndigitSum(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )", "    sum = 0\n    i = 0\n    while i < s.length\n        sum += (s.codePointAt(i)\
    \ - '0').abs\n        i += 1\n    return sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    if c >= '0' && c <= '9'\n      sum += c.to_i\n    end\n  end\n \
    \ return sum\nend", "  sum = 0\n  s.each_byte do |c|\n    if c >= '0' && c <=\
    \ '9'\n      sum += c.to_i\n    end\n  end\n  sum\nend", "    sum = 0\n    \n\
    \    for c in s\n        if c.upcase >= 'A'\n            sum += c.upcase\n   \
    \     end\n    end\n    \n    return sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |char|\n    sum += char if char >= '0' && char <= '9'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    if c >= '0' && c <= '9'\n\
    \      sum += c.to_i\n    end\n  end\n  return sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum =\
    \ 0\n    \n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n\
    \    return sum", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' &&\
    \ c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c\
    \ if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum = 0\n    \n\
    \    for c in s\n        if c.upcase >= 'A'.upcase and c.upcase <= 'Z'.upcase\n\
    \            sum += c.upcase\n        end\n    end\n    \n    return sum\nend",
  "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |b|\n    sum += b if b.between?(48,\
    \ 57)\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A'\
    \ && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if\
    \ c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum =\
    \ 0\n    i = 0\n    while i < s.length\n        sum += s.codePointAt(i)\n    \
    \    i += 1\n    return sum", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord\
    \ - 'A'.ord\n  end\n  sum\nend\ndigitSum('abc')", "  sum = 0\n  s.each_char do\
    \ |c|\n    sum += c.ord - 96\n  end\n  sum\nend", "    sum = 0\n    i = 0\n  \
    \  while i < s.length\n        sum += s.chars[i].to_i\n        i += 1\n    return\
    \ sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n\
    \  sum\nend", "    sum = 0\n    \n    for c in s\n        if c.upcase >= 'A' and\
    \ c.upcase <= 'Z'\n            sum += c.upcase\n        end\n    end\n    \n \
    \   return sum\nend", "  sum = 0\n  s.each_char do |c|\n    if c.upcase >= 'A'\
    \ && c.upcase <= 'Z'\n      sum += c.upcase\n    end\n  end\n  sum\nend", "  sum\
    \ = 0\n  s.each_char do |c|\n    sum += c.ord - 96 if c.ord >= 48 and c.ord <=\
    \ 57\n  end\n  sum\nend", "  sum = 0\n  s.each do |c|\n    sum += c.ord - 96\n\
    \  end\n  sum\nend", "    sum = 0\n    for c in s\n        if c.upcase >= 'A'.upcase\
    \ && c.upcase <= 'Z'.upcase\n            sum += c.upcase\n        end\n    end\n\
    \    return sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >=\
    \ 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum\
    \ += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    if c >= '0' && c <= '9'\n      sum += c.to_i\n    end\n  end\n \
    \ sum\nend", "    sum = 0\n    i = 0\n    while i < s.length\n        sum += s.chars.codePointAt(i)\n\
    \        i += 1\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c\
    \ <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if\
    \ c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n\
    \    sum += c.ord - 48\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend\nputs digitSum(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n \
    \ end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += (c >= 'A') ?\
    \ (c - 'A' + 10) : c\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n \
    \   sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte do |b|\n    sum += b if b.upcase == b\n  end\n  sum\nend", "  \
    \  sum = 0\n    i = 0\n    while i < s.length\n        sum += s.codePointAt(i)\n\
    \        i += 1\n    return sum", "  sum = 0\n  s.each_char do |c|\n    sum +=\
    \ (c >= 'A' && c <= 'Z') ? c.ord - 'A'.ord : 0\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "    sum\
    \ = 0\n    i = 0\n    while i < s.length\n        sum = sum + s.codePointAt(i)\n\
    \        i += 1\n    return sum", "  sum = 0\n  s.each_byte { |c| sum += c if\
    \ c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum\
    \ += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum\
    \ = 0\n  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend", " \
    \ sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "    sum = 0\n    \n    i = 0\n    while i < s.length\n        sum\
    \ += (s.chars[i] >= 'A') ? s.chars[i] - 'A' + 10 : s.chars[i] - '0'\n        i\
    \ += 1\n    end\n    \n    return sum\nend", "    sum = 0\n    i = 0\n    while\
    \ i < s.length\n        sum += s.chars[i].ord - 'A'.ord\n        i += 1\n    return\
    \ sum\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do this without having to use `.ord`?\n<|/ c |>\n\
    <| c |>\nI guess you could do `s.chars.map { |c| c.ord - 'A'.ord }.sum` but that\
    \ would be less efficient.\n<|/ c |>\n<| c |>\nI guess you could do `s.chars.map\
    \ { |c| c.ord - 'A'.ord }.sum` but that would be less efficient.\n<|/ c |>\n<|\
    \ c |>\nI guess you could do `s.chars.map { |c| c.ord - 'A'.ord }.sum` but that\
    \ would be less efficient.\n<|/ c |>\n<| c |>\nI guess you could do `s.chars.map\
    \ { |c| c.ord - 'A'.ord }.sum` but that would be less efficient.\n<|/ c |>\n<|\
    \ a dscore=3 |>\n<code>", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c\
    \ >= '0' && c <= '9'\n  end\n  sum\nend", "    sum = 0\n    i = 0\n    while i\
    \ < s.length\n        sum += (s.chars[i] >= 'A') ? s.chars[i] - 'A' + 10 : s.chars[i]\
    \ - '0'\n        i += 1\n    return sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    if c >= '0' && c <= '9'\n      sum += c\n    end\n  end\n  sum\nend", " \
    \ sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c\
    \ <= 'Z'\n  end\n  sum\nend", "    sum = 0\n    \n    i = 0\n    while i < s.length\n\
    \        sum += s.codePointAt(i)\n        i += 1\n    end\n    \n    return sum\n\
    end", "    sum = 0\n    i = 0\n    while i < s.length\n        sum = sum + s.codePointAt(i)\n\
    \        i = i + 1\n    return sum", "  sum = 0\n  s.each_char do |c|\n    sum\
    \ += c.ord - 'A'.ord\n  end\n  sum\nend", "    sum = 0\n    i = 0\n    while i\
    \ < s.length\n        sum = sum + s.codePointAt(i)\n        i = i + 1\n    return\
    \ sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <=\
    \ 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A'\
    \ && c <= 'Z' }\n  sum\nend\nputs digitSum('hello')\nputs digitSum('12')\nputs\
    \ digitSum('abc')\nputs digitSum('123')\nputs digitSum('abcde')\nputs digitSum('ABC')\n\
    puts digitSum('ABCDE')\nputs digitSum('ABCDEF')\nputs digitSum('ABCDEFG')\nputs\
    \ digitSum('ABCDEFGH')\nputs digitSum('ABCDEFGHI')\nputs digitSum('ABCDEFGHIJ')\n\
    puts digitSum('ABCDEFGHIJK')\nputs digitSum('ABCDEFGHIJKL')\nputs digitSum('ABCDEFGHIJKLM')\n\
    puts digitSum('ABCDEFGHIJKLMN')\nputs digitSum('ABCDEFGHIJKLMNO')\nputs digitSum('ABCDEFGHIJKLMNOP')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQ')\nputs digitSum('ABCDEFGHIJKLMNOPQR')\nputs\
    \ digitSum('ABCDEFGHIJKLMNOPQRS')\nputs digitSum('ABCDEFGHIJKLMNOPQRST')\nputs\
    \ digitSum('ABCDEFGHIJKLMNOPQRSTU')\nputs digitSum('ABCDEFGHIJKLMNOPQRSTUV')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQRSTUVW')\nputs digitSum('ABCDEFGHIJKLMNOPQRSTUVWX')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQRSTUVWXY')\nputs digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZA')\nputs digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZAB')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZABC')\nputs digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZABCD')\n\
    puts digitSum('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE')\nputs ", "    sum = 0\n    i\
    \ = 0\n    while i < s.length\n        sum += (s.codePointAt(i) - 64).abs\n  \
    \      i += 1\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    abc\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abcde\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcde\")\n</cell>\n<code language=", "  sum = 0\n  s.each_byte do |b|\n\
    \    sum += b if b >= '0' && b <= '9'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |b|\n    sum += b if b >= '0' && b\
    \ <= '9'\n  end\n  sum\nend", "    sum = 0\n    i = 0\n    while i < s.length\n\
    \        sum += s.chars[i].upcase\n        i += 1\n    return sum\nend", "  sum\
    \ = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  return\
    \ sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <=\
    \ 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c\
    \ >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n \
    \   sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum =\
    \ 0\n    \n    for i in s\n        if i.upcase == true\n            sum += i.upcase\n\
    \        end\n    end\n    \n    return sum\nend", "  sum = 0\n  s.each_byte {\
    \ |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ do |char|\n    sum += char if char >= '0' && char <= '9'\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += (c.ord - 'A'.ord) if\
    \ c.upcase == 'A'\n  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum\
    \ += c.ord - 96 if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += (c >= 'A') ? (c - 'A' + 10) : c\n  end\n  sum\nend\nputs\
    \ digitSum('abc')", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A' && c\
    \ <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >=\
    \ 'A' && c <= 'Z'\n  end\n  sum\nend", "    sum = 0\n    i = 0\n    while i <\
    \ s.length\n        sum += (s.chars[i] >= 'A') ? s.chars[i] - 'A' + 10 : s.chars[i]\
    \ - '0'\n        i += 1\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abc\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456def\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"123abc456defg\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"123abc456defg\")\n", "    sum = 0\n    i = 0\n    while i < s.length\n\
    \        sum += s.codePointAt(i)\n        i += 1\n    return sum", "  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum\
    \ = 0\n  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend", "    sum\
    \ = 0\n    i = 0\n    while i < s.length\n        sum += s.chars.codepoints.find\
    \ {|c| c >= 'A' && c <= 'Z'}\n        i += 1\n    return sum\nend", "    sum =\
    \ 0\n    for i in s\n        if i.upcase == true\n            sum += i.upcase\n\
    \    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  sum\
    \ = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", " \
    \   sum = 0\n    i = 0\n    while i < s.length\n        sum += s.chars[i].upcase\n\
    \        i += 1\n    return sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum\
    \ += c.ord - 96\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c\
    \ if c >= 'A' && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n \
    \   sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend", "    sum = 0\n    digits\
    \ = s.split(//)\n    digits.each do |digit|\n        sum += digit.to_i\n    end\n\
    \    return sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A' &&\
    \ c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c\
    \ >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n \
    \   sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nputs digitSum(\"The quick\
    \ brown fox jumps over the lazy dog\")", "  sum = 0\n  s.each_byte { |c| sum +=\
    \ c if c >= '0' && c <= '9' }\n  sum\nend", "  sum = 0\n  s.each do |c|\n    if\
    \ c.upcase >= 'A' && c.upcase <= 'Z'\n      sum += c.upcase\n    end\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    if c >= '0' && c <= '9'\n\
    \      sum += c.to_i\n    end\n  end\n  return sum\nend", "  sum = 0\n  s.each_byte\
    \ do |b|\n    sum += b if b >= 'A' && b <= 'Z'\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= 'A' && c <= 'Z' }\n  sum\nend", "    sum\
    \ = 0\n    i = 0\n    while i < s.length\n        sum += s.codePointAt(i)\n  \
    \      i += 1\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c\
    \ <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each do |c|\n    sum += c.ord -\
    \ 96\n  end\n  sum\nend", "  sum = 0\n  s.each_byte { |c| sum += c if c >= 'A'\
    \ && c <= 'Z' }\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if\
    \ c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_byte\
    \ { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 96 if c.ord >= 48 and c.ord <= 57\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\n\
    end", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n\
    \  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n\
    \  end\n  sum\nend", "    sum = 0\n    i = 0\n    while i < s.length\n       \
    \ sum += (s.codePointAt(i) - '0').abs\n        i += 1\n    return sum\nend", " \
    \ sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c\
    \ <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char do |c|\n    sum += (c\
    \ >= 'A' && c <= 'Z') ? c.ord - 'A'.ord : 0\n  end\n  sum\nend", "  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend", "  sum =\
    \ 0\n  s.each_byte do |c|\n    sum += c if c >= 'A' && c <= 'Z'\n  end\n  sum\n\
    end\ndigitSum(\"AaBbCcDdEeFfGgHh\")", "  sum = 0\n  s.each_byte do |c|\n    sum\
    \ += c if c >= 'A' && c <= 'Z'\n  end\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum = 0\n  s.each_char\
    \ do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend", "  sum = 0\n  s.each\
    \ do |c|\n    sum += c.ord if c.ord >= 48 && c.ord <= 57\n  end\n  sum\nend",
  "  sum = 0\n  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n\
    \  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
