name: HumanEval_100_make_a_pile
language: rb
prompt: "# Given a positive integer n, you have to make a pile of n levels of stones.\n\
  # The first level has n stones.\n# The number of stones in the next level is:\n\
  # - the next odd number if n is odd.\n# - the next even number if n is even.\n#\
  \ Return the number of stones in each level in a list, where element at index\n\
  # i represents the number of stones in the level (i+1).\n# Examples:\ndef make_a_pile(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n\
  \    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n\
  \    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9,\
  \ 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n\
  \    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n"
completions: ["  pile = []\n  for i in 0...n\n    pile.push(i+1)\n    pile.push(i+2)\n\
    \  end\n  pile\nend", "  levels = []\n  levels << n\n  while n > 0\n    n -= n\
    \ % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels\nend", "  levels = []\n \
    \ levels << n if n.odd?\n  levels << n if n.even?\n  levels\nend", "  pile = []\n\
    \  for i in 1..n\n    pile.push(i) if i%2 == 0 else\n    pile.push(i*2)\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n\
    \    pile.push (n % 2 == 0 ? n : n / 2)\n    n /= 2\n  end\n  pile\nend", "  pile\
    \ = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n\
    \ : n * 2)\n    n = n / 2\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n\
    \    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\nend",
  "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0\
    \ ? n : n * 3)\n    n /= 2\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n\
    \    pile.push(i) if i.odd? || i.even?\n  end\n  pile\nend\n</pre>\n<p>\n  In\
    \ Ruby, you can write this more concisely as:\n</p>\n<pre>", "  pile = []\n  for\
    \ i in 1..n\n    pile.push(i)\n    if n % 2 == 0\n      pile.push(n-i)\n    end\n\
    \  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n   \
    \ pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n    pile.push(i+5)\n\
    \    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n    pile.push(i+9)\n\
    \    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n    pile.push(i+13)\n\
    \    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n    pile.push(i+17)\n\
    \    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n    pile.push(i+21)\n\
    \    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n    pile.push(i+25)\n\
    \    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n    pile.push(i+29)\n\
    \    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n    pile.push(i+33)\n\
    \    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n    pile.push(i+37)\n\
    \    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n    pile.push(i+41)\n\
    \    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n    pile.push(i+45)\n\
    \    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n    pile.push(i+49)\n\
    \    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n    pile.push(i+53)\n\
    \    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n    pile.push(i+57)\n\
    \    pile.push(i+58)\n    pile.push(i+59)", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.shift\n    pile.push((pile.pop % 2 == 0) ? pile.pop\
    \ : (pile.pop / 2))\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n\
    \    if n%2 == 0\n      pile.push(pile.pop.pop)\n    end\n  end\n  pile\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n\
    \  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n\
    \    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  pile\
    \ = []\n  for i in 1..n\n    pile.push(i) if i.odd? || i.even?\n  end\n  pile\n\
    end", "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 :\
    \ 3\n    levels << n\n  end\n  levels\nend", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 3)\n    n = n / 2\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n\
    \ % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n = n / 2\n\
    \  end\n  pile\nend", "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] =\
    \ 1\n  pile[1][0] = 0\n  pile[2][0] = 0\n  pile[2][1] = 1\n  pile[2][2] = 1\n\
    \  pile[3][0] = 0\n  pile[3][1] = 0\n  pile[3][2] = 0\n  pile[3][3] = 1\n  pile[4][0]\
    \ = 0\n  pile[4][1] = 0\n  pile[4][2] = 0\n  pile[4][3] = 0\n  pile[4][4] = 1\n\
    \  pile[5][0] = 0\n  pile[5][1] = 0\n  pile[5][2] = 0\n  pile[5][3] = 0\n  pile[5][4]\
    \ = 0\n  pile[5][5] = 1\n  pile[6][0] = 0\n  pile[6][1] = 0\n  pile[6][2] = 0\n\
    \  pile[6][3] = 0\n  pile[6][4] = 0\n  pile[6][5] = 0\n  pile[6][6] = 1\n  pile[7][0]\
    \ = 0\n  pile[7][1] = 0\n  pile[7][2] = 0\n  pile[7][3] = 0\n  pile[7][4] = 0\n\
    \  pile[7][5] = 0\n  pile[7][6] = 0\n  pile[7][7] = 1\n  pile[8][0] = 0\n  pile[8][1]\
    \ = 0\n  pile[8][2] = 0\n  pile[8][3] = 0\n  pile[8][4] = 0\n  pile[8][5] = 0\n\
    \  pile[8][6] = 0\n  pile[8][7] = 0\n  pile[8][8] = 1\n  pile[9][0] = 0\n  pile[9][1]\
    \ = 0\n  pile[9][2] = 0\n  pile[9][3] = 0\n  pile[9][4] = 0\n  pile[9][5] = 0\n\
    \  pile[9][6] = 0\n  pile[9][7] = 0\n  pile[9][8] = 0\n  pile[9][9] = 1\n  pile[10][0]\
    \ = 0\n  pile[10][1] = 0\n  pile[10][2] = 0\n  pile[10][3] = 0\n  pile[10][4]\
    \ = 0\n  pile[10][5] = 0\n  pile[10][6] = 0\n  pile[10][7] = 0\n  pile[10][8]\
    \ = 0\n  pile[10][9] = 0\n  pile[10][10", "  pile = []\n  for i in 1..n\n    pile.push(i)\
    \ if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\nend", "  levels = []\n\
    \  levels << n if n.odd?\n  levels << n if n.even?\n  levels\nend", "  pile =\
    \ []\n  for i in 0...n\n    pile.push(i+1)\n    pile.push(i+2)\n    pile.push(i+3)\n\
    \    pile.push(i+4)\n    pile.push(i+5)\n    pile.push(i+6)\n    pile.push(i+7)\n\
    \    pile.push(i+8)\n    pile.push(i+9)\n    pile.push(i+10)\n    pile.push(i+11)\n\
    \    pile.push(i+12)\n    pile.push(i+13)\n    pile.push(i+14)\n    pile.push(i+15)\n\
    \    pile.push(i+16)\n    pile.push(i+17)\n    pile.push(i+18)\n    pile.push(i+19)\n\
    \    pile.push(i+20)\n    pile.push(i+21)\n    pile.push(i+22)\n    pile.push(i+23)\n\
    \    pile.push(i+24)\n    pile.push(i+25)\n    pile.push(i+26)\n    pile.push(i+27)\n\
    \    pile.push(i+28)\n    pile.push(i+29)\n    pile.push(i+30)\n    pile.push(i+31)\n\
    \    pile.push(i+32)\n    pile.push(i+33)\n    pile.push(i+34)\n    pile.push(i+35)\n\
    \    pile.push(i+36)\n    pile.push(i+37)\n    pile.push(i+38)\n    pile.push(i+39)\n\
    \    pile.push(i+40)\n    pile.push(i+41)\n    pile.push(i+42)\n    pile.push(i+43)\n\
    \    pile.push(i+44)\n    pile.push(i+45)\n    pile.push(i+46)\n    pile.push(i+47)\n\
    \    pile.push(i+48)\n    pile.push(i+49)\n    pile.push(i+50)\n    pile.push(i+51)\n\
    \    pile.push(i+52)\n    pile.push(i+53)\n    pile.push(i+54)\n    pile.push(i+55)\n\
    \    pile.push(i+56)\n    pile.push(i+57)\n    pile.push(i+58)\n    pile.push(i+59)",
  "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels\
    \ << n\n  end\n  levels.reverse\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\
    \ if i%2 == 0 \n    pile.push(i) if i%2 != 0\n  end\n  return pile\nend", "  levels\
    \ = []\n  levels << n\n  while n > 0\n    n -= n % 2\n    levels << n\n  end\n\
    \  levels.reverse\nend", "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0]\
    \ = 1\n  pile[1][0] = 0\n  pile[2][0] = 0\n  pile[2][1] = 1\n  pile[2][2] = 1\n\
    \  pile[2][3] = 1\n  pile[3][0] = 0\n  pile[3][1] = 0\n  pile[3][2] = 0\n  pile[3][3]\
    \ = 1\n  pile[4][0] = 0\n  pile[4][1] = 0\n  pile[4][2] = 0\n  pile[4][3] = 0\n\
    \  pile[4][4] = 1\n  pile[4][5] = 1\n  pile[4][6] = 1\n  pile[4][7] = 1\n  pile[4][8]\
    \ = 1\n  pile[4][9] = 1\n  pile[4][10] = 1\n  pile[4][11] = 1\n  pile[4][12] =\
    \ 1\n  pile[4][13] = 1\n  pile[4][14] = 1\n  pile[4][15] = 1\n  pile[4][16] =\
    \ 1\n  pile[4][17] = 1\n  pile[4][18] = 1\n  pile[4][19] = 1\n  pile[4][20] =\
    \ 1\n  pile[4][21] = 1\n  pile[4][22] = 1\n  pile[4][23] = 1\n  pile[4][24] =\
    \ 1\n  pile[4][25] = 1\n  pile[4][26] = 1\n  pile[4][27] = 1\n  pile[4][28] =\
    \ 1\n  pile[4][29] = 1\n  pile[4][30] = 1\n  pile[4][31] = 1\n  pile[4][32] =\
    \ 1\n  pile[4][33] = 1\n  pile[4][34] = 1\n  pile[4][35] = 1\n  pile[4][36] =\
    \ 1\n  pile[4][37] = 1\n  pile[4][38] = 1\n  pile[4][39] = 1\n  pile[4][40] =\
    \ 1\n  pile[4][41] = 1\n  pile[4][42] = 1\n  pile[4][43] = 1\n  pile[4][44] =\
    \ 1\n  pile[4][45] = 1\n  pile[4][46] = 1\n  pile[4][47] = 1\n  pile[4][48] =\
    \ 1\n  pile[4][49] = 1\n  pile[4][50] = 1\n  pile[4][51] = 1\n  pile[4][52", " \
    \ pile = Array.new(n) { Array.new(n) }\n  pile[0][0] = 0\n  pile[0][1] = 1\n \
    \ pile[1][0] = 1\n  pile[1][1] = 0\n  pile[2][0] = 1\n  pile[2][1] = 1\n  pile[3][0]\
    \ = 1\n  pile[3][1] = 1\n  pile[4][0] = 1\n  pile[4][1] = 1\n  pile[5][0] = 1\n\
    \  pile[5][1] = 1\n  pile[6][0] = 1\n  pile[6][1] = 1\n  pile[7][0] = 1\n  pile[7][1]\
    \ = 1\n  pile[8][0] = 1\n  pile[8][1] = 1\n  pile[9][0] = 1\n  pile[9][1] = 1\n\
    \  pile[10][0] = 1\n  pile[10][1] = 1\n  pile[11][0] = 1\n  pile[11][1] = 1\n\
    \  pile[12][0] = 1\n  pile[12][1] = 1\n  pile[13][0] = 1\n  pile[13][1] = 1\n\
    \  pile[14][0] = 1\n  pile[14][1] = 1\n  pile[15][0] = 1\n  pile[15][1] = 1\n\
    \  pile[16][0] = 1\n  pile[16][1] = 1\n  pile[17][0] = 1\n  pile[17][1] = 1\n\
    \  pile[18][0] = 1\n  pile[18][1] = 1\n  pile[19][0] = 1\n  pile[19][1] = 1\n\
    \  pile[20][0] = 1\n  pile[20][1] = 1\n  pile[21][0] = 1\n  pile[21][1] = 1\n\
    \  pile[22][0] = 1\n  pile[22][1] = 1\n  pile[23][0] = 1\n  pile[23][1] = 1\n\
    \  pile[24][0] = 1\n  pile[24][1] = 1\n  pile[25][0] = 1\n  pile[25][1] = 1\n\
    \  pile[26][0] = 1\n  pile[26][1] = 1\n  pile[27][0] = 1\n  pile[27][1] = 1\n\
    \  pile[28][0] = 1\n  pile[28][1] = 1\n  pile[29][0] = 1\n  pile[29][1] = 1\n\
    \  pile[30][0] = 1\n  pile[30][1] = 1\n  pile[31][0] = 1\n  pile[31][1] = 1\n\
    \  pile[32][0] = 1\n  pi", "  pile = Array.new(n+1)\n  pile[0] = n\n  pile[1]\
    \ = n\n  pile[2] = n\n  pile[3] = n\n  pile[4] = n\n  pile[5] = n\n  pile[6] =\
    \ n\n  pile[7] = n\n  pile[8] = n\n  pile[9] = n\n  pile[10] = n\n  pile[11] =\
    \ n\n  pile[12] = n\n  pile[13] = n\n  pile[14] = n\n  pile[15] = n\n  pile[16]\
    \ = n\n  pile[17] = n\n  pile[18] = n\n  pile[19] = n\n  pile[20] = n\n  pile[21]\
    \ = n\n  pile[22] = n\n  pile[23] = n\n  pile[24] = n\n  pile[25] = n\n  pile[26]\
    \ = n\n  pile[27] = n\n  pile[28] = n\n  pile[29] = n\n  pile[30] = n\n  pile[31]\
    \ = n\n  pile[32] = n\n  pile[33] = n\n  pile[34] = n\n  pile[35] = n\n  pile[36]\
    \ = n\n  pile[37] = n\n  pile[38] = n\n  pile[39] = n\n  pile[40] = n\n  pile[41]\
    \ = n\n  pile[42] = n\n  pile[43] = n\n  pile[44] = n\n  pile[45] = n\n  pile[46]\
    \ = n\n  pile[47] = n\n  pile[48] = n\n  pile[49] = n\n  pile[50] = n\n  pile[51]\
    \ = n\n  pile[52] = n\n  pile[53] = n\n  pile[54] = n\n  pile[55] = n\n  pile[56]\
    \ = n\n  pile[57] = n\n  pile[58] = n\n  pile[59] = n\n  pile[60] = n\n  pile[61]\
    \ = n\n  pile[62] = n\n  pile[63] = n\n  pile[64] = n\n  pile[65] = n\n", "  pile\
    \ = []\n  for i in 0...n\n    pile.push(n-i)\n    pile.push(n-(i+1))\n  end\n\
    \  return pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd?\n\
    \    pile.push(i) if i.even?\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n\
    \    pile.push(i) if i.odd? || i.even?\n  end\n  pile\nend", "  pile = []\n  for\
    \ i in 1..n\n    pile.push(i)\n    pile.push(i) if n.odd?\n    pile.push(i) if\
    \ n.even?\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\
    \ if i%2 == 0\n    pile.push(i) if i%2 != 0\n  end\n  pile\nend", "  pile = []\n\
    \  for i in 1..n\n    pile.push(i) if i%2 == 1\n    pile.push(i) if i%2 == 0\n\
    \  end\n  return pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i) if\
    \ i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\nend", "  levels = []\n \
    \ levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n \
    \ end\n  levels\nend", "  levels = []\n  levels << n\n  while n > 0\n    n -=\
    \ n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels.reverse\nend", "  pile\
    \ = Array.new(n)\n  pile[0] = n\n  pile[1] = n\n  for i in 2..n\n    pile[i] =\
    \ pile[i-1] + i\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend",
  "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i-1]\
    \ + 1 if (i&1).odd?\n    pile[i] = pile[i-1] + 2 if (i&1).even?\n  end\n  pile\n\
    end", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  pile[1] = n\n  pile[2] =\
    \ n\n  pile[3] = n\n  pile[4] = n\n  pile[5] = n\n  pile[6] = n\n  pile[7] = n\n\
    \  pile[8] = n\n  pile[9] = n\n  pile[10] = n\n  pile[11] = n\n  pile[12] = n\n\
    \  pile[13] = n\n  pile[14] = n\n  pile[15] = n\n  pile[16] = n\n  pile[17] =\
    \ n\n  pile[18] = n\n  pile[19] = n\n  pile[20] = n\n  pile[21] = n\n  pile[22]\
    \ = n\n  pile[23] = n\n  pile[24] = n\n  pile[25] = n\n  pile[26] = n\n  pile[27]\
    \ = n\n  pile[28] = n\n  pile[29] = n\n  pile[30] = n\n  pile[31] = n\n  pile[32]\
    \ = n\n  pile[33] = n\n  pile[34] = n\n  pile[35] = n\n  pile[36] = n\n  pile[37]\
    \ = n\n  pile[38] = n\n  pile[39] = n\n  pile[40] = n\n  pile[41] = n\n  pile[42]\
    \ = n\n  pile[43] = n\n  pile[44] = n\n  pile[45] = n\n  pile[46] = n\n  pile[47]\
    \ = n\n  pile[48] = n\n  pile[49] = n\n  pile[50] = n\n  pile[51] = n\n  pile[52]\
    \ = n\n  pile[53] = n\n  pile[54] = n\n  pile[55] = n\n  pile[56] = n\n  pile[57]\
    \ = n\n  pile[58] = n\n  pile[59] = n\n  pile[60] = n\n  pile[61] = n\n  pile[62]\
    \ = n\n  pile[63] = n\n  pile[64] = n\n  pile[65] = ", "  pile = []\n  for i in\
    \ 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\n\
    end", "  levels = []\n  levels << n if n.odd?\n  levels << n if n.even?\n  levels.map\
    \ { |n| make_a_pile(n) }\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n\
    \    pile.push((n+i).even? ? i : (n+i).odd? ? i+1 : nil)\n  end\n  pile\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i)\n    pile.push(i) if n.odd?\n  \
    \  pile.push(i) if n.even?\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n = n / 2\n\
    \  end\n  pile\nend", "  pile = Array.new(n) { 0 }\n  pile[0] = 1\n  pile[1] =\
    \ 1\n  for i in 2..n\n    pile[i] = pile[i-1] + pile[i-2]\n  end\n  pile\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i%2 == 0\n    pile.push(i) if\
    \ i%2 != 0\n  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i)\n\
    \    pile.push(i+1)\n    pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n\
    \    pile.push(i+5)\n    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n\
    \    pile.push(i+9)\n    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n\
    \    pile.push(i+13)\n    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n\
    \    pile.push(i+17)\n    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n\
    \    pile.push(i+21)\n    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n\
    \    pile.push(i+25)\n    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n\
    \    pile.push(i+29)\n    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n\
    \    pile.push(i+33)\n    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n\
    \    pile.push(i+37)\n    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n\
    \    pile.push(i+41)\n    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n\
    \    pile.push(i+45)\n    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n\
    \    pile.push(i+49)\n    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n\
    \    pile.push(i+53)\n    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n\
    \    pile.push(i+57)\n    pile.push(i+58)\n    pi", "  pile = Array.new(n+1)\n\
    \  pile[0] = n\n  pile[1] = n\n  for i in 2..n\n    pile[i] = pile[i-1] + i\n\
    \  end\n  pile\nend", "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] =\
    \ 1\n  pile[0][1] = 1\n  pile[1][0] = 1\n  pile[1][1] = 1\n  pile[2][0] = 1\n\
    \  pile[2][1] = 1\n  pile[3][0] = 1\n  pile[3][1] = 1\n  pile[4][0] = 1\n  pile[4][1]\
    \ = 1\n  pile[5][0] = 1\n  pile[5][1] = 1\n  pile[6][0] = 1\n  pile[6][1] = 1\n\
    \  pile[7][0] = 1\n  pile[7][1] = 1\n  pile[8][0] = 1\n  pile[8][1] = 1\n  pile[9][0]\
    \ = 1\n  pile[9][1] = 1\n  pile[10][0] = 1\n  pile[10][1] = 1\n  pile[11][0] =\
    \ 1\n  pile[11][1] = 1\n  pile[12][0] = 1\n  pile[12][1] = 1\n  pile[13][0] =\
    \ 1\n  pile[13][1] = 1\n  pile[14][0] = 1\n  pile[14][1] = 1\n  pile[15][0] =\
    \ 1\n  pile[15][1] = 1\n  pile[16][0] = 1\n  pile[16][1] = 1\n  pile[17][0] =\
    \ 1\n  pile[17][1] = 1\n  pile[18][0] = 1\n  pile[18][1] = 1\n  pile[19][0] =\
    \ 1\n  pile[19][1] = 1\n  pile[20][0] = 1\n  pile[20][1] = 1\n  pile[21][0] =\
    \ 1\n  pile[21][1] = 1\n  pile[22][0] = 1\n  pile[22][1] = 1\n  pile[23][0] =\
    \ 1\n  pile[23][1] = 1\n  pile[24][0] = 1\n  pile[24][1] = 1\n  pile[25][0] =\
    \ 1\n  pile[25][1] = 1\n  pile[26][0] = 1\n  pile[26][1] = 1\n  pile[27][0] =\
    \ 1\n  pile[27][1] = 1\n  pile[28][0] = 1\n  pile[28][1] = 1\n  pile[29][0] =\
    \ 1\n  pile[29][1] = 1\n  pile[30][0] = 1\n  pile[30][1] = 1\n  pile[31][0] =\
    \ 1\n  pile[31][1] = 1\n  pile[32][0] = 1\n  pi", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.shift\n    pile.push((pile.length + 1) * 2)\n\
    \    pile.push((pile.length + 1) * 2)\n  end\n  pile\nend", "  pile = []\n  for\
    \ i in 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n\
    \ % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels\
    \ << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n \
    \ levels\nend", "  levels = []\n  levels << n if n.odd?\n  levels << n if n.even?\n\
    \  levels.map { |n| make_a_pile(n) }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n\
    </div>\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"\
    prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render\
    \ border-box-sizing rendered_html\">\n<p>Let's try it out!</p>", "  pile = Array.new(n)\
    \ { 0 }\n  pile[0] = 1\n  pile[1] = n\n  for i in 2..n\n    pile[i] = pile[i-1]\
    \ + pile[i-2]\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.shift\n    pile.push (n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n\
    \    pile.push((pile.length%2 == 0) ? pile.pop : pile.pop+1)\n  end\n  pile\n\
    end", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in 1..n\n    pile[i]\
    \ = pile[i - 1] + 1 if i % 2 == 0\n    pile[i] = pile[i - 1] + 1 if i % 2 != 0\n\
    \  end\n  pile\nend", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  pile[1] =\
    \ n / 2\n  pile[2] = n / 4\n  pile[3] = n / 8\n  pile[4] = n / 16\n  pile[5] =\
    \ n / 32\n  pile[6] = n / 64\n  pile[7] = n / 128\n  pile[8] = n / 256\n  pile[9]\
    \ = n / 512\n  pile[10] = n / 1024\n  pile[11] = n / 2048\n  pile[12] = n / 4096\n\
    \  pile[13] = n / 8192\n  pile[14] = n / 16384\n  pile[15] = n / 32768\n  pile[16]\
    \ = n / 65536\n  pile[17] = n / 131072\n  pile[18] = n / 262144\n  pile[19] =\
    \ n / 524288\n  pile[20] = n / 1048576\n  pile[21] = n / 2097152\n  pile[22] =\
    \ n / 4194304\n  pile[23] = n / 8388608\n  pile[24] = n / 16777216\n  pile[25]\
    \ = n / 33554432\n  pile[26] = n / 67108864\n  pile[27] = n / 134217728\n  pile[28]\
    \ = n / 268435456\n  pile[29] = n / 536870912\n  pile[30] = n / 1073741824\n \
    \ pile[31] = n / 2147483648\n  pile[32] = n / 4294967296\n  pile[33] = n / 8589934592\n\
    \  pile[34] = n / 17179869184\n  pile[35] = n / 34359738368\n  pile[36] = n /\
    \ 68719476736\n  pile[37] = n / 137438953472\n  pile[38] = n / 274877906944\n\
    \  pile[39] = n / 549755813888\n  pile[40] = n / 1099511627776\n  pile[41] = n\
    \ / 2199023255552\n  pile[42] = n / 4398046511104\n  pile[", "  levels = []\n\
    \  for i in 0...n\n    levels << i\n    levels << n if n.odd?\n    levels << n\
    \ if n.even?\n  end\n  levels\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.push(n % 2 == 0 ? n : n * 3)\n    n /= 2\n  end\n  pile\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd? || i.even?\n  end\n  pile\n\
    end", "  pile = Array.new(n)\n  pile[0] = n\n  pile[1] = n\n  pile[2] = n\n  pile[3]\
    \ = n\n  pile[4] = n\n  pile[5] = n\n  pile[6] = n\n  pile[7] = n\n  pile[8] =\
    \ n\n  pile[9] = n\n  pile[10] = n\n  pile[11] = n\n  pile[12] = n\n  pile[13]\
    \ = n\n  pile[14] = n\n  pile[15] = n\n  pile[16] = n\n  pile[17] = n\n  pile[18]\
    \ = n\n  pile[19] = n\n  pile[20] = n\n  pile[21] = n\n  pile[22] = n\n  pile[23]\
    \ = n\n  pile[24] = n\n  pile[25] = n\n  pile[26] = n\n  pile[27] = n\n  pile[28]\
    \ = n\n  pile[29] = n\n  pile[30] = n\n  pile[31] = n\n  pile[32] = n\n  pile[33]\
    \ = n\n  pile[34] = n\n  pile[35] = n\n  pile[36] = n\n  pile[37] = n\n  pile[38]\
    \ = n\n  pile[39] = n\n  pile[40] = n\n  pile[41] = n\n  pile[42] = n\n  pile[43]\
    \ = n\n  pile[44] = n\n  pile[45] = n\n  pile[46] = n\n  pile[47] = n\n  pile[48]\
    \ = n\n  pile[49] = n\n  pile[50] = n\n  pile[51] = n\n  pile[52] = n\n  pile[53]\
    \ = n\n  pile[54] = n\n  pile[55] = n\n  pile[56] = n\n  pile[57] = n\n  pile[58]\
    \ = n\n  pile[59] = n\n  pile[60] = n\n  pile[61] = n\n  pile[62] = n\n  pile[63]\
    \ = n\n  pile[64] = n\n  pile[65] = n\n  ", "  pile = []\n  for i in 1..n\n  \
    \  pile.push(i) if i%2 == 0\n    pile.push(i) if i%2 != 0\n  end\n  pile\nend",
  "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] = 1\n  pile[1][0] = 0\n  pile[2][0]\
    \ = 0\n  pile[0][1] = 1\n  pile[1][1] = 0\n  pile[2][1] = 0\n  pile[0][2] = 2\n\
    \  pile[1][2] = 1\n  pile[2][2] = 0\n  pile[0][3] = 3\n  pile[1][3] = 2\n  pile[2][3]\
    \ = 0\n  pile[0][4] = 4\n  pile[1][4] = 1\n  pile[2][4] = 0\n  pile[0][5] = 5\n\
    \  pile[1][5] = 4\n  pile[2][5] = 0\n  pile[0][6] = 6\n  pile[1][6] = 3\n  pile[2][6]\
    \ = 0\n  pile[0][7] = 7\n  pile[1][7] = 2\n  pile[2][7] = 0\n  pile[0][8] = 8\n\
    \  pile[1][8] = 2\n  pile[2][8] = 0\n  pile[0][9] = 9\n  pile[1][9] = 2\n  pile[2][9]\
    \ = 0\n  pile[0][10] = 10\n  pile[1][10] = 2\n  pile[2][10] = 0\n  pile[0][11]\
    \ = 11\n  pile[1][11] = 2\n  pile[2][11] = 0\n  pile[0][12] = 12\n  pile[1][12]\
    \ = 2\n  pile[2][12] = 0\n  pile[0][13] = 13\n  pile[1][13] = 2\n  pile[2][13]\
    \ = 0\n  pile[0][14] = 14\n  pile[1][14] = 2\n  pile[2][14] = 0\n  pile[0][15]\
    \ = 15\n  pile[1][15] = 2\n  pile[2][15] = 0\n  pile[0][16] = 16\n  pile[1][16]\
    \ = 2\n  pile[2][16] = 0\n  pile[0][17] = 17\n  pile[1][17] = 2\n  pile[2][17]\
    \ = 0\n  pile[0][18] = 18\n  pile[1][18] = 2\n  pile[2][18] = 0\n  pile[0][19]\
    \ = 19\n  pile[1][19] = 2\n  pile[2][19] = 0\n  pile[0][20] = 20\n  pile[1][20]\
    \ = 2\n  pile[2][20] = 0\n  pile[0][21] = 21\n", "  result = []\n  for i in 0...n\n\
    \    result << i if i.odd? || i.even?\n  end\n  result\nend", "  pile = []\n \
    \ pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n*2)\n\
    \    n = n / 2\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\
    \ if i.odd? || i.even?\n  end\n  pile\nend", "  pile = Array.new(n) { 0 }\n  pile[0]\
    \ = n\n  for i in 1..n\n    pile[i] = pile[i - 1] + 1 if i % 2 == 0\n    pile[i]\
    \ = pile[i - 1] + 2 if i % 2 != 0\n  end\n  pile\nend", "  pile = []\n  for i\
    \ in 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\n\
    end", "  pile = Array.new(n+1)\n  pile[0] = 0\n  pile[1] = 1\n  pile[2] = 2\n\
    \  pile[3] = 3\n  pile[4] = 4\n  pile[5] = 5\n  pile[6] = 6\n  pile[7] = 7\n \
    \ pile[8] = 8\n  pile[9] = 9\n  pile[10] = 10\n  pile[11] = 11\n  pile[12] = 12\n\
    \  pile[13] = 13\n  pile[14] = 14\n  pile[15] = 15\n  pile[16] = 16\n  pile[17]\
    \ = 17\n  pile[18] = 18\n  pile[19] = 19\n  pile[20] = 20\n  pile[21] = 21\n \
    \ pile[22] = 22\n  pile[23] = 23\n  pile[24] = 24\n  pile[25] = 25\n  pile[26]\
    \ = 26\n  pile[27] = 27\n  pile[28] = 28\n  pile[29] = 29\n  pile[30] = 30\n \
    \ pile[31] = 31\n  pile[32] = 32\n  pile[33] = 33\n  pile[34] = 34\n  pile[35]\
    \ = 35\n  pile[36] = 36\n  pile[37] = 37\n  pile[38] = 38\n  pile[39] = 39\n \
    \ pile[40] = 40\n  pile[41] = 41\n  pile[42] = 42\n  pile[43] = 43\n  pile[44]\
    \ = 44\n  pile[45] = 45\n  pile[46] = 46\n  pile[47] = 47\n  pile[48] = 48\n \
    \ pile[49] = 49\n  pile[50] = 50\n  pile[51] = 51\n  pile[52] = 52\n  pile[53]\
    \ = 53\n  pile[54] = 54\n  pile[55] = 55\n  pile[56] = 56\n  pile[57] = 57\n \
    \ pile[58] = 58\n  pile[59] = 59\n  pile[60] = 60\n  pile[61] = 61\n  pile[62]\
    \ = 62\n  pile[63] = 63\n  pile[64] = 64\n  pi", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n = n / 2\n\
    \  end\n  pile\nend", "  result = []\n  for i in 0...n\n    result << i + (i&1)\n\
    \  end\n  result\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n \
    \   pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n    pile.push(i+5)\n\
    \    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n    pile.push(i+9)\n\
    \    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n    pile.push(i+13)\n\
    \    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n    pile.push(i+17)\n\
    \    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n    pile.push(i+21)\n\
    \    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n    pile.push(i+25)\n\
    \    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n    pile.push(i+29)\n\
    \    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n    pile.push(i+33)\n\
    \    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n    pile.push(i+37)\n\
    \    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n    pile.push(i+41)\n\
    \    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n    pile.push(i+45)\n\
    \    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n    pile.push(i+49)\n\
    \    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n    pile.push(i+53)\n\
    \    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n    pile.push(i+57)\n\
    \    pile.push(i+58)\n    pile.push(i+59)", "  levels = []\n  levels << n\n  while\
    \ n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels\nend",
  "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i\
    \ - 1] + 1 if i % 2 == 0\n    pile[i] = pile[i - 1] + 1 if i % 2 != 0\n  end\n\
    \  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n    pile.push(i+1)\n\
    \    pile.push(i+2)\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n\
    \    pile.push(i+1)\n    pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n\
    \    pile.push(i+5)\n    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n\
    \    pile.push(i+9)\n    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n\
    \    pile.push(i+13)\n    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n\
    \    pile.push(i+17)\n    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n\
    \    pile.push(i+21)\n    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n\
    \    pile.push(i+25)\n    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n\
    \    pile.push(i+29)\n    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n\
    \    pile.push(i+33)\n    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n\
    \    pile.push(i+37)\n    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n\
    \    pile.push(i+41)\n    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n\
    \    pile.push(i+45)\n    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n\
    \    pile.push(i+49)\n    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n\
    \    pile.push(i+53)\n    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n\
    \    pile.push(i+57)\n    pile.push(i+58)\n    pi", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 3)\n    n = n / 2\n\
    \  end\n  pile\nend", "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] =\
    \ 1\n  pile[n-1][n-1] = n if n.odd?\n  pile[n-1][n] = n if n.even?\n  pile[n-1][n+1]\
    \ = n if n.odd? && n.even?\n  pile[n][n-1] = n if n.odd? && !n.even?\n  pile[n][n]\
    \ = n if n.even? && !n.odd?\n  pile[n][n+1] = n if n.odd? && n.even? && !n.even?\n\
    \  pile[n+1][n-1] = n if n.even? && !n.odd?\n  pile[n+1][n] = n if n.odd? && n.even?\
    \ && !n.even?\n  pile[n+1][n+1] = n if n.odd? && !n.even? && !n.odd?\n  pile\n\
    end", "  levels = []\n  levels << n if n.odd?\n  levels << n if n.even?\n  levels.map\
    \ { |n| n - 1 }\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n\
    \    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  pile\
    \ = []\n  for i in 1..n\n    pile.push(i) if i%2 == 0 \n    pile.push(i) if i%2\
    \ != 0\n  end\n  pile\nend\n</cell>\n<code language=julia-1.0>", "  pile = Array.new(n)\
    \ { 0 }\n  pile[0] = 1\n  pile[n] = 1\n  for i in 1..n\n    pile[i] = pile[i -\
    \ 1] + pile[i - 2]\n  end\n  pile\nend", "  levels = []\n  levels << n\n  while\
    \ n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n\
    \  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n\
    \    pile.push(n % 2 == 0 ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\nend",
  "  pile = Array.new(n+1)\n  pile[0] = 1\n  pile[1] = 1\n  for i in 2..n\n    pile[i]\
    \ = pile[i-1] + pile[i-2]\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n\
    \  end\n  pile\nend", "  levels = []\n  levels << n\n  levels << n if n.odd?\n\
    \  levels << n if n.even?\n  levels\nend", "  result = []\n  for i in 1..n\n \
    \   result.push(i * 2)\n    result.push(i * 3)\n  end\n  result\nend", "  levels\
    \ = []\n  levels << n if n.odd?\n  levels << n if n.even?\n  levels\nend", " \
    \ pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n    pile.push((pile.length\
    \ + n) % 2)\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend",
  "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels\
    \ << n\n  end\n  levels\nend", "  result = []\n  for i in 0...n\n    result.push(i+1)\n\
    \    result.push(i+2)\n  end\n  result\nend", "  pile = []\n  pile.push(n)\n \
    \ while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n + (n / 2))\n    n =\
    \ pile.pop\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.shift\n    pile.push((pile.length + n) % 2)\n  end\n  pile\nend",
  "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n    pile.push(i+2)\n    pile.push(i+3)\n\
    \    pile.push(i+4)\n    pile.push(i+5)\n    pile.push(i+6)\n    pile.push(i+7)\n\
    \    pile.push(i+8)\n    pile.push(i+9)\n    pile.push(i+10)\n    pile.push(i+11)\n\
    \    pile.push(i+12)\n    pile.push(i+13)\n    pile.push(i+14)\n    pile.push(i+15)\n\
    \    pile.push(i+16)\n    pile.push(i+17)\n    pile.push(i+18)\n    pile.push(i+19)\n\
    \    pile.push(i+20)\n    pile.push(i+21)\n    pile.push(i+22)\n    pile.push(i+23)\n\
    \    pile.push(i+24)\n    pile.push(i+25)\n    pile.push(i+26)\n    pile.push(i+27)\n\
    \    pile.push(i+28)\n    pile.push(i+29)\n    pile.push(i+30)\n    pile.push(i+31)\n\
    \    pile.push(i+32)\n    pile.push(i+33)\n    pile.push(i+34)\n    pile.push(i+35)\n\
    \    pile.push(i+36)\n    pile.push(i+37)\n    pile.push(i+38)\n    pile.push(i+39)\n\
    \    pile.push(i+40)\n    pile.push(i+41)\n    pile.push(i+42)\n    pile.push(i+43)\n\
    \    pile.push(i+44)\n    pile.push(i+45)\n    pile.push(i+46)\n    pile.push(i+47)\n\
    \    pile.push(i+48)\n    pile.push(i+49)\n    pile.push(i+50)\n    pile.push(i+51)\n\
    \    pile.push(i+52)\n    pile.push(i+53)\n    pile.push(i+54)\n    pile.push(i+55)\n\
    \    pile.push(i+56)\n    pile.push(i+57)\n    pile.push(i+58)\n    pile.push(i+59)",
  "  pile = []\n  for i in 1..n\n    pile.push(i * 2)\n    pile.push(i * 2 + 1)\n\
    \  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n\
    \    pile.push(n % 2 == 0 ? n : n * 2)\n    n = n / 2\n  end\n  pile\nend", " \
    \ levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n   \
    \ levels << n\n  end\n  levels\nend", "  pile = []\n  pile.push(n)\n  while pile.length\
    \ > 0\n    pile.push(n % 2 == 0 ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels\
    \ << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n \
    \ levels.reverse\nend", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in\
    \ 1..n\n    pile[i] = pile[i - 1] + 1 if i % 2 == 0\n    pile[i] = pile[i - 1]\
    \ + 2 if i % 2 == 1\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n*2)\n    n = n / 2\n  end\n\
    \  pile\nend\n</cell>\n<code language=julia-1.0>", "  pile = []\n  for i in 1..n\n\
    \    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\nend",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i%2 == 0\n    pile.push(i) if\
    \ i%2 != 0\n  end\n  pile\nend", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n\
    \  pile[1] = n\n  pile[2] = n\n  pile[3] = n\n  pile[4] = n\n  pile[5] = n\n \
    \ pile[6] = n\n  pile[7] = n\n  pile[8] = n\n  pile[9] = n\n  pile[10] = n\n \
    \ pile[11] = n\n  pile[12] = n\n  pile[13] = n\n  pile[14] = n\n  pile[15] = n\n\
    \  pile[16] = n\n  pile[17] = n\n  pile[18] = n\n  pile[19] = n\n  pile[20] =\
    \ n\n  pile[21] = n\n  pile[22] = n\n  pile[23] = n\n  pile[24] = n\n  pile[25]\
    \ = n\n  pile[26] = n\n  pile[27] = n\n  pile[28] = n\n  pile[29] = n\n  pile[30]\
    \ = n\n  pile[31] = n\n  pile[32] = n\n  pile[33] = n\n  pile[34] = n\n  pile[35]\
    \ = n\n  pile[36] = n\n  pile[37] = n\n  pile[38] = n\n  pile[39] = n\n  pile[40]\
    \ = n\n  pile[41] = n\n  pile[42] = n\n  pile[43] = n\n  pile[44] = n\n  pile[45]\
    \ = n\n  pile[46] = n\n  pile[47] = n\n  pile[48] = n\n  pile[49] = n\n  pile[50]\
    \ = n\n  pile[51] = n\n  pile[52] = n\n  pile[53] = n\n  pile[54] = n\n  pile[55]\
    \ = n\n  pile[56] = n\n  pile[57] = n\n  pile[58] = n\n  pile[59] = n\n  pile[60]\
    \ = n\n  pile[61] = n\n  pile[62] = n\n  pile[63] = n\n  pile[64] = n\n  pile[65]\
    \ = ", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n\
    \ % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels\
    \ << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n \
    \ levels\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n\
    \    pile.push((pile.length%2 == 0) ? pile.pop : (pile.pop * 2))\n  end\n  pile\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\nend", "  pile = []\n\
    \  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n\
    \    n /= 2\n  end\n  pile\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n\
    <div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2015-08-30 17:24:33\
    \ CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\nThank you very much for the detailed answer! I really appreciate it!\
    \ I didn't know that you can do `n % 2 == 0 ? n : n * 2` like that. That's really\
    \ cool! I didn't know you could do that in Ruby!\n<|/ c |>\n<| c |>\nYeah, that's\
    \ a really cool trick. Ruby has some really cool tricks you can use. Check out\
    \ this link for more info: http://stackoverflow.com/questions/4841436/what-does-the-question-mark-do-in-ruby\n\
    <|/ c |>\n<| c |>\nI added a more detailed explanation of how this works. Hope\
    \ it helps!\n<|/ c |>\n<| c |>\nThanks for the explanation! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(pile.last * 2)\n    pile.pop\n  end\n\
    \  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n    pile.push(i+2)\n\
    \  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n\
    \    pile.push(n % 2 == 0 ? n : n * 2)\n    n = n / 2\n  end\n  pile\nend", " \
    \ pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0\
    \ ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\nend", "  pile = []\n  for\
    \ i in 1..n\n    pile.push(i)\n    pile.push(i*2)\n    pile.push(i*3)\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n\
    \ % 2 == 0 ? n : n + (n / 2))\n    n = pile.pop\n  end\n  pile\nend", "  pile\
    \ = []\n  for i in 0...n\n    pile.push(i+1)\n    if n%2 == 0\n      pile.push(n-i)\n\
    \    end\n  end\n  return pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n\
    \    pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n    pile.push(i+5)\n\
    \    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n    pile.push(i+9)\n\
    \    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n    pile.push(i+13)\n\
    \    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n    pile.push(i+17)\n\
    \    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n    pile.push(i+21)\n\
    \    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n    pile.push(i+25)\n\
    \    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n    pile.push(i+29)\n\
    \    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n    pile.push(i+33)\n\
    \    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n    pile.push(i+37)\n\
    \    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n    pile.push(i+41)\n\
    \    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n    pile.push(i+45)\n\
    \    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n    pile.push(i+49)\n\
    \    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n    pile.push(i+53)\n\
    \    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n    pile.push(i+57)\n\
    \    pile.push(i+58)\n    pile.push(i+59)", "  pile = []\n  for i in 1..n\n  \
    \  pile.push(i) if i%2 == 0\n    pile.push(i) if i%2 != 0\n  end\n  pile\nend",
  "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0\
    \ ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\nend\n</pre>\n<p>\n  In Ruby,\
    \ you can use the <code>%</code> operator to perform modulo division.\n  In Python,\
    \ you can use the <code>//</code> operator to perform integer division.\n  In\
    \ JavaScript, you can use the <code>/</code> operator to perform floating point\
    \ division.\n  In Java, you can use the <code>%</code> operator to perform modulo\
    \ division.\n  In C#, you can use the <code>%</code> operator to perform modulo\
    \ division.\n  In Perl, you can use the <code>%</code> operator to perform modulo\
    \ division.\n  In Haskell, you can use the <code>%</code> operator to perform\
    \ modulo division.\n  In Erlang, you use the <code>rem</code> operator to perform\
    \ modulo division.\n  In Common Lisp, you use the <code>rem</code> operator to\
    \ perform modulo division.\n  In OCaml, you can use the <code>rem</code> operator\
    \ to perform modulo division.\n  In Ruby, you can use the <code>%</code> operator\
    \ to perform modulo division.\n  In Python, you can use the <code>//</code> operator\
    \ to perform integer division.\n  In JavaScript, you can use the <code>/</code>\
    \ operator to perform floating point division.\n  In Java, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In C#, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Perl, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Haskell, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Erlang, you use the <code>rem</code>\
    \ operator to perform modulo division.\n  In Common Lisp, you use the <code>rem</code>\
    \ operator to perform modulo division.\n  In OCaml, you can use the <code>rem</code>\
    \ operator to perform modulo division.\n  In Ruby, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Python, you can use the <code>//</code>\
    \ operator to perform integer division.\n  In JavaScript, you can use the <code>/</code>\
    \ operator to perform floating point division.\n  In Java, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In C#, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Perl, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Haskell, you can use the <code>%</code>\
    \ operator to perform modulo division.\n  In Erlang, you use the <code>rem</code>\
    \ operator to ", "  pile = []\n  for i in 1..n\n    pile.push(i * 2)\n    pile.push(i\
    \ * 2 + 1)\n  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(n-i)\n\
    \    pile.push(i+(n+i-1)%2)\n  end\n  return pile\nend", "  pile = []\n  for i\
    \ in 1..n\n    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels\
    \ << n\n  levels << n if n.odd?\n  levels << n if n.even?\n  levels\nend", " \
    \ pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0\
    \ ? n : n + (n / 2))\n    n = n / 2\n  end\n  pile\nend", "  pile = Array.new(n,\
    \ 0)\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i-1] + 1 if i&1 == 1\n\
    \    pile[i] = pile[i-1] + 2 if i&2 == 0\n  end\n  pile\nend", "  pile = []\n\
    \  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n\
    \    n /= 2\n  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n\
    \  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push((n+i).even?\
    \ ? i : i+1)\n  end\n  pile\nend", "  pile = Array.new(n) { Array.new(n) }\n \
    \ pile[0][0] = 1\n  pile[1][0] = 0\n  pile[2][0] = 0\n  pile[2][1] = 1\n  pile[3][0]\
    \ = 0\n  pile[3][1] = 0\n  pile[3][2] = 0\n  pile[4][0] = 0\n  pile[4][1] = 0\n\
    \  pile[4][2] = 0\n  pile[4][3] = 0\n  pile[4][4] = 1\n  pile[4][5] = 0\n  pile[4][6]\
    \ = 0\n  pile[4][7] = 0\n  pile[4][8] = 0\n  pile[4][9] = 0\n  pile[4][10] = 0\n\
    \  pile[4][11] = 0\n  pile[4][12] = 0\n  pile[4][13] = 0\n  pile[4][14] = 0\n\
    \  pile[4][15] = 0\n  pile[4][16] = 0\n  pile[4][17] = 0\n  pile[4][18] = 0\n\
    \  pile[4][19] = 0\n  pile[4][20] = 0\n  pile[4][21] = 0\n  pile[4][22] = 0\n\
    \  pile[4][23] = 0\n  pile[4][24] = 0\n  pile[4][25] = 0\n  pile[4][26] = 0\n\
    \  pile[4][27] = 0\n  pile[4][28] = 0\n  pile[4][29] = 0\n  pile[4][30] = 0\n\
    \  pile[4][31] = 0\n  pile[4][32] = 0\n  pile[4][33] = 0\n  pile[4][34] = 0\n\
    \  pile[4][35] = 0\n  pile[4][36] = 0\n  pile[4][37] = 0\n  pile[4][38] = 0\n\
    \  pile[4][39] = 0\n  pile[4][40] = 0\n  pile[4][41] = 0\n  pile[4][42] = 0\n\
    \  pile[4][43] = 0\n  pile[4][44] = 0\n  pile[4][45] = 0\n  pile[4][46] = 0\n\
    \  pile[4][47] = 0\n  pile[4][48] = 0\n  pile[4][49] = 0\n  pile[4][50] = 0\n\
    \  pile[4][51] = 0\n  pile[4][52] = 0\n  pile[4][53] = 0\n  pile[4][54] = 0\n\
    \  pile[4", "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd? || i.even?\n\
    \    pile.push(i) if i.even? && !i.odd?\n  end\n  pile\nend", "  pile = []\n \
    \ pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n\
    \    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels << n\n  while n > 0\n\
    \    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels\nend", "  pile\
    \ = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n    pile.push(\
    \ n % 2 == 0 ? n : n + 1 )\n    n = n / 2\n  end\n  pile\nend", "  pile = []\n\
    \  for i in 1..n\n    pile.push(i)\n    pile.push(i*2)\n    pile.push(i*3)\n \
    \ end\n  pile\nend", "  result = []\n  for i in 0...n\n    result.push((n+i).odd?\
    \ ? i+1 : i+2)\n  end\n  result\nend\n</cell>\n<cell>", "  pile = []\n  for i\
    \ in 1..n\n    pile.push(i) if i%2 == 0\n    pile.push(i) if i%2 != 0\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(pile.last\
    \ * 2)\n    pile.pop\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n\
    \  pile\nend", "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 ==\
    \ 0 ? 2 : 3\n    levels << n\n  end\n  levels\nend", "  pile = Array.new(n)\n\
    \  pile[0] = n\n  pile[1] = n\n  pile[2] = n\n  pile[3] = n\n  pile[4] = n\n \
    \ pile[5] = n\n  pile[6] = n\n  pile[7] = n\n  pile[8] = n\n  pile[9] = n\n  pile[10]\
    \ = n\n  pile[11] = n\n  pile[12] = n\n  pile[13] = n\n  pile[14] = n\n  pile[15]\
    \ = n\n  pile[16] = n\n  pile[17] = n\n  pile[18] = n\n  pile[19] = n\n  pile[20]\
    \ = n\n  pile[21] = n\n  pile[22] = n\n  pile[23] = n\n  pile[24] = n\n  pile[25]\
    \ = n\n  pile[26] = n\n  pile[27] = n\n  pile[28] = n\n  pile[29] = n\n  pile[30]\
    \ = n\n  pile[31] = n\n  pile[32] = n\n  pile[33] = n\n  pile[34] = n\n  pile[35]\
    \ = n\n  pile[36] = n\n  pile[37] = n\n  pile[38] = n\n  pile[39] = n\n  pile[40]\
    \ = n\n  pile[41] = n\n  pile[42] = n\n  pile[43] = n\n  pile[44] = n\n  pile[45]\
    \ = n\n  pile[46] = n\n  pile[47] = n\n  pile[48] = n\n  pile[49] = n\n  pile[50]\
    \ = n\n  pile[51] = n\n  pile[52] = n\n  pile[53] = n\n  pile[54] = n\n  pile[55]\
    \ = n\n  pile[56] = n\n  pile[57] = n\n  pile[58] = n\n  pile[59] = n\n  pile[60]\
    \ = n\n  pile[61] = n\n  pile[62] = n\n  pile[63] = n\n  pile[64] = n\n  pile[65]\
    \ = n\n  ", "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] = 1\n  pile[0][1]\
    \ = 1\n  pile[1][0] = 1\n  pile[1][1] = 1\n  pile[2][0] = 1\n  pile[2][1] = 1\n\
    \  pile[2][2] = 1\n  pile[3][0] = 1\n  pile[3][1] = 1\n  pile[3][2] = 1\n  pile[3][3]\
    \ = 1\n  pile[4][0] = 1\n  pile[4][1] = 1\n  pile[4][2] = 1\n  pile[4][3] = 1\n\
    \  pile[4][4] = 1\n  pile[4][5] = 1\n  pile[4][6] = 1\n  pile[4][7] = 1\n  pile[4][8]\
    \ = 1\n  pile[4][9] = 1\n  pile[4][10] = 1\n  pile[4][11] = 1\n  pile[4][12] =\
    \ 1\n  pile[4][13] = 1\n  pile[4][14] = 1\n  pile[4][15] = 1\n  pile[4][16] =\
    \ 1\n  pile[4][17] = 1\n  pile[4][18] = 1\n  pile[4][19] = 1\n  pile[4][20] =\
    \ 1\n  pile[4][21] = 1\n  pile[4][22] = 1\n  pile[4][23] = 1\n  pile[4][24] =\
    \ 1\n  pile[4][25] = 1\n  pile[4][26] = 1\n  pile[4][27] = 1\n  pile[4][28] =\
    \ 1\n  pile[4][29] = 1\n  pile[4][30] = 1\n  pile[4][31] = 1\n  pile[4][32] =\
    \ 1\n  pile[4][33] = 1\n  pile[4][34] = 1\n  pile[4][35] = 1\n  pile[4][36] =\
    \ 1\n  pile[4][37] = 1\n  pile[4][38] = 1\n  pile[4][39] = 1\n  pile[4][40] =\
    \ 1\n  pile[4][41] = 1\n  pile[4][42] = 1\n  pile[4][43] = 1\n  pile[4][44] =\
    \ 1\n  pile[4][45] = 1\n  pile[4][46] = 1\n  pile[4][47] = 1\n  pile[4][48] =\
    \ 1\n  pile[4][49] = 1\n  pile[4][50] = 1\n  pile[4][51] = 1\n", "  levels = []\n\
    \  levels << [n]\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << [n]\n\
    \  end\n  levels\nend", "  levels = []\n  levels << n\n  levels << n if n.odd?\n\
    \  levels << n if n.even?\n  levels\nend", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n*2)\n    n /= 2\n  end\n  pile\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n * 2)\n    n = n / 2\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.shift\n    pile.push((pile.length%2 == 0) ?\
    \ pile.pop : pile.pop+2)\n  end\n  pile\nend", "  pile = Array.new(n) { 0 }\n\
    \  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i - 1] + 1 if i % 2 == 0\n\
    \    pile[i] = pile[i - 1] + 1 if i % 2 != 0\n  end\n  pile\nend", "  result =\
    \ []\n  for i in 1..n\n    result << i if i.odd? || i.even?\n  end\n  result\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 3)\n    n = n / 2\n\
    \  end\n  pile\nend", "  levels = []\n  levels << n\n  levels << n if n.odd?\n\
    \  levels << n if n.even?\n  levels\nend", "  levels = []\n  levels << [n]\n \
    \ while levels.length > 0\n    levels << [levels[levels.length-1].odd? ? levels[levels.length-1].odd+1\
    \ : levels[levels.length-1].even]\n  end\n  levels\nend", "  pile = Array.new(n)\n\
    \  pile[0] = n\n  pile[1] = n\n  pile[2] = n\n  pile[3] = n\n  pile[4] = n\n \
    \ pile[5] = n\n  pile[6] = n\n  pile[7] = n\n  pile[8] = n\n  pile[9] = n\n  pile[10]\
    \ = n\n  pile[11] = n\n  pile[12] = n\n  pile[13] = n\n  pile[14] = n\n  pile[15]\
    \ = n\n  pile[16] = n\n  pile[17] = n\n  pile[18] = n\n  pile[19] = n\n  pile[20]\
    \ = n\n  pile[21] = n\n  pile[22] = n\n  pile[23] = n\n  pile[24] = n\n  pile[25]\
    \ = n\n  pile[26] = n\n  pile[27] = n\n  pile[28] = n\n  pile[29] = n\n  pile[30]\
    \ = n\n  pile[31] = n\n  pile[32] = n\n  pile[33] = n\n  pile[34] = n\n  pile[35]\
    \ = n\n  pile[36] = n\n  pile[37] = n\n  pile[38] = n\n  pile[39] = n\n  pile[40]\
    \ = n\n  pile[41] = n\n  pile[42] = n\n  pile[43] = n\n  pile[44] = n\n  pile[45]\
    \ = n\n  pile[46] = n\n  pile[47] = n\n  pile[48] = n\n  pile[49] = n\n  pile[50]\
    \ = n\n  pile[51] = n\n  pile[52] = n\n  pile[53] = n\n  pile[54] = n\n  pile[55]\
    \ = n\n  pile[56] = n\n  pile[57] = n\n  pile[58] = n\n  pile[59] = n\n  pile[60]\
    \ = n\n  pile[61] = n\n  pile[62] = n\n  pile[63] = n\n  pile[64] = n\n  pile[65]\
    \ = n\n  ", "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0\
    \ ? 2 : 3\n    levels << n\n  end\n  levels\nend", "  pile = []\n  for i in 0...n\n\
    \    pile.push((n+i).even? ? i : i+1)\n  end\n  pile\nend\n</cell>\n<code language=julia-1.0>",
  "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd? || i.even?\n  end\n  pile\n\
    end", "  pile = Array.new(n)\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i-1]\
    \ + 1 if i&1 == 1\n    pile[i] = pile[i-1] + 2 if i&2 == 0\n  end\n  pile\nend",
  "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i\
    \ - 1] + 1 if i % 2 == 0\n    pile[i] = pile[i - 1] + 1 if i % 2 != 0\n  end\n\
    \  pile\nend", "  levels = []\n  levels << n if n.odd?\n  levels << n if n.even?\n\
    \  levels.map { |n| make_a_pile(n) }\nend", "  pile = []\n  for i in 1..n\n  \
    \  pile.push(i) if i%2 == 0\n    pile.push(i) if i%2 != 0\n  end\n  pile\nend",
  "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.shift\n    pile.push((pile.length%2\
    \ == 0) ? pile.pop : pile.pop+2)\n  end\n  pile\nend", "  pile = Array.new(n)\n\
    \  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i-1] + 1 if i&1 == 1\n   \
    \ pile[i] = pile[i-1] + 2 if i&2 == 0\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n\
    \  end\n  pile\nend", "  pile = []\n  for i in 0...n\n    pile.push(i+1)\n   \
    \ pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n    pile.push(i+5)\n\
    \    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n    pile.push(i+9)\n\
    \    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n    pile.push(i+13)\n\
    \    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n    pile.push(i+17)\n\
    \    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n    pile.push(i+21)\n\
    \    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n    pile.push(i+25)\n\
    \    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n    pile.push(i+29)\n\
    \    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n    pile.push(i+33)\n\
    \    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n    pile.push(i+37)\n\
    \    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n    pile.push(i+41)\n\
    \    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n    pile.push(i+45)\n\
    \    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n    pile.push(i+49)\n\
    \    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n    pile.push(i+53)\n\
    \    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n    pile.push(i+57)\n\
    \    pile.push(i+58)\n    pile.push(i+59)", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n*3)\n    n = n / 2\n  end\n\
    \  pile\nend", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n\
    \ % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n  pile\nend", "  levels = []\n  levels\
    \ << [n]\n  while levels.length > 0\n    level = levels.pop\n    next_level =\
    \ level.pop\n    next_level = next_level % 2 == 0 ? next_level + 1 : next_level\n\
    \    levels << [next_level]\n  end\n  levels\nend", "  pile = []\n  for i in 1..n\n\
    \    pile.push(i) if i.odd?\n    pile.push(i) if i.even?\n  end\n  pile\nend",
  "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels\
    \ << n\n  end\n  levels\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n\
    \    pile.push(i+1)\n    pile.push(i+2)\n    pile.push(i+3)\n    pile.push(i+4)\n\
    \    pile.push(i+5)\n    pile.push(i+6)\n    pile.push(i+7)\n    pile.push(i+8)\n\
    \    pile.push(i+9)\n    pile.push(i+10)\n    pile.push(i+11)\n    pile.push(i+12)\n\
    \    pile.push(i+13)\n    pile.push(i+14)\n    pile.push(i+15)\n    pile.push(i+16)\n\
    \    pile.push(i+17)\n    pile.push(i+18)\n    pile.push(i+19)\n    pile.push(i+20)\n\
    \    pile.push(i+21)\n    pile.push(i+22)\n    pile.push(i+23)\n    pile.push(i+24)\n\
    \    pile.push(i+25)\n    pile.push(i+26)\n    pile.push(i+27)\n    pile.push(i+28)\n\
    \    pile.push(i+29)\n    pile.push(i+30)\n    pile.push(i+31)\n    pile.push(i+32)\n\
    \    pile.push(i+33)\n    pile.push(i+34)\n    pile.push(i+35)\n    pile.push(i+36)\n\
    \    pile.push(i+37)\n    pile.push(i+38)\n    pile.push(i+39)\n    pile.push(i+40)\n\
    \    pile.push(i+41)\n    pile.push(i+42)\n    pile.push(i+43)\n    pile.push(i+44)\n\
    \    pile.push(i+45)\n    pile.push(i+46)\n    pile.push(i+47)\n    pile.push(i+48)\n\
    \    pile.push(i+49)\n    pile.push(i+50)\n    pile.push(i+51)\n    pile.push(i+52)\n\
    \    pile.push(i+53)\n    pile.push(i+54)\n    pile.push(i+55)\n    pile.push(i+56)\n\
    \    pile.push(i+57)\n    pile.push(i+58)\n    pi", "  pile = []\n  pile.push(n)\n\
    \  while pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n\
    \  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i) if i.odd?\
    \ || i.even?\n  end\n  pile\nend", "  levels = []\n  for i in 0...n\n    levels\
    \ << i + (n&1)\n    n >>= 1\n  end\n  levels\nend", "  levels = []\n  levels <<\
    \ [n]\n  while levels.length > 0\n    level = levels.pop\n    odd_count = level.pop\n\
    \    even_count = level.pop\n    levels << [odd_count, even_count]\n  end\n  levels\n\
    end", "  levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 :\
    \ 3\n    levels << n\n  end\n  levels.reverse\nend", "  pile = Array.new(n) {\
    \ 0 }\n  pile[0] = n\n  for i in 1..n\n    pile[i] = pile[i-1] + 1 if i&1 == 1\n\
    \    pile[i] = pile[i-1] + 2 if i&2 == 0\n  end\n  pile\nend", "  result = []\n\
    \  for i in 1..n\n    result << i if i.odd? || i.even?\n  end\n  result\nend",
  "  pile = Array.new(n) { Array.new(n) }\n  pile[0][0] = 1\n  pile[0][1] = 1\n  pile[1][0]\
    \ = 1\n  pile[1][1] = 1\n  pile[2][0] = 1\n  pile[2][1] = 1\n  pile[3][0] = 1\n\
    \  pile[3][1] = 1\n  pile[4][0] = 1\n  pile[4][1] = 1\n  pile[5][0] = 1\n  pile[5][1]\
    \ = 1\n  pile[6][0] = 1\n  pile[6][1] = 1\n  pile[7][0] = 1\n  pile[7][1] = 1\n\
    \  pile[8][0] = 1\n  pile[8][1] = 1\n  pile[9][0] = 1\n  pile[9][1] = 1\n  pile[10][0]\
    \ = 1\n  pile[10][1] = 1\n  pile[11][0] = 1\n  pile[11][1] = 1\n  pile[12][0]\
    \ = 1\n  pile[12][1] = 1\n  pile[13][0] = 1\n  pile[13][1] = 1\n  pile[14][0]\
    \ = 1\n  pile[14][1] = 1\n  pile[15][0] = 1\n  pile[15][1] = 1\n  pile[16][0]\
    \ = 1\n  pile[16][1] = 1\n  pile[17][0] = 1\n  pile[17][1] = 1\n  pile[18][0]\
    \ = 1\n  pile[18][1] = 1\n  pile[19][0] = 1\n  pile[19][1] = 1\n  pile[20][0]\
    \ = 1\n  pile[20][1] = 1\n  pile[21][0] = 1\n  pile[21][1] = 1\n  pile[22][0]\
    \ = 1\n  pile[22][1] = 1\n  pile[23][0] = 1\n  pile[23][1] = 1\n  pile[24][0]\
    \ = 1\n  pile[24][1] = 1\n  pile[25][0] = 1\n  pile[25][1] = 1\n  pile[26][0]\
    \ = 1\n  pile[26][1] = 1\n  pile[27][0] = 1\n  pile[27][1] = 1\n  pile[28][0]\
    \ = 1\n  pile[28][1] = 1\n  pile[29][0] = 1\n  pile[29][1] = 1\n  pile[30][0]\
    \ = 1\n  pile[30][1] = 1\n  pile[31][0] = 1\n  pile[31][1] = 1\n  pile[32][0]\
    \ = 1\n  pi", "  pile = Array.new(n) { 0 }\n  pile[0] = n\n  for i in 1..n\n \
    \   pile[i] = pile[i - 1] + 1 if i % 2 == 0\n    pile[i] = pile[i - 1] + 1 if\
    \ i % 2 != 0\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\
    \ if i.odd? || i.even?\n  end\n  pile\nend", "  pile = []\n  pile.push(n)\n  while\
    \ pile.length > 0\n    pile.push(n % 2 == 0 ? n : n * 2)\n    n /= 2\n  end\n\
    \  pile\nend", "  result = []\n  for i in 1..n\n    result << i if i.odd? || i.even?\n\
    \  end\n  result\nend", "  pile = []\n  for i in 1..n\n    pile.push(i)\n    if\
    \ n % 2 == 0\n      pile.push(pile.pop * 2)\n    end\n  end\n  pile\nend", " \
    \ levels = []\n  levels << n\n  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n   \
    \ levels << n\n  end\n  levels.reverse\nend", "  levels = []\n  levels << n\n\
    \  while n > 0\n    n -= n % 2 == 0 ? 2 : 3\n    levels << n\n  end\n  levels\n\
    end", "  pile = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n %\
    \ 2 == 0 ? n : n * 2)\n    n = n / 2\n  end\n  pile\nend", "  pile = Array.new(n)\
    \ { Array.new(n) }\n  pile[0][0] = 1\n  pile[0][1] = 1\n  pile[1][0] = 1\n  pile[1][1]\
    \ = 1\n  pile[2][0] = 1\n  pile[2][1] = 1\n  pile[3][0] = 1\n  pile[3][1] = 1\n\
    \  pile[4][0] = 1\n  pile[4][1] = 1\n  pile[5][0] = 1\n  pile[5][1] = 1\n  pile[6][0]\
    \ = 1\n  pile[6][1] = 1\n  pile[7][0] = 1\n  pile[7][1] = 1\n  pile[8][0] = 1\n\
    \  pile[8][1] = 1\n  pile[9][0] = 1\n  pile[9][1] = 1\n  pile[10][0] = 1\n  pile[10][1]\
    \ = 1\n  pile[11][0] = 1\n  pile[11][1] = 1\n  pile[12][0] = 1\n  pile[12][1]\
    \ = 1\n  pile[13][0] = 1\n  pile[13][1] = 1\n  pile[14][0] = 1\n  pile[14][1]\
    \ = 1\n  pile[15][0] = 1\n  pile[15][1] = 1\n  pile[16][0] = 1\n  pile[16][1]\
    \ = 1\n  pile[17][0] = 1\n  pile[17][1] = 1\n  pile[18][0] = 1\n  pile[18][1]\
    \ = 1\n  pile[19][0] = 1\n  pile[19][1] = 1\n  pile[20][0] = 1\n  pile[20][1]\
    \ = 1\n  pile[21][0] = 1\n  pile[21][1] = 1\n  pile[22][0] = 1\n  pile[22][1]\
    \ = 1\n  pile[23][0] = 1\n  pile[23][1] = 1\n  pile[24][0] = 1\n  pile[24][1]\
    \ = 1\n  pile[25][0] = 1\n  pile[25][1] = 1\n  pile[26][0] = 1\n  pile[26][1]\
    \ = 1\n  pile[27][0] = 1\n  pile[27][1] = 1\n  pile[28][0] = 1\n  pile[28][1]\
    \ = 1\n  pile[29][0] = 1\n  pile[29][1] = 1\n  pile[30][0] = 1\n  pile[30][1]\
    \ = 1\n  pile[31][0] = 1\n  pile[31][1] = 1\n  pile[32][0] = 1\n  pi", "  pile\
    \ = []\n  pile.push(n)\n  while pile.length > 0\n    pile.push(n % 2 == 0 ? n\
    \ : n * 2)\n    n /= 2\n  end\n  pile\nend", "  pile = []\n  for i in 1..n\n \
    \   pile.push(i * 2)\n    pile.push(i * 3)\n  end\n  pile\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
