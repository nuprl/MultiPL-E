name: HumanEval_45_triangle_area
language: rb
prompt: "# Given length of a side and high return area for a triangle.\ndef triangle_area(a,\
  \ h)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5,\
  \ 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10,\
  \ 8))\n  end\nend\n"
completions: ["  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).floor\n\
    end", "  (a * h / 2).floor\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a * (h / 2)^2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a *\
    \ h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a * (h / 2)^2)\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a * h / 2).floor\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h) / 2\nend", "  (a * (h / 2)^2)\n\
    end", "  (a*h)/2\nend", "  (a * h / 2).floor\nend", "  (a * h) / 2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).floor\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).round\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).sqrt\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h) / 2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).floor\nend", "  (a*h)/2\n\
    end", "  (a * h / 2).floor\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a * h / 2).sqrt\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * (h / 2)) / Math.sqrt(a * a +\
    \ h * h)\nend", "  (a * (h / 2)**2) + (a * (h / 2)) - (a * h)\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * h / 2).floor\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a * (h / 2)^2)\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * (h / 2)**2) + (a * (h / 2))\
    \ * (h / 2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a * h) / 2\nend", "  (a * (h / 2)**2) + (a * h**2) - (h * a)\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a * (h / 2)^2)\nend",
  "  (a * h) / 2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a * (h / 2)^2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
