language: rb
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd4er53u8

    Started

    .

    Finished in 0.000526063 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1900.91 tests/s, 5702.74 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
- exit_code: 0
  program: "# Filter given list of any python values only for integers\ndef filter_integers(values)\n\
    \  values.select { |v| v.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl7khwzor

    Started

    .

    Finished in 0.00051453 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1943.52 tests/s, 5830.56 assertions/s

    '
  stdout: ''
  timestamp: 1659978005
