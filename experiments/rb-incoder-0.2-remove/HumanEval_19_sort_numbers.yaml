name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\ndef sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do it without using an array. I'm\
    \ sure there is a way to do it with recursion, but I'm just not that good at it.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution that doesn't use an array.\n<|/\
    \ c |>\n<| a tags=ruby |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend",
  "  numbers = numbers.split(' ') # Split string into array of numbers\n  numbers.sort!\
    \ # Sort the array in ascending order\n  numbers.join(' ') # Join the array back\
    \ into a string\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(' ') # Split string into array of numbers\n  numbers.sort!\n\
    \  numbers.join(' ') # Join array back into a string\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.to_s.split\n  numbers.sort!\n  numbers.join\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers = numbers.to_s.split(\" \").map{|n| n.to_i}\n  numbers.sort!\n\
    \  numbers.map!{|n| n.to_s}\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like the way\
    \ you used the splat operator to handle multiple arguments. I didn't know you\
    \ could do that.\n<|/ c |>\n<| c |>\nI didn't know you could do that either. Thanks\
    \ for the tip!\n<|/ c |>\n<| c |>\nI didn't know you could do that either. Thanks\
    \ for the tip!\n<|/ c |>\n<| c |>\nI didn't know you could do that either. Thanks\
    \ for the tip!\n<|/ c |>\n<| c |>\nI didn't know you could do that either. Thanks\
    \ for the tip!\n<|/ c |>\n<| a |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.to_s.split(\" \").map { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.map { |n| n.to_s }.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers\
    \ = numbers.split(' ') \n  numbers.sort! { |a, b| a.to_i <=> b.to_i }\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort!\n  numbers.join(' ')\n\
    end", "  numbers = numbers.split(' ') # Split string into array\n  numbers.sort!\n\
    \  numbers.join(' ') # Join array back into a string\nend", "  numbers.split(\"\
    \ \").sort!\n  numbers.split(\" \").join(\" \")\nend", "  numbers.split(\" \"\
    ).sort!\n  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend",
  "  numbers.split(' ').sort.join(' ')\nend\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, although I prefer `sort_by` over `sort` because `sort` will sort the\
    \ array in place, whereas `sort_by` returns a new array.\n<|/ c |>\n<| c |>\n\
    I agree with you, `sort_by` is more elegant.\n<|/ c |>\n<| c |>\nI agree with\
    \ you too, `sort_by` is more elegant.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ although I prefer `sort_by` over `sort` because `sort` will sort the array in\
    \ place, whereas `sort_by` returns a new array.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, although I prefer `sort_by` over `sort` because `sort` will sort the\
    \ array in place, whereas `sort_by` returns a new array.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers = numbers.split(' ') # Split string into array\n  numbers.sort!\n  numbers.join('\
    \ ') # Join array back into a string\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified a little\
    \ bit more. `sort_numbers` can be replaced with `numbers.sort!.join(' ')`.\n<|/\
    \ c |>\n<| c |>\nYes, that would work as well. I just wanted to show how it could\
    \ be done without having to use an extra variable.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe it can be simplified a little bit more. `sort_numbers`\
    \ can be replaced with `numbers.sort!.join(' ')`.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I believe it can be simplified a little bit more. `sort_numbers`\
    \ can be replaced with `numbers.sort!.join(' ')`.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I believe it can be simplified a little bit more. `sort_numbers`\
    \ can be replaced with `numbers.sort!.join(' ')`.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nI like your solution, however it would be better to use a case\
    \ statement to handle all the possible permutations. `case numbers` instead of\
    \ `numbers.split(\" \").sort.join(\" \")`\n<|/ c |>\n<| c |>\nI agree, that would\
    \ be better. I'll edit my answer to include your suggestion.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n\
    </code>\n<|/ a tags=ruby,sorting |>\n<| a dscore=2 |>\n<code>", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers = numbers.split(\" \").map { |n| n.to_i\
    \ }\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ') # Split string into array of numbers\n\
    \  numbers.sort!\n  numbers.join(' ') # Join array back into string\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \"\
    ).sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about sorting a string, not an array of strings.\n<|/\
    \ c |>\n<| c |>\nI believe it does. He wants to sort a string. He also said \"\
    Input is a space-delimited string of numberals from 'zero' to 'nine'.\" which\
    \ means he wants to sort a string of numbers. He also said \"Valid choices are\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\"\
    \ which means he wants to sort a string of numbers. He also said \"Return the\
    \ string with numbers sorted from smallest to largest\" which means he wants to\
    \ sort a string of numbers. He also said \"The numbers are always separated by\
    \ a single space\" which means he wants to sort a string of numbers. He also said\
    \ \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always separated\
    \ by a single space\" which means he wants to sort a string of numbers. He also\
    \ said \"The numbers are always separated by a single space\" which means he wants\
    \ to sort a string of numbers. He also said \"The numbers are always ", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "  numbers.split('\
    \ ').sort.join(' ')\nend\n</code>\n<|/ a |>\n<| c |>\n`sort_numbers('one two three\
    \ four five six seven eight nine')` returns `'one two three four five six seven\
    \ eight nine'`\n<|/ c |>\n<| c |>\nAh, I see what you mean. Yes, I didn't notice\
    \ that requirement. I'll fix it.\n<|/ c |>\n<| c |>\nI added a more robust solution\
    \ that doesn't require you to know the number of digits in advance.\n<|/ c |>\n\
    <| c |>\nI added a more robust solution that doesn't require you to know the number\
    \ of digits in advance.\n<|/ c |>\n<| c |>\nI added a more robust solution that\
    \ doesn't require you to know the number of digits in advance.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort!\n\
    \  numbers.join(\" \")\nend", "  numbers = numbers.split(\" \").map { |n| n.to_i\
    \ }\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \"\
    ).sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n\
    \  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(' ').sort.join(' ')\nend\n</code>\n<|/ a |>\n<| a tags=ruby\
    \ |>\n<code>", "  numbers.split(\" \").sort!\n  numbers.split(\" \").join(\" \"\
    )\nend", "  numbers = numbers.split(\" \").map { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.map { |n| n.to_s }.join(\" \")\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be possible to do\
    \ it without using an intermediate array. I'm thinking about something like `numbers.sort_by\
    \ { |n| n.to_i }.map { |n| n.to_s }.join(\" \")`\n<|/ c |>\n<| c |>\nYes, that\
    \ would work. `sort_by` returns an enumerator, which you can then `map` over to\
    \ get the final result. `sort_by` also returns an enumerator, which you can then\
    \ `join` on. `sort_by` also returns an enumerator, which you can then `join` on.\
    \ `sort_by` also returns an enumerator, which you can then `join` on. `sort_by`\
    \ also returns an enumerator, which you can then `join` on.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use an intermediate array.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if it would be possible to do it without using\
    \ an intermediate array. I'm thinking about something like `numbers.sort_by {\
    \ |n| n.to_i }.map { |n| n.to_s }.join(\" \")`\n<|/ c |>\n<| c |>\nYes, that would\
    \ work. `sort_by` returns an enumerator, which you can then `map` over to get\
    \ the final result. `sort_by` also returns an enumerator, which you can then `join`\
    \ on. `sort_by` also returns an enumerator, which you can then `join` on. `sort_by`\
    \ also returns an enumerator, which you can then `join` on. `sort_by` also returns\
    \ an enumerator, which you can then `join` on.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.to_s.split(\"\
    \ \").map{|n| n.to_i}\n  numbers.sort!\n  numbers.map!{|n| n.to_s}.join(\" \"\
    )\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,sorting |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(' ') # Split string into\
    \ array of numbers\n  numbers.sort! # Sort the array\n  numbers.join(' ') # Join\
    \ array back into a string\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThis doesn't work if you have a string like \"one two three four five\"\
    \n<|/ c |>\n<| c |>\nIt works fine for me. Try it out here: http://rubyfiddle.com/riddles/9dcfc\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me in ruby 1.9.3p194 (2012-04-20 revision\
    \ 35410) [x86_64-darwin10.8.0]\n<|/ c |>\n<| c |>\nIt works for me in Ruby 1.9.3p194\
    \ (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n<|/ c |>\n<| c |>\nIt works\
    \ for me in Ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers = numbers.split('\
    \ ') # Split string into array of numbers\n  numbers.sort! # Sort the array\n\
    \  numbers.join(' ') # Join array back into a string\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one two three four five\
    \ six seven eight nine')` returns `'one two three four five six seven eight nine'`\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. `sort_numbers('one two\
    \ three four five six seven eight nine')` returns `'one two three four five six\
    \ seven eight nine'`\n<|/ c |>\n<| c |>\nI tested it and it works fine for me.\
    \ `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two three four five six seven eight nine'`\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine for me. `sort_numbers('one two three four five six seven eight\
    \ nine')` returns `'one two three four five six seven eight nine'`\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine for me. `sort_numbers('one two three four\
    \ five six seven eight nine')` returns `'one two three four five six seven eight\
    \ nine'`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \"\
    ).sort.join(\" \")\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.split(\" \").map\
    \ { |n| n.to_i }\n  numbers.sort!\n  numbers.map { |n| n.to_s }.join(\" \")\n\
    end", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to make it work for negative numbers as well?\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `sort_numbers(\"-2 -3 -4 -5 -1\")` returns `\"-1\
    \ -2 -3 -4 -5\"`.\n<|/ c |>\n<| c |>\nI believe this solution will work for negative\
    \ numbers as well. Try it out and let me know if it works for you.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for negative numbers. Try it out and let me\
    \ know if it works for you.\n<|/ c |>\n<| c |>\nThis solution doesn't work for\
    \ negative numbers. Try it out and let me know if it works for you.\n<|/ c |>\n\
    <| a tags=ruby,sorting |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,sorting,arrays |>\n<code>",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n\
    \  numbers.split(\" \").join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much for this! I used the second method and it worked\
    \ perfectly. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I added a third method\
    \ which uses `sort_by` instead of `sort!`\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort!\n  numbers.join(' ')\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort!\n  numbers.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers = numbers.split(' ') # Split string into array of numbers\n\
    \  numbers.sort!\n  numbers.join(' ') # Join array back into a string\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| c |>\nThis doesn't work. `sort_numbers('one\
    \ two three four five six seven eight nine')` returns `\"one two three four five\
    \ six seven eight nine\"`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Did\
    \ you copy and paste it exactly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ I'm using Ruby 1.9.3p194.\n<|/ c |>\n<| c |>\nI tested it on 1.9.3p194 and it\
    \ works fine. Are you sure you copied it exactly? I tested it on 1.9.3p194 and\
    \ it works fine.\n<|/ c |>\n<| c |>\nYes, I copied it exactly. I'm using Ruby\
    \ 1.9.3p194.\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,sorting\
    \ |>\n<| a tags=ruby,sorting |>\n<code>", "  numbers = numbers.split(' ') # Split\
    \ string into array of numbers\n  numbers.sort!\n  numbers.join(' ') # Join array\
    \ back into a string\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers = numbers.to_s\n  numbers = numbers.split(\" \").map{|n| n.to_i}\n\
    \  numbers.sort!\n  numbers.map!{|n| n.to_s}.join(\" \")\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers\
    \ = numbers.to_s.split(\" \").map(&:to_i)\n  numbers.sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.split(\"\
    \ \").sort\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort!\n  numbers.join(' ')\n\
    end", "  numbers = numbers.to_s\n  numbers = numbers.split(//)\n  numbers.sort!\n\
    \  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \"\
    )\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers\
    \ = numbers.split(' ') # Split string into array of numbers\n  numbers.sort!\n\
    \  numbers.join(' ') # Join array back into a string\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers\
    \ = numbers.split(' ') # Split into array\n  numbers.sort!\n  numbers.join(' ')\
    \ # Join array back into string\nend", "  numbers.split(\" \").sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
