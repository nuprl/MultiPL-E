name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  \nend", "    \n    # Write your code here\n    \n    return []\n\
    \    \nselect_words(\"abracadabra\", 3)\n</cell>\n<text>\nQuestion 3\nWrite a\
    \ function that returns a list of all words from string s that contain exactly\
    \ n vowels, in order these words appear in the string s.\nIf the string s is empty\
    \ then the function should return an empty list.\nNote: you may assume the input\
    \ string contains only letters and spaces.\nExamples:\nselect_words(\"abracadabra\"\
    , 3)\nselect_words(\"abracadabra\", 1)\nselect_words(\"abracadabra\", 0)\nselect_words(\"\
    abracadabra\", 2)\nselect_words(\"abracadabra\", 4)\nselect_words(\"abracadabra\"\
    , 5)\nselect_words(\"abracadabra\", 6)\nselect_words(\"abracadabra\", 7)\nselect_words(\"\
    abracadabra\", 8)\nselect_words(\"abracadabra\", 9)\nselect_words(\"abracadabra\"\
    , 10)\nselect_words(\"abracadabra\", 11)\nselect_words(\"abracadabra\", 12)\n\
    select_words(\"abracadabra\", 13)\nselect_words(\"abracadabra\", 14)\nselect_words(\"\
    abracadabra\", 15)\nselect_words(\"abracadabra\", 16)\nselect_words(\"abracadabra\"\
    , 17)\nselect_words(\"abracadabra\", 18)\nselect_words(\"abracadabra\", 19)\n\
    select_words(\"abracadabra\", 20)\nselect_words(\"abracadabra\", 21)\nselect_words(\"\
    abracadabra\", 22)\nselect_words(\"abracadabra\", 23)\nselect_words(\"abracadabra\"\
    , 24)\nselect_words(\"abracadabra\", 25)\nselect_words(\"abracadabra\", 26)\n\
    select_words(\"abracadabra\", 27)\nselect_words(\"abracadabra\", 28)\nselect_words(\"\
    abracadabra\", 29)\nselect_words(\"abracadabra\", 30)\nselect_words(\"abracadabra\"\
    , 31)\nselect_words(\"abracadabra\", 32)\nselect_words(\"abracadabra\", 33)\n\
    select_words(\"abracadabra\", 34)\nselect_words(\"abracadabra\", 35)\nselect_words(\"\
    abracadabra\", 36)\nselect_words(\"abracadabra\", 37)\n", "  \n  # Your code here\n\
    \  \nend", "    \n    # Your code here\n    \n    return []\n    ", "  \nend",
  "    \n    # Your code here\n    \n    return []\n    ", "  \nend", "  result =\
    \ []\n  s.split(\" \").each do |word|\n    if word.split(\"\").size == n\n   \
    \   result << word\n    end\n  end\n  result\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n\
    \        result.push(word)\n      end\n    end\n  end\n  result\nend", "  result\
    \ = []\n  \n  # TODO: Write your code here\n  \n  return result\nend", "  result\
    \ = []\n  \n  # TODO: implement this function\n  \n  return result\nend", "  \n\
    \  # TODO: implement this function\n  \nend", "  result = []\n  \n  # TODO: implement\
    \ this function\n  return result\nend", "  \nend", "  \n  # Your code here\n \
    \ \nend", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] == ' '\n\
    \      i += 1\n      while i < s.length and s[i] == ' '\n        i += 1\n    \
    \  i += 1\n      continue\n    i += 1\n    result.push s[i]\n    i += 1\n  end\n\
    \  result\nend", "  \n  # TODO: implement this function\n  return []\nend", " \
    \ \nend", "  \nend", "  \n  # Your code here\n  \nend\n</cell>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return words\nend\n</cell>\n<cell>", "  \n\
    \  # TODO: implement this function\n  return []\nend", "  words = []\n  i = 0\n\
    \  while i < s.length\n    if s.slice(i,i+n).include?(\"aeiou\")\n      words\
    \ << s.slice(i,i+n)\n      i += n\n    end\n    i += 1\n  end\n  words\nend\n\
    </cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", 2)\n</cell>\n\
    <code language=julia-1.5>\nselect_words(\"abracadabra\", 1)\n</cell>\n<code language=julia-1.5>\n\
    select_words(\"abracadabra\", 0)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    abracadabra\", -1)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\"\
    , -2)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -3)\n\
    </cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -4)\n</cell>\n\
    <code language=julia-1.5>\nselect_words(\"abracadabra\", -5)\n</cell>\n<code language=julia-1.5>\n\
    select_words(\"abracadabra\", -6)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    abracadabra\", -7)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\"\
    , -8)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -9)\n\
    </cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -10)\n</cell>\n\
    <code language=julia-1.5>\nselect_words(\"abracadabra\", -11)\n</cell>\n<code\
    \ language=julia-1.5>\nselect_words(\"abracadabra\", -12)\n</cell>\n<code language=julia-1.5>\n\
    select_words(\"abracadabra\", -13)\n</cell>\n<code language=julia-1.5>\nselect_words(\"\
    abracadabra\", -14)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\"\
    , -15)\n</cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -16)\n\
    </cell>\n<code language=julia-1.5>\nselect_words(\"abracadabra\", -17)\n</cell>\n\
    <code language=julia-1.5>\nselect_words(\"abracadabra\", -18)\n</cell>\n", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |char|\n\
    \      if char.match(/[b-df-hj-np-tv-z]/)\n        result << word if word.split(\"\
    \").length == n\n      end\n    end\n  end\n  result\nend", "  result = []\n \
    \ \n  # TODO: Write your code here\n  \n  return result\nend", "  words = []\n\
    \  \n  # TODO: implement this function\n  \n  return words\nend", "    words =\
    \ []\n    i = 0\n    while i < s.length\n        if s.chars.count { |c| c == s[i]}\
    \ == n\n            words.push(s[i])\n            i += 1\n        end\n    end\n\
    \    return words\nend", "  \nend", "  \nend", "  \n  # Your code here\n  \nend",
  "    \n    # Write your code here\n    \n    return []\n    \nselect_words(\"abc\
    \ def ghi\", 2)\n</cell>\n<text>\nProblem 8\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nIf the string has less than\
    \ two words, return 0.\nIf the string has two or fewer words, return 1.\nIf the\
    \ string has many words, return 2.", "  \nend", "  result = []\n  \n  # TODO:\
    \ implement this function\n  \n  return result\nend", "  result = []\n  \n  #\
    \ TODO: implement this function\n  \n  return result\nend", "  \nend", "  \nend",
  "  \nend", "  result = []\n  s.split(//).each do |word|\n    word.split(//).each\
    \ do |letter|\n      result << letter if word.count(letter) == n\n    end\n  end\n\
    \  result\nend\nselect_words(\"\", 0)\nselect_words(\"abc cde\", 2)\nselect_words(\"\
    abc cde fgh\", 2)\nselect_words(\"abc cde fgh\", 3)\nselect_words(\"abc cde fgh\"\
    , 4)\nselect_words(\"abc cde fgh\", 5)\nselect_words(\"abc cde fgh\", 6)\nselect_words(\"\
    abc cde fgh\", 7)\nselect_words(\"abc cde fgh\", 8)\nselect_words(\"abc cde fgh\"\
    , 9)\nselect_words(\"abc cde fgh\", 10)\nselect_words(\"abc cde fgh\", 11)\nselect_words(\"\
    abc cde fgh\", 12)\nselect_words(\"abc cde fgh\", 13)\nselect_words(\"abc cde\
    \ fgh\", 14)\nselect_words(\"abc cde fgh\", 15)\nselect_words(\"abc cde fgh\"\
    , 16)\nselect_words(\"abc cde fgh\", 17)\nselect_words(\"abc cde fgh\", 18)\n\
    select_words(\"abc cde fgh\", 19)\nselect_words(\"abc cde fgh\", 20)\nselect_words(\"\
    abc cde fgh\", 21)\nselect_words(\"abc cde fgh\", 22)\nselect_words(\"abc cde\
    \ fgh\", 23)\nselect_words(\"abc cde fgh\", 24)\nselect_words(\"abc cde fgh\"\
    , 25)\nselect_words(\"abc cde fgh\", 26)\nselect_words(\"abc cde fgh\", 27)\n\
    select_words(\"abc cde fgh\", 28)\nselect_words(\"abc cde fgh\", 29)\nselect_words(\"\
    abc cde fgh\", 30)\nselect_words(\"abc cde fgh\", 31)\nselect_words(\"abc cde\
    \ fgh\", 32)\nselect_words(\"abc cde fgh\", 33)\nselect_words(\"abc cde fgh\"\
    , 34)\nselect_words(\"abc cde fgh\", 35)\nselect_words(\"abc cde fgh\", 36)\n\
    select_words(\"abc cde fgh\", 37)\nselect_words(\"abc cde fgh", "  result = []\n\
    \  \n  # TODO: implement this function\n  \n  return result\nend\n</cell>\n<cell>",
  "  \n  # Your code here\n  \nend\n</cell>\n<cell>", "  \n  # Your code here\n  \n\
    end", "    \n    # Your code here\n    \n    return words\nend", "  result = []\n\
    \  \n  # TODO: implement this function\n  \n  return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "  result = []\n  \n  # TODO: implement this function\n\
    \  \n  return result\nend", "  \nend", "  result = []\n  \n  # TODO: implement\
    \ this function\n  \n  return result\nend\n</cell>\n<cell>", "  \nend", "  \n\
    end", "  \nend", "  \nend", "  \n  # Your code here\n  \nend", "  \nend", "  \
    \  \n    # Write your code here\n    \n    return []\n    \nselect_words(\"abc\
    \ def ghi\", 2)\n</cell>\n<text>\nProblem 8\nWrite a function that returns a list\
    \ of all words from a string that have two or three vowels (a, e, i, o, u) and\
    \ that do not contain three vowels (a, e, i, o, u) anywhere else in the string.\
    \ For example, your function should return the following list: ['i', 'you', 'are',\
    \ 'here', 'there'].", "  result = []\n  \n  # TODO: implement this function\n\
    \  \n  return result\nend", "    \n    # Write your code here\n    \n    return\
    \ []\n    \nselect_words(\"abracadabra\", 2)\n</cell>\n<text>\nProblem 8\nWrite\
    \ a function that takes a string as input and returns a string with the first\
    \ letter of each word capitalized.\nIf the first letter of a word is already capitalized,\
    \ then leave it as it is.\nExamples:\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World!\") \u279E \"Hello World!\"\ncapitalize(\"\
    Hello World!!\") \u279E \"Hello World!!\"\ncapitalize(\"Hello World!!!\") \u279E\
    \ \"Hello World!!!\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"\
    Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World\"\ncapitalize(\"Hello World\") \u279E \"Hello World\"\ncapitalize(\"Hello\
    \ World\") \u279E \"Hello World\"\ncapitalize(\"Hello World\") \u279E \"Hello\
    \ World", "  result = []\n  \n  # TODO: implement this function\n  \n  return\
    \ result\nend", "  \nend", "  \n  # Your code here\n  \nend", "    \n    # Write\
    \ your code here\n    \n    return []\n    \nselect_words(\"abc def ghi jkl mno\
    \ pqr\", 3)\n</cell>\n<cell>", "  words = []\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n          while i < s.length\n            if s[i]\
    \ == \" \"\n              i += 1\n              while i < s.length\n         \
    \       if s[i] == \" \"\n                  i += 1\n                  while i\
    \ < s.length\n                    if s[i] == \" \"\n                      i +=\
    \ 1\n                      while i < s.length\n                        if s[i]\
    \ == \" \"\n                          i += 1\n                          while\
    \ i < s.length\n                            if s[i] == \" \"\n               \
    \               i += 1\n                              while i < s.length\n   \
    \                             if s[i] == \" \"\n                             \
    \     i += 1\n                                  while i < s.length\n         \
    \                           if s[i] == \" \"\n                               \
    \       i += 1\n                                      while i < s.length\n   \
    \                                     if s[i] == \" \"\n                     \
    \                     i += 1\n                                          while\
    \ i < s.length\n                                            if s[i] == \" \"\n\
    \                                              i += 1\n                      \
    \                        while i < s.length\n                                \
    \                if s[i] == \" \"\n                                          \
    \        i += 1\n                                                  while i < s.length\n\
    \                                                    if s[i] == \" \"\n      \
    \                                                i += 1\n                    \
    \                                  while i < s.length\n                      \
    \                                  if s[i] == \" \"\n                        \
    \                                  i += 1\n                                  \
    \                        while i < s.length\n                                \
    \                            if s[i] == \" \"\n                              \
    \                                i += 1\n                                    \
    \                          while i < s.length\n                              \
    \                                  if s[i] == \" \"\n                        \
    \                                          i += 1\n                          \
    \                                        while i < s.length\n                \
    \                                                    if s[i] == \" \"\n      \
    \                                                                i += 1\n    \
    \                                                                  while i < s.length\n\
    \                                                                        if s[i]\
    \ == \" \"\n                                                                 \
    \         i += 1\n                                                           \
    \               while i < s.length\n                                         \
    \                                   if s[i] == \" \"\n                       \
    \                                                       i += 1\n             \
    \                                                                 while i < s.length\n\
    \                                                                            \
    \    if s[i] == \" \"\n                                                      \
    \                            i += 1\n                                        \
    \                                          while i < s.length\n              \
    \                                                                      if s[i]\
    \ == \" \"\n                                                                 \
    \                     i += 1\n                                               \
    \                                       while i < s.length\n                 \
    \                                                                       if s[i]\
    \ == \" \"\n                                                                 \
    \                         i += 1\n                                           \
    \                                               while i < s.length\n         \
    \                                                                            \
    \       if s[i] == \" \"\n                                                   \
    \                                           i += 1\n                         \
    \                                                                     while i\
    \ < s.length\n                                                               \
    \                                 if s[i] == \" \"\n                         \
    \                                                                         i +=\
    \ 1\n                                                                        \
    \                          while i < s.length\n                              \
    \                                                                      if s[i]\
    \ == \" \"\n                                                                 \
    \                                     i += 1\n                               \
    \                                                                       while\
    \ i < s.length\n                                                             \
    \                                           if s[i] == \" \"\n               \
    \                                                                            \
    \               i += 1\n                                                     \
    \                                                     while i < s.length\n   \
    \                                                                            \
    \                             if s[i] == \" \"\n                             \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                               while i < s.length\n         \
    \                                                                            \
    \                           if s[i] == \" \"\n                               \
    \                                                                            \
    \       i += 1\n                                                             \
    \                                                     while i < s.length\n   \
    \                                                                            \
    \                                     if s[i] == \" \"\n                     \
    \                                                                            \
    \                     i += 1\n                                               \
    \                                                                       while\
    \ i < s.length\n                                                             \
    \                                                           if s[i] == \" \"\n\
    \                                                                            \
    \                                              i += 1\n                      \
    \                                                                            \
    \                        while i < s.length\n                                \
    \                                                                            \
    \                if s[i] == \" \"\n                                          \
    \                                                                            \
    \        i += 1\n                                                            \
    \                                                                  while i < s.length\n\
    \                                                                            \
    \                                                    if s[i] == \" \"\n      \
    \                                                                            \
    \                                                i += 1\n                    \
    \                                                                            \
    \                                  while i < s.length\n                      \
    \                                                                            \
    \                                  if s[i] == \" \"\n                        \
    \                                                                            \
    \                                  i += 1\n                                  \
    \                                                                            \
    \                        while i < ", "  result = []\n  \n  # TODO: implement\
    \ this function\n  \n  return result\nend", "  result = []\n  s.split(//).each\
    \ do |word|\n    word.split(//).each do |letter|\n      if letter.size == n\n\
    \        result.push(word)\n      end\n    end\n  end\n  result\nend", "  \nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  \nend", "  \nend", "  \nend", "  \nend", "  result = []\n  \n  # TODO: implement\
    \ this function\n  \n  return result\nend", "  \nend", "  result = []\n  \n  if\
    \ s.empty?\n    return result\n  \n  s.each_char do |c|\n    if c.upcase == c.downcase\n\
    \      if c.upcase == c\n        if n == 1\n          result << c\n        end\n\
    \      end\n    end\n  end\n  \n  result\nend", "  \nend", "  \nend", "  result\
    \ = []\n  \n  # TODO: implement this function\n  \n  return result\nend", "  result\
    \ = []\n  \n  # TODO: implement this function\n  \n  return result\nend", "  \n\
    end", "  result = []\n  \n  # TODO: implement this function\n  return result\n\
    end", "  \nend", "  result = []\n  \n  # TODO: implement this function\n  \n \
    \ return result\nend", "  \nend", "  result = []\n  \n  # TODO: implement this\
    \ function\n  return result\nend", "  result = []\n  s.split(' ').each do |word|\n\
    \    word.chars.each do |char|\n      if char == char.upcase\n        result <<\
    \ word\n      end\n    end\n  end\n  result\nend\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 2)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 1)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 3)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 4)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 5)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 6)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 7)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 8)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 9)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 10)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 11)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 12)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 13)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 14)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 15)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 16)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 17)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 18)\n</cell>\n<cell>\nselect_words(\"\
    The quick brown ", "  result = []\n  \n  # TODO: Write your code here\n  return\
    \ result\nend", "  \nend", "  result = []\n  \n  if s.empty?\n    return result\n\
    \  end\n  \n  s.chars.each do |c|\n    if c.upcase == c\n      result << c\n \
    \   end\n  end\n  \n  result\nend\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 1)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 2)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 3)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 4)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 5)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 6)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 7)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 8)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 9)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 10)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 11)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 12)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 13)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 14)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 15)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 16)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 17)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 18)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 19)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 20)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 21)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 22)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 23)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 24)\n</cell>\n\
    <cell", "  \n  # Your code here\n  \nend", "  \nend", "  \nend", "  \nend", " \
    \ result = []\n  \n  # TODO: implement this function\n  return result\nend", " \
    \   \n    # Write your code here\n    \n    return []\n    \nselect_words(\"abc\
    \ def ghi\", 2)\n</cell>\n<text>\n(IMPLEMENTATION) Test Your Solution\nTest your\
    \ solution to the question posed in (SELECT-WORDS.)", "    \n    # Write your\
    \ code here\n    \n    return []\n    \nselect_words(\"abracadabra\", 2)\n</cell>\n\
    <text>\nProblem 8\nWrite a function that takes a string and returns the number\
    \ of words it contains.\nIf the string does not contain any words, return 0.\n\
    If the string contains only spaces, return 1.\nIf the string contains multiple\
    \ words, return the number of words.\nExamples:\ncount_words(\"this has, a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a , a\
    \ , a , a , a , a , a , a , a , a , a , a , a ", "  \nend", "  \nend", "  \nend",
  "  \nend", "  result = []\n  s.split(//).each do |word|\n    word.split(//).each\
    \ do |letter|\n      result << letter if word.count(letter) == n\n    end\n  end\n\
    \  result\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any methods that would require a loop. I am only allowed\
    \ to use loops, conditionals, arrays, hashes, etc. I was able to solve the problem\
    \ by using a combination of loops and conditionals. I posted my solution below.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  \nend", "  result = []\n  s.split(\"\"\
    ).each do |word|\n    word.split(\"\").each do |letter|\n      if letter.to_s.size\
    \ >= n\n        result << word\n      end\n    end\n  end\n  result\nend", " \
    \ words = []\n  \n  # TODO: Write your code here\n  \n  return words\nend", " \
    \ result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  result = []\n  \n  # TODO: Write your code here\n  \n  return result\nend\n</cell>\n\
    <code language=julia-1.5>", "  result = []\n  \n  if s.empty?\n    return result\n\
    \  \n  s.each_char do |c|\n    if c.upcase == c.downcase\n      result << c\n\
    \    end\n  end\n  \n  result.select { |w| w.length == n }\nend", "  result =\
    \ []\n  s.split('').each do |word|\n    word.split(//).each do |letter|\n    \
    \  result << letter if letter == n\n    end\n  end\n  result\nend", "  \nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "    \n    # Write your code here\n    \n    return []\n    \nselect_words(\"abracadabra\"\
    , 2)\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a string and returns\
    \ the number of words in the string that are palindromes.", "  result = []\n \
    \ s.split(\" \").each do |word|\n    if word.chars.uniq.size == n\n      result\
    \ << word\n    end\n  end\n  result\nend", "  \n  # Your code here\n  \nend\n\
    </cell>\n<cell>", "  \nend", "  \nend", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    if word.count(n) == n\n      result << word\n    end\n  end\n\
    \  result\nend", "  \nend", "  \n  # Your code here\n  \nend", "    \n    # Write\
    \ your code here\n    \n    return []\n    \nselect_words(\"abracadabra\", 2)\n\
    </cell>\n<cell>", "  \nend", "  \nend", "    \n    # Your code here\n    \n  \
    \  return words\n    \nselect_words(\"abc def ghi jkl mno pqr\", 2)\n</cell>\n\
    <cell>", "  result = []\n  \n  if s.empty?\n    result\n  else\n    \n    i =\
    \ 0\n    \n    while i < s.length\n      \n      word = s[i]\n      \n      if\
    \ word.count(\"a\") == n || word.count(\"e\") == n || word.count(\"i\") == n ||\
    \ word.count(\"o\") == n || word.count(\"u\") == n\n        result << word\n \
    \     end\n      \n      i += 1\n    end\n    \n    result\n  end\nend", "  result\
    \ = []\n  \n  # TODO: implement this function\n  \n  return result\nend\n</cell>\n\
    <cell>", "  \nend", "    \n    # Your code here\n    \n    return []\n    ", " \
    \ result = []\n  \n  # TODO: implement this function\n  \n  return result\nend\n\
    </cell>\n<cell>", "  \nend", "  \nend", "  \nend", "  result = []\n  s.split(\"\
    \").each do |word|\n    if word.count(n) == n\n      result << word\n    end\n\
    \  end\n  result\nend", "  \n  # Your code here\n  \nend\n</cell>\n<cell>", " \
    \ result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "  \nend", "  \nend", "  result = []\n  s.split(' ').each do |word|\n    result\
    \ << word if word.count(n).zero?\n  end\n  result\nend\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 2)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 1)\n\
    </cell>\n<cell>\nselect_words('abc def ghi jkl mno', 0)\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 3)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 4)\n\
    </cell>\n<cell>\nselect_words('abc def ghi jkl mno', 5)\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 6)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 7)\n\
    </cell>\n<cell>\nselect_words('abc def ghi jkl mno', 8)\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 9)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 10)\n\
    </cell>\n<cell>\nselect_words('abc def ghi jkl mno', 11)\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 12)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno',\
    \ 13)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 14)\n</cell>\n<cell>\n\
    select_words('abc def ghi jkl mno', 15)\n</cell>\n<cell>\nselect_words('abc def\
    \ ghi jkl mno', 16)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno', 17)\n\
    </cell>\n<cell>\nselect_words('abc def ghi jkl mno', 18)\n</cell>\n<cell>\nselect_words('abc\
    \ def ghi jkl mno', 19)\n</cell>\n<cell>\nselect_words('abc def ghi jkl mno",
  "  \nend", "  \nend", "  result = []\n  \n  if s.empty?\n    return result\n  end\n\
    \  \n  s.chars.each do |c|\n    if c.upcase == c\n      result << c\n    end\n\
    \  end\n  \n  result\nend", "    \n    # Write your code here\n    \n    return\
    \ []\n    \nselect_words(\"abracadabra\", 2)\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are palindromes.", "  \n  # TODO: Write your code here\n  \nend", "  \n\
    end", "  result = []\n  \n  if s.empty?\n    return result\n  end\n  \n  s.chars.each\
    \ do |char|\n    if char.match(/[aeiou]/)\n      result << char\n    end\n  end\n\
    \  \n  result\nend", "  \nend", "  result = []\n  s.split(' ').each do |word|\n\
    \    word.chars.each do |c|\n      if c.downcase == 'a' || c.downcase == 'e' ||\
    \ c.downcase == 'i' || c.downcase == 'o' || c.downcase == 'u' || c.downcase ==\
    \ 'y' || c.downcase == 'o'\n        result << word\n      end\n    end\n  end\n\
    \  result\nend", "  \nend", "  result = []\n  \n  # TODO: implement this function\n\
    \  \n  return result\nend", "  \nend", "  \n  # Your code here\n  \nend", "  \
    \  \n    # Write your code here\n    \n    return []\n    \nselect_words(\"abc\
    \ def ghi\", 2)\n</cell>\n<text>\nProblem 8\nWrite a function that returns a list\
    \ of all words from string s that contain exactly n vowels, in order these words\
    \ appear in the string s.\nIf the string s is empty then the function should return\
    \ an empty list.\nNote: you may assume the input string contains only letters\
    \ and spaces.\nExamples:\nselect_words(\"abc def ghi\", 2)\n[\"abc def\", \"ghi\"\
    ]\nselect_words(\"abc def ghi\", 3)\n[\"abc def\", \"ghi\"]\nselect_words(\"abc\
    \ def ghi\", 4)\n[]\nselect_words(\"abc def ghi\", 5)\n[]", "  \nend", "  words\
    \ = []\n  \n  # TODO: implement this function\n  return words\nend", "  \nend",
  "  \n  # Your code here\n  \nend", "    words = []\n    if s.empty?\n        words\n\
    \    else\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n}}/)\n        words\
    \ += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-1}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-2}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-3}}/)\n        words +=\
    \ s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-4}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-5}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-6}}/)\n        words +=\
    \ s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-7}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-8}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-9}}/)\n        words +=\
    \ s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-10}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-11}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-12}}/)\n        words +=\
    \ s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-13}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-14}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-15}}/)\n        words +=\
    \ s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-16}}/)\n        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-17}}/)\n\
    \        words += s.scan(/[bcdfghjklmnpqrstvwxyz]{#{n-18}}/)\n        words +=\
    \ s.scan", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\"\
    ).each do |letter|\n      if letter.to_i == n\n        result << word\n      end\n\
    \    end\n  end\n  result\nend", "  \n  # Your code here\n  \nend", "  \nend",
  "  result = []\n  \n  # TODO: Write your code here\n  \n  return result\nend", " \
    \ words = []\n  \n  # Your code here\n  \n  return words\nend", "  result = []\n\
    \  \n  # TODO: implement this function\n  \n  return result\nend", "  result =\
    \ []\n  s.split(\" \").each do |word|\n    if word.chars.uniq.size == n\n    \
    \  result << word\n    end\n  end\n  result\nend\n</cell>\n<cell>", "  \nend",
  "  result = []\n  s.split(//).each do |word|\n    result << word if word.count(n).zero?\n\
    \  end\n  result\nend", "  result = []\n  i = 0\n  while i < s.length\n    if\
    \ s.chars.count { |c| c == s.chars[i] } == n\n      result << s.chars[i]\n   \
    \   i += 1\n    end\n  end\n  result\nend", "  result = []\n  \n  # TODO: implement\
    \ this function\n  \n  return result\nend", "  \nend", "    \n    # Write your\
    \ code here\n    \n    return []\n    \nselect_words(\"abracadabra\", 3)\n</cell>\n\
    <text>\nProblem 8\nWrite a function that takes a string and returns the number\
    \ of words in the string that are palindromes.", "  \n  # Your code here\n  \n\
    end\n</cell>\n<cell>", "  result = []\n  \n  # TODO: implement this function\n\
    \  \n  return result\nend", "  result = []\n  \n  # TODO: implement this function\n\
    \  \n  return result\nend\n</cell>\n<cell>", "  \nend", "  result = []\n  s.split(//).each\
    \ do |word|\n    word.split(//).each do |char|\n      result << word if char.count(n).to_i\
    \ == n\n    end\n  end\n  result\nend", "  \n  # Your code here\n  \nend", " \
    \ result = []\n  \n  # TODO: Write your code here\n  \n  return result\nend\n\
    </cell>\n<cell>\nselect_words(\"abracadabra\", 2)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 1)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 0)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 3)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 4)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 5)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 6)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 7)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 8)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 9)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 10)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 11)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 12)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 13)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 14)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 15)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 16)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 17)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 18)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 19)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 20)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 21)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 22)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 23)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 24)\n</cell>\n<cell>\nselect_words(\"abracadabra\", ", "  result = []\n  \n\
    \  # TODO: implement this function\n  return result\nend", "  \nend", "  \n  #\
    \ TODO: Write your code here\n  \nend", "    \n    # Write your code here\n  \
    \  \n    return []\n    \nselect_words(\"abc def ghi\", 2)\n</cell>\n<cell>",
  "  \n  # Your code here\n  \nend", "    \n    # Your code here\n    \n    return\
    \ []\n    ", "    \n    # Your code here\n    \n    return words\nend", "  result\
    \ = []\n  \n  if s.empty?\n    return result\n  \n  s.chars.each do |c|\n    if\
    \ c.upcase == c.downcase\n      result << c\n    end\n  end\n  \n  result\nend",
  "  result = []\n  \n  if s.empty?\n    return result\n  end\n  \n  s.chars.each\
    \ do |c|\n    if c.upcase == c.downcase\n      result << c\n    end\n  end\n \
    \ \n  result.uniq!\n  \n  result.select { |w| w.length == n }\nend\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 2)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 1)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 3)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 4)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 5)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 6)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 7)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 8)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 9)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 10)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 11)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 12)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 13)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 14)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 15)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 16)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 17)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 18)\n</cell>\n<cell>\nselect_words(\"\
    abracadabra\", 19)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 20)\n</cell>\n\
    <cell>\nselect_words(\"abracadabra\", 21)\n</cell>\n<cell>\nselect_words(\"abracadabra\"\
    , 22)\n</cell>\n<cell>\nselect_words(\"abracadabra\", 23)\n</cell>\n<cell", " \
    \ result = []\n  \n  # TODO: implement this function\n  \n  return result\nend",
  "    \n    # Your code here\n    \n    return words\n    \nselect_words(\"abc def\
    \ ghi jkl\", 2)\n</cell>\n<text>\nProblem 8\nImplement a function that returns\
    \ a list of all words from a string that have two \nvowels (a, e, i, o, u) and\
    \ three consonants (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,\
    \ u, v, w, x, y, z).\nIf the string s is empty then the function should return\
    \ an empty list.\nExamples:\nselect_words(\"abc def ghi jkl\", 2) \u279E [\"abc\"\
    , \"def\", \"ghi\", \"jkl\"]\nselect_words(\"abc def ghi jkl\", 3) \u279E [\"\
    abc\", \"def\", \"ghi\", \"jkl\"]\nselect_words(\"abc def ghi jkl\", 4) \u279E\
    \ []\nselect_words(\"abc def ghi jkl\", 0) \u279E []\nHint: You may use regular\
    \ expressions to help you solve this problem.", "  result = []\n  \n  # TODO:\
    \ implement this function\n  \n  return result\nend", "  result = []\n  \n  #\
    \ TODO: implement this function\n  \n  return result\nend", "  result = []\n \
    \ s.split(\" \").each do |word|\n    word.split(\"\").each do |char|\n      if\
    \ char == n\n        result << word\n      end\n    end\n  end\n  result\nend",
  "  \nend", "  \nend", "  \n  # Your code here\n  \nend\n</cell>\n<cell>", "  \n\
    end", "  result = []\n  \n  # TODO: implement this function\n  \n  return result\n\
    end", "  result = []\n  \n  # TODO: implement this function\n  \n  return result\n\
    end", "  \nend", "  \n  # Your code here\n  \nend", "  \nend", "  \nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.to_i == n\n        result << word\n      end\n    end\n  end\n\
    \  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
