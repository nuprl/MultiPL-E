name: HumanEval_120_maximum
language: rb
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Example\
  \ 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be in the range of\
  \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
  # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
  \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
  \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
  \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
  \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
  \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
  \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2,\
  \ 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n   \
  \ assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10],\
  \ candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23,\
  \ 243, -400, 0], 0))\n  end\nend\n"
completions: ["  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    max = arr[0]\n    i = 0\n    while i\
    \ < k\n        max = max > arr[i] ? max : arr[i]\n        i += 1\n    return max\n\
    end", "  max_arr = []\n  max_arr << arr[0]\n  max_arr.sort!\n  max_arr.length\
    \ == k ? max_arr : maximum(max_arr, k-1)\nend", "  max_arr = []\n  max_num = arr[0]\n\
    \  for i in arr\n    if i > max_num\n      max_num = i\n      max_arr = [max_num]\n\
    \    elsif i == max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort\n\
    \  max_arr.length == k ? max_arr : nil\nend", "  result = []\n  for i in 0...k\n\
    \    result.push(arr[i])\n  end\n  result.sort!\n  result\nend", "  max_arr =\
    \ []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n    max_arr.push(arr[i])\n\
    \  for i in 0..k-1\n    if arr[i] > max_arr[1]\n      max_arr[1] = arr[i]\n  \
    \  end\n  end\n  max_arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while\
    \ i < k\n    result << arr[i]\n    i += 1\n  end\n  result\nend", "  max_arr =\
    \ []\n  max_arr.push(arr[0])\n  for i in 1..k\n    max_arr.push(arr[i])\n  end\n\
    \  max_arr.push(arr[k])\n  return max_arr\nend", "    arr.sort!\n    max = arr[0]\n\
    \    i = 0\n    while i < k\n        if arr[i] > max\n            max = arr[i]\n\
    \        end\n        i += 1\n    end\n    max\nend", "  arr.sort!\n  result =\
    \ []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\n\
    end", "  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n\
    \  result\nend", "  result = []\n  arr.each do |num|\n    result << num if result.length\
    \ >= k\n  end\n  result\nend", "  max_arr = []\n  max_arr << arr[0]\n  for i in\
    \ 1..k\n    max_arr << max_arr.max\n  end\n  max_arr\nend", "  arr.sort!\n  arr.slice!(0,\
    \ k)\n  arr\nend", "  max_arr = arr.dup\n  max_arr.sort!\n  max_arr.slice!(0,\
    \ k)\n  return max_arr\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in\
    \ arr\n    if i > max_num\n      max_num = i\n      max_arr = [max_num]\n    elsif\
    \ i == max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort\n  max_arr.length\
    \ == k\nend", "  result = []\n  arr.sort!\n  result = (arr[0..k-1]).max\n  result\n\
    end", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n\
    \      max_num = i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr\
    \ << i\n    end\n  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : maximum(max_arr,\
    \ k-1)\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in 1..k\n    if arr[i]\
    \ > max_num\n      max_num = arr[i]\n    end\n  end\n  max_arr << max_num\n  for\
    \ i in 1..k\n    if arr[i] > max_num\n      max_arr << arr[i]\n    end\n  end\n\
    \  return max_arr\nend", "  arr.sort!\n  result = []\n  for i in 0..k-1\n    result\
    \ << arr[i]\n  end\n  result\nend", "    max = arr[0]\n    i = 0\n    while i\
    \ < k\n        max = arr[i] if arr[i] > max else max\n        i += 1\n    return\
    \ max\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n\
    \    if i > max_num\n      max_num = i\n    end\n  end\n  max_arr.push max_num\n\
    \  for i in arr\n    if i > max_num\n      max_arr.push i\n    end\n  end\n  max_arr.push\
    \ max_num\n  max_arr.push max_num\n  return max_arr\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\n\
    end", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n\
    \      max_num = i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr\
    \ << i\n    end\n  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : nil\n\
    end", "    arr.sort!\n    max = arr[0..k-1]\n    arr.delete_at(k)\n    return\
    \ max\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n\
    \      max_num = i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr\
    \ << i\n    end\n  end\n  max_arr.sort\n  max_arr.length == k\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    arr\nend", "  arr.sort!\n  result = []\n\
    \  for i in 0...k\n    result << arr[i]\n  end\n  result\nend", "  max_arr = []\n\
    \  max_num = arr[0]\n  for i in arr\n    if i > max_num\n      max_num = i\n \
    \     max_arr = [max_num]\n    elsif i == max_num\n      max_arr << i\n    end\n\
    \  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : nil\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n   \
    \ arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n    arr.slice!(0, k)\n\
    \    return arr\nend", "  result = []\n  arr.each do |i|\n    result << i if result.length\
    \ >= k\n  end\n  result\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend",
  "  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n  result\n\
    end", "  max_arr = []\n  max_arr.push(arr[0])\n  for i in 1..k\n    max_arr.push(arr[i])\n\
    \  max_arr.push(arr[k])\n  max_arr.sort\n  return max_arr\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  max_arr = []\n  max_num = 0\n  for i in 0...k\n\
    \    if arr[i] > max_num\n      max_num = arr[i]\n      max_arr = [max_num]\n\
    \    else \n      max_arr << max_num\n    end\n  end\n  max_arr << max_num\n \
    \ return max_arr\nend", "  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.", "  arr.sort!\n \
    \ result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n \
    \ end\n  result\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n \
    \   if i > max_num\n      max_num = i\n      max_arr = [max_num]\n    elsif i\
    \ == max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort!\n  max_arr.length\
    \ == k ? max_arr : maximum(max_arr, k - 1).reverse\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "    arr.sort!\n    arr[0..k-1]\nend", "  max_arr = []\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.",
  "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n  \
    \  result << arr[i]\n  end\n  result\nend", "  arr.sort!\n  result = []\n  i =\
    \ 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "  max_arr = []\n  max_arr << arr[0]\n  max_arr.sort!\n  max_arr.each_with_index\
    \ do |e, i|\n    if i > k\n      max_arr.pop\n    else\n      max_arr << e\n \
    \   end\n  end\n  max_arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while\
    \ i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  result = []\n  for i in 0...k\n\
    \    result.push(arr[i])\n  end\n  result.sort!\n  result\nend", "  max_arr =\
    \ []\n  max_arr << arr[0]\n  max_arr.sort!\n  max_arr.length == k ? max_arr :\
    \ maximum(max_arr, k-1)\nend", "    max = arr[0]\n    i = 0\n    while i < k\n\
    \        max = max > arr[i] ? max : arr[i]\n        i += 1\n    return max\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "    arr.sort!\n    max = arr[0..k-1]\n    arr.delete_at(k)\n\
    \    arr.sort!\n    return max\nend", "  arr.sort!\n  result = []\n  i = 0\n \
    \ while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend", " \
    \ arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n   \
    \ arr\nend", "    max = arr[0]\n    i = 0\n    while i < k\n        if arr[i]\
    \ > max\n            max = arr[i]\n        i += 1\n    return max\nend", "   \
    \ arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result << arr[i]\n    i += 1\n  end\n  result\n\
    end", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  max_arr =\
    \ []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n      max_num =\
    \ i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr << i\n \
    \   end\n  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : nil\nend", " \
    \   arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "    arr.sort!\n\
    \    arr[0..k-1]\nend", "  max_num = arr[0]\n  max_idx = 1\n  for i in 1..k\n\
    \    if arr[i] > max_num\n      max_num = arr[i]\n      max_idx = i\n  end\n \
    \ max_arr = [max_num]\n  for i in 1..k\n    if arr[i] > max_num\n      max_arr\
    \ << arr[i]\n    end\n  end\n  max_arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n   \
    \ arr.slice!(0, k)\n    return arr\nend", "  max_arr = []\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  for i in 1..k\n    if arr[i] > max_arr[1]\n      max_arr[1]\
    \ = arr[i]\n    elsif arr[i] > max_arr[2]\n      max_arr[2] = arr[i]\n    elsif\
    \ arr[i] > max_arr[3]\n      max_arr[3] = arr[i]\n    elsif arr[i] > max_arr[4]\n\
    \      max_arr[4] = arr[i]\n    elsif arr[i] > max_arr[5]\n      max_arr[5] =\
    \ arr[i]\n    elsif arr[i] > max_arr[6]\n      max_arr[6] = arr[i]\n    elsif\
    \ arr[i] > max_arr[7]\n      max_arr[7] = arr[i]\n    elsif arr[i] > max_arr[8]\n\
    \      max_arr[8] = arr[i]\n    elsif arr[i] > max_arr[9]\n      max_arr[9] =\
    \ arr[i]\n    elsif arr[i] > max_arr[10]\n      max_arr[10] = arr[i]\n    elsif\
    \ arr[i] > max_arr[11]\n      max_arr[11] = arr[i]\n    elsif arr[i] > max_arr[12]\n\
    \      max_arr[12] = arr[i]\n    elsif arr[i] > max_arr[13]\n      max_arr[13]\
    \ = arr[i]\n    elsif arr[i] > max_arr[14]\n      max_arr[14] = arr[i]\n    elsif\
    \ arr[i] > max_arr[15]\n      max_arr[15] = arr[i]\n    elsif arr[i] > max_arr[16]\n\
    \      max_arr[16] = arr[i]\n    elsif arr[i] > max_arr[17]\n      max_arr[17]\
    \ = arr[i]\n    elsif arr[i] > max_arr[18]\n      max_arr[18] = arr[i]\n    elsif\
    \ arr[i] > max_arr[19]\n      max_arr[19] = arr[i]\n    elsif arr[i] > max_arr[20]\n\
    \      max_arr[20] = arr[i]\n    elsif arr[i] > max_arr[21]\n      max_arr[21]\
    \ = arr[i]\n    elsif arr[i] > max_arr[22]\n      max_arr[22] = arr[i]\n    elsif\
    \ arr[i] > max_arr[23]\n      max_arr[23] = arr[i]\n    elsif arr[i] > max_arr[24]\n\
    \      max_arr[24] = arr[i]\n    elsif arr[i] > max_arr[25]\n      max_arr[25]\
    \ = arr[i]\n    ", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result\
    \ = []\n  for i in 0...k\n    result << arr[i]\n  end\n  result\nend", "  max_arr\
    \ = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  for i in 1..k\n    max_arr.push(arr[i])\n\
    \  end\n  max_arr.push(arr[k])\n  return max_arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i <\
    \ k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "  arr.sort!\n\
    \  arr.slice!(0, k)\n  arr\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n\
    \    result.push(arr[i])\n  end\n  result\nend", "  arr.sort!\n  arr.slice!(0,\
    \ k)\n  arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "  result = []\n  for i in 0...k\n    result.push(arr[i])\n\
    \  end\n  result.sort!\n  return result\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "    arr.sort!\n    arr[k..-1].max\nend", "    arr.sort!\n\
    \    max = arr[0...k]\n    arr.delete_at(k)\n    arr.sort!\n    arr[0...k] = max\n\
    \    return arr\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\n\
    end", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    max = arr[0]\n    max = arr[0]\n    i\
    \ = 0\n    while i < k\n        max = arr[i] if arr[i] > max else max\n      \
    \  i += 1\n    i = 0\n    while i < k\n        arr[i] = arr[i] if arr[i] < max\
    \ else max\n        i += 1\n    return arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in 1..k\n\
    \    if arr[i] > max_num\n      max_num = arr[i]\n    end\n  end\n  max_arr <<\
    \ max_num\n  for i in 1..k\n    if arr[i] > max_num\n      max_arr << arr[i]\n\
    \    end\n  end\n  return max_arr\nend", "    arr.sort!\n    arr.slice!(0, k)\n\
    \    return arr\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "  max_arr\
    \ = []\n  max_num = 0\n  for i in 0...k\n    max_num = max_num > arr[i] ? max_num\
    \ : arr[i]\n    max_arr << max_num\n  end\n  return max_arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n\
    \    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "  max_arr = arr.dup\n\
    \  max_arr.sort!\n  max_arr.slice!(0, k)\n  return max_arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n\
    \    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "  arr.sort!\n  result\
    \ = []\n  for i in 0...k\n    result << arr[i]\n  end\n  result\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  max_arr = []\n  max_num = arr[0]\n\
    \  for i in arr\n    if i > max_num\n      max_num = i\n      max_arr = [max_num]\n\
    \    elsif i == max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort\n\
    \  max_arr[0..k-1]\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n    result\
    \ << arr[i]\n  end\n  result\nend", "  max_arr = []\n  max_num = 0\n  for i in\
    \ 0...k\n    if arr[i] > max_num\n      max_num = arr[i]\n      max_arr = [max_num]\n\
    \    elsif arr[i] < max_num\n      max_arr << arr[i]\n    end\n  end\n  max_arr\n\
    end", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  max_arr =\
    \ []\n  max_num = arr[0]\n  for i in 1..k\n    if arr[i] > max_num\n      max_num\
    \ = arr[i]\n    end\n  end\n  max_arr << max_num\n  for i in 1..k\n    if arr[i]\
    \ > max_num\n      max_arr << arr[i]\n    end\n  end\n  max_arr\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "  max_arr = []\n  max_num = 0\n  for i in 0...k\n    max_num = max(arr[i], max_num)\n\
    \    max_arr << max_num\n  end\n  return max_arr\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", " \
    \ arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n   \
    \ return arr\nend", "    arr.sort!\n    max = arr[0...k]\n    arr.delete_at(k)\n\
    \    arr.sort!\n    arr[0...k] = max\n    arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    arr\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n   \
    \ if i > max_num\n      max_num = i\n      max_arr = [max_num]\n    elsif i ==\
    \ max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort\n  max_arr[0..k-1]\n\
    end", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n\
    \      max_num = i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr\
    \ << i\n    end\n  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : nil\n\
    end", "  arr.sort!\n  result = []\n  for i in 0..k-1\n    result << arr[i]\n \
    \ end\n  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\n\
    end", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result << arr[i]\n    i += 1\n  end\n\
    \  result\nend", "  max_arr = arr.dup\n  max_arr.sort!\n  max_arr.slice!(0, k)\n\
    \  return max_arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n\
    \    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend",
  "  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n  result\n\
    end", "    arr.sort!\n    max = arr[0..k-1]\n    arr.delete_at(k)\n    arr[0..k-1]\
    \ = max\n    return arr\nend", "    \n    # write your code here\n    \n    return\
    \ arr\n    \n    ", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend",
  "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "  arr.sort!\n  result = []\n  i\
    \ = 0\n  while i < k\n    result << arr[i]\n    i += 1\n  end\n  result\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n   \
    \ arr[0..k-1]\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend",
  "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "    arr.sort!\n    max = arr[0..k-1]\n    arr.delete_at(k)\n\
    \    arr << max\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n    result\
    \ << arr[i]\n  end\n  result\nend", "  arr.sort!\n  result = []\n  i = 0\n  while\
    \ i < k\n    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "  arr.sort!\n\
    \  result = []\n  for i in 0...k\n    result << arr[i]\n  end\n  result\nend",
  "    max = arr[0]\n    i = 0\n    while i < k\n        if arr[i] > max\n       \
    \     max = arr[i]\n        i += 1\n    return max\nend", "    arr.sort!\n   \
    \ arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  arr.slice!(0, k)\n \
    \ return arr\nend", "  max_arr = []\n  max_num = arr[0]\n  for i in 1..k\n   \
    \ if arr[i] > max_num\n      max_num = arr[i]\n    end\n  end\n  max_arr << max_num\n\
    \  for i in 1..k\n    if arr[i] > max_num\n      max_arr << arr[i]\n    end\n\
    \  end\n  return max_arr\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend",
  "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", "    max = arr[0]\n    i = 0\n  \
    \  while i < k\n        if max < arr[i]\n            max = arr[i]\n        i +=\
    \ 1\n    return max\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n\
    \    result.push(arr[i])\n    i += 1\n  end\n  result\nend", "  arr.sort!\n  result\
    \ = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n  end\n \
    \ result\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    arr.sort!\n    max = arr[0..k-1]\n  \
    \  arr.delete_at(k-1)\n    arr.sort!\n    arr[0..k-1] = max\n    arr\nend\n</code>\n\
    <|/ a tags=ruby,arrays,sorting |>\n<| c |>\nThis doesn't work if the array is\
    \ empty or has only one element. `maximum([1,2], 0)` returns `nil` instead of\
    \ `[1,2]`.\n<|/ c |>\n<| c |>\nYes, I forgot about that case. Thanks for pointing\
    \ it out. I've edited my answer.\n<|/ c |>\n<| a tags=ruby,arrays,sorting |>\n\
    <code>", "  result = []\n  for i in 0...k\n    result.push(arr[i])\n  end\n  result.sort!\n\
    \  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n    arr\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n  arr.slice!(0, k)\n\
    \  arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result\
    \ << arr[i]\n    i += 1\n  end\n  result\nend", "  result = []\n  arr.each do\
    \ |x|\n    result << x if result.length < k\n  end\n  result\nend", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n  \
    \  result << arr[i]\n  end\n  result\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "    \n    # write your code here\n    maximum = arr[0]\n\
    \    maximums = []\n    \n    for i in range(k):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximums = []\n            maximums.append(maximum)\n\
    \        else:\n            maximums.append(maximum)\n            \n    return\
    \ maximums\n    \n    ", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n\
    \    if i > max_num\n      max_num = i\n      max_arr = [max_num]\n    elsif i\
    \ == max_num\n      max_arr << i\n    end\n  end\n  max_arr.sort\n  max_arr.length\
    \ == k ? max_arr : nil\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return\
    \ arr\nend", "  arr.sort!\n  result = []\n  for i in 0...k\n    result << arr[i]\n\
    \  end\n  result\nend", "  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.", "  arr.sort!\n \
    \ result = []\n  i = 0\n  while i < k\n    result << arr[i]\n    i += 1\n  end\n\
    \  result\nend", "  arr.sort!\n  arr.slice!(0, k)\n  return arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "  max_arr = []\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n\
    \  max_arr.push(arr[0])\n  max_arr.push(arr[0])\n  max_arr.", "    arr.sort!\n\
    \    arr.slice!(0, k)\n    return arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "  arr.sort!\n  arr.slice!(0, k)\n  arr\nend", " \
    \ arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n   \
    \ return arr\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n\
    \    i += 1\n  end\n  result\nend", "  result = []\n  arr.each do |x|\n    result\
    \ << x if result.length >= k\n  end\n  result\nend", "    max = arr[0]\n    i\
    \ = 0\n    while i < k\n        if max < arr[i]\n            max = arr[i]\n  \
    \      i += 1\n    \n    return max\n    ", "  max_arr = arr.dup\n  max_arr.sort!\n\
    \  max_arr.slice!(0, k)\n  return max_arr\nend", "    arr.sort!\n    arr.slice!(0,\
    \ k)\n    return arr\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\n\
    end", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\nend", "  arr.sort!\n\
    \  result = []\n  i = 0\n  while i < k\n    result.push(arr[i])\n    i += 1\n\
    \  end\n  result\nend", "    arr.sort!\n    arr.slice!(0, k)\n    return arr\n\
    end", "  max_arr = []\n  max_num = arr[0]\n  for i in arr\n    if i > max_num\n\
    \      max_num = i\n      max_arr = [max_num]\n    elsif i == max_num\n      max_arr\
    \ << i\n    end\n  end\n  max_arr.sort\n  max_arr.length == k ? max_arr : maximum(max_arr,\
    \ k - 1).reverse\nend", "  arr.sort!\n  result = []\n  i = 0\n  while i < k\n\
    \    result << arr[i]\n    i += 1\n  end\n  result\nend", "    arr.sort!\n   \
    \ arr.slice!(0, k)\n    return arr\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
