name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend\n</cell>\n<cell>", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.split('').each\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  vowel_count = 0\n  s.each_char do |c|\n   \
    \ vowel_count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \  end\n  vowel_count\nend", "  vowel_count = 0\n  s.each_char do |c|\n    vowel_count\
    \ += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  vowel_count\n\
    end", "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  count\
    \ = 0\n  s.split('').each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  return count\nend",
  "  count = 0\n  s.split('').each do |char|\n    if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u'\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  count = 0\n  s.each do |c|\n    count += 1 if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'\n  end\n  count\nend", "  s.count('a') + s.count('e') + s.count('i') + s.count('o')\
    \ + s.count('u')\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  s.chars.each do |c|\n    next if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'\n    vowels_count += 1 if c == 'y'\n  end\n\
    \  vowels_count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend",
  "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  count = 0\n  s.split('').each do\
    \ |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n     \
    \ count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.split('').each\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  vowel_count = 0\n  s.split('').each do |char|\n\
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      vowel_count += 1\n    end\n  end\n  return vowel_count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n\
    end", "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('aeiou')\nend", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  count = 0\n  s.each_char do |c|\n    count +=\
    \ 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\n\
    end", "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'\n  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  count\
    \ = 0\n  s.each do |char|\n    if char == 'a' || char == 'e' || char == 'i' ||\
    \ char == 'o' || char == 'u'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  return count\nend", "  count = 0\n  s.split('').each\
    \ do |char|\n    if char == 'a' || char == 'e' || char == 'i' || char == 'o' ||\
    \ char == 'u'\n      count += 1\n    end\n  end\n  return count\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  vowel_count = 0\n  s.each_char\
    \ do |c|\n    vowel_count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n  end\n  vowel_count\nend", "  count = 0\n  s.each do |char|\n\
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each do |char|\n\
    \    count += 1 if char == 'a' || char == 'e' || char == 'i' || char == 'o' ||\
    \ char == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    count\
    \ += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\n\
    end", "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n\
    \    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \  end\n  count\nend", "  count = 0\n  s.each do |c|\n    if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  count\
    \ = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u'\n      count += 1\n    end\n  end\n  return count\nend", "  count =\
    \ 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\n\
    end\nvowels_count(\"hello\") # => 2\nvowels_count(\"a\") # => 1\nvowels_count(\"\
    bye\") # => 0\nvowels_count(\"aardvark\") # => 0\nvowels_count(\"abacus\") # =>\
    \ 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"\
    abacus\") # => 0\nvowels_count(\"abacus\") # => 0\nvowels_count(\"abacus\") #\
    \ => 0\nvowels_count", "  vowels = %w[a e i o u]\n  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a'..'u')\nend", "  count = 0\n  s.split('').each do |char|\n\
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each do |c|\n\
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each do |letter|\n  \
    \  if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  s.scan(/[aeiou]/).count\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend", " \
    \ count = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each do |letter|\n    if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u'\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  vowel_count = 0\n  s.split('').each\
    \ do |char|\n    if char == 'a' || char == 'e' || char == 'i' || char == 'o' ||\
    \ char == 'u'\n      vowel_count += 1\n    end\n  end\n  vowel_count\nend", " \
    \ count = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\
    \ + s.count('e') + s.count('i') + s.count('o') + s.count('u')\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.downcase!\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  count = 0\n  s.split('').each do |char|\n \
    \   if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  count = 0\n  s.each\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  s.chars.each do |c|\n    if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'\n      puts \"#{c} is a vowel\"\n  \
    \  end\n  end\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", " \
    \ s.scan(/[aeiou]/)\n  s.count('a')\nend", "  count = 0\n  s.each_char do |c|\n\
    \    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\n\
    end", "  count = 0\n  s.split('').each do |char|\n    if char == 'a' || char ==\
    \ 'e' || char == 'i' || char == 'o' || char == 'u'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('y')\nend", "  vowels =\
    \ %w(a e i o u)\n  s.split('').select { |c| vowels.include?(c) }.size\nend", " \
    \ vowels = %w[a e i o u]\n  s.downcase!\n  s.gsub(/[aeiouy]/, \"\").count(\"aeiou\"\
    )\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend\n\
    </cell>\n<cell>\nvowels_count('hello')\n</cell>\n<cell>\nvowels_count('helloooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('helloooooooo')\n</cell>\n<cell>\nvowels_count('helloooooooo')\n\
    </cell>\n<cell>\nvowels_count('", "  count = 0\n  s.each_char do |c|\n    count\
    \ += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\n\
    end", "  vowel_count = 0\n  s.each_char do |c|\n    vowel_count += 1 if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  vowel_count\nend",
  "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\n\
    end", "  count = 0\n  s.split('').each do |c|\n    count += 1 if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count =\
    \ 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  vowel_count = 0\n  s.each_char\
    \ do |c|\n    vowel_count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n  end\n  vowel_count\nend", "  count = 0\n  s.each_char do |c|\n\
    \    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend",
  "  count = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each do |c|\n\
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  count = 0\n  s.split('').each\
    \ do |char|\n    if char == 'a' || char == 'e' || char == 'i' || char == 'o' ||\
    \ char == 'u'\n      count += 1\n    end\n  end\n  return count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('y')\n\
    end", "  vowels = %w[a e i o u]\n  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a'..'u')\n\
    end", "  count = 0\n  s.each do |c|\n    count += 1 if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count('a')\nend", "  count = 0\n  s.split('').each do |c|\n    if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  count = 0\n  s.each do |c|\n    count += 1 if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('aeiou')\nend", "  vowels = %w[a e i o u]\n  s.downcase!\n  s.split('').select\
    \ { |c| vowels.include?(c) }.size\nend\n</code>\n<|/ a tags=ruby,string |>\n<|\
    \ c |>\nI like the `vowels` array idea. Nice and clean.\n<|/ c |>\n<| c |>\nI\
    \ like it too, but I feel like `vowels.count` would be more efficient.\n<|/ c\
    \ |>\n<| c |>\nI like it too, but I feel like `vowels.count` would be more efficient.\n\
    <|/ c |>\n<| c |>\nI like it too, but I feel like `vowels.count` would be more\
    \ efficient.\n<|/ c |>\n<| c |>\nI like it too, but I feel like `vowels.count`\
    \ would be more efficient.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  count\
    \ = 0\n  s.downcase!\n  s.each_char do |c|\n    count += 1 if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.scan(/[aeiou]/).count\nend",
  "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.count(\"aeiou\")\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  vowel_count = 0\n \
    \ s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n      vowel_count += 1\n    end\n  end\n  return vowel_count\nend",
  "  s.scan(/[aeiou]/)\n  s.count('y')\nend", "  count = 0\n  s.each_char do |c|\n\
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  vowel_count = 0\n  s.each do |c|\n \
    \   if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      vowel_count\
    \ += 1\n    end\n  end\n  vowel_count\nend", "  count = 0\n  s.each do |c|\n \
    \   if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  s.split('').each do |char|\n\
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  count = 0\n  s.each\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  count = 0\n  s.each_char do |c|\n    if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  s.split('').each do |char|\n    if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n\
    \  s.count('aeiou')\nend", "  count = 0\n  s.each do |c|\n    count += 1 if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend",
  "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n      count += 1\n    end\n  end\n  return count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\n\
    end", "  vowel_count = 0\n  s.each_char do |c|\n    vowel_count += 1 if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  vowel_count\nend",
  "  s.scan(/[aeiou]/).count\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\n\
    end", "  vowel_count = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'\n      vowel_count += 1\n    end\n  end\n \
    \ vowel_count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  vowel_count = 0\n  s.split('').each\
    \ do |char|\n    if char.upcase == 'A' || char.upcase == 'E' || char.upcase ==\
    \ 'I' || char.upcase == 'O' || char.upcase == 'U'\n      vowel_count += 1\n  \
    \  end\n  end\n  return vowel_count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\n\
    end", "  vowel_count = 0\n  s.each_char do |c|\n    vowel_count += 1 if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  vowel_count\nend",
  "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('y')\n\
    end", "  count = 0\n  s.split('').each do |char|\n    char = char.downcase\n \
    \   count += 1 if char.include?('aeiou')\n    count += 1 if char.include?('y')\n\
    \  end\n  count\nend", "  count = 0\n  s.each do |char|\n    if char == 'a' ||\
    \ char == 'e' || char == 'i' || char == 'o' || char == 'u'\n      count += 1\n\
    \    end\n  end\n  return count\nend", "  count = 0\n  s.each_char do |c|\n  \
    \  count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n\
    \  count\nend", "  vowel_count = 0\n  s.split('').each do |char|\n    if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n      vowel_count\
    \ += 1\n    end\n  end\n  return vowel_count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/).count\nend", "  count = 0\n\
    \  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each do |c|\n  \
    \  count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n\
    \  count\nend", "  count = 0\n  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.each_char\
    \ do |c|\n    if c == 'a'\n      count += 1\n    elsif c == 'e'\n      count +=\
    \ 1\n    elsif c == 'i'\n      count += 1\n    elsif c == 'o'\n      count +=\
    \ 1\n    elsif c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n     \
    \ count += 1\n    end\n  end\n  count\nend", "  vowel_count = 0\n  s.split('').each\
    \ do |letter|\n    if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u'\n      vowel_count += 1\n    end\n  end\n  return vowel_count\n\
    end", "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  vowel_count = 0\n  s.each_char\
    \ do |c|\n    vowel_count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n  end\n  vowel_count\nend", "  count = 0\n  s.each do |c|\n   \
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n\
    \    end\n  end\n  count\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\nend", " \
    \ s.scan(/[aeiouy]/)\n  s.count('y')\nend\n</cell>\n<cell>", "  vowels = %w[a\
    \ e i o u]\n  s.chars.select { |c| vowels.include?(c) }.size\nend", "  count =\
    \ 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  vowel_count\
    \ = 0\n  s.split('').each do |char|\n    if char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u'\n      vowel_count += 1\n    end\n  end\n\
    \  vowel_count\nend", "  vowel_count = 0\n  s.each do |c|\n    if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      vowel_count += 1\n    end\n\
    \  end\n  return vowel_count\nend", "  count = 0\n  s.each_char do |c|\n    count\
    \ += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\n\
    end", "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  vowel_count =\
    \ 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n      vowel_count += 1\n    end\n  end\n  vowel_count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\n\
    end", "  vowel_count = 0\n  s.split('').each do |char|\n    if char == 'a' ||\
    \ char == 'e' || char == 'i' || char == 'o' || char == 'u'\n      vowel_count\
    \ += 1\n    end\n  end\n  return vowel_count\nend", "  s.downcase!\n  s.gsub!(/[aeiou]/,\
    \ '')\n  s.count('aeiou')\nend", "  count = 0\n  s.each_char do |c|\n    count\
    \ += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\n\
    end", "  s.scan(/[aeiouy]+/).count\nend", "  vowel_count = 0\n  s.each_char do\
    \ |c|\n    vowel_count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u'\n  end\n  vowel_count\nend", "  count = 0\n  s.each_char do |c|\n \
    \   count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n \
    \ end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    count += 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'\n  end\n  count\nend", "  vowel_count = 0\n  s.each do |char|\n    if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n      vowel_count\
    \ += 1\n    end\n  end\n  return vowel_count\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('aeiou')\nend", "  count = 0\n  s.split('').each do |char|\n\
    \    if char.match(/[aeiou]/)\n      count += 1\n    end\n  end\n  return count\n\
    end", "  count = 0\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  return count\n\
    end", "  s.scan(/[aeiouy]/)\n  s.count('y')\nend", "  s.chars.each do |c|\n  \
    \  next if c == 'a'\n    next if c == 'e'\n    next if c == 'i'\n    next if c\
    \ == 'o'\n    next if c == 'u'\n    next if c == 'y'\n    puts c\n  end\nend",
  "  count = 0\n  s.split('').each do |c|\n    count += 1 if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if char == 'a' || char == 'e' || char ==\
    \ 'i' || char == 'o' || char == 'u'\n  end\nend", "  count = 0\n  s.each do |char|\n\
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  s.count(\"aeiou\"\
    )\nend", "  count = 0\n  s.downcase!\n  s.each_char do |c|\n    count += 1 if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  count\nend",
  "  count = 0\n  s.each do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n      count += 1\n    end\n  end\n  count\nend", "  vowel_count\
    \ = 0\n  s.downcase!\n  s.each_char do |c|\n    vowel_count += 1 if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  end\n  vowel_count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
