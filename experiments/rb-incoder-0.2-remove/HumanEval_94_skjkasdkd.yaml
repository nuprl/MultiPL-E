name: HumanEval_94_skjkasdkd
language: rb
prompt: "# You are given a list of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\ndef skjkasdkd(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n\
  \    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25,\
  \ candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\
  \    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
  \ 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81,\
  \ 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n   \
  \ assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191,\
  \ 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\n\
  end\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
