name: HumanEval_105_by_length
language: rb
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length([2, 1, 1,\
  \ 4, 5, 8, 2, 3])   \n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# If the array\
  \ has any strange number ignore it:\n# >>> by_length([1, -1 , 55]) \n# ['One']\n\
  def by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.each do |num|\n    if num > 9\n      num = (num / 10).floor\n\
    \      arr << num\n    end\n  end\n  arr.sort!.reverse!\n  arr.each do |num|\n\
    \    if num > 9\n      arr << num.to_s\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.to_s.reverse.to_i }.map { |i| names[i] }\n\
    end", "  arr.each do |i|\n    arr[i] = \"One\" if i.to_i < 1 && i.to_i > 9\n \
    \   arr[i] = \"Two\" if i.to_i < 2 && i.to_i > 9\n    arr[i] = \"Three\" if i.to_i\
    \ < 3 && i.to_i > 9\n    arr[i] = \"Four\" if i.to_i < 4 && i.to_i > 9\n    arr[i]\
    \ = \"Five\" if i.to_i < 5 && i.to_i > 9\n    arr[i] = \"Six\" if i.to_i < 6 &&\
    \ i.to_i > 9\n    arr[i] = \"Seven\" if i.to_i < 7 && i.to_i > 9\n    arr[i] =\
    \ \"Eight\" if i.to_i < 8 && i.to_i > 9\n    arr[i] = \"Nine\" if i.to_i < 9 &&\
    \ i.to_i > 9\n  end\n  arr.sort!.reverse!\n  arr.each do |i|\n    arr[i] = \"\
    One\" if i.to_i < 1 && i.to_i > 9\n    arr[i] = \"Two\" if i.to_i < 2 && i.to_i\
    \ > 9\n    arr[i] = \"Three\" if i.to_i < 3 && i.to_i > 9\n    arr[i] = \"Four\"\
    \ if i.to_i < 4 && i.to_i > 9\n    arr[i] = \"Five\" if i.to_i < 5 && i.to_i >\
    \ 9\n    arr[i] = \"Six\" if i.to_i < 6 && i.to_i > 9\n    arr[i] = \"Seven\"\
    \ if i.to_i < 7 && i.to_i > 9\n    arr[i] = \"Eight\" if i.to_i < 8 && i.to_i\
    \ > 9\n    arr[i] = \"Nine\" if i.to_i < 9 && i.to_i > 9\n  end\n  arr\nend",
  "  arr.each do |i|\n    arr[i] = \"One\" if i.between?(1, 9)\n    arr[i] = \"Two\"\
    \ if i.between?(10, 19)\n    arr[i] = \"Three\" if i.between?(20, 29)\n    arr[i]\
    \ = \"Four\" if i.between?(30, 39)\n    arr[i] = \"Five\" if i.between?(40, 49)\n\
    \    arr[i] = \"Six\" if i.between?(50, 59)\n    arr[i] = \"Seven\" if i.between?(60,\
    \ 69)\n    arr[i] = \"Eight\" if i.between?(70, 79)\n    arr[i] = \"Nine\" if\
    \ i.between?(80, 89)\n  end\n  arr.reverse!\n  arr.each do |i|\n    arr[i] = \"\
    One\" if i == \"1\"\n    arr[i] = \"Two\" if i == \"2\"\n    arr[i] = \"Three\"\
    \ if i == \"3\"\n    arr[i] = \"Four\" if i == \"4\"\n    arr[i] = \"Five\" if\
    \ i == \"5\"\n    arr[i] = \"Six\" if i == \"6\"\n    arr[i] = \"Seven\" if i\
    \ == \"7\"\n    arr[i] = \"Eight\" if i == \"8\"\n    arr[i] = \"Nine\" if i ==\
    \ \"9\"\n  end\n  arr\nend\n</code>\n<|/ a |>\n<| a tags=ruby,arrays,sorting |>\n\
    <code>", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| \n    x % 10 == 0 ? \"\
    One\" : \n    x % 10 == 1 ? \n    \"Two\" : \n    x % 10 == 2 ? \n    \"Three\"\
    \ : \n    x % 10 == 3 ? \n    \"Four\" : \n    x % 10 == 4 ? \n    \"Five\" :\
    \ \n    x % 10 == 5 ? \n    \"Six\" : \n    x % 10 == 6 ? \n    \"Seven\" : \n\
    \    x % 10 == 7 ? \n    \"Eight\" : \n    x % 10 == 8 ? \n    \"Nine\" : \n \
    \   \"?\"\n  }\nend\n</code>\n<|/ a |>\n<| a tags=ruby,sorting,arrays |>\n<code>",
  "  arr.sort!\n  arr.map! {|x| x < 10 ? x : \"#{x}\" + \"One\"}\n  arr.compact!\n\
    \  arr.empty? ? [] : arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |i|\
    \ i.between?(1, 9) ? \"One\" : \"Two\" }.reverse\nend", "  arr.each do |i|\n \
    \   arr[i] = \"One\" if i.between?(1, 9)\n    arr[i] = \"Two\" if i.between?(10,\
    \ 19)\n    arr[i] = \"Three\" if i.between?(20, 29)\n    arr[i] = \"Four\" if\
    \ i.between?(30, 39)\n    arr[i] = \"Five\" if i.between?(40, 49)\n    arr[i]\
    \ = \"Six\" if i.between?(50, 59)\n    arr[i] = \"Seven\" if i.between?(60, 69)\n\
    \    arr[i] = \"Eight\" if i.between?(70, 79)\n    arr[i] = \"Nine\" if i.between?(80,\
    \ 89)\n  end\n  arr.sort!.reverse!\n  arr.each do |i|\n    arr[i] = \"One\" if\
    \ i == \"1\"\n    arr[i] = \"Two\" if i == \"2\"\n    arr[i] = \"Three\" if i\
    \ == \"3\"\n    arr[i] = \"Four\" if i == \"4\"\n    arr[i] = \"Five\" if i ==\
    \ \"5\"\n    arr[i] = \"Six\" if i == \"6\"\n    arr[i] = \"Seven\" if i == \"\
    7\"\n    arr[i] = \"Eight\" if i == \"8\"\n    arr[i] = \"Nine\" if i == \"9\"\
    \n  end\n  arr\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't work if\
    \ you have an array of strings. Try it with `[\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\"]`\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ an array of strings. Try it with `[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"]`\n<|/ c |>\n<| c |>\nIt doesn't work if you have an array\
    \ of strings. Try it with `[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\"]`\n<|/ c |>\n<| c |>\nIt doesn't work if you have an array of strings.\
    \ Try it with `[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ]`\n<|/ c |>\n<| c |>\nIt doesn't work if you have an array of strings. Try it\
    \ with `[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]`\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>", "  arr.each do |i|\n    arr[i] = \"One\" if\
    \ i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n \
    \   arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] =\
    \ \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\"\
    \ if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr.sort!.reverse!\n  arr.each\
    \ do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n   \
    \ arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] =\
    \ \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if\
    \ i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n\
    \  end\n  arr\nend", "  arr.each do |i|\n    if i.is_a? Integer\n      arr[i]\
    \ = \"One\" if 1 <= i && i <= 9\n      arr[i] = \"Two\" if 10 <= i && i <= 19\n\
    \      arr[i] = \"Three\" if 20 <= i && i <= 99\n      arr[i] = \"Four\" if 100\
    \ <= i && i <= 999\n      arr[i] = \"Five\" if 1000 <= i && i <= 9999\n      arr[i]\
    \ = \"Six\" if 10000 <= i && i <= 99999\n      arr[i] = \"Seven\" if 100000 <=\
    \ i && i <= 999999\n      arr[i] = \"Eight\" if 1000000 <= i && i <= 9999999\n\
    \      arr[i] = \"Nine\" if 10000000 <= i && i <= 99999999\n    end\n  end\n \
    \ arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x >= 1 && x <= 9\
    \ ? \"#{x}\" : x.to_s }.reverse\nend", "  arr.each do |num|\n    if num > 9\n\
    \      arr.delete(num)\n      arr.unshift(num.to_s)\n    end\n  end\n  arr\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nI like the use of \"each_with_object\" here\n\
    <|/ c |>\n<| c |>\n`each_with_object` is an excellent solution to this problem.\
    \ Thanks for sharing!\n<|/ c |>\n<| c |>\nI like this solution as well, because\
    \ it doesn't require a temporary array.\n<|/ c |>\n<| c |>\nI like how you used\
    \ `each_with_object` here. I think it's very clever. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each do |j|\n        if j == i\n          arr[j] = by_length_array[j]\n\
    \        end\n      end\n    end\n  end\n  arr\nend", "  arr.each do |num|\n \
    \   if num > 9\n      arr.reject! {|num| num > 9}\n    end\n  end\n  arr.reverse!\n\
    \  arr.each do |num|\n    arr.replace(num.to_s.rjust(2, '0'), num.to_s.rjust(3,\
    \ '0'))\n  end\n  arr\nend", "  arr.sort!\n  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr[i] = \"One\"\n    elsif i.between?(10, 99)\n\
    \      arr.reverse!\n      arr[i] = \"Two\"\n    elsif i.between?(100, 999)\n\
    \      arr.reverse!\n      arr[i] = \"Three\"\n    elsif i.between?(1000, 9999)\n\
    \      arr.reverse!\n      arr[i] = \"Four\"\n    elsif i.between?(10000, 99999)\n\
    \      arr.reverse!\n      arr[i] = \"Five\"\n    elsif i.between?(100000, 999999)\n\
    \      arr.reverse!\n      arr[i] = \"Six\"\n    elsif i.between?(1000000, 9999999)\n\
    \      arr.reverse!\n      arr[i] = \"Seven\"\n    elsif i.between?(10000000,\
    \ 99999999)\n      arr.reverse!\n      arr[i] = \"Eight\"\n    elsif i.between?(100000000,\
    \ 99999999999)\n      arr.reverse!\n      arr[i] = \"Nine\"\n    end\n  end\n\
    \  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\"\
    \ : \"Two\" if x < 20 ? \"Two\" : \"Three\" if x < 30 ? \"Three\" : \"Four\" if\
    \ x < 40 ? \"Four\" : \"Five\" if x < 50 ? \"Five\" : \"Six\" if x < 60 ? \"Six\"\
    \ : \"Seven\" if x < 70 ? \"Seven\" : \"Eight\" if x < 80 ? \"Eight\" : \"Nine\"\
    \ }.reverse\nend", "  arr.each do |i|\n    if i.to_i < 1 || i.to_i > 9\n     \
    \ next\n    end\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n", " \
    \ arr.each do |x|\n    if x > 9\n      arr.reverse!\n      arr.each do |x|\n \
    \       if x == 1\n          arr.reverse!\n          arr[0] = \"One\"\n      \
    \  elsif x == 2\n          arr.reverse!\n          arr[0] = \"Two\"\n        elsif\
    \ x == 3\n          arr.reverse!\n          arr[0] = \"Three\"\n        elsif\
    \ x == 4\n          arr.reverse!\n          arr[0] = \"Four\"\n        elsif x\
    \ == 5\n          arr.reverse!\n          arr[0] = \"Five\"\n        elsif x ==\
    \ 6\n          arr.reverse!\n          arr[0] = \"Six\"\n        elsif x == 7\n\
    \          arr.reverse!\n          arr[0] = \"Seven\"\n        elsif x == 8\n\
    \          arr.reverse!\n          arr[0] = \"Eight\"\n        elsif x == 9\n\
    \          arr.reverse!\n          arr[0] = \"Nine\"\n        end\n      end\n\
    \    end\n  end\n  arr\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.each do |i|\n    if i.is_a? Integer\n      if 1 <= i &&\
    \ i <= 9\n        arr.reverse!\n        arr.map! { |x| x.to_s }\n        arr.map!\
    \ { |x| x.to_sym }\n        arr.reverse!\n      end\n    end\n  end\n  arr\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't work if there are any negative\
    \ numbers in the array. Try it with `by_length([-1, -1, 1, -5, -4, -8, -2, -3])`.\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer to account for negative numbers as well.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each { |j| j = \"One\" if j == i || j == i + 1 || j == i + 2 || j ==\
    \ i + 3 || j == i + 4 || j == i + 5 || j == i + 6 || j == i + 7 || j == i + 8\
    \ || j == i + 9 }\n    end\n  end\n  arr\nend\n</code>\n<|/ a tags=ruby |>\n<|\
    \ c |>\nThis doesn't work if the array is empty or has strange numbers. For example,\
    \ `by_length([-1, 55])` returns `['One']`, which is not what OP wants.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I edited my answer to include that\
    \ case.\n<|/ c |>\n<| c |>\nI added a version that doesn't mutate the original\
    \ array.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty or has strange\
    \ numbers. For example, `by_length([-1, 55])` returns `['One']`, which is not\
    \ what OP wants.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I edited my\
    \ answer to include that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.between?(1, 9) ? \"One\" : i.between?(10,\
    \ 99) ? \"Two\" : i.between?(100, 999) ? \"Three\" : i.between?(1000, 9999) ?\
    \ \"Four\" : i.between?(10000, 99999) ? \"Five\" : i.between?(100000, 999999)\
    \ ? \"Six\" : i.between?(1000000, 9999999) ? \"Seven\" : i.between?(10000000,\
    \ 99999999) ? \"Eight\" : i.between?(100000000, 999999999) ? \"Nine\" : i }\n\
    end", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.each { |j| j = \"One\" if j == i || j == i + 1 || j == i + 2 || j ==\
    \ i + 3 || j == i + 4 || j == i + 5 || j == i + 6 || j == i + 7 || j == i + 8\
    \ || j == i + 9 || j == i + 10 }\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.each do |i|\n    if i.to_i < 1 || i.to_i > 9\n      next\n    end\n   \
    \ arr[i] = \"One\" if i.to_i == 1\n    arr[i] = \"Two\" if i.to_i == 2\n    arr[i]\
    \ = \"Three\" if i.to_i == 3\n    arr[i] = \"Four\" if i.to_i == 4\n    arr[i]\
    \ = \"Five\" if i.to_i == 5\n    arr[i] = \"Six\" if i.to_i == 6\n    arr[i] =\
    \ \"Seven\" if i.to_i == 7\n    arr[i] = \"Eight\" if i.to_i == 8\n    arr[i]\
    \ = \"Nine\" if i.to_i == 9\n  end\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nI like this solution, but I believe it can be made more concise\
    \ by using a hash: `def by_length(arr); arr.sort!; arr.map { |i| i.to_s.chars.map\
    \ { |c| c == '1' ? 'One' : c == '2' ? 'Two' : c == '3' ? 'Three' : c == '4' ?\
    \ 'Four' : c == '5' ? 'Five' : c == '6' ? 'Six' : c == '7' ? 'Seven' : c == '8'\
    \ ? 'Eight' : c == '9' ? 'Nine' : '' }.join }.flatten; end`\n<|/ c |>\n<| c |>\n\
    I like your solution, too, but I believe it can be made more concise by using\
    \ a hash: `def by_length(arr); arr.sort!; arr.map { |i| i.to_s.chars.map { |c|\
    \ c == '1' ? 'One' : c == '2' ? 'Two' : c == '3' ? 'Three' : c == '4' ? 'Four'\
    \ : c == '5' ? 'Five' : c == '6' ? 'Six' : c == '7' ? 'Seven' : c == '8' ? 'Eight'\
    \ : c == '9' ? 'Nine' : '' }.join }.flatten; end`\n<|/ c |>\n<| c |>\nI like your\
    \ solution, too, but I believe it can be made more concise by using a hash: `def\
    \ by_length(arr); arr.sort!; arr.map { |i| i.to_s.chars.map { |c| c == '1' ? 'One'\
    \ : c == '2' ? 'Two' : c == '3' ? 'Three' : c == '4' ? 'Four' : c == '5' ? 'Five'\
    \ : c == '6' ? 'Six' : c == '7' ? 'Seven' : c == '8", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse }.uniq\nend", "  arr.each\
    \ do |i|\n    if i.is_a? Integer\n      if i >= 1 && i <= 9\n        arr.reverse!\n\
    \        arr.each do |j|\n          arr[j] = names[i]\n        end\n      end\n\
    \    end\n  end\n  arr\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n  \
    \    arr.reverse!\n      arr.map! do |j|\n        j = j.to_s\n        j = j.gsub(/\\\
    d/) { |m| m.to_s.upcase }\n        j\n      end\n    end\n  end\n  arr\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  arr.sort!\n  arr.empty? ? []\
    \ : arr.map { |i| i.to_s.reverse }.uniq\nend", "  arr.sort!\n  arr.empty? ? []\
    \ : arr.map { |x| x < 10 ? \"#{x}\" : \"#{x}#{x}\" }.reverse\nend\n</code>\n<|/\
    \ a tags=ruby |>\n<| a tags=ruby |>\n<code>", "  arr.each do |i|\n    arr[i] =\
    \ \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if\
    \ i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n \
    \   arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] =\
    \ \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr.reverse!\n\
    \  arr.each do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i\
    \ == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n  \
    \  arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"\
    Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if\
    \ i == 9\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x|\
    \ x < 10 ? \"#{x}\" : \"#{x}#{x}\" }.reverse\nend", "  arr.each do |i|\n    if\
    \ i.between?(1, 9)\n      arr.reverse!\n      arr.each do |j|\n        if j ==\
    \ i\n          arr[j] = by_length([j])\n        end\n      end\n    end\n  end\n\
    \  arr.empty? ? [] : arr.map { |i| by_length([i]) }\nend", "  arr.each do |num|\n\
    \    if num > 9\n      arr.delete_at(arr.index(num))\n    else\n      arr.delete_at(arr.index(num))\n\
    \    end\n  end\n  arr.each do |num|\n    arr << num.to_s.upcase\n  end\n  arr\n\
    end", "  arr.each do |num|\n    if num > 9\n      arr[num - 10] = \"#{num}th\"\
    \n    elsif num == 1\n      arr[0] = \"One\"\n    elsif num == 2\n      arr[1]\
    \ = \"Two\"\n    elsif num == 3\n      arr[2] = \"Three\"\n    elsif num == 4\n\
    \      arr[3] = \"Four\"\n    elsif num == 5\n      arr[4] = \"Five\"\n    elsif\
    \ num == 6\n      arr[5] = \"Six\"\n    elsif num == 7\n      arr[6] = \"Seven\"\
    \n    elsif num == 8\n      arr[7] = \"Eight\"\n    elsif num == 9\n      arr[8]\
    \ = \"Nine\"\n    end\n  end\n  arr\nend", "  arr.each do |i|\n    if i.to_i <\
    \ 1 || i.to_i > 9\n      next\n    end\n    arr.reverse!\n    arr.reverse!\n \
    \   arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x.to_s.reverse.to_i\
    \ }.map { |x| names[x] }\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby |>\n\
    <code>", "  arr.each do |i|\n    if i.to_i < 1 || i.to_i > 9\n      next\n   \
    \ end\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |x| x % 10 == 0 ? \"One\" : x % 10\
    \ == 1 ? \"Two\" : x % 10 == 2 ? \"Three\" : x % 10 == 3 ? \"Four\" : x % 10 ==\
    \ 4 ? \"Five\" : x % 10 == 5 ? \"Six\" : x % 10 == 6 ? \"Seven\" : x % 10 == 7\
    \ ? \"Eight\" : x % 10 == 8 ? \"Nine\" : x }\nend", "  arr.each do |i|\n    arr[i]\
    \ = \"One\" if i <= 9\n    arr[i] = \"Two\" if i <= 99\n    arr[i] = \"Three\"\
    \ if i <= 999\n    arr[i] = \"Four\" if i <= 9999\n    arr[i] = \"Five\" if i\
    \ <= 99999\n    arr[i] = \"Six\" if i <= 999999\n    arr[i] = \"Seven\" if i <=\
    \ 9999999\n    arr[i] = \"Eight\" if i <= 999999999\n    arr[i] = \"Nine\" if\
    \ i <= 99999999999\n  end\n  arr.sort!.reverse!\n  arr.each do |i|\n    arr[i]\
    \ = \"One\" if i <= 9\n    arr[i] = \"Two\" if i <= 99\n    arr[i] = \"Three\"\
    \ if i <= 999\n    arr[i] = \"Four\" if i <= 9999\n    arr[i] = \"Five\" if i\
    \ <= 99999\n    arr[i] = \"Six\" if i <= 999999\n    arr[i] = \"Seven\" if i <=\
    \ 9999999\n    arr[i] = \"Eight\" if i <= 999999999\n    arr[i] = \"Nine\" if\
    \ i <= 99999999999\n  end\n  arr\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each do |j|\n        if j == i\n          arr[j] = name(i)\n      \
    \  end\n      end\n    end\n  end\n  arr\nend", "  arr.each do |x|\n    if x >\
    \ 9\n      arr.reverse!\n      arr.each do |x|\n        if x != 0\n          arr[x]\
    \ = names[x]\n        end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse }\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map! {|x| x.to_s.reverse.sub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.empty? ? [] : arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {|x| x.to_s.reverse.to_i}\n  arr.map! {|x| x.to_s.reverse.to_i}\n \
    \ arr.map! {", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\"\
    \ : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000\
    \ ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000\
    \ ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\nend", "  arr.each do |i|\n  \
    \  if i.to_i < 1 || i.to_i > 9\n      next\n    end\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n", "  arr.sort!\n  arr.empty? ? [] : arr.map { |n| n < 10 ?\
    \ \"One\" : n < 100 ? \"Two\" : n < 1000 ? \"Three\" : n < 10000 ? \"Four\" :\
    \ n < 100000 ? \"Five\" : n < 1000000 ? \"Six\" : n < 10000000 ? \"Seven\" : n\
    \ < 100000000 ? \"Eight\" : n < 1000000000 ? \"Nine\" : n }\nend", "  arr.each\
    \ do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.reverse!\n  \
    \    arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse", "  arr.sort!\n  arr.empty? ? [] : arr.map\
    \ { |n| n < 10 ? \"One\" : n < 100 ? \"Two\" : n < 1000 ? \"Three\" : n < 10000\
    \ ? \"Four\" : n < 100000 ? \"Five\" : n < 1000000 ? \"Six\" : n < 10000000 ?\
    \ \"Seven\" : n < 100000000 ? \"Eight\" : n < 1000000000 ? \"Nine\" : n }\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : \"Two\"..\"Nine\"\
    \ }.join\nend", "  arr.sort!\n  arr.map!{|x| x < 1 ? nil : (x < 10 ? \"One\" :\
    \ \"Two\") + (x - 10).to_s }\n  arr.compact!\n  arr.empty? ? [] : arr\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  arr.sort!\n  arr.map!{|x| x <\
    \ 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\"\
    \ : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" :\
    \ x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : nil}\n  arr.reverse!\n\
    \  arr\nend", "  arr.sort!\n  arr.map!{|x| x < 1 ? nil : x.to_s}\n  arr.compact!\n\
    \  arr.map!{|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" :\
    \ x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000\
    \ ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : nil}\n\
    \  arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,arrays |>\n<code>", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map! { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each\
    \ do |j|\n        if j == i\n          arr[j] = names[i]\n        end\n      end\n\
    \    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map!{|x| x\
    \ < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\"\
    \ : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" :\
    \ x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\nend", "  arr.each\
    \ do |num|\n    if num > 9\n      num -= 10\n    end\n    arr[arr.index(num)]\
    \ = names[num]\n  end\n  arr\nend", "  arr.sort!\n  arr.each do |i|\n    if i\
    \ > 9\n      arr[i] = \"#{i}\"\n    end\n  end\n  arr.each do |i|\n    if i.to_s.include?('0')\n\
    \      arr[i] = \"#{i}\"\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse }\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map!{ |x| x < 1 ? x.to_s : x.to_s.reverse }.compact!\n\
    end", "  arr.each do |i|\n    next if i.to_i < 1 || i.to_i > 9\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse", "  arr.each do |i|\n  \
    \  if i.between?(1, 9)\n      arr.reverse!\n      arr.reverse!\n      arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine)}\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.each do |x|\n    if x > 9\n      arr[x] = names[x-1]\n    end\n  end\n\
    \  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\"\
    \ : \"Two\" if x < 20 ? \"Two\" : \"Three\" if x < 30 ? \"Three\" : \"Four\" if\
    \ x < 40 ? \"Four\" : \"Five\" if x < 50 ? \"Five\" : \"Six\" if x < 60 ? \"Six\"\
    \ : \"Seven\" if x < 70 ? \"Seven\" : \"Eight\" if x < 80 ? \"Eight\" : \"Nine\"\
    \ }\nend", "  arr.sort!\n  arr.map! {|x| x < 10 ? \"One\" : x < 100 ? \"Two\"\
    \ : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x <\
    \ 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x\
    \ < 1000000000 ? \"Nine\" : x }\n  arr\nend", "  arr.each do |num|\n    if num\
    \ > 9\n      num.to_s.reverse\n    else\n      num.to_s\n    end\n  end\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.between?(1, 9) ? \"One\" : \"\
    Two\" }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| \n    x.to_s.reverse.empty?\
    \ ? x : x.to_s.reverse.gsub!('0', by_length[x.to_s.reverse.to_i]) \n  }\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x >= 1 && x <= 9 ? names[x] : x }\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |x| x % 10 == 0 ? \"One\" : x % 10\
    \ == 1 ? \"Two\" : x % 10 == 2 ? \"Three\" : x % 10 == 3 ? \"Four\" : x % 10 ==\
    \ 4 ? \"Five\" : x % 10 == 5 ? \"Six\" : x % 10 == 6 ? \"Seven\" : x % 10 == 7\
    \ ? \"Eight\" : x % 10 == 8 ? \"Nine\" : nil }.compact\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr.reverse!\n      arr.each do |j|\n        arr[j]\
    \ = names_hash[j.to_s]\n      end\n    end\n  end\n  arr\nend", "  arr.each do\
    \ |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each { |j| j = \"\
    One\" if j == i }\n      arr.reverse!\n    end\n  end\n  arr\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.each do |i|\n\
    \    arr[i] = \"One\" if i==1\n    arr[i] = \"Two\" if i==2\n    arr[i] = \"Three\"\
    \ if i==3\n    arr[i] = \"Four\" if i==4\n    arr[i] = \"Five\" if i==5\n    arr[i]\
    \ = \"Six\" if i==6\n    arr[i] = \"Seven\" if i==7\n    arr[i] = \"Eight\" if\
    \ i==8\n    arr[i] = \"Nine\" if i==9\n  end\n  arr.reverse!\n  arr.each do |i|\n\
    \    arr[i] = \"One\" if i==1\n    arr[i] = \"Two\" if i==2\n    arr[i] = \"Three\"\
    \ if i==3\n    arr[i] = \"Four\" if i==4\n    arr[i] = \"Five\" if i==5\n    arr[i]\
    \ = \"Six\" if i==6\n    arr[i] = \"Seven\" if i==7\n    arr[i] = \"Eight\" if\
    \ i==8\n    arr[i] = \"Nine\" if i==9\n  end\n  arr\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. `by_length([2, 1, 1, 4, 5, 8, 2, 3])` returns\
    \ `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]`\n<|/ c |>\n<| c |>\nYeah, I realized that after I posted it. I edited my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\nThis doesn't work. `by_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])` returns `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]`\n<|/ c |>\n<| c |>\nYeah, I realized that after I posted\
    \ it. I edited my answer to fix it.\n<|/ c |>\n<| c |>\nThis doesn't work. `by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])` returns `[\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]`\n<|/ c |>\n<| a tags=ruby,arrays,sorting |>\n\
    <code>", "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.between?(1, 9) ? \"\
    One\" : \"Two\" }.reverse\nend", "  arr.each do |i|\n    arr[i] = \"One\" if i\
    \ == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n   \
    \ arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"\
    Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i\
    \ == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr.reverse!\n  arr.each do\
    \ |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i]\
    \ = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\"\
    \ if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n\
    \    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr\n\
    end", "  arr.each do |i|\n    next if i.to_i < 1 || i.to_i > 9\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse", "  arr.each do |x|\n  \
    \  if x > 9\n      x = x.to_s\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x.to_s.reverse }.uniq.map { |x|\
    \ x.to_s.reverse }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x <\
    \ 10 ? \"One\" : \"Two\" }.reverse\nend", "  arr.sort!\n  arr.map!{|x| x < 1 ?\
    \ nil : x.to_s}\n  arr.map!{|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000\
    \ ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000 ? \"\
    Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : nil}\n  arr\nend", "  arr.each do |i|\n    arr[i] = \"One\" if\
    \ i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n \
    \   arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] =\
    \ \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\"\
    \ if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr.reverse!\n  arr.each\
    \ do |i|\n    arr[i] = \"One\" if i == \"One\"\n    arr[i] = \"Two\" if i == \"\
    Two\"\n    arr[i] = \"Three\" if i == \"Three\"\n    arr[i] = \"Four\" if i ==\
    \ \"Four\"\n    arr[i] = \"Five\" if i == \"Five\"\n    arr[i] = \"Six\" if i\
    \ == \"Six\"\n    arr[i] = \"Seven\" if i == \"Seven\"\n    arr[i] = \"Eight\"\
    \ if i == \"Eight\"\n    arr[i] = \"Nine\" if i == \"Nine\"\n  end\n  arr\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, but I wonder why you\
    \ use \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\" instead of \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"\
    Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\"\n<|/ c |>\n<| c |>\nI used \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" because I thought it would\
    \ be easier to understand and to remember what each number means. If you want\
    \ \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"\
    Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\" instead, just replace \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" with \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\".\n<|/ c |>\n\
    <| c |>\nI like your solution, but I wonder why you use \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"S", "  arr.each do |x|\n    if x >= 1 && x <= 9\n    \
    \  arr.reverse!\n      arr.each do |x|\n        if x == 1\n          arr.reverse!\n\
    \          arr[0] = \"One\"\n        elsif x == 2\n          arr.reverse!\n  \
    \        arr[0] = \"Two\"\n        elsif x == 3\n          arr.reverse!\n    \
    \      arr[0] = \"Three\"\n        elsif x == 4\n          arr.reverse!\n    \
    \      arr[0] = \"Four\"\n        elsif x == 5\n          arr.reverse!\n     \
    \     arr[0] = \"Five\"\n        elsif x == 6\n          arr.reverse!\n      \
    \    arr[0] = \"Six\"\n        elsif x == 7\n          arr.reverse!\n        \
    \  arr[0] = \"Seven\"\n        elsif x == 8\n          arr.reverse!\n        \
    \  arr[0] = \"Eight\"\n        elsif x == 9\n          arr.reverse!\n        \
    \  arr[0] = \"Nine\"\n        end\n      end\n    end\n  end\n  arr\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse\
    \ }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x % 10 == 0 ? \"One\"\
    \ : \"Two\" if x % 10 == 1 && x % 100 != 11 ? \"One\" : \"Three\" if x % 10 ==\
    \ 2 && x % 100 != 12 ? \"One\" : \"Four\" if x % 10 == 3 && x % 100 != 13 ? \"\
    One\" : \"Five\" if x % 10 == 4 && x % 100 != 14 ? \"One\" : \"Six\" if x % 10\
    \ == 5 && x % 100 != 15 ? \"One\" : \"Seven\" if x % 10 == 6 && x % 100 != 16\
    \ ? \"One\" : \"Eight\" if x % 10 == 7 && x % 100 != 17 ? \"One\" : \"Nine\" }.compact\n\
    end", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse\
    \ }\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=1 |>\n<code>", "  arr.each\
    \ do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each do |j|\n\
    \        if j == i\n          arr[j] = by_length([j])\n        end\n      end\n\
    \    end\n  end\n  arr\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.map!{|x| x < 1 ? nil : (x < 10 ? \"One\" : \"Two\") + (x -\
    \ 10).to_s }\n  arr.compact!\n  arr.empty? ? [] : arr\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n  arr.map!{ |x|\
    \ x < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"\
    Four\" : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\"\
    \ : x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n\
    \  arr\nend", "  arr.sort!\n  arr.map!{|x| x if x > 0 && x < 10 && \"One\" <=\
    \ x && x <= \"Nine\"}\n  arr.reverse!\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |i| i <=> 1 }.sort.reverse.map { |i| names[i] }\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.between?(1, 9) ? \"#{names[i]}\" : i }\n\
    end", "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\n\
    end", "  arr.sort!\n  arr.map!{|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x <\
    \ 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000\
    \ ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : nil}\n  arr.reverse!\n  arr\nend", "  arr.sort!\n  arr.empty? ?\
    \ [] : arr.map { |x| x < 10 ? \"#{x}\" : \"#{x}#{x}\" }\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : \"Two\" if x < 20 ? \"Two\"\
    \ : \"Three\" if x < 30 ? \"Three\" : \"Four\" if x < 40 ? \"Four\" : \"Five\"\
    \ if x < 50 ? \"Five\" : \"Six\" if x < 60 ? \"Six\" : \"Seven\" if x < 70 ? \"\
    Seven\" : \"Eight\" if x < 80 ? \"Eight\" : \"Nine\" }.reverse\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  arr.sort!\n  arr.map! {|x| x\
    \ < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\"\
    \ : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" :\
    \ x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n\
    \  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s :\
    \ x.to_s.reverse }\nend", "  arr.each do |num|\n    if num > 9\n      arr.delete(num)\n\
    \      arr.unshift(num.to_s)\n    end\n  end\n  arr\nend", "  arr.each do |i|\n\
    \    if i.to_i < 1 || i.to_i > 9\n      next\n    end\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n", "  arr.sort!\n  arr.empty? ? [] : arr.map! { |i| i.to_s.reverse\
    \ }.uniq\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s\
    \ : x.to_s.reverse }\nend", "  arr.sort!\n  arr.map! {|x| x < 10 ? x : \"One\"\
    }\n  arr.map! {|x| x > 10 ? x : \"Two\"}\n  arr.map! {|x| x > 100 ? x : \"Three\"\
    }\n  arr.map! {|x| x > 1000 ? x : \"Four\"}\n  arr.map! {|x| x > 10000 ? x : \"\
    Five\"}\n  arr.map! {|x| x > 100000 ? x : \"Six\"}\n  arr.map! {|x| x > 1000000\
    \ ? x : \"Seven\"}\n  arr.map! {|x| x > 10000000 ? x : \"Eight\"}\n  arr.map!\
    \ {|x| x > 100000000 ? x : \"Nine\"}\n  arr.map! {|x| x > 1000000000 ? x : \"\
    Ten\"}\n  arr.map! {|x| x > 10000000000 ? x : \"Eleven\"}\n  arr.map! {|x| x >\
    \ 100000000000 ? x : \"Twelve\"}\n  arr.map! {|x| x > 1000000000000 ? x : \"Thirteen\"\
    }\n  arr.map! {|x| x > 10000000000000 ? x : \"Fourteen\"}\n  arr.map! {|x| x >\
    \ 100000000000000 ? x : \"Fifteen\"}\n  arr.map! {|x| x > 1000000000000000 ? x\
    \ : \"Sixteen\"}\n  arr.map! {|x| x > 10000000000000000 ? x : \"Seventeen\"}\n\
    \  arr.map! {|x| x > 100000000000000000 ? x : \"Eighteen\"}\n  arr.map! {|x| x\
    \ > 100000000000000000 ? x : \"Nineteen\"}\n  arr.map! {|x| x > 1000000000000000000\
    \ ? x : \"Twenty\"}\n  arr.map! {|x| x > 10000000000000000000 ? x : \"TwentyOne\"\
    }\n  arr.map! {|x| x > 100000000000000000000 ? x : \"TwentyTwo\"}\n  arr.map!\
    \ {|x| x > 1000000000000000000000 ? x : \"TwentyThree\"}\n  arr.map! {|x| x >\
    \ 10000000000000000000000 ? x : \"TwentyFour\"}\n  arr.map! {|x| x > 100000000000000000000000\
    \ ? x : \"TwentyFive\"}\n  arr.map! {|x| x > 1000000000000000000000000 ? x : \"\
    TwentySix\"}\n  arr.map! {|x| x > 10000000000000000000000000 ? x : \"TwentySe",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : x < 100 ? \"\
    Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" :\
    \ x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\"\
    \ : x < 1000000000 ? \"Nine\" : x }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map\
    \ { |x| x < 1 ? x.to_s : x.to_s.reverse }\nend", "  arr.each do |x|\n    if x\
    \ > 9\n      arr.delete_at(x-1)\n    end\n  end\n  arr.each do |x|\n    arr[x]\
    \ = names[x]\n  end\n  arr\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n\
    \      arr.reverse!\n      arr.each do |j|\n        if j == i\n          arr[j]\
    \ = by_num.index(i)\n        end\n      end\n    end\n  end\n  arr\nend", "  arr.each\
    \ do |i|\n    if i.to_i < 1 || i.to_i > 9\n      next\n    end\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr[i] = \"One\" if i == 1\n      arr[i] = \"\
    Two\" if i == 2\n      arr[i] = \"Three\" if i == 3\n      arr[i] = \"Four\" if\
    \ i == 4\n      arr[i] = \"Five\" if i == 5\n      arr[i] = \"Six\" if i == 6\n\
    \      arr[i] = \"Seven\" if i == 7\n      arr[i] = \"Eight\" if i == 8\n    \
    \  arr[i] = \"Nine\" if i == 9\n    end\n  end\n  arr\nend", "  arr.each do |x|\n\
    \    if x > 0\n      arr.delete_at(x)\n      arr.unshift(get_name(x))\n    end\n\
    \  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ?\
    \ \"#{x}\" : names[x] }.reverse\nend", "  arr.each do |i|\n    if i.to_i < 1 ||\
    \ i.to_i > 9\n      next\n    end\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n",
  "  arr.each do |x|\n    if x > 9\n      arr.reject! {|y| y > 9}\n    end\n  end\n\
    \  arr.each do |x|\n    if x < 1\n      arr.reject! {|y| y < 1}\n    end\n  end\n\
    \  arr.each do |x|\n    if x == 0\n      arr.reject! {|y| y == 0}\n    end\n \
    \ end\n  arr.each do |x|\n    if x > 9\n      arr.reject! {|y| y > 9}\n    end\n\
    \  end\n  arr.each do |x|\n    if x < 1\n      arr.reject! {|y| y < 1}\n    end\n\
    \  end\n  arr.each do |x|\n    if x == 0\n      arr.reject! {|y| y == 0}\n   \
    \ end\n  end\n  arr.each do |x|\n    if x > 9\n      arr.reject! {|y| y > 9}\n\
    \    end\n  end\n  arr.each do |x|\n    if x < 1\n      arr.reject! {|y| y < 1}\n\
    \    end\n  end\n  arr.each do |x|\n    if x == 0\n      arr.reject! {|y| y ==\
    \ 0}\n    end\n  end\n  arr.each do |x|\n    if x > 9\n      arr.reject! {|y|\
    \ y > 9}\n    end\n  end\n  arr.each do |x|\n    if x < 1\n      arr.reject! {|y|\
    \ y < 1}\n    end\n  end\n  arr.each do |x|\n    if x == 0\n      arr.reject!\
    \ {|y| y == 0}\n    end\n  end\n  arr.each do |x|\n    if x > 9\n      arr.reject!\
    \ {|y| y > 9}\n    end\n  end\n  arr.each do |x|\n    if x < 1\n      arr.reject!\
    \ {|y| y < 1}\n    end\n  end\n  arr.each do |x|\n    if x == 0\n      arr.reject!\
    \ {|y| y == 0}\n    end\n  end\n  arr.each do |x|\n    if x > 9\n      arr.reject!\
    \ {|y| y > 9}\n    end\n  end\n  arr.each do |x|\n    if x < 1\n      arr.reject!\
    \ {|y| y < 1}\n    end\n  end\n  arr.each do |x|\n    if x == 0\n      arr.reject!\
    \ {|y| y == 0}\n    end\n  end\n  arr.each do |x|\n    if x > 9\n      arr.re",
  "  arr.sort!\n  arr.empty? ? [] : arr.map! { |x| x < 10 ? x.to_s : \"#{x}#{names[x]}\"\
    \ }\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n<| c |>\nThis doesn't seem\
    \ to work. `by_length([2,1,4,5,8,2,3])` returns `[\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. What version of Ruby are you using?\n<|/ c |>\n<| c |>\nRuby\
    \ 1.9.3p484 (2013-11-22) [i386-mingw32]\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I must have had a typo when I first tested it. Sorry about that.\
    \ I'll edit my answer.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `by_length([2,1,4,5,8,2,3])`\
    \ returns `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]`\n<|/ c |>\n<| a |>\n<code>", "  arr.sort!\n  arr.empty? ? [] : arr.map\
    \ { |x| x < 10 ? \"One\" : \"Two\" if x < 20 ? \"Two\" : \"Three\" if x < 30 ?\
    \ \"Three\" : \"Four\" if x < 40 ? \"Four\" : \"Five\" if x < 50 ? \"Five\" :\
    \ \"Six\" if x < 60 ? \"Six\" : \"Seven\" if x < 70 ? \"Seven\" : \"Eight\" if\
    \ x < 80 ? \"Eight\" : \"Nine\" }\nend", "  arr.each do |i|\n    arr[i] = \"One\"\
    \ if i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n\
    \    arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i]\
    \ = \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\"\
    \ if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr.reverse!\n  arr.each\
    \ do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n   \
    \ arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] =\
    \ \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if\
    \ i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n\
    \  end\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=0 |>\n<code>",
  "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each\
    \ { |j| j = \"One\" if j == i }\n    end\n  end\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. `by_length([])` returns\
    \ `[]`, but `by_length([1])` returns `[\"One\"]`.\n<|/ c |>\n<| c |>\nYes, I agree.\
    \ I didn't think about that case. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=ruby,arrays |>\n<code>", "  arr.each do |i|\n    if i.between?(1, 9)\n\
    \      arr.reverse!\n      arr.each do |j|\n        if j == i\n          arr[j]\
    \ = by_name[i]\n        end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.between?(1, 9) ? \"One\" : \"Two\" }\nend",
  "  arr.each do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i ==\
    \ 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i]\
    \ = \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\"\
    \ if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n\
    \  end\n  arr.sort!.reverse!\n  arr.each do |i|\n    arr[i] = \"One\" if i ==\
    \ 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i]\
    \ = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\"\
    \ if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i ==\
    \ 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map! {|x| x < 10 ? x.to_s : \"#{x}\".to_sym }\nend", "  arr.each\
    \ do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n   \
    \ arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] =\
    \ \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if\
    \ i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n\
    \  end\n  arr.reverse!\n  arr.each do |i|\n    arr[i] = \"One\" if i == 1\n  \
    \  arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] =\
    \ \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if\
    \ i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n\
    \    arr[i] = \"Nine\" if i == 9\n  end\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| x % 10 == 0 ? \"One\" : \n                          x %\
    \ 10 == 1 ? \n                            \"Two\" : \n                       \
    \     x % 10 == 2 ? \"Three\" : \n                            x % 10 == 3 ? \"\
    Four\" : \n                            x % 10 == 4 ? \"Five\" : \n           \
    \                 x % 10 == 5 ? \"Six\" : \n                            x % 10\
    \ == 6 ? \"Seven\" : \n                            x % 10 == 7 ? \"Eight\" : \n\
    \                            x % 10 == 8 ? \"Nine\" : \n                     \
    \       \"One\" }\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there's a way to make it more concise? I mean the code looks\
    \ very repetitive.\n<|/ c |>\n<| c |>\nI added a more concise version. :)\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>", "  arr.sort!\n  arr.each do |i|\n    if i <\
    \ 1 || i > 9\n      next\n    end\n    arr[i] = \"One\" if i == 1\n    arr[i]\
    \ = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\"\
    \ if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n\
    \    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i]\
    \ = \"Nine\" if i == 9\n  end\n  arr\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    This doesn't work if the array is empty or has strange numbers. Try `by_length([-1,\
    \ 55])`\n<|/ c |>\n<| c |>\n: Good point. I've added a comment to the question\
    \ to clarify.\n<|/ c |>\n<| c |>\n: I've added a solution that handles empty arrays\
    \ and strange numbers.\n<|/ c |>\n<| c |>\n: I've added a solution that handles\
    \ empty arrays and strange numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.select { |i| i.to_i != 0 }\n\
    end", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each\
    \ do |j|\n        if j.between?(1, 9)\n          arr[j] = names[j-1]\n       \
    \ end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? []\
    \ : arr.map!{|x| x < 10 ? \"One\" : \"Two\"}\n  arr.map!{|x| x < 10 ? \"One\"\
    \ : \"Two\"}\n  arr\nend", "  arr.sort!\n  arr.map! {|x| x < 10 ? \"One\" : x\
    \ < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ?\
    \ \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000\
    \ ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n  arr\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse\
    \ }.compact\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse", "  arr.each do |x|\n\
    \    if x > 9\n      arr.delete_at(x-1)\n    end\n  end\n  arr.each do |x|\n \
    \   if x < 1\n      arr.delete_at(x)\n    end\n  end\n  arr.each do |x|\n    if\
    \ x == 1\n      arr[x] = \"One\"\n    elsif x == 2\n      arr[x] = \"Two\"\n \
    \   elsif x == 3\n      arr[x] = \"Three\"\n    elsif x == 4\n      arr[x] = \"\
    Four\"\n    elsif x == 5\n      arr[x] = \"Five\"\n    elsif x == 6\n      arr[x]\
    \ = \"Six\"\n    elsif x == 7\n      arr[x] = \"Seven\"\n    elsif x == 8\n  \
    \    arr[x] = \"Eight\"\n    elsif x == 9\n      arr[x] = \"Nine\"\n    end\n\
    \  end\n  arr\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are\
    \ any negative numbers in the array. For example, `by_length([-1, -1, 1, -4, -5,\
    \ -8, -2, -3])` returns `[\"One\", \"One\", \"One\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]`\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't care about negative numbers. I didn't want to change your original code\
    \ too much since I thought it would be better to show how to do it in Ruby than\
    \ to show how to do it in Python.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  arr.each\
    \ do |i|\n    if i.to_i < 1 || i.to_i > 9\n      next\n    end\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr.each do |j|\n        if j == i\n         \
    \ arr[j] = by_length_arr[j]\n        end\n      end\n    end\n  end\n  arr\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : \"Two\" if x\
    \ < 20 ? \"Two\" : \"Three\" if x < 30 ? \"Three\" : \"Four\" if x < 40 ? \"Four\"\
    \ : \"Five\" if x < 50 ? \"Five\" : \"Six\" if x < 60 ? \"Six\" : \"Seven\" if\
    \ x < 70 ? \"Seven\" : \"Eight\" if x < 80 ?\"Eight\" : \"Nine\" }\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : \"Two\" if x < 20 ? \"Two\"\
    \ : \"Three\" if x < 30 ? \"Three\" : \"Four\" if x < 40 ? \"Four\" : \"Five\"\
    \ if x < 50 ? \"Five\" : \"Six\" if x < 60 ? \"Six\" : \"Seven\" if x < 70 ? \"\
    Seven\" : \"Eight\" if x < 80 ? \"Eight\" : \"Nine\" }.reverse\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x <\
    \ 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000\
    \ ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : x }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map! {|x| x <\
    \ 10 ? \"One\" : \"Two\"}\n  arr.map! {|x| x < 10 ? \"One\" : \"Two\"}\n  arr\n\
    end", "  arr.sort!\n  arr.map! {|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x <\
    \ 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000\
    \ ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : x }\n  arr\nend", "  arr.each do |x|\n    if x >= 1 && x <= 9\n\
    \      arr.reverse!\n      arr.each do |y|\n        if y >= 1 && y <= 9\n    \
    \      arr.replace(y, by_num(y))\n        end\n      end\n    end\n  end\n  arr\n\
    end", "  arr.sort!\n  arr.empty? ? [] : arr.map { |n| by_length_helper(n) }\n\
    end", "  arr.sort!\n  arr.map! {|x| x if x > 0 && x < 10 && \"One\".include?(x.to_s)\
    \ || \"Two\".include?(x.to_s) || \"Three\".include?(x.to_s) || \"Four\".include?(x.to_s)\
    \ || \"Five\".include?(x.to_s) || \"Six\".include?(x.to_s) || \"Seven\".include?(x.to_s)\
    \ || \"Eight\".include?(x.to_s) || \"Nine\".include?(x.to_s) }\n  arr\nend", " \
    \ arr.each do |i|\n    next if i.to_i < 1 || i.to_i > 9\n    arr.reverse!\n  \
    \  arr[i] = \"#{arr[i]}\"\n  end\n  arr\nend", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr.reverse!\n      arr.each do |j|\n        arr[j]\
    \ = names[j]\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.map!\
    \ {|x| x < 10 ? x.to_s : \"One\"}\n  arr.map! {|x| x < 10 ? x.to_s : \"Two\"}\n\
    \  arr.map! {|x| x < 10 ? x.to_s : \"Three\"}\n  arr.map! {|x| x < 10 ? x.to_s\
    \ : \"Four\"}\n  arr.map! {|x| x < 10 ? x.to_s : \"Five\"}\n  arr.map! {|x| x\
    \ < 10 ? x.to_s : \"Six\"}\n  arr.map! {|x| x < 10 ? x.to_s : \"Seven\"}\n  arr.map!\
    \ {|x| x < 10 ? x.to_s : \"Eight\"}\n  arr.map! {|x| x < 10 ? x.to_s : \"Nine\"\
    }\n  arr\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |n| n < 10 ? \"One\" : n < 100 ? \"Two\" : n < 1000 ? \"Three\"\
    \ : n < 10000 ? \"Four\" : n < 100000 ? \"Five\" : n < 1000000 ? \"Six\" : n <\
    \ 10000000 ? \"Seven\" : n < 100000000 ? \"Eight\" : n < 1000000000 ? \"Nine\"\
    \ : n }\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each { |e| e.to_s.gsub!(/\\d/, one_or_nine(e)) }\n    end\n  end\n\
    \  arr\nend", "  arr.sort!\n  arr.map!{|x| x < 1 ? nil : x.to_s}\n  arr.compact!\n\
    \  arr.map!{|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" :\
    \ x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000\
    \ ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : nil}\n\
    \  arr\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each do |j|\n        if j == i\n          arr[j] = by_length([j])\n\
    \        end\n      end\n    end\n  end\n  arr\nend", "  arr.each do |x|\n   \
    \ if x > 9\n      arr[x] = by_length(arr[x].to_s.split(\"\").reverse)\n    end\n\
    \  end\n  arr.empty? ? [] : arr.map {|x| by_length(x).join(\"\") }\nend", "  arr.each\
    \ do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each { |j| j\
    \ = \"One\" if j == i || j == \"Ten\" || j == \"Eleven\" || j == \"Twelve\" ||\
    \ j == \"Thirteen\" || j == \"Fourteen\" || j == \"Fifteen\" || j == \"Sixteen\"\
    \ || j == \"Seventeen\" || j == \"Eighteen\" || j == \"Nineteen\" }\n      arr.reverse!\n\
    \    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |i|\
    \ i.to_s.reverse }.uniq.map { |i| i.to_s.reverse }\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. `by_length([1,-1,55])`\
    \ returns `[\"One\"]` instead of `[]`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it. I also added a comment to the OP's question to clarify that case.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  arr.sort!\n  arr.empty? ? [] : arr.map!\
    \ {|x| x < 1 ? x.to_s : x.to_s}\nend", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr.each do |j|\n        if j == i\n         \
    \ arr[j] = by_length_num[i]\n        end\n      end\n    end\n  end\n  arr\nend",
  "  arr.sort!\n  arr.each do |i|\n    arr[i] = \"One\" if i.between?(1, 9)\n    arr[i]\
    \ = \"Two\" if i.between?(10, 19)\n    arr[i] = \"Three\" if i.between?(20, 29)\n\
    \    arr[i] = \"Four\" if i.between?(30, 39)\n    arr[i] = \"Five\" if i.between?(40,\
    \ 49)\n    arr[i] = \"Six\" if i.between?(50, 59)\n    arr[i] = \"Seven\" if i.between?(60,\
    \ 69)\n    arr[i] = \"Eight\" if i.between?(70, 79)\n    arr[i] = \"Nine\" if\
    \ i.between?(80, 89)\n  end\n  arr.reverse!\n  arr.map do |i|\n    i = i.to_s\n\
    \    i = i.gsub(/\\d/) { |m| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"].include?(m) ? m : \"#{m}\" }\n    i\n\
    \  end\nend", "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n\
    \      arr.each do |i|\n        arr[i] = \"One\" if i == \"1\"\n        arr[i]\
    \ = \"Two\" if i == \"2\"\n        arr[i] = \"Three\" if i == \"3\"\n        arr[i]\
    \ = \"Four\" if i == \"4\"\n        arr[i] = \"Five\" if i == \"5\"\n        arr[i]\
    \ = \"Six\" if i == \"6\"\n        arr[i] = \"Seven\" if i == \"7\"\n        arr[i]\
    \ = \"Eight\" if i == \"8\"\n        arr[i] = \"Nine\" if i == \"9\"\n      end\n\
    \    end\n  end\n  arr\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis code doesn't\
    \ work. `arr.reverse!` modifies the array in place, so `arr.reverse!.each do |i|`\
    \ will reverse the array and then immediately iterate over it again. `arr.reverse!.map\
    \ do |i|` will reverse the array and then map the array into a new array that\
    \ you can then iterate over.\n<|/ c |>\n<| c |>\nI didn't know that `reverse!`\
    \ modifies the array in place. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    `reverse!` modifies the array in place and returns the modified array. `reverse!.each`\
    \ iterates over the array in reverse order and modifies the array in place. `reverse!.map`\
    \ iterates over the array in reverse order and returns a new array with the modified\
    \ elements. `reverse!.map { |i| ... }` iterates over the array in reverse order\
    \ and returns a new array with the modified elements. `reverse!.map { |i| ...\
    \ }.each` iterates over the array in reverse order and modifies the array in place.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I edited\
    \ my answer to reflect your correction.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each\
    \ do |j|\n        arr[j] = names[j]\n      end\n    end\n  end\n  arr\nend", " \
    \ arr.each do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr[i] =\
    \ \"One\" if i==1\n      arr[i] = \"Two\" if i==2\n      arr[i] = \"Three\" if\
    \ i==3\n      arr[i] = \"Four\" if i==4\n      arr[i] = \"Five\" if i==5\n   \
    \   arr[i] = \"Six\" if i==6\n      arr[i] = \"Seven\" if i==7\n      arr[i] =\
    \ \"Eight\" if i==8\n      arr[i] = \"Nine\" if i==9\n    end\n  end\n  arr\n\
    end", "  arr.each do |num|\n    if num > 9\n      arr.reverse!\n      arr.each\
    \ do |num|\n        num = num.to_s\n        num = num.chars.to_a\n        num\
    \ = num.map { |i| i.to_i }\n        num = num.reverse\n        num = num.map {\
    \ |i| arr[i].to_s }\n        num = num.join\n      end\n    end\n  end\n  arr\n\
    end", "  arr.sort!\n  arr.empty? ? [] : arr.map! {|x| x.to_s.reverse.chars.map\
    \ {|y| y == '1' ? 'One' : y == '2' ? 'Two' : y == '3' ? 'Three' : y == '4' ? 'Four'\
    \ : y == '5' ? 'Five' : y == '6' ? 'Six' : y == '7' ? 'Seven' : y == '8' ? 'Eight'\
    \ : y == '9' ? 'Nine' : nil}}\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>",
  "  arr.each do |num|\n    if num > 9\n      num = (num - 10).to_s\n      arr.reverse!\n\
    \      arr.each do |num|\n        if num.to_i == num.to_i\n          arr << num\n\
    \        end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| x.to_s.reverse.sub(/\\d/) { |y| \n    y.to_s.reverse }\
    \ }\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if the\
    \ array has negative numbers. Try `by_length([-1, -10, -20, -30])`.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require negative numbers. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't require negative numbers. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require negative numbers. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "  arr.each do\
    \ |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr[i] = \"One\"\n \
    \   elsif i.between?(10, 99)\n      arr.reverse!\n      arr[i] = \"Two\"\n   \
    \ elsif i.between?(100, 999)\n      arr.reverse!\n      arr[i] = \"Three\"\n \
    \   elsif i.between?(1000, 9999)\n      arr.reverse!\n      arr[i] = \"Four\"\n\
    \    elsif i.between?(10000, 99999)\n      arr.reverse!\n      arr[i] = \"Five\"\
    \n    elsif i.between?(100000, 999999)\n      arr.reverse!\n      arr[i] = \"\
    Six\"\n    elsif i.between?(1000000, 9999999)\n      arr.reverse!\n      arr[i]\
    \ = \"Seven\"\n    elsif i.between?(10000000, 99999999)\n      arr.reverse!\n\
    \      arr[i] = \"Eight\"\n    elsif i.between?(100000000, 99999999999)\n    \
    \  arr.reverse!\n      arr[i] = \"Nine\"\n    end\n  end\n  arr\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if the array is `[2,1,1,4,5,8,2,3]`\n\
    <|/ c |>\n<| c |>\n: I didn't see that requirement in the question, but I added\
    \ a note to my answer.\n<|/ c |>\n<| c |>\nI added a note to my answer. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nI added a note to my answer. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  arr.each do\
    \ |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.reverse!\n     \
    \ arr.each do |j|\n        arr[j] = names[i]\n      end\n    end\n  end\n  arr\n\
    end", "  arr.sort!\n  arr.map! {|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x <\
    \ 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000\
    \ ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : x }\n  arr.reverse!\n  arr\nend", "  arr.each do |i|\n    arr[i]\
    \ = \"One\" if i.between?(1, 9)\n    arr[i] = \"Two\" if i.between?(10, 19)\n\
    \    arr[i] = \"Three\" if i.between?(20, 29)\n    arr[i] = \"Four\" if i.between?(30,\
    \ 39)\n    arr[i] = \"Five\" if i.between?(40, 49)\n    arr[i] = \"Six\" if i.between?(50,\
    \ 59)\n    arr[i] = \"Seven\" if i.between?(60, 69)\n    arr[i] = \"Eight\" if\
    \ i.between?(70, 79)\n    arr[i] = \"Nine\" if i.between?(80, 89)\n  end\n  arr.sort!.reverse!\n\
    \  arr.each do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i\
    \ == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n  \
    \  arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"\
    Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if\
    \ i == 9\n  end\n  arr\nend", "  arr.each do |num|\n    if num > 9\n      num\
    \ = (num / 10).floor\n      arr << num\n    end\n  end\n  arr.reverse\n  arr.each\
    \ do |num|\n    arr << \"One\" if num == 1\n    arr << \"Two\" if num == 2\n \
    \   arr << \"Three\" if num == 3\n    arr << \"Four\" if num == 4\n    arr <<\
    \ \"Five\" if num == 5\n    arr << \"Six\" if num == 6\n    arr << \"Seven\" if\
    \ num == 7\n    arr << \"Eight\" if num == 8\n    arr << \"Nine\" if num == 9\n\
    \  end\n  arr\nend", "  arr.sort!\n  arr.map!{|x| x < 10 ? \"One\" : x < 100 ?\
    \ \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\"\
    \ : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\"\
    \ : x < 1000000000 ? \"Nine\" : nil}\n  arr.reverse!\n  arr\nend", "  arr.sort!\n\
    \  arr.map!{|x| x < 10 ? x.to_s : \"One\"}\n  arr.map!{|x| x < 10 ? \"Two\" :\
    \ \"Three\"}\n  arr.map!{|x| x < 10 ? \"Four\" : \"Five\"}\n  arr.map!{|x| x <\
    \ 10 ? \"Six\" : \"Seven\"}\n  arr.map!{|x| x < 10 ? \"Eight\" : \"Nine\"}\n \
    \ arr.map!{|x| x < 10 ? \"Ten\" : \"Eleven\"}\n  arr.map!{|x| x < 10 ? \"Twelve\"\
    \ : \"Thirteen\"}\n  arr.map!{|x| x < 10 ? \"Fourteen\" : \"Fifteen\"}\n  arr.map!{|x|\
    \ x < 10 ? \"Sixteen\" : \"Seventeen\"}\n  arr.map!{|x| x < 10 ? \"Eighteen\"\
    \ : \"Nineteen\"}\n  arr.map!{|x| x < 10 ? \"Twenty\" : \"Twenty One\"}\n  arr.map!{|x|\
    \ x < 10 ? \"Twenty Two\" : \"Twenty Three\"}\n  arr.map!{|x| x < 10 ? \"Twenty\
    \ Four\" : \"Twenty Five\"}\n  arr.map!{|x| x < 10 ? \"Twenty Six\" : \"Twenty\
    \ Seven\"}\n  arr.map!{|x| x < 10 ? \"Twenty Eight\" : \"Twenty Nine\"}\n  arr.map!{|x|\
    \ x < 10 ? \"Thirty\" : \"Thirty One\"}\n  arr.map!{|x| x < 10 ? \"Thirty Two\"\
    \ : \"Thirty Three\"}\n  arr.map!{|x| x < 10 ? \"Thirty Four\" : \"Thirty Five\"\
    }\n  arr.map!{|x| x < 10 ? \"Thirty Six\" : \"Thirty Seven\"}\n  arr.map!{|x|\
    \ x < 10 ? \"Thirty Eight\" : \"Thirty Nine\"}\n  arr.map!{|x| x < 10 ? \"Forty\"\
    \ : \"Forty One\"}\n  arr.map!{|x| x < 10 ? \"Forty Two\" : \"Forty Three\"}\n\
    \  arr.map!{|x| x < 10 ? \"Forty Four\" : \"Forty Five\"}\n  arr.map!{|x| x <\
    \ 10 ? \"Forty Six\" : \"Forty Seven\"}\n  arr.map!{|x| x < 10 ? \"Forty Eight\"\
    \ : \"Forty Nine\"}\n  arr.map", "  arr.sort!\n  arr.map! {|x| x < 10 ? \"One\"\
    \ : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000\
    \ ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000\
    \ ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n  arr\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend\n</code>\n\
    <|/ a tags=ruby,arrays,sorting |>\n<| a |>\n<code>", "  arr.sort!\n  arr.each\
    \ do |i|\n    if i > 9\n      arr[i] = \"#{arr[i]}#{arr[i-1]}\"\n      arr[i-1]\
    \ = \"One\"\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.map! {|x| x if x\
    \ >= 1 && x <= 9 ? names[x] : x}\n  arr\nend", "  arr.sort!\n  arr.empty? ? []\
    \ : arr.map { |x| x < 10 ? \"One\" : \"Two\" if x < 20 ? \"Two\" : \"Three\" if\
    \ x < 30 ? \"Three\" : \"Four\" if x < 40 ? \"Four\" : \"Five\" if x < 50 ? \"\
    Five\" : \"Six\" if x < 60 ? \"Six\" : \"Seven\" if x < 70 ? \"Seven\" : \"Eight\"\
    \ if x < 80 ?\"Eight\" : \"Nine\" }\nend", "  arr.each do |x|\n    if x >= 1 &&\
    \ x <= 9\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      arr.each { |y| y *=\
    \ 10 }\n      arr.reverse!\n      arr.each { |y| y *= 10 }\n      arr.reverse!\n\
    \      arr.each { |y| y *= 10 }\n      arr.reverse!\n      ", "  arr.sort!\n \
    \ arr.empty? ? [] : arr.map { |x| x >= 1 && x <= 9 ? \"#{x}\" : x.to_s }.reverse\n\
    end", "  arr.each do |i|\n    next if i.to_i < 1 || i.to_i > 9\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n    arr.reverse!\n\
    \    arr.reverse!\n    arr.reverse!\n    arr.reverse", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |i| i.to_s.reverse }.uniq\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse }\nend", "  arr.each do\
    \ |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr[i] = \"One\"\n \
    \   elsif i.between?(10, 99)\n      arr.reverse!\n      arr[i] = \"Two\"\n   \
    \ elsif i.between?(100, 999)\n      arr.reverse!\n      arr[i] = \"Three\"\n \
    \   elsif i.between?(1000, 9999)\n      arr.reverse!\n      arr[i] = \"Four\"\n\
    \    elsif i.between?(10000, 99999)\n      arr.reverse!\n      arr[i] = \"Five\"\
    \n    elsif i.between?(100000, 999999)\n      arr.reverse!\n      arr[i] = \"\
    Six\"\n    elsif i.between?(1000000, 9999999)\n      arr.reverse!\n      arr[i]\
    \ = \"Seven\"\n    elsif i.between?(10000000, 99999999)\n      arr.reverse!\n\
    \      arr[i] = \"Eight\"\n    elsif i.between?(100000000, 99999999999)\n    \
    \  arr.reverse!\n      arr[i] = \"Nine\"\n    end\n  end\n  arr\nend", "  arr.each\
    \ do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.each do |j|\n\
    \        if j == i\n          arr[j] = by_length_hash[\"One\"]\n        end\n\
    \      end\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.each do |x|\n   \
    \ if x > 0\n      arr[x] = names[x]\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 10 ? \"#{x}\" : \"#{x}#{by_length[x - 10]}\"\
    \ }\nend", "  arr.each do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"\
    Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i\
    \ == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i]\
    \ = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\"\
    \ if i == 9\n  end\n  arr.reverse!\n  arr.each do |i|\n    arr[i] = \"One\" if\
    \ i == 1\n    arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n \
    \   arr[i] = \"Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] =\
    \ \"Six\" if i == 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\"\
    \ if i == 8\n    arr[i] = \"Nine\" if i == 9\n  end\n  arr\nend", "  arr.each\
    \ do |i|\n    if i.between?(1, 9)\n      arr.reverse!\n      arr.reverse!\n  \
    \    arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n      arr.reverse!\n\
    \      arr.reverse!\n      arr.reverse", "  arr.each do |i|\n    if i.between?(1,\
    \ 9)\n      arr.reverse!\n      arr.each do |j|\n        if j == i\n         \
    \ arr[j] = names(i)\n        end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x <\
    \ 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000\
    \ ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : x }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x <\
    \ 1 ? x.to_s : x.to_s.reverse }\nend", "  arr.each do |x|\n    if x > 9\n    \
    \  arr.delete(x)\n      arr.unshift(x)\n    end\n  end\n  arr.empty? ? [] : arr.map\
    \ { |x| names[x] }\nend", "  arr.each do |x|\n    if x >= 1 && x <= 9\n      arr.reverse!\n\
    \      arr.each { |y| y == \"One\" ? x = \"One\" : y == \"Two\" ? x = \"Two\"\
    \ : y == \"Three\" ? x = \"Three\" : y == \"Four\" ? x = \"Four\" : y == \"Five\"\
    \ ? x = \"Five\" : y == \"Six\" ? x = \"Six\" : y == \"Seven\" ? x = \"Seven\"\
    \ : y == \"Eight\" ? x = \"Eight\" : y == \"Nine\" ? x = \"Nine\" : nil }\n  \
    \    arr.reverse!\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? []\
    \ : arr.map { |x| x.to_s.reverse }.uniq\nend", "  arr.each do |num|\n    if num\
    \ > 9\n      arr.reverse!\n      arr.each do |num|\n        if num > 9\n     \
    \     arr.reverse!\n        end\n      end\n    end\n  end\n  arr\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x < 1 ? x.to_s : x.to_s.reverse }\nend", " \
    \ arr.sort!\n  arr.each do |i|\n    if i.to_i < 1 || i.to_i > 9\n      next\n\
    \    end\n    arr.reverse!\n    arr[i] = \"#{arr[i]}\"\n  end\n  arr\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are any negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\n: It does work if there are any negative numbers\
    \ in the array. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't require negative numbers in the array.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that doesn't require negative numbers in the array.\n<|/ c |>\n<|\
    \ a tags=ruby,arrays |>\n<code>", "  arr.each do |num|\n    if num > 9\n     \
    \ arr.delete(num)\n      arr.unshift(num.to_s)\n    end\n  end\n  arr\nend", " \
    \ arr.sort!\n  arr.map! {|x| x < 10 ? \"One\" : x < 100 ? \"Two\" : x < 1000 ?\
    \ \"Three\" : x < 10000 ? \"Four\" : x < 100000 ? \"Five\" : x < 1000000 ? \"\
    Six\" : x < 10000000 ? \"Seven\" : x < 100000000 ? \"Eight\" : x < 1000000000\
    \ ? \"Nine\" : x }\n  arr.reverse!\n  arr\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
