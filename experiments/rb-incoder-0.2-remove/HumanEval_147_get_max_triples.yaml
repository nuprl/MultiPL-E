name: HumanEval_147_get_max_triples
language: rb
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Explanation:\
  \ \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\ndef get_max_triples(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n\
  \    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n\
  \    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n\
  \    assert_equal(53361, candidate.call(100))\n  end\nend\n"
completions: ["  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n \
    \ count = 0\n  for i in 0..n\n    for j in 0..n\n      for k in 0..n\n       \
    \ if a[i] < a[j] && a[j] < a[k]\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-2\n    for j in i+1..n-1\n      count\
    \ += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a\
    \ = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n        if a[i] < a[j]\
    \ < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] == a[j] && a[j] == a[k]\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i-i+1)\n  end\n  a.sort!\n  a.reduce do |sum, value|\n    sum +\
    \ value if value % 3 == 0\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += a[j-a[i]]\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n \
    \ a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n and a[j] + a[k] == 3*i\n        k += 1\n      count += k - j\n\
    \  end\n  return count\nend", "  a = Array.new(n)\n  for i in 1..n\n    a[i] =\
    \ i * i - i + 1\n  end\n  a.each_with_index do |i, index|\n    if index > 0\n\
    \      j = index - 1\n      k = index + 1\n      while j > 0\n        if a[j]\
    \ + a[k] > a[i] + a[j]\n          a[j], a[k] = a[k], a[j]\n        end\n     \
    \   j -= 1\n      end\n    end\n  end\n  a.length\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n \
    \   for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n \
    \ end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      k = j+1\n      while k<n and a[i] < a[j] and a[j] < a[k]\n        k +=\
    \ 1\n      end\n      if a[i] < a[j] and a[j] < a[k]\n        count += 1\n   \
    \   end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n\
    \  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in 0..n-1\n      for k in\
    \ 0..n-1\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i*i-i+1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n     \
    \ count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  a.reject! {|x|\
    \ x < 0}\n  a.reject! {|x| x > n}\n  a.reject! {|x| x % 3 == 0}\n  a.length\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work. `get_max_triples(3)`\
    \ returns `0`, not `3`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c\
    \ |>\n<| c |>\nI added a more efficient solution that doesn't require sorting.\n\
    <|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't require sorting.\n\
    <|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't require sorting.\n\
    <|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  a = Array.new(n)\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  a.sort!\n  count = 0\n  for i in 1..n\n    for j\
    \ in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k])\
    \ % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i-i+1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      k = j+1\n      while k<n and a[i] < a[j] and a[i] < a[k]\n\
    \        count += 1\n        k += 1\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) %\
    \ 3 == 0\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n  for i in\
    \ 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for i in 1..n\n\
    \    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n \
    \ end\n  a.sort\n  a.each_with_index do |i, index|\n    next if index == 0\n \
    \   j = index - 1\n    k = index + 1\n    next if j == k\n    next if a[j] > a[k]\n\
    \    next if a[j] == a[k]\n    next if a[j] + a[k] == 3*i\n  end\n  a.size\nend",
  "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n\
    \  for i in 0...n\n    for j in 0...n\n      count += (a[i] + a[j] + a[k]) % 3\
    \ == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n   \
    \ a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ i+1..n\n      count += a[j] - a[i] + a[j-1]\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n \
    \ count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-2\n\
    \    for j in i+1..n\n      for k in j+1..n\n        if a[i] < a[j] && a[i] <\
    \ a[k]\n          count += 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  end\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count +=\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a =\
    \ []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for\
    \ i in 0..(n-1)\n    for j in (i+1)..n\n      count += (a[i] + a[j] + a[k]) %\
    \ 3 == 0 ? 1 : 0\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i*i - i + 1)\n  a.sort\n  a.each_with_index do |i, index|\n    if index\
    \ > 0\n      if a[index-1] + a[index] + a[index-1] == a[index-1] + a[index] +\
    \ a[index-1]\n        return index\n      end\n    end\n  end\n  return nil\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n \
    \ count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n \
    \       if a[i] == a[j] && a[j] == a[k]\n          count += 1\n        end\n \
    \     end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i * i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      k = j+1\n      while k<n and a[j] + a[k] == a[j]\n\
    \        k += 1\n      end\n      if k<n\n        count += 1\n      end\n    end\n\
    \  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i\
    \ - i + 1\n  end\n  a.each_with_index do |i, index|\n    next if i == 0\n    j\
    \ = index - 1\n    k = index + 1\n    next if j == k\n    next if a[i] < a[j]\
    \ || a[i] < a[k]\n    next if a[j] < a[k]\n    next if a[j] > a[i]\n    next if\
    \ a[k] > a[i]\n    next if a[k] > a[j]\n    next if a[k] < a[i]\n    next if a[i]\
    \ > a[j]\n    next if a[i] > a[k]\n    next if a[j] > a[i]\n    next if a[j] <\
    \ a[i]\n    next if a[k] < a[i]\n    next if a[k] > a[j]\n    next if a[k] > a[k]\n\
    \    puts a[i], a[j], a[k]\n  end\nend", "  a = []\n  for i in 1..n\n    a.push(i\
    \ * i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ i+1..n\n      for k in j+1..n\n        if a[i] == a[j] && a[j] == a[k]\n   \
    \       count += 1\n        end\n      end\n    end\n  end\n  count\nend", " \
    \ a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n \
    \ for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and a[j]+a[k]\
    \ == a[j]\n        k += 1\n      count += k - j\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  a.sort\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and a[i]\
    \ < a[j] and a[i] < a[k]\n        count += 1\n        k += 1\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n\
    \ && a[i] + a[j] + a[k] == 3\n        count += 1\n        k += 1\n    end\n  end\n\
    \  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i]\
    \ + a[k]\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n\n    for j\
    \ in 0..n\n      for k in 0..n\n        if i < j < k\n          count += 1\n \
    \         if a[i] + a[j] + a[k] == 3 * i\n            return count\n        end\n\
    \      end\n    end\n  end\nend", "  a = []\n  for i in 1..n\n    a.push(i * i\
    \ - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n  \
    \    k = j+1\n      while k<n and a[i] < a[j] and a[i] < a[k]\n        count +=\
    \ 1\n        k += 1\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n\
    \    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n \
    \ a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in\
    \ j+1..n\n        if a[i] < a[j] && a[i] < a[k]\n          count += 1\n      \
    \  end\n      end\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n \
    \   for j in i+1..n\n      for k in j+1..n\n        if a[i] + a[j] + a[k] == 3*i\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort\n  count =\
    \ 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and\
    \ a[j]+a[k] == 3*i\n        k += 1\n      count += k - j\n  return count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n  count =\
    \ 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n        if\
    \ a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      k = j+1\n      while k<n and a[j]+a[k] == 3*i\n        k += 1\n      end\n\
    \      if k<n\n        count += 1\n      end\n    end\n  end\n  return count\n\
    end", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n\
    \  count = 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n      \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n      \
    \  end\n      end\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  a.each_with_index do |i, index|\n\
    \    next if index == 0\n    j = index - 1\n    k = index + 1\n    next if a[j]\
    \ > a[k]\n    next if a[j] == a[k]\n    next if a[j] > a[j + 1]\n    next if a[j]\
    \ == a[j + 1]\n    next if a[k] > a[k + 1]\n    next if a[k] == a[k + 1]\n   \
    \ next if a[k] > a[k - 1]\n    next if a[k] == a[k - 1]\n    next if a[j] > a[k\
    \ - 1]\n    next if a[j] == a[k - 1]\n    next if a[k] > a[j - 1]\n    next if\
    \ a[k] == a[j - 1]\n    next if a[j] > a[j + 1]\n    next if a[j] == a[j + 1]\n\
    \    next if a[k] > a[k + 1]\n    next if a[k] == a[k + 1]\n    next if a[k] >\
    \ a[k - 1]\n    next if a[k] == a[k - 1]\n    next if a[j] > a[k - 1]\n    next\
    \ if a[j] == a[k - 1]\n    next if a[k] > a[j - 1]\n    next if a[k] == a[j -\
    \ 1]\n    next if a[j] > a[j + 1]\n    next if a[j] == a[j + 1]\n    next if a[k]\
    \ > a[k + 1]\n    next if a[k] == a[k + 1]\n    next if a[k] > a[k - 1]\n    next\
    \ if a[k] == a[k - 1]\n    next if a[j] > a[k - 1]\n    next if a[j] == a[k -\
    \ 1]\n    next if a[k] > a[j - 1]\n    next if a[k] == a[j - 1]\n    next if a[j]\
    \ > a[j + 1]\n    next if a[j] == a[j + 1]\n    next if a[k] > a[k + 1]\n    next\
    \ if a[k] == a[k + 1]\n    next if a[k] > a[k - 1]\n    next if a[k] == a[k -\
    \ 1]\n    next if a[j] > a[k - 1]\n    next if a[j] == a[k - 1]\n    next if a[k]\
    \ > a[j - 1]\n    next if a[k] == a[j - 1]\n    next if a[j] > a[j + 1]\n    next\
    \ if a[j] == a[j + 1]\n    next if a[k] > a[k + 1]\n    next if a[k] == a[k +\
    \ 1]\n    next if ", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n\
    \  a.sort\n  a.each_with_index do |i, index|\n    if index > 0\n      j = index\
    \ - 1\n      k = index + 1\n      while j < k\n        if a[j] + a[k] == i*i\n\
    \          return [i, a[j], a[k]]\n        end\n        j += 1\n        k += 1\n\
    \      end\n    end\n  end\n  return nil\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i*i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ 0..n-1\n      for k in 0..n-1\n        if a[i] < a[j] && a[j] < a[k]\n     \
    \     count += 1\n        end\n      end\n    end\n  end\n  return count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      k = j + 1\n      while k<n && a[i]\
    \ + a[j] + a[k] == 3\n        count += 1\n        k += 1\n    end\n  end\n  return\
    \ count\nend\n</code>\n<|/ a tags=ruby,algorithm |>\n<| c |>\nI like your solution,\
    \ but I believe it can be optimized a bit. For example, you can do `a.sort!` once\
    \ and use `i` and `j` instead of `0` and `n-1`.\n<|/ c |>\n<| c |>\nI believe\
    \ that `sort!` will sort the array in place, so `i` and `j` will still be in range\
    \ and `k` will still be in range. Also, `sort!` will do some extra work, so I\
    \ believe that `k` will still be in range after `sort!`.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. `sort!` will sort the array in place, so `i` and `j` will\
    \ still be in range and `k` will still be in range. Also, `sort!` will do some\
    \ extra work, so I believe that `k` will still be in range after `sort!`.\n<|/\
    \ c |>\n<| c |>\nI believe that `sort!` will sort the array in place, so `i` and\
    \ `j` will still be in range and `k` will still be in range. Also, `sort!` will\
    \ do some extra work, so I believe that `k` will still be in range after `sort!`.\n\
    <|/ c |>\n<| c |>\nI believe that `sort!` will sort the array in place, so `i`\
    \ and `j` will still be in range and `k` will still be in range. Also, `sort!`\
    \ will do some extra work, so I believe that `k` will still be in range after\
    \ `sort!`.\n<|/ c |>\n<| a tags=ruby,algorithm |>\n<code>", "  a = []\n  for i\
    \ in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort\n  a.each_with_index do |i, index|\n    next if index == 0\n    next\
    \ if i == 0\n    next if i == 1\n    next if i == n\n    next if a[index-1] +\
    \ a[index] + a[index+1] == a[i]\n    puts \"#{a[index-1]} + #{a[index]} = #{a[i]}\"\
    \n  end\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k < n and a[j]\
    \ + a[k] == a[j]\n        k += 1\n      end\n      if k == n\n        count +=\
    \ 1\n        break\n      end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n\
    \  for i in 0...n\n    a[i] = i * i - i + 1\n  a.sort!\n  count = 0\n  for i in\
    \ 0...n\n    for j in 0...n\n      for k in 0...n\n        if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in\
    \ j+1..n\n        if a[i] < a[j] < a[k] and a[i] < a[j] + a[k] < a[k]\n      \
    \    count += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a =\
    \ Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  \n  count\
    \ = 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i]\
    \ < a[j] && a[i] < a[k] && j < k\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  \n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n \
    \     for k in j+1..n\n        if a[i] == a[j] && a[j] == a[k]\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i * i - i + 1)\n  end\n  a.sort!\n  a.each_with_index\
    \ do |i, index|\n    if index > 0\n      if a[index-1] + a[index] + a[index-1]\
    \ == a[index-1] + a[index] + a[index-1]\n        return index\n      end\n   \
    \ end\n  end\n  return -1\nend", "  a = []\n  for i in 1..n\n    a.push(i * i\
    \ - i + 1)\n  a.sort!\n  count = 0\n  for i in 0...n\n    for j in 0...n\n   \
    \   for k in 0...n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n   \
    \       count += 1\n        end\n      end\n    end\n  end\n  return count\nend",
  "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 1..n\n    for j in 1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      k = j+1\n      while k<n and a[i] < a[j] and a[i]\
    \ < a[k]\n        k += 1\n      end\n      if a[i] > a[j] and a[i] > a[k]\n  \
    \      count += 1\n      end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n\
    \    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n \
    \ a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count +=\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a =\
    \ Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n && a[i]+a[j]+a[k]==3\n        count += 1\n        k += 1\n  \
    \    end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i*i - i + 1)\n  a.sort\n  a.each_with_index do |i, index|\n    if index\
    \ > 0\n      j = index - 1\n      k = index + 1\n      while j < k\n        if\
    \ a[j] + a[k] == i*i\n          return [i, a[j], a[k]]\n        end\n        j\
    \ += 1\n        k += 1\n      end\n    end\n  end\n  return nil\nend", "  a =\
    \ []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and a[i] <\
    \ a[j] and a[i] < a[k]\n        count += 1\n        k += 1\n    end\n  end\n \
    \ return count\nend", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i -\
    \ i + 1\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      k = j+1\n      while k<n and a[j] + a[k] == a[j] * a[k]\n        k += 1\n\
    \      end\n      if k<n\n        count += 1\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort\n\
    \  a.each_with_index do |i, index|\n    next if index == 0\n    next if index\
    \ == a.length - 1\n    next if a[index-1] + a[index+1] == a[i]\n    puts \"#{a[i]}\
    \ #{a[index-1]} #{a[index+1]}\"\n  end\nend", "  a = Array.new(n)\n  for i in\
    \ 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += a[j] - a[i] + a[j] - a[i]\n    end\n  end\n\
    \  return count\nend", "  a = Array.new(n) \n  for i in 1..n\n    a[i] = i * i\
    \ - i + 1\n  end\n  \n  count = 0\n  for i in 1..n\n    for j in 1..n\n      for\
    \ k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\n          count += 1\n   \
    \     end\n      end\n    end\n  end\n  \n  return count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.each_with_index do |i,\
    \ index|\n    next if i == 0\n    a.each_with_index do |j, index2|\n      next\
    \ if j == 0\n      a.each_with_index do |k, index3|\n        next if k == 0\n\
    \        if a[index] + a[index2] + a[index3] == a[i] + a[j] + a[k]\n         \
    \ return index\n        end\n      end\n    end\n  end\n  return -1\nend", " \
    \ a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n        if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n  \
    \    end\n    end\n  end\n  count\nend", "  a = Array.new(n) {|i| i * i - i +\
    \ 1}\n  a.each_with_index do |i, index|\n    a.each_with_index do |j, index|\n\
    \      a.each_with_index do |k, index|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index] + a[index]\n        end\n      end\n    end\n  end\n \
    \ a.each_with_index do |i, index|\n    a.each_with_index do |j, index|\n     \
    \ a.each_with_index do |k, index|\n        if i < j < k\n          a[index] =\
    \ a[index] + a[index] + a[index]\n        end\n      end\n    end\n  end\n  a.each_with_index\
    \ do |i, index|\n    a.each_with_index do |j, index|\n      a.each_with_index\
    \ do |k, index|\n        if i < j < k\n          a[index] = a[index] + a[index]\
    \ + a[index]\n        end\n      end\n    end\n  end\n  a.each_with_index do |i,\
    \ index|\n    a.each_with_index do |j, index|\n      a.each_with_index do |k,\
    \ index|\n        if i < j < k\n          a[index] = a[index] + a[index] + a[index]\n\
    \        end\n      end\n    end\n  end\n  a.each_with_index do |i, index|\n \
    \   a.each_with_index do |j, index|\n      a.each_with_index do |k, index|\n \
    \       if i < j < k\n          a[index] = a[index] + a[index] + a[index]\n  \
    \      end\n      end\n    end\n  end\n  a.each_with_index do |i, index|\n   \
    \ a.each_with_index do |j, index|\n      a.each_with_index do |k, index|\n   \
    \     if i < j < k\n          a[index] = a[index] + a[index] + a[index]\n    \
    \    end\n      end\n    end\n  end\n  a.each_with_index do |i, index|\n    a.each_with_index\
    \ do |j, index|\n      a.each_with_index do |k, index|\n        if i < j < k\n\
    \          a[index] = a[index] + a[index] + a[index]\n        end\n      end\n\
    \    end\n  end\n  a.each_with_index do |i, index|\n    a.each_with_index do |j,\
    \ index|\n      a.each_with_index do |k, index|\n        if i < j < k\n      \
    \    a[index] = a[index] + a[index] + a[index]\n        end\n      end\n    end\n\
    \  end\n  a.each_with_index do |i, index|\n    a.each_with_index do |", "  a =\
    \ Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in\
    \ j+1..n\n        if a[i] < a[j] < a[k]\n          count += 1\n        end\n \
    \     end\n    end\n  end\n  return count\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| c |>\nI like your solution, but I think it would be more efficient to sort\
    \ the array in descending order and stop searching once you reach the middle of\
    \ the array. Also, you could use `each_cons(3)` instead of `0..(n-1)`.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I'll add that to the answer.\n<|/ c |>\n<| c\
    \ |>\nI added a solution based on your suggestion.\n<|/ c |>\n<| c |>\nI added\
    \ a solution based on your suggestion.\n<|/ c |>\n<| c |>\nI added a solution\
    \ based on your suggestion.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.each_with_index do |i,\
    \ index|\n    next if i == 0\n    a.each_with_index do |j, index|\n      next\
    \ if j == 0\n      a.each_with_index do |k, index|\n        next if k == 0\n \
    \       if a[i] < a[j] && a[i] < a[k]\n          return index\n        elsif a[j]\
    \ < a[i] && a[j] < a[k]\n          return index\n        elsif a[k] < a[i] &&\
    \ a[k] < a[j]\n          return index\n        end\n      end\n    end\n  end\n\
    \  return -1\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n\
    \  count = 0\n  for i in 0..(n-1)\n    for j in (i+1)..n\n      k = j + 1\n  \
    \    while k < n and a[j] + a[k] == a[j]\n        k += 1\n      count += k - j\n\
    \    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i\
    \ + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      k = j+1\n      while k<n and a[i] < a[j] and a[j] < a[k]\n        k +=\
    \ 1\n      end\n      if a[i] < a[j] and a[j] < a[k]\n        count += 1\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      k = j+1\n      while k<n and a[i] < a[j] and a[i] < a[k]\n\
    \        k += 1\n      end\n      if a[i] < a[j] and a[j] < a[k]\n        count\
    \ += 1\n      end\n    end\n  end\n  return count\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis solution doesn't work. Try it with `a = [1, 3, 7, 13, 21]`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `a = [1, 3, 7, 13, 21]`\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `a = [1, 3, 7, 13, 21]`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `a = [1, 3, 7, 13, 21]`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `a = [1, 3, 7, 13, 21]`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k])\
    \ % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j\
    \ in i+1..n\n      count += a[j] - a[i] + a[k]\n    end\n  end\n  count\nend",
  "  a = Array.new(n) {|i| i * i - i + 1}\n  count = 0\n  for i in 1..n\n    for j\
    \ in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  end\n  a.sort\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while\
    \ k<n and a[i] < a[j] and a[j] < a[k]\n        k += 1\n      end\n      if a[i]\
    \ < a[j] and a[j] < a[k]\n        count += 1\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n\
    \  a.each_with_index do |i, index|\n    next if index == 0\n    j = index - 1\n\
    \    k = index + 1\n    next if a[j] > a[k]\n    next if a[j] == a[k]\n    next\
    \ if a[j] > a[j + 1]\n    next if a[j] == a[j + 1]\n    next if a[k] > a[k + 1]\n\
    \    next if a[k] == a[k + 1]\n    next if a[k] > a[k + 2]\n    next if a[k] ==\
    \ a[k + 2]\n    next if a[j] > a[k] + a[j + 1]\n    next if a[j] == a[k] + a[j\
    \ + 1]\n    next if a[k] > a[k + 1] + a[k]\n    next if a[k] == a[k + 1] + a[k]\n\
    \    next if a[k] > a[k + 2] + a[k]\n    next if a[k] == a[k + 2] + a[k]\n   \
    \ next if a[j] > a[k] + a[j + 1] + a[k]\n    next if a[j] == a[k] + a[j + 1] +\
    \ a[k]\n    next if a[k] > a[k + 1] + a[k] + a[k]\n    next if a[k] == a[k + 1]\
    \ + a[k] + a[k]\n    next if a[k] > a[k + 2] + a[k] + a[k]\n    next if a[k] ==\
    \ a[k + 2] + a[k] + a[k]\n    next if a[j] > a[k] + a[j + 1] + a[k] + a[j + 1]\n\
    \    next if a[j] == a[k] + a[j + 1] + a[k] + a[j + 1]\n    next if a[k] > a[k\
    \ + 1] + a[k] + a[k] + a[k + 1]\n    next if a[k] == a[k + 1] + a[k] + a[k] +\
    \ a[k + 1]\n    next if a[k] > a[k + 2] + a[k] + a[k] + a[k + 2]\n    next if\
    \ a[k] == a[k + 2] + a[k] + a[k] + a[k + 2]\n    next if a[j] > a[k] + a[j + 1]\
    \ + a[k] + a[j + 1] + a[k]\n    next if a[j] == a[k] + a[j + 1] + a[k] + a[j +\
    \ 1] + a[k]\n    next if a[k] > a[k + 1] + a[k] + a[k] + a[k + 1] + a[k]\n   \
    \ next if a[k] == a[k + 1] + a[k] + a[k] + a[k + 1] + a[k]\n    next if a[k] >\
    \ a[k + 2] + a", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i - i + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n \
    \   for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n \
    \ end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  end\n  a.sort\n  a.each_with_index do |i, index|\n    next if index == 0\n\
    \    j = index - 1\n    k = index + 1\n    next if a[j] > a[k]\n    next if a[j]\
    \ == a[k]\n    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n    next if\
    \ a[k] > a[k+1]\n    next if a[k] == a[k+1]\n    next if a[k] > a[k-1]\n    next\
    \ if a[k] == a[k-1]\n    next if a[j] > a[k-1]\n    next if a[j] == a[k-1]\n \
    \   next if a[k] > a[j-1]\n    next if a[k] == a[j-1]\n    next if a[j] > a[j+1]\n\
    \    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n\
    \    next if a[j] > a[k-1]\n    next if a[j] == a[k-1]\n    next if a[k] > a[j-1]\n\
    \    next if a[k] == a[j-1]\n    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n\
    \    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n    next if a[j] > a[k-1]\n\
    \    next if a[j] == a[k-1]\n    next if a[k] > a[j-1]\n    next if a[k] == a[j-1]\n\
    \    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n\
    \    next if a[k] == a[k+1]\n    next if a[j] > a[k-1]\n    next if a[j] == a[k-1]\n\
    \    next if a[k] > a[j-1]\n    next if a[k] == a[j-1]\n    next if a[j] > a[j+1]\n\
    \    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n\
    \    next if a[j] > a[k-1]\n    next if a[j] == a[k-1]\n    next if a[k] > a[j-1]\n\
    \    next if a[k] == a[j-1]\n    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n\
    \    next ", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i-i+1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      count += a[j] - a[i] + a[k]\n    end\n  end\n  count\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `get_max_triples(3)` returns\
    \ `0`, but `get_max_triples(4)` returns `3`.\n<|/ c |>\n<| c |>\nI edited the\
    \ answer, I forgot to add the `count` variable\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't work. `get_max_triples(3)` returns `0`, but `get_max_triples(4)` returns\
    \ `3`.\n<|/ c |>\n<| c |>\nI edited the answer, I forgot to add the `count` variable\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. `get_max_triples(3)` returns `0`,\
    \ but `get_max_triples(4)` returns `3`.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n\
    \  for i in 0...n\n    for j in 0...n\n      for k in 0...n\n        if a[i] <\
    \ a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n    \
    \  end\n    end\n  end\n  return count\nend", "  a = Array.new(n) { |i| i * i\
    \ - i + 1 }\n  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n\
    \      a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n      end\n    end\n  end\n\
    \  a.each_with_index do |i, index|\n    a.each_with_index do |j, index2|\n   \
    \   a.each_with_index do |k, index3|\n        if i < j < k\n          a[index]\
    \ = a[index] + a[index2] + a[index3]\n        end\n", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i-i+1)\n  a.sort!\n  a.each_with_index do |i,j|\n    if i > j\n\
    \      break\n    end\n    if a[j] > a[j+1]\n      a[j], a[j+1] = a[j+1], a[j]\n\
    \    end\n  end\n  a.length\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution. Just a couple of comments: 1) `each_with_index` will iterate\
    \ over the array in reverse order, so `a[j] > a[j+1]` will never be true. 2) `each_with_index`\
    \ will iterate over the array in reverse order, so `a[j] > a[j+1]` will never\
    \ be true. 3) `each_with_index` will iterate over the array in reverse order,\
    \ so `a[j] > a[j+1]` will never be true. 4) `each_with_index` will iterate over\
    \ the array in reverse order, so `a[j] > a[j+1]` will never be true. 5) `each_with_index`\
    \ will iterate over the array in reverse order, so `a[j] > a[j+1]` will never\
    \ be true. 6) `each_with_index` will iterate over the array in reverse order,\
    \ so `a[j] > a[j+1]` will never be true. 7) `each_with_index` will iterate over\
    \ the array in reverse order, so `a[j] > a[j+1]` will never be true.\n<|/ c |>\n\
    <| c |>\nThanks for pointing out my mistakes. I fixed them and added some explanations.\n\
    <|/ c |>\n<| c |>\nI like your solution. Just a couple of comments: 1) `each_with_index`\
    \ will iterate over the array in reverse order, so `a[j] > a[j+1]` will never\
    \ be true. 2) `each_with_index` will iterate over the array in reverse order,\
    \ so `a[j] > a[j+1]` will never be true. 3) `each_with_index` will iterate over\
    \ the array in reverse order, so `a[j] > a[j+1]` will never be true. 4) `each_with_index`\
    \ will iterate over the array in reverse order, so `a[j] > a[j+1]` will never\
    \ be true. 5) `each_with_index` will iterate over the array in reverse order,\
    \ so `a[j] > a[j+1]` will never be true. 6) `each_with_index` will iterate over\
    \ the array in reverse order, so `a[j] > a[j+1]` will never be true. 7) `each_with_index`\
    \ will iterate ", "  a = Array.new(n) {|i| i * i - i + 1}\n  count = 0\n  for\
    \ i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] &&\
    \ a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  count\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  a = []\n\
    \  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i\
    \ in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count +=\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i*i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n\
    \    for j in 0..n-1\n      for k in 0..n-1\n        if a[i] < a[j] && a[i] <\
    \ a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = Array.new(n)\n  for i in 0...n\n    a[i] = i * i\
    \ - i + 1\n  count = 0\n  for i in 0...n\n    for j in 0...n\n      for k in 0...n\n\
    \        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      k = j+1\n      while k<n and a[i] < a[j] and a[i]\
    \ < a[k]\n        k += 1\n      end\n      if a[i] < a[j] and a[i] < a[k]\n  \
    \      count += 1\n      end\n    end\n  end\n  count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  a.each_with_index do |i, index|\n\
    \    next if index == 0\n    next if index == a.length - 1\n    next if a[index\
    \ + 1] - a[index] == 0\n    next if a[index + 1] - a[index] == 1\n    next if\
    \ a[index + 1] - a[index] == 2\n    next if a[index + 1] - a[index] == 3\n   \
    \ puts \"#{a[i]} #{a[index + 1]} #{a[index + 1] - a[index] - 3}\"\n  end\nend",
  "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i] + a[j-1] == a[i]\n\
    \    end\n  end\n  return count\nend", "  a = Array.new(n)\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n    for j in 1..n\n\
    \      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n \
    \         count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort\n  count =\
    \ 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i] + a[k]\
    \ == 3\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i\
    \ * i - i + 1)\n  a.sort!\n  a.reduce(0) {|sum, value| sum + value }\nend", " \
    \ a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n \
    \ for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and a[j]+a[k]==a[j]\n\
    \        k += 1\n      count += k - j\n    end\n  end\n  return count\nend", " \
    \ a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) %\
    \ 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n\
    \  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i]\
    \ + a[j] - a[i]\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n  \
    \    k = j+1\n      while k<n and a[i] < a[j] and a[j] < a[k]\n        count +=\
    \ 1\n        k += 1\n      end\n    end\n  end\n  count\nend\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n\
    \  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for\
    \ k in j+1..n\n        if a[i] == a[j] && a[j] == a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  a.sort!\n  count = 0\n  for i in\
    \ 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i\
    \ - i + 1\n  end\n  a.each_with_index do |i, index|\n    next if i == 0\n    j\
    \ = index - 1\n    k = index + 1\n    next if j == k\n    next if a[i] < a[j]\
    \ && a[i] < a[k]\n    next if a[j] < a[i] && a[j] < a[k]\n    next if a[k] < a[i]\
    \ && a[k] < a[j]\n    puts \"#{a[i]} #{a[j]} #{a[k]}\"\n  end\nend", "  a = []\n\
    \  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for i in\
    \ 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i] + a[j-1]\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n and a[i] < a[j] and a[j] < a[k]\n        k += 1\n      count\
    \ += k - j\n  end\n  return count\nend", "  a = Array.new(n)\n  for i in 0...n\n\
    \    a[i] = i * i - i + 1\n  count = 0\n  for i in 0...n\n    for j in 0...n\n\
    \      for k in 0...n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = Array.new(n) \n  for i in 1..n\n    a[i] = i * i - i + 1\n  count\
    \ = 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n  \
    \    end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n    for j in 1..n\n\
    \      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n \
    \         count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n\
    \ and a[i] < a[j] and a[i] < a[k]\n        k += 1\n      count += k - j\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..(n-1)\n    for j in (i+1)..n\n\
    \      k = j + 1\n      while k<n and a[i] < a[j] and a[j] < a[k]\n        k +=\
    \ 1\n      end\n      if a[i] < a[j] and a[j] < a[k]\n        count += 1\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i * i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n  \
    \  for j in i+1..n\n      k = j+1\n      while k<n and a[i] < a[j] and a[i] <\
    \ a[k]\n        k += 1\n      end\n      if a[i] < a[j] and a[i] < a[k]\n    \
    \    count += 1\n      end\n    end\n  end\n  count\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis solution doesn't work for `get_max_triples(3)` which returns `0`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The only thing\
    \ I changed was the variable `count` from 0 to 1.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and you're right. Sorry about that. My bad.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort\n\
    \  count = 0\n  for i in 0..n\n    for j in 0..n\n      for k in 0..n\n      \
    \  if i < j < k\n          count += a[i] + a[j] + a[k]\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      k = j+1\n      while k<n and a[i] < a[j] and a[j] < a[k]\n        k +=\
    \ 1\n      end\n      if a[i] < a[j] and a[j] < a[k]\n        count += 1\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-2\n    for j in i+1..n-1\n      for k\
    \ in j+1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n\
    \  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  a.each_with_index do |i,j|\n\
    \    if j > i\n      break\n    end\n    if a[j] + a[i] % 3 == 0\n      return\
    \ j\n    end\n  end\n  return -1\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n \
    \     count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n\
    \ and a[j]+a[k] == 3*a[j]\n        k += 1\n      count += k - j\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count\
    \ = 0\n  for i in 0..n\n    for j in 0..n\n      for k in 0..n\n        if i <\
    \ j and j < k and a[i] < a[j] and a[j] < a[k]\n          count += 1\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-2\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] + a[j] + a[k] == 3*i\n          count += 1\n        end\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n  for i in\
    \ 1..n\n    a[i] = i * i - i + 1\n  count = 0\n  for i in 1..n\n    for j in 1..n\n\
    \      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n \
    \         count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n       \
    \ if a[i] < a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI believe this\
    \ solution will fail for large values of n. For example, `get_max_triples(10**5)`\
    \ returns `0`.\n<|/ c |>\n<| c |>\nI believe this solution will fail for large\
    \ values of n. For example, `get_max_triples(10**5)` returns `0`.\n<|/ c |>\n\
    <| c |>\nI believe this solution will fail for large values of n. For example,\
    \ `get_max_triples(10**5)` returns `0`.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ will fail for large values of n. For example, `get_max_triples(10**5)` returns\
    \ `0`.\n<|/ c |>\n<| c |>\nI believe this solution will fail for large values\
    \ of n. For example, `get_max_triples(10**5)` returns `0`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] + a[j] + a[k] == 3*i\n          count += 1\n        end\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ i+1..n\n      for k in j+1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n\
    \  a.reduce(0) {|sum, el| sum + el}\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    `a.reduce(0) {|sum, el| sum + el}` can be replaced with `a.inject(0) {|sum, el|\
    \ sum + el}`\n<|/ c |>\n<| c |>\nYes, but `inject` was introduced in Ruby 1.9.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n     \
    \ k = n-1\n      while k > j\n        if a[j] < a[k]\n          k = k-1\n    \
    \    else\n          count = count + 1\n          break\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  end\n  a.sort!\n  a.each_with_index do |i, index|\n    next if index == 0\n\
    \    j = index - 1\n    k = index + 1\n    next if a[j] < a[k]\n    next if a[j]\
    \ == a[k]\n    next if a[j] > a[i] + a[k] \n    next if a[j] > a[i] + a[k]\n \
    \   next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j]\
    \ > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n\
    \    next if a[j] > a[i] + a[k]\n    next if a[j] > a[i] + a[k]\n", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for\
    \ i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] &&\
    \ a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n \
    \   end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i\
    \ * i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  a.each\
    \ do |i|\n    a.each do |j|\n      a.each do |k|\n        if i != j && i != k\
    \ && j != k\n          return i\n        end\n      end\n    end\n  end\n  return\
    \ 0\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe it can\
    \ be optimized a little bit more. For example, you can replace `a.each do |i|`\
    \ with `a.each_with_index do |i, index|` and then replace `a.each do |j|` with\
    \ `a.each_with_index do |j, index|` and so on. Then, instead of `return i` you\
    \ can do `return index`.\n<|/ c |>\n<| c |>\nI agree with you, thank you. I've\
    \ edited my answer.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n\
    \    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n \
    \ end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count\
    \ += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a\
    \ = Array.new(n) { |i| i * i - i + 1 }\n  a.each_with_index do |i, index|\n  \
    \  a.each_with_index do |j, index2|\n      a.each_with_index do |k, index3|\n\
    \        if i < j && j < k && a[i] + a[j] + a[k] == 3\n          puts \"#{a[i]}\
    \ #{a[j]} #{a[k]}\"\n        end\n      end\n    end\n  end\nend", "  a = []\n\
    \  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n and a[j] +\
    \ a[k] == a[j]\n        k += 1\n      end\n      if a[j] + a[k] == a[j]\n    \
    \    count += 1\n      end\n    end\n  end\n  return count\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis solution doesn't work. Try it for n = 5 and a =\
    \ [1, 3, 7, 13, 21]. Your solution returns 3, but should be 2.\n<|/ c |>\n<| c\
    \ |>\nI tested it for n = 5 and a = [1, 3, 7, 13, 21] and it returns 2. What is\
    \ the problem?\n<|/ c |>\n<| c |>\nThe problem is that the OP wants to count the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] +\
    \ a[k] is a multiple of 3.\n<|/ c |>\n<| c |>\nI see what you mean. I edited my\
    \ answer to include a solution that counts the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your solution is correct but too slow.\
    \ My solution is faster than yours.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  a\
    \ = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  end\n  a.sort\n  count =\
    \ 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += a[j] - a[i] + a[j]\
    \ - a[i]\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i*i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ i+1..n\n      k = j+1\n      while k<n and a[j] + a[k] == a[j]\n        k +=\
    \ 1\n      count += k - j\n  end\n  count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      for k in j+1..n\n        if a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n && a[i] + a[j] + a[k] == 3\n        count += 1\n        k +=\
    \ 1\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n  \
    \    k = j+1\n      while k<n and a[j]+a[k] < 3*a[j]\n        k += 1\n      count\
    \ += k - j\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in 0..n-1\n  \
    \    for k in 0..n-1\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n \
    \         count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort!\n  a.each_with_index do\
    \ |i, index|\n    next if index == 0\n    j = index - 1\n    k = index + 1\n \
    \   next if j == k\n    next if a[j] > a[k]\n    next if a[j] == a[k]\n    next\
    \ if a[j] + a[k] % 3 == 0\n    puts a[j] + a[k] + \" \" + a[j] + a[k]\n  end\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n\
    \ and a[i] < a[j] and a[i] < a[k]\n        count += 1\n        k += 1\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  end\n  a.sort!\n  a.reverse!\n  a.each_with_index do |i, index|\n    next if\
    \ index == 0\n    j = index - 1\n    k = index + 1\n    next if a[j] > a[k]\n\
    \    next if a[j] == a[k]\n    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n\
    \    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n    next if a[k] > a[k-1]\n\
    \    next if a[k] == a[k-1]\n    next if a[j] > a[j-1]\n    next if a[j] == a[j-1]\n\
    \    next if a[k] > a[k-1]\n    next if a[k] == a[k-1]\n    next if a[j] > a[j+1]\n\
    \    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n\
    \    next if a[j] > a[j-1]\n    next if a[j] == a[j-1]\n    next if a[k] > a[k-1]\n\
    \    next if a[k] == a[k-1]\n    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n\
    \    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n    next if a[j] > a[j-1]\n\
    \    next if a[j] == a[j-1]\n    next if a[k] > a[k-1]\n    next if a[k] == a[k-1]\n\
    \    next if a[j] > a[j+1]\n    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n\
    \    next if a[k] == a[k+1]\n    next if a[j] > a[j-1]\n    next if a[j] == a[j-1]\n\
    \    next if a[k] > a[k-1]\n    next if a[k] == a[k-1]\n    next if a[j] > a[j+1]\n\
    \    next if a[j] == a[j+1]\n    next if a[k] > a[k+1]\n    next if a[k] == a[k+1]\n\
    \    next if a[j] > a[j-1]\n    next if a[j] == a[j-1]\n    next if a[k] > a[k-1]\n\
    \    next if a[k] == a[k-1]\n    next if a[j] > a[j+1]\n    next if a[j] == ",
  "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) %\
    \ 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      count += a[i] < a[j] and a[i] < a[k]\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      for k in j+1..n\n\
    \        if a[i] + a[j] + a[k] == 3*i\n          count += 1\n        end\n   \
    \   end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n  \
    \  a.push(i*i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for\
    \ j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n     \
    \ for k in j+1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n    \
    \      count += 1\n        end\n      end\n    end\n  end\n  return count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n  a.each_with_index\
    \ do |i, index|\n    next if index == 0\n    j = index - 1\n    k = index + 1\n\
    \    next if j == k\n    next if a[j] > a[k]\n    next if a[j] == a[k]\n    next\
    \ if a[j] + a[k] == 3*i\n    puts a[j], a[k], i\n  end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nI believe this solution will fail for large values of n. For example,\
    \ `get_max_triples(100_000)` will take more than 30 minutes to run.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the question was \"how many triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3\" which\
    \ means there will be at most n^2 triples. So I think this solution should be\
    \ fine.\n<|/ c |>\n<| c |>\nI agree with you, but I believe this solution will\
    \ fail for large values of n. For example, `get_max_triples(100_000)` will take\
    \ more than 30 minutes to run.\n<|/ c |>\n<| c |>\nI agree with you, but I believe\
    \ this solution will fail for large values of n. For example, `get_max_triples(100_000)`\
    \ will take more than 30 minutes to run.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I believe this solution will fail for large values of n. For example, `get_max_triples(100_000)`\
    \ will take more than 30 minutes to run.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  count = 0\n  for\
    \ i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] &&\
    \ a[i] < a[k] && j < k\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i +\
    \ 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      for k in j+1..n\n        if a[i] + a[j] + a[k] == 3*i\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n\
    \  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n  for i in\
    \ 0..n-1\n    for j in i+1..n\n      k = j + 1\n      while k<n and a[j] + a[k]\
    \ == a[j] * a[k]\n        k += 1\n      count += k - j\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k])\
    \ % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i*i - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n  \
    \  for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n\
    \  a.sort\n  a.each_with_index do |i, index|\n    next if index == 0\n    next\
    \ if i == 0\n    next if i == 1\n    next if i == n\n    next if a[index - 1]\
    \ + a[index] + a[index + 1] == a[index - 1] + a[index] + a[index + 1]\n  end\n\
    \  a.size\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, but\
    \ I believe it can be simplified a bit. `a.each_with_index.select { |i, index|\
    \ index != 0 }.size` will return the number of triples (a[i], a[j], a[k]) of a\
    \ where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/ c |>\n<| c\
    \ |>\nYes, I agree. I just wanted to show a way to do it without using any loops.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I believe it can be simplified a\
    \ bit. `a.each_with_index.select { |i, index| index != 0 }.size` will return the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] +\
    \ a[k] is a multiple of 3.\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a bit. `a.each_with_index.select { |i, index| index !=\
    \ 0 }.size` will return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe it can be simplified a bit. `a.each_with_index.select\
    \ { |i, index| index != 0 }.size` will return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| a tags=ruby |>\n<code>", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort!\n  count = 0\n  for i in 0...n\n    for j in 0...n\n   \
    \   for k in 0...n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n   \
    \       count += 1\n        end\n      end\n    end\n  end\n  count\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it out with n = 10 and you'll\
    \ see that it returns 3 instead of 2.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated the answer to fix the bug.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. Try it out with n = 10 and you'll see that it returns 3 instead of 2.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to fix the bug.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. Try it out with n = 10 and you'll\
    \ see that it returns 3 instead of 2.\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \ a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n  end\n  a.sort!\n  count = 0\n\
    \  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) %\
    \ 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n \
    \   a.push(i*i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in\
    \ i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count\
    \ = 0\n  for i in 0...n\n    for j in 0...n\n      for k in 0...n\n        if\
    \ a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n  for i\
    \ in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n   \
    \ for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n \
    \ for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k < n and a[k]\
    \ == a[j] + a[k]\n        k += 1\n      count += k - j\n  return count\nend",
  "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count =\
    \ 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i]\
    \ < a[j] && a[i] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i-i+1)\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n and a[j]+a[k]+a[i] < 3\n        k += 1\n      count += k - j\n\
    \  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i\
    \ - i + 1\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      count += a[j] - a[i] + a[j-i] == 0\n    end\n  end\n  count\nend", "  a\
    \ = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count =\
    \ 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n        if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n  \
    \    end\n    end\n  end\n  return count\nend", "  a = Array.new(n)\n  for i in\
    \ 1..n\n    a[i] = i * i - i + 1\n  count = 0\n  for i in 1..n\n    for j in 1..n\n\
    \      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n \
    \         count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  end\n  a.sort!\n\
    \  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while\
    \ k<n and a[j] + a[k] == a[j]\n        k += 1\n      end\n      if k<n\n     \
    \   count += 1\n      end\n    end\n  end\n  return count\nend", "  a = []\n \
    \ for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for i in\
    \ 0...n\n    for j in 0...n\n      for k in 0...n\n        if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i\
    \ + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      count += (a[i] + a[j] + a[k]) % 3 == 0\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n \
    \ count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  return count\nend", "  a = []\n  for i in\
    \ 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0\n \
    \   end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i\
    \ + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-2\n    for j in i+1..n-1\n\
    \      for k in j+1..n\n        if a[i] + a[j] + a[k] == 3*i\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n\
    \  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort!\n  count = 0\n  for i in\
    \ 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n\
    \      for k in j+1..n\n        if a[i] < a[j] < a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n\
    \  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n\n\
    \    for j in 1..n\n      for k in 1..n\n        if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n\
    \  end\n  a.sort\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k\
    \ = j+1\n      while k < n and a[j] + a[k] == a[j]\n        k += 1\n      end\n\
    \      if k == n\n        count += 1\n      end\n    end\n  end\n  count\nend",
  "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.each_with_index\
    \ do |i, index|\n    next if i == 0\n    j = index - 1\n    k = index + 1\n  \
    \  next if j == k\n    next if a[i] < a[j] || a[i] < a[k]\n    next if a[j] <\
    \ a[k]\n    next if a[i] < a[j] + a[k]\n    next if a[j] < a[k] + a[i]\n    next\
    \ if a[k] < a[j] + a[i]\n    next if a[k] < a[j] + a[j]\n    next if a[k] < a[j]\
    \ + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n   \
    \ next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n\
    \    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n\
    \    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n\
    \    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n\
    \    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n\
    \    next if a[k] < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a[k]\
    \ < a[j] + a[k]\n    next if a[k] < a[j] + a[k]\n    next if a", "  a = []\n \
    \ for i in 1..n\n    a.push(i*i-i+1)\n  a.sort\n  count = 0\n  for i in 0..n-1\n\
    \    for j in i+1..n\n      count += (a[i] + a[j] + a[k]) % 3 == 0\n  end\n  return\
    \ count\nend", "  a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  end\n\
    \  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k = j+1\n\
    \      while k<n and a[j] + a[k] == a[j]\n        k += 1\n      end\n      if\
    \ k<n\n        count += 1\n      end\n    end\n  end\n  return count\nend", " \
    \ a = []\n  for i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n\
    \  for i in 0..n\n    for j in 0..n\n      for k in 0..n\n        if i < j < k\n\
    \          count += a[i..j].inject(0) {|sum, v| sum + v} == a[i..j].inject(0)\
    \ {|sum, v| sum + v}\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = Array.new(n)\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n\
    \  a.sort!\n  count = 0\n  for i in 1..n\n    for j in 1..n\n      for k in 1..n\n\
    \        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "  a = []\n  for\
    \ i in 1..n\n    a.push(i * i - i + 1)\n  a.sort\n  count = 0\n  for i in 0..n\n\
    \    for j in 0..n\n      for k in 0..n\n        if i < j < k and a[i] < a[j]\
    \ + a[k]\n          count += 1\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a.push(i * i - i + 1)\n  end\n  a.sort!\n  count = 0\n  for i in 0..n-1\n\
    \    for j in 0..n-1\n      for k in 0..n-1\n        if a[i] < a[j] && a[i] <\
    \ a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i - i +\
    \ 1)\n  a.sort!\n  count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      k\
    \ = j+1\n      while k<n && a[i] + a[j] + a[k] == 3\n        count += 1\n    \
    \    k += 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This solution doesn't work for the example `a = [1, 3, 7, 13, 21]` which should\
    \ return `3` but returns `0`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I fixed\
    \ the code now.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  a = Array.new(n)\n \
    \ for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  a.sort!\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      k = j + 1\n      while k < n and a[j]\
    \ + a[k] == a[j] * a[k]\n        k += 1\n      end\n      if k == n\n        count\
    \ += 1\n        break\n      end\n    end\n  end\n  count\nend", "  a = []\n \
    \ for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in 0..n-1\n      for k in 0..n-1\n        if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k]\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n    a.push(i*i\
    \ - i + 1)\n  a.sort!\n  count = 0\n  for i in 0...n\n    for j in 0...n\n   \
    \   for k in 0...n\n        if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n   \
    \       count += 1\n        end\n      end\n    end\n  end\n  return count\nend",
  "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  a.sort!\n  count = 0\n  for\
    \ i in 0..n-1\n    for j in i+1..n\n      k = j+1\n      while k<n && a[i]+a[j]+a[k]\
    \ == 3*i\n        count += 1\n        k += 1\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a.push(i*i - i + 1)\n  end\n  a.sort\n \
    \ count = 0\n  for i in 0..n-1\n    for j in i+1..n\n      count += (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
