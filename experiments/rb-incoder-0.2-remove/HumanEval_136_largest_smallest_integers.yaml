name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  def largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  lst.sort!\n  lst.each_with_index do |number, index|\n    if number\
    \ < 0\n      a = index\n      break\n    elsif number > 0\n      b = index\n \
    \     break\n    end\n  end\n  if a && b\n    [a, b]\n  elsif a\n    [a, nil]\n\
    \  elsif b\n    [nil, b]\n  else\n    [nil, nil]\n  end\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer\
    \ = i\n    elsif i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |x|\n    if x < 0\n      largest_integer = x\n    elsif x > 0\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n      largest_integer\
    \ = x\n    elsif x.positive?\n      smallest_integer = x\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer = i\n      else\n        smallest_integer = i\n      end\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if i.negative?\n        largest_integer = i\n      else\n        smallest_integer\
    \ = i\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  if\
    \ lst.empty?\n    return nil\n  else\n    smallest = lst.min\n    largest = lst.max\n\
    \    if smallest < 0\n      return smallest, largest\n    elsif largest > 0\n\
    \      return largest, smallest\n    else\n      return nil\n    end\n  end\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |integer|\n\
    \    if integer < 0\n      smallest_integer = integer\n    elsif integer > 0\n\
    \      largest_integer = integer\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n\
    \    if i < 0\n      largest_integer = i\n    elsif i > 0\n      smallest_integer\
    \ = i\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  if\
    \ lst.empty?\n    return nil\n  elsif lst.size == 1\n    return lst.first\n  else\n\
    \    smallest = lst.min\n    largest = lst.max\n    if smallest < 0\n      smallest\n\
    \    elsif largest > 0\n      largest\n    else\n      nil\n    end\n  end\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?\
    \ Integer\n      if x < 0\n        smallest_integer = x\n      else\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if largest_integer.nil?\
    \ || largest_integer > x\n        largest_integer = x\n        largest_integer_value\
    \ = x\n      end\n      if smallest_integer.nil? || smallest_integer < x\n   \
    \     smallest_integer = x\n        smallest_integer_value = x\n      end\n  \
    \  end\n  end\n  return [largest_integer, smallest_integer] if largest_integer.nil?\
    \ || smallest_integer.nil?\n  return [largest_integer_value, smallest_integer_value]\
    \ if largest_integer_value.nil? || smallest_integer_value.nil?\nend\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8])\nlargest_smallest_integers([1, 2, 3, -4, -5, 6, -7,\
    \ 8, 9])\nlargest_smallest_integers([1, 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer:\
    \ -10)\nlargest_smallest_integers([1, 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer:\
    \ -10, largest_integer: -20)\nlargest_smallest_integers([1, 2, 3, -4, -5, 6, -7,\
    \ 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9], smallest_integer: -10, largest_integer: -20)\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.sort.reverse!\n  lst.each do |i|\n    if i.is_a? Integer\n      return\
    \ i if i < 0\n    end\n  end\n  nil\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif\
    \ i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.each do |x|\n    if x.is_a? Integer\n      break\
    \ if x >= 0\n      break if x <= 0\n    end\n  end\n  return [x, -x if x != nil]\n\
    end", "  if lst.empty?\n    return nil\n  else\n    smallest_integer = lst.min\n\
    \    largest_integer = lst.max\n    if smallest_integer < 0\n      return nil\n\
    \    elsif largest_integer > 0\n      return [smallest_integer, largest_integer]\n\
    \    else\n      return [smallest_integer, nil]\n    end\n  end\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if i.negative?\n        largest_integer = i\n      else\n        smallest_integer\
    \ = i\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  if lst.empty?\n    return nil\n  elsif lst.size == 1\n    return lst.first\n\
    \  else\n    smallest_integer = lst.min\n    largest_integer = lst.max\n    if\
    \ smallest_integer < 0\n      return nil\n    elsif largest_integer > 0\n    \
    \  return largest_integer\n    else\n      return smallest_integer\n    end\n\
    \  end\nend", "  if lst.empty?\n    return nil\n  elsif lst.all? { |x| x.to_i\
    \ < 0 }\n    return nil\n  elsif lst.all? { |x| x.to_i > 0 }\n    return lst.min\n\
    \  end\n  lst.sort { |a, b| a.to_i < b.to_i ? -1 : 1 }.first\nend\nlargest_smallest_integers([-1,\
    \ -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105,\
    \ -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118,\
    \ -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131,\
    \ -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144,\
    \ -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157,\
    \ -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170,\
    \ -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183,\
    \ -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196,\
    \ -197, -198, -199, -200, -210, -220, -230, -240, -250, -260, -270, -280, -290,\
    \ -300, -311, -321, -331, -341, -351, -361, -371, -381, -391, -401, -411, -421,\
    \ -431, -441, -451, -461, -471, -481, -491, -501, -511, -521, -531, -541, -551,\
    \ -561, -571, -581, -591, -601, -611])", "  lst.each do |x|\n    if x.to_i < 0\n\
    \      a = x.to_i\n    else\n      b = x.to_i\n    end\n  end\n  return a, b\n\
    end\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([-1,\
    \ -2, -3, ", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do\
    \ |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  if\
    \ lst.empty?\n    return nil\n  elsif lst.all? { |x| x.is_a?(Integer) }\n    return\
    \ lst.max\n  elsif lst.all? { |x| x.is_a?(Fixnum) }\n    return lst.min\n  else\n\
    \    smallest_integer = lst.min\n    largest_integer = lst.max\n    smallest_integer_negative\
    \ = lst.select { |x| x < smallest_integer }\n    largest_integer_positive = lst.select\
    \ { |x| x > largest_integer }\n    if smallest_integer_negative.empty?\n     \
    \ return largest_integer\n    elsif largest_integer_positive.empty?\n      return\
    \ smallest_integer\n    else\n      return largest_smallest_integers(smallest_integer_negative)\
    \ + smallest_integer\n    end\n  end\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if x < 0\n        largest_integer\
    \ = x\n      elsif x > 0\n        smallest_integer = x\n      end\n    end\n \
    \ end\n  return largest_integer, smallest_integer\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      a = i\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x > 0\n      b = i\n      break\n    end\n  end\n  if a &&\
    \ b\n    return lst.slice(a, b).compact\n  elsif a\n    return lst.slice(a).compact\n\
    \  elsif b\n    return lst.slice(b).compact\n  end\nend", "  lst.each do |x|\n\
    \    if x.is_a? Integer\n      return x if x < 0\n      return x if x > 0\n  \
    \  end\n  end\n  return nil\nend", "  lst.sort!\n  smallest = nil\n  largest =\
    \ nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > 0\n\
    \      largest = x\n    end\n  end\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest.nil? && largest.nil?\n  return\
    \ [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest, largest]\
    \ if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\nend", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  \n  if lst.empty?\n    return nil\n  end\n  \n  lst.each do |integer|\n\
    \    if integer > largest_integer\n      largest_integer_value = integer\n   \
    \   largest_integer = integer\n    elsif integer < smallest_integer\n      smallest_integer_value\
    \ = integer\n      smallest_integer = integer\n    end\n  end\n  \n  return largest_integer,\
    \ smallest_integer\nend", "  lst.sort.reverse!\n  lst.each_with_index do |value,\
    \ index|\n    if value < 0\n      a = index\n      break\n    elsif value > 0\n\
    \      b = index\n      break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? ", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |x|\n    if x < 0\n      largest_integer\
    \ = x\n    elsif x > 0\n      smallest_integer = x\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.sort.reverse!\n  lst.each_with_index do |e, i|\n\
    \    if e < 0\n      a = i\n      break\n    end\n  end\n  lst.sort.reverse!\n\
    \  lst.each_with_index do |e, i|\n    if e > 0\n      b = i\n      break\n   \
    \ end\n  end\n  if a && b\n    return a, b\n  elsif a\n    return a, nil\n  elsif\
    \ b\n    return nil, b\n  end\nend", "  lst.each do |x|\n    if x.to_i < 0\n \
    \     a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n    if x.to_i\
    \ > 0\n      b = x.to_i\n      break\n    end\n  end\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      a = i\n      break\n    end\n  end\n  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    if x > 0\n      b = i\n      break\n   \
    \ end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil? || a > b\n  return [a, b] if a.nil? || b.nil? || a < b\n  return [a,\
    \ b] if a.nil? || b.nil? || a == b\nend", "  if lst.empty?\n    return nil\n \
    \ end\n  smallest = lst.min\n  largest = lst.max\n  return [smallest, largest]\
    \ if smallest.nil? || largest.nil?\n  smallest_integer = lst.find { |x| x.negative?\
    \ }\n  largest_integer = lst.find { |x| x.positive? }\n  return [smallest_integer,\
    \ largest_integer] if smallest_integer.nil? || largest_integer.nil?\n  [smallest_integer,\
    \ largest_integer]\nend", "  lst.sort!\n  lst.each_with_index do |n, i|\n    if\
    \ n < 0\n      a = i\n      break\n    end\n  end\n  lst.each_with_index do |n,\
    \ i|\n    if n > 0\n      b = i\n      break\n    end\n  end\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil? || a > b\n  return\
    \ [a, b] if a.nil? || b.nil? || a < b\nend\nlargest_smallest_integers([-1, -10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105,\
    \ -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118,\
    \ -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131,\
    \ -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144,\
    \ -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157,\
    \ -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170,\
    \ -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183,\
    \ -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196,\
    \ -197, -198, -199, -200, -210, -220, -230, -240, -250, -260, -270, -280, -290,\
    \ -300, -311, -321, -331, -341, -351, -361, -371, -381, -391, -401, -411, -421,\
    \ -431, -441, -451, -461, -471, -481, -491, -501, -511, -521, -531, -541, -551,\
    \ -561, -571, -581, -591, -601, -611])", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif\
    \ i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.is_a? Integer\n      if x < 0\n        smallest_integer\
    \ = x\n      else\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      return i if i < 0\n    end\n  end\n  lst.each do |i|\n    if\
    \ i.is_a? Integer\n      return i if i > 0\n    end\n  end\n  return nil\nend",
  "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n\
    \      if largest_integer.nil?\n        largest_integer = x\n      else\n    \
    \    largest_integer = largest_integer.max(x)\n      end\n    elsif x.positive?\n\
    \      if smallest_integer.nil?\n        smallest_integer = x\n      else\n  \
    \      smallest_integer = smallest_integer.min(x)\n      end\n    end\n  end\n\
    \  return largest_integer, smallest_integer\nend\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, -5, 6, -2, 7, 3, -9, -4, 8, -10, -7, -6, -5,\
    \ -4, -3, -2, -1, 0])\nputs \"Largest negative integer is #{largest_integer}\"\
    \nputs \"Smallest positive integer is #{smallest_integer}\"\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple negative and positive integers\
    \ in the list. For example, `[-5, -4, -3, -2, -1, 0]` returns `[-5, -4, -3, -2,\
    \ -1, 0]` instead of `[-1, 0]`.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with multiple negative and positive integers in the list. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI added a solution that works with multiple negative\
    \ and positive integers in the list. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |integer|\n    if integer < 0\n      largest_integer = integer\n\
    \    elsif integer > 0\n      smallest_integer = integer\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      return i if i < 0\n      return i if i > 0\n    end\n  end\n\
    \  nil\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do\
    \ |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer =\
    \ i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif\
    \ i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.each do |i|\n    if i.is_a? Integer\n      return\
    \ i if i < 0\n    end\n  end\n  lst.each do |i|\n    if i.is_a? Integer\n    \
    \  return i if i >= 0\n    end\n  end\n  return nil\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x.negative?\n      smallest = x\n\
    \    elsif x.positive?\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.positive? && largest.negative?\n  return\
    \ [smallest, largest] if smallest.negative? && largest.positive?\n  return [smallest,\
    \ largest] if smallest.positive? && largest.positive?\n  return [smallest, largest]\
    \ if smallest.positive? && largest.negative?\n  return [smallest, largest] if\
    \ smallest.negative? && largest.positive?\n  return [smallest, largest] if smallest.positive?\
    \ && largest.negative?\n  return [smallest, largest] if smallest.negative? &&\
    \ largest.negative?\n  return [smallest, largest] if smallest.negative? && largest.positive?\n\
    \  return [smallest, largest] if smallest.positive? && largest.positive?\n  return\
    \ [smallest, largest] if smallest.positive? && largest.negative?\n  return [smallest,\
    \ largest] if smallest.negative? && largest.positive?\n  return [smallest, largest]\
    \ if smallest.positive? && largest.negative?\n  return [smallest, largest] if\
    \ smallest.negative? && largest.positive?\n  return [smallest, largest] if smallest.positive?\
    \ && largest.negative?\n  return [smallest, largest] if smallest.negative? &&\
    \ largest.positive?\n  return [smallest, largest] if smallest.negative? && largest.negative?\n\
    \  return [smallest, largest] if smallest.negative? && largest.positive?\n  return\
    \ [smallest, largest] if smallest.positive? && largest.negative?\n  return [smallest,\
    \ largest] if smallest.positive? && largest.positive?\n  return [smallest, largest]\
    \ if smallest.positive? && largest.negative?\n  return [smallest, largest] if\
    \ smallest.negative? && largest.positive?\n  return [smallest, largest] if smallest.positive?\
    \ && largest.negative?\n  return [smallest, largest] if smallest.negative? &&\
    \ largest.positive?\n  return [smallest, ", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer > largest_integer\n      largest_integer\
    \ = integer\n    elsif integer < smallest_integer\n      smallest_integer = integer\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |integer|\n\
    \    if integer > largest_integer\n      largest_integer = integer\n    elsif\
    \ integer < smallest_integer\n      smallest_integer = integer\n    end\n  end\n\
    \  return largest_integer, smallest_integer\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  largest_integer_found = nil\n  smallest_integer_found\
    \ = nil\n  lst.each do |integer|\n    if integer > largest_integer\n      largest_integer_found\
    \ = integer\n      largest_integer = integer\n    elsif integer < smallest_integer\n\
    \      smallest_integer_found = integer\n      smallest_integer = integer\n  \
    \  end\n  end\n  return largest_integer, smallest_integer\nend\nlargest_integer,\
    \ smallest_integer = largest_smallest_integers([1, 2, 3, 4, 5])\np largest_integer,\
    \ smallest_integer", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  lst.each do |x|\n    if x.to_i\
    \ < 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n    if\
    \ x.to_i > 0\n      b = x.to_i\n      break\n    end\n  end\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer_value = i\n      else\n        smallest_integer_value =\
    \ i\n      end\n    elsif i.is_a? Float\n      if i.negative?\n        largest_integer_value\
    \ = i\n      else\n        smallest_integer_value = i\n      end\n    end\n  end\n\
    \  return largest_integer_value, smallest_integer_value\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x.negative?\n      smallest = x\n\
    \    elsif x.positive?\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, ", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer = i\n      else\n        smallest_integer = i\n      end\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend\nlargest_smallest_integers([-1,\
    \ -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105,\
    \ -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118,\
    \ -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131,\
    \ -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144,\
    \ -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157,\
    \ -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170,\
    \ -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183,\
    \ -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196,\
    \ -197, -198, -199, -200, -210, -220, -230, -240, -250, -260, -270, -280, -290,\
    \ -300, -311, -321, -331, -341, -351, -361, -371, -381, -391, -401, -411, -421,\
    \ -431, -441, -451, -461, -471, -481, -491, -501, -511, -521, -531, -541, -551,\
    \ -561, -571, -581, -591, -601, -611])", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif\
    \ i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    if\
    \ x < 0\n      a = i\n      break\n    end\n  end\n  lst.each_with_index do |x,\
    \ i|\n    if x > 0\n      b = i\n      break\n    end\n  end\n  if a && b\n  \
    \  return lst.slice(a, b).compact\n  else\n    return nil\n  end\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n   \
    \   largest_integer = x if largest_integer.nil? || largest_integer > x\n    else\n\
    \      smallest_integer = x if smallest_integer.nil? || smallest_integer < x\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer\
    \ = i\n    elsif i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer\
    \ = i\n    elsif i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    if i < 0\n      break\n    elsif i > 0\n      break\n    end\n  end\n  lst.sort.reverse\n\
    end", "  lst.sort\n  lst.each_with_index do |x, i|\n    if x < 0\n      a = i\n\
    \      break\n    end\n  end\n  lst.each_with_index do |x, i|\n    if x > 0\n\
    \      b = i\n      break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      largest_integer = x\n    elsif x > 0\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if x < 0\n        largest_integer = x\n      else\n        smallest_integer\
    \ = x\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i < 0\n  \
    \    return i if i >= 0\n    end\n  end\n  return nil\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  largest_integer_found = nil\n  smallest_integer_found\
    \ = nil\n  lst.each do |x|\n    if x.negative?\n      largest_integer = x\n  \
    \    largest_integer_found = largest_integer_found || x\n    elsif x.positive?\n\
    \      smallest_integer = x\n      smallest_integer_found = smallest_integer_found\
    \ || x\n    end\n  end\n  return largest_integer_found, smallest_integer_found\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i\
    \ < 0\n      largest_integer = i\n    elsif i > 0\n      smallest_integer = i\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ smallest == nil\n        smallest = x\n      elsif x < smallest\n        smallest\
    \ = x\n      end\n      if largest == nil\n        largest = x\n      elsif x\
    \ > largest\n        largest = x\n      end\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |integer|\n\
    \    if integer < 0\n      largest_integer = integer\n    elsif integer > 0\n\
    \      smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  largest_integer_value\
    \ = nil\n  smallest_integer_value = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if largest_integer.nil? || largest_integer > x\n        largest_integer\
    \ = x\n        largest_integer_value = x\n      elsif smallest_integer.nil? ||\
    \ smallest_integer < x\n        smallest_integer = x\n        smallest_integer_value\
    \ = x\n      end\n    end\n  end\n  return largest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer = i\n        largest_integer_value = i\n      else\n   \
    \     smallest_integer = i\n        smallest_integer_value = i\n      end\n  \
    \  end\n  end\n  return largest_integer, smallest_integer, largest_integer_value,\
    \ smallest_integer_value\nend", "  lst.each do |i|\n    if i.is_a? Integer\n \
    \     return i if i < 0\n    end\n  end\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      return i if i > 0\n    end\n  end\n  return nil\nend", "  lst.each do |x|\n\
    \    if x.to_i < 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each\
    \ do |x|\n    if x.to_i > 0\n      b = x.to_i\n      break\n    end\n  end\n \
    \ return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [", "  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      return i if i < 0\n      return i if i\
    \ >= 0\n    end\n  end\n  return nil\nend", "  lst.each do |x|\n    if x.to_i\
    \ < 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n    if\
    \ x.to_i > 0\n      b = x.to_i\n      break\n    end\n  end\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [", "  lst.each do |x|\n    if\
    \ x.is_a? Integer\n      a = x\n      b = x\n    elsif x.is_a? String\n      a\
    \ = x.to_i\n      b = x.to_i\n    else\n      a = nil\n      b = nil\n    end\n\
    \  end\n  return [a, b]\nend", "  lst.each do |x|\n    if x.is_a? Integer\n  \
    \    puts \"#{x}\"\n    else\n      puts \"None\"\n    end\n  end\nend", "  lst.each\
    \ do |x|\n    if x.to_i < 0\n      a = x.to_i\n      break\n    end\n  end\n \
    \ lst.each do |x|\n    if x.to_i < 0\n      b = x.to_i\n      break\n    end\n\
    \  end\n  return a if a.nil?\n  return b if b.nil?\n  return a if a.to_i > b.to_i\n\
    \  return b if b.to_i > a.to_i\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if x < 0\n        largest_integer\
    \ = x\n      elsif x > 0\n        smallest_integer = x\n      end\n    end\n \
    \ end\n  return largest_integer, smallest_integer\nend", "  if lst.empty?\n  \
    \  return nil\n  elsif lst.size == 1\n    return lst.first\n  else\n    smallest\
    \ = lst.min\n    largest = lst.max\n    if smallest < 0\n      smallest\n    elsif\
    \ largest > 0\n      largest\n    else\n      nil\n    end\n  end\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n   \
    \   largest_integer = x\n    elsif x.positive?\n      smallest_integer = x\n \
    \   end\n  end\n  return largest_integer, smallest_integer\nend\nlargest_smallest_integers([-1,\
    \ -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105,\
    \ -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118,\
    \ -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131,\
    \ -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144,\
    \ -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157,\
    \ -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170,\
    \ -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183,\
    \ -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196,\
    \ -197, -198, -199, -200, -210, -220, -230, -240, -250, -260, -270, -280, -290,\
    \ -300, -311, -321, -331, -341, -351, -361, -371, -381, -391, -401, -411, -421,\
    \ -431, -441, -451, -461, -471, -481, -491, -501, -511, -521, -531, -541, -551,\
    \ -561, -571, -581, -591, -601, -611])", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil?\
    \ || i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return [largest_integer, smallest_integer]\nend\nlargest_smallest_integers([1,\
    \ -2, 3, -4, 5])\nlargest_smallest_integers([1, 2, 3, 4, 5])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nlargest_smallest_integers([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\nlargest_smallest_integers([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23])\nlargest_smallest_integers([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25])\nlargest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n   \
    \   largest_integer = x\n    elsif x.positive?\n      smallest_integer = x\n \
    \   end\n  end\n  return largest_integer, smallest_integer\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.negative?\n    \
    \  smallest_integer = x\n    else\n      largest_integer = x\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ x < 0\n        largest_integer = x\n      elsif x > 0\n        smallest_integer\
    \ = x\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end\nlargest_smallest_integers([-1, -10, -20, -30, -40, -50, -60, -70, -80, -90,\
    \ -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112,\
    \ -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125,\
    \ -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138,\
    \ -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151,\
    \ -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164,\
    \ -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177,\
    \ -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190,\
    \ -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -210, -220, -230,\
    \ -240, -250, -260, -270, -280, -290, -300, -311, -321, -331, -341, -351, -361,\
    \ -371, -381, -391, -401, -411, -421, -431, -441, -451, -461, -471, -481, -491,\
    \ -501, -511, -521, -531, -541, -551, -561, -571, -581, -591, -601, -611])", " \
    \ largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n\
    \      largest_integer = x\n    elsif x.positive?\n      smallest_integer = x\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  if lst.empty?\n\
    \    return nil\n  else\n    smallest = lst.min\n    largest = lst.max\n    if\
    \ smallest < 0\n      smallest\n    elsif largest > 0\n      largest\n    else\n\
    \      nil\n    end\n  end\nend", "  if lst.empty?\n    return nil\n  elsif lst.all?\
    \ { |x| x.is_a?(Integer) }\n    return lst.max\n  elsif lst.all? { |x| x.is_a?(Fixnum)\
    \ }\n    return lst.min\n  else\n    smallest_integer = lst.min\n    largest_integer\
    \ = lst.max\n    smallest_integer_is_negative = smallest_integer < 0\n    largest_integer_is_positive\
    \ = largest_integer > 0\n    if smallest_integer_is_negative && largest_integer_is_positive\n\
    \      return smallest_integer\n    elsif smallest_integer_is_negative && largest_integer_is_negative\n\
    \      return largest_integer\n    elsif smallest_integer_is_positive && largest_integer_is_positive\n\
    \      return smallest_integer\n    elsif smallest_integer_is_positive && largest_integer_is_negative\n\
    \      return largest_integer\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>", "  lst.each do |i|\n    if i.is_a? Integer\n      return\
    \ i if i < 0\n    end\n  end\n  lst.each do |i|\n    if i.is_a? Integer\n    \
    \  return i if i > 0\n    end\n  end\n  nil\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x < 0\n      smallest_integer\
    \ = x\n    else\n      largest_integer = x\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    if i < 0\n      break\n    elsif i > 0\n      break\n    else\n      a =\
    \ x\n      break\n    end\n  end\n  a\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    if i < 0\n      a = x\n      b = nil\n    elsif i > 0 and x <\
    \ 0\n      a = x\n      b = i\n    elsif i > 0 and x >= 0\n      a = i\n     \
    \ b = x\n    end\n  end\n  return [a, b]\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer < 0\n      largest_integer =\
    \ integer\n    elsif integer > 0\n      smallest_integer = integer\n    end\n\
    \  end\n  return largest_integer, smallest_integer\nend", "  largest_integer =\
    \ nil\n  smallest_integer = nil\n  largest_negative_integer = nil\n  smallest_positive_integer\
    \ = nil\n  \n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n\
    \        largest_negative_integer = i\n      else\n        smallest_positive_integer\
    \ = i\n      end\n    elsif i.is_a? Float\n      if i.negative?\n        largest_negative_integer\
    \ = i\n      else\n        smallest_positive_integer = i\n      end\n    else\n\
    \      largest_integer = i\n      smallest_integer = i\n    end\n  end\n  \n \
    \ return largest_integer, smallest_integer, largest_negative_integer, smallest_positive_integer\n\
    end", "  lst.each do |i|\n    if i < 0\n      a = i\n      break\n    elsif i\
    \ > 0\n      b = i\n      break\n    end\n  end\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if i.negative?\n        largest_integer = i\n \
    \     else\n        smallest_integer = i\n      end\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer < 0\n      largest_integer =\
    \ integer\n    elsif integer > 0\n      smallest_integer = integer\n    end\n\
    \  end\n  return largest_integer, smallest_integer\nend", "  largest_integer =\
    \ nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n \
    \     if i.negative?\n        largest_integer = i\n      else\n        smallest_integer\
    \ = i\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if i.negative?\n        largest_integer = i\n \
    \     else\n        smallest_integer = i\n      end\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if x < 0\n        largest_integer\
    \ = x\n      elsif x > 0\n        smallest_integer = x\n      end\n    end\n \
    \ end\n  return largest_integer, smallest_integer\nend", "  largest_integer =\
    \ nil\n  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  lst.each do |value|\n    if value < 0\n      largest_integer = value\n\
    \      largest_integer_value = value\n    elsif value > 0\n      smallest_integer\
    \ = value\n      smallest_integer_value = value\n    end\n  end\n  return largest_integer,\
    \ smallest_integer, largest_integer_value, smallest_integer_value\nend\nlargest_integer,\
    \ smallest_integer, largest_integer_value, smallest_integer_value = largest_smallest_integers([-1,\
    \ -2, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nputs \"Largest negative\
    \ integer: #{largest_integer}\"\nputs \"Smallest positive integer: #{smallest_integer}\"\
    \nputs \"Largest negative integer value: #{largest_integer_value}\"\nputs \"Smallest\
    \ positive integer value: #{smallest_integer_value}\"\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if you have negative and positive numbers in\
    \ the same array. Try it with `[-2, -1, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]`.\n<|/ c |>\n<| c |>\nI added a solution that works with negative\
    \ and positive numbers in the same array.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with negative and positive numbers in the same array.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |integer|\n    if integer > largest_integer\n      largest_integer\
    \ = integer\n    elsif integer < smallest_integer\n      smallest_integer = integer\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend\nlargest_smallest_integers([1,\
    \ -2, 3, -4, 5])", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |integer|\n    if integer < 0\n      largest_integer = integer\n    elsif\
    \ integer > 0\n      smallest_integer = integer\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  largest_negative_integer = nil\n  smallest_positive_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_negative_integer\
    \ = i\n      else\n        smallest_positive_integer = i\n      end\n    elsif\
    \ i.is_a? Float\n      if i.negative?\n        largest_negative_integer = i\n\
    \      else\n        smallest_positive_integer = i\n      end\n    else\n    \
    \  largest_integer = i\n      smallest_integer = i\n    end\n  end\n  return largest_negative_integer,\
    \ smallest_positive_integer, largest_integer, smallest_integer\nend\nlargest_negative_integer,\
    \ smallest_positive_integer, largest_integer, smallest_integer = largest_smallest_integers([-1,\
    \ -10, -100, -1000, -10000, 10000, 1000, 100000, 1000000, 10000000])\nputs \"\
    largest_negative_integer: #{largest_negative_integer}\"\nputs \"smallest_positive_integer:\
    \ #{smallest_positive_integer}\"\nputs \"largest_integer: #{largest_integer}\"\
    \nputs \"smallest_integer: #{smallest_integer}\"\nlargest_negative_integer, smallest_positive_integer,\
    \ largest_integer, smallest_integer = largest_smallest_integers([-1, -10, -100,\
    \ -1000, -10000, 10000, 1000, 100000, 1000000, 10000000])\nputs \"largest_negative_integer:\
    \ #{largest_negative_integer}\"\nputs \"smallest_positive_integer: #{smallest_positive_integer}\"\
    \nputs \"largest_integer: #{largest_integer}\"\nputs \"smallest_integer: #{smallest_integer}\"\
    \nlargest_negative_integer, smallest_positive_integer, largest_integer, smallest_integer\
    \ = largest_smallest_integers([-1, -10, -100, -1000, -10000, 10000, 1000, 100000,\
    \ 1000000, 10000000])\nputs \"largest_negative_integer: #{largest_negative_integer}\"\
    \nputs \"smallest_positive_integer: #{smallest_positive_integer}\"\nputs \"largest_integer:\
    \ #{largest_integer}\"\nputs \"smallest_integer: #{smallest_integer}\"\nlargest_negative_integer,\
    \ smallest_positive_integer, largest_integer, smallest_integer = largest_smallest_integers([-1,\
    \ -10, -100, -1000, -10000, 10000, 1000, 100000, 1000000, 10000000])\nputs \"\
    largest_negative_integer: #{largest_negative_integer}\"\nputs \"smallest_positive_integer:\
    \ #{smallest_positive_integer}\"", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer < 0\n      largest_integer =\
    \ integer\n    elsif integer > 0\n      smallest_integer = integer\n    end\n\
    \  end\n  return largest_integer, smallest_integer\nend", "  largest_integer =\
    \ nil\n  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.each do |x|\n    if x.to_i < 0\n      a = x.to_i\n    else\n    \
    \  b = x.to_i\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if i < smallest || smallest == nil\n        smallest = i\n  \
    \    end\n      if i > largest || largest == nil\n        largest = i\n      end\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n      if largest_integer.nil?\
    \ || largest_integer > x\n        largest_integer = x\n      end\n    elsif x.positive?\n\
    \      if smallest_integer.nil? || smallest_integer < x\n        smallest_integer\
    \ = x\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i < 0\n  \
    \    return i if i > 0\n    end\n  end\n  nil\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ x < 0\n        smallest_integer = x\n      elsif x > 0\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  lst.sort!\n  lst.each_with_index do |number, index|\n    if number <\
    \ 0\n      a = index\n      b = index\n    elsif number > 0\n      a = index\n\
    \      b = index\n    else\n      a = None\n      b = None\n    end\n  end\n \
    \ return [a, b]\nend\nlargest_smallest_integers([-1, -10, -20, -5, -100, -200])",
  "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i < 0\n      return\
    \ i if i > 0\n    end\n  end\n  nil\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.negative?\n      largest_integer = x\n  \
    \  elsif x.positive?\n      smallest_integer = x\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif i > 0\n\
    \      smallest_integer = i\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end\nlargest_smallest_integers([-1, -10, -20, -30, -40, -50, -60, -70, -80, -90])",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if x < 0\n        largest_integer = x\n      else\n\
    \        smallest_integer = x\n      end\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if x < 0\n        largest_integer = x\n      elsif\
    \ x > 0\n        smallest_integer = x\n      end\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.each do |i|\n    if i.is_a? Integer\n      return\
    \ i if i < 0\n      return i if i >= 0\n    end\n  end\n  return nil\nend", " \
    \ lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if i < 0\n      a = x\n\
    \    else\n      b = x\n    end\n  end\n  return a, b\nend\nlargest_smallest_integers([1,\
    \ -5, 2, -4, 3])", "  if lst.empty?\n    return nil\n  elsif lst.all? { |x| x.is_a?(Integer)\
    \ }\n    return lst.max\n  else\n    smallest = lst.min\n    negative = lst.find_all\
    \ { |x| x < smallest }\n    positive = lst.find_all { |x| x > smallest }\n   \
    \ largest_negative = largest_smallest_integers(negative)\n    largest_positive\
    \ = largest_smallest_integers(positive)\n    return largest_negative if largest_negative.nil?\n\
    \    return largest_positive if largest_positive.nil?\n    return smallest\n \
    \ end\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do\
    \ |i|\n    if i < 0\n      largest_integer = i\n    elsif i > 0\n      smallest_integer\
    \ = i\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |integer|\n    if integer < 0\n\
    \      largest_integer = integer\n    elsif integer > 0\n      smallest_integer\
    \ = integer\n    end\n  end\n  return largest_integer, smallest_integer\nend\n\
    largest_integer, smallest_integer = largest_smallest_integers([1, -2, 3, -4, 5])\n\
    puts \"Largest negative integer is #{largest_integer}\"\nputs \"Smallest positive\
    \ integer is #{smallest_integer}\"\nlargest_integer, smallest_integer = largest_smallest_integers([1,\
    \ -2, 3, -4, 5])\nputs \"Largest negative integer is #{largest_integer}\"\nputs\
    \ \"Smallest positive integer is #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, -2, 3, -4, 5])\nputs \"Largest negative integer\
    \ is #{largest_integer}\"\nputs \"Smallest positive integer is #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, -2, 3, -4,\
    \ 5])\nputs \"Largest negative integer is #{largest_integer}\"\nputs \"Smallest\
    \ positive integer is #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, -2, 3, -4, 5])\nputs \"Largest negative integer\
    \ is #{largest_integer}\"\nputs \"Smallest positive integer is #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, -2, 3, -4,\
    \ 5])\nputs \"Largest negative integer is #{largest_integer}\"\nputs \"Smallest\
    \ positive integer is #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, -2, 3, -4, 5])\nputs \"Largest negative integer\
    \ is #{largest_integer}\"\nputs \"Smallest positive integer is #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, -2, 3, -4,\
    \ 5])\nputs \"Largest negative integer is #{largest_integer}\"\nputs \"Smallest\
    \ positive integer is #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, -2, 3, -4, 5])\nputs \"Largest negative integer\
    \ is #{largest_integer}\"\nputs \"Smallest positive integer is #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, -2, 3, -4, ",
  "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i < 0\n      return\
    \ i if i >= 0\n    end\n  end\n  return nil\nend", "  lst.each do |i|\n    if\
    \ i < 0\n      a = i\n    else\n      b = i\n    end\n  end\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil", "  largest_integer =\
    \ nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer\
    \ = i\n    elsif i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? ||\
    \ i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return [largest_integer, smallest_integer]\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n      largest_integer\
    \ = x\n    elsif x.positive?\n      smallest_integer = x\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  lst.sort.reverse!\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      a = i\n      break\n    elsif e > 0\n      b\
    \ = i\n      break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil? || a > b\n  return [a, b] if a.nil? || b.nil? ||\
    \ a < b\nend", "  lst.sort\n  lst.each_with_index do |x, i|\n    if x < 0\n  \
    \    a = i\n      break\n    end\n  end\n  lst.each_with_index do |x, i|\n   \
    \ if x > 0\n      b = i\n      break\n    end\n  end\n  if a && b\n    [a, b]\n\
    \  elsif a\n    [a, nil]\n  elsif b\n    [nil, b]\n  else\n    [nil, nil]\n  end\n\
    end", "  if lst.empty?\n    return nil\n  else\n    smallest = lst.min\n    largest\
    \ = lst.max\n    if smallest < 0\n      return smallest, nil\n    elsif largest\
    \ > 0\n      return nil, largest\n    else\n      return nil, smallest\n    end\n\
    \  end\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do\
    \ |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer =\
    \ i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend\nlargest_integer, smallest_integer =\
    \ largest_smallest_integers([-3, -5, -7, -9, -10, -12, -15, -16, -17, -21])\n\
    puts \"Largest integer: #{largest_integer}\"\nputs \"Smallest integer: #{smallest_integer}\"",
  "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i < 0\n      return\
    \ i if i > 0\n    end\n  end\n  nil\nend", "  if lst.empty?\n    [None, None]\n\
    \  else\n    smallest_negative = lst.find { |x| x < 0 }\n    smallest_positive\
    \ = lst.find { |x| x > 0 }\n    [smallest_negative, smallest_positive]\n  end\n\
    end", "  lst.each do |x|\n    if x.to_i < 0\n      a = x.to_i\n      break\n \
    \   end\n  end\n  lst.each do |x|\n    if x.to_i < 0\n      b = x.to_i\n     \
    \ break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.to_i > b.to_i\n  return [b, a] if b.to_i > a.to_i\n  return [a, b] if a.to_i\
    \ == b.to_i\n  return [a, b] if a.to_i > b.to_i\n  return [b, a] if b.to_i > a.to_i\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ [largest_integer, smallest_integer]\nend", "  lst.each do |x|\n    if x.to_i\
    \ < 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n    if\
    \ x.to_i > 0\n      b = x.to_i\n      break\n    end\n  end\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x < 0\n   \
    \   a = i\n      break\n    end\n  end\n  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x > 0\n      b = i\n      break\n    end\n  end\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if e < 0\n   \
    \   a = i\n      break\n    end\n  end\n  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e > 0\n      b = i\n      break\n    end\n  end\n  if a &&\
    \ b\n    [a, b]\n  elsif a\n    [a, nil]\n  elsif b\n    [nil, b]\n  else\n  \
    \  [nil, nil]\n  end\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |integer|\n    if integer > largest_integer\n      largest_integer\
    \ = integer\n    elsif integer < smallest_integer\n      smallest_integer = integer\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend\nlargest_smallest_integers([1,\
    \ 2, 3, -4, 5])", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |integer|\n    if integer < 0\n      largest_integer = integer\n    elsif\
    \ integer > 0\n      smallest_integer = integer\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend\nlargest_smallest_integers([-1, -5, -10, -15, -20, -25])",
  "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n\
    \      if largest_integer.nil?\n        largest_integer = x\n      else\n    \
    \    largest_integer = largest_integer.max(x)\n      end\n    elsif x.positive?\n\
    \      if smallest_integer.nil?\n        smallest_integer = x\n      else\n  \
    \      smallest_integer = smallest_integer.min(x)\n      end\n    end\n  end\n\
    \  return largest_integer, smallest_integer\nend", "  lst.each do |x|\n    if\
    \ x.to_i < 0\n      a = x.to_i\n      b = nil\n    elsif x.to_i > 0\n      a =\
    \ nil\n      b = x.to_i\n    else\n      a = nil\n      b = nil\n    end\n  end\n\
    \  return [a, b]\nend", "  lst.each do |i|\n    if i.is_a? Integer\n      return\
    \ i if i < 0\n      return i if i >= 0\n    end\n  end\n  nil\nend", "  lst.each\
    \ do |x|\n    if x.to_i < 0\n      a = x.to_i\n      break\n    end\n  end\n \
    \ lst.each do |x|\n    if x.to_i > 0\n      b = x.to_i\n      break\n    end\n\
    \  end\n  return a, b\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |integer|\n    if integer > largest_integer\n      largest_integer\
    \ = integer\n    elsif integer < smallest_integer\n      smallest_integer = integer\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |integer|\n\
    \    if integer > largest_integer\n      largest_integer = integer\n    elsif\
    \ integer < smallest_integer\n      smallest_integer = integer\n    end\n  end\n\
    \  return largest_integer, smallest_integer\nend", "  lst.each do |x|\n    if\
    \ x.to_i < 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n\
    \    if x.to_i < 0\n      b = x.to_i\n      break\n    end\n  end\n  return a,\
    \ b if a && b\n  return nil\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if x < 0\n        largest_integer\
    \ = x\n      else\n        smallest_integer = x\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n      if largest_integer.nil?\n\
    \        largest_integer = x\n      else\n        largest_integer = largest_integer.max(x)\n\
    \      end\n    elsif x.positive?\n      if smallest_integer.nil?\n        smallest_integer\
    \ = x\n      else\n        smallest_integer = smallest_integer.min(x)\n      end\n\
    \    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  largest_integer_value = nil\n  smallest_integer_value\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer = i\n      else\n        smallest_integer = i\n      end\n\
    \    elsif i.is_a? Float\n      if i.negative?\n        largest_integer_value\
    \ = i\n      else\n        smallest_integer_value = i\n      end\n    end\n  end\n\
    \  return largest_integer, smallest_integer, largest_integer_value, smallest_integer_value\n\
    end\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_integer_value = largest_smallest_integers([1,\
    \ 2, -3, 4, 5])\nlargest_integer, smallest_integer, largest_integer_value, smallest_integer_value\
    \ = largest_smallest_integers([1, 2, -3, 4, 5])\nlargest_integer, smallest_integer,\
    \ largest_integer_value, smallest_", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  [largest_integer, smallest_integer]\n\
    end", "  if lst.empty?\n    return nil\n  elsif lst.size == 1\n    return lst.first\n\
    \  else\n    smallest = lst.min_by(&:abs)\n    largest = lst.max_by(&:abs)\n \
    \   return largest if largest.nil? || smallest.nil?\n    return smallest, largest\n\
    \  end\nend", "  lst.each do |x|\n    if x.to_i < 0\n      a = x.to_i\n      break\n\
    \    end\n  end\n  lst.each do |x|\n    if x.to_i > 0\n      b = x.to_i\n    \
    \  break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if i.negative?\n        largest_integer = i\n \
    \     else\n        smallest_integer = i\n      end\n    end\n  end\n  return\
    \ largest_integer, smallest_integer\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif\
    \ i > 0\n      smallest_integer = i\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n\
    \    if e < 0\n      a = i\n      break\n    end\n  end\n  lst.sort.reverse\n\
    \  lst.each_with_index do |e, i|\n    if e > 0\n      b = i\n      break\n   \
    \ end\n  end\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil? || a > b\n  return [a, b] if a.nil? || b.nil? || a < b\n  return [a,\
    \ b] if a.nil? || b.nil? || a == b\nend", "  lst.each do |x|\n    if x.to_i <\
    \ 0\n      a = x.to_i\n      break\n    end\n  end\n  lst.each do |x|\n    if\
    \ x.to_i > 0\n      b = x.to_i\n      break\n    end\n  end\n  return a if a.nil?\n\
    \  return b if b.nil?\n  return a > b ? a : b\nend", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  largest_integer_found\
    \ = nil\n  smallest_integer_found = nil\n  lst.each do |item|\n    if item.is_a?\
    \ Integer\n      if largest_integer == nil\n        largest_integer = item\n \
    \       largest_integer_found = item\n      elsif item > largest_integer\n   \
    \     largest_integer = item\n        largest_integer_found = item\n      end\n\
    \    end\n    if item.is_a? Integer\n      if smallest_integer == nil\n      \
    \  smallest_integer = item\n        smallest_integer_found = item\n      elsif\
    \ item < smallest_integer\n        smallest_integer = item\n        smallest_integer_found\
    \ = item\n      end\n    end\n  end\n  return largest_integer_found, smallest_integer_found\n\
    end\nlargest_integer, smallest_integer = largest_smallest_integers([1, -5, 3,\
    \ -4, -7, 2])\nlargest_integer, smallest_integer", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ i.negative?\n        largest_integer = i\n      else\n        smallest_integer\
    \ = i\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  lst.each do |x|\n    if x.to_i < 0\n      a = x.to_i\n      break\n \
    \   end\n  end\n  lst.each do |x|\n    if x.to_i > 0\n      b = x.to_i\n     \
    \ break\n    end\n  end\n  return a if a.nil?\n  return b if b.nil?\n  return\
    \ a > b ? a : b\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |x|\n    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n\
    \      smallest_integer = x\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end\nlargest_integer, smallest_integer = largest_smallest_integers([-3, -5, -7,\
    \ -9, -10, -12, -15, -16, -17, -19, -20, -21, -22, -24, -25, -26, -27, -29, -30,\
    \ -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45])\nputs\
    \ \"Largest negative integer: #{largest_integer}\"\nputs \"Smallest positive integer:\
    \ #{smallest_integer}\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>",
  "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if e < 0\n      a = i\n\
    \      break\n    elsif e > 0\n      b = i\n      break\n    end\n  end\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ",
  "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x < 0\n      a = i\n\
    \      break\n    end\n  end\n  lst.sort.reverse\n  lst.each_with_index do |x,\
    \ i|\n    if x > 0\n      b = i\n      break\n    end\n  end\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return\
    \ [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a,\
    \ b] if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b]\
    \ if a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if\
    \ a.nil? || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil?\
    \ || b.nil?\n  return [a, b] if a.nil? || b.nil?\n  return [a, b] if a.nil? ||\
    \ b.nil?\n", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do\
    \ |x|\n    if x.is_a? Integer\n      if x < 0\n        largest_integer = x\n \
    \     elsif x > 0\n        smallest_integer = x\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  largest_integer_found = nil\n  smallest_integer_found\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     largest_integer = i\n        largest_integer_found = i\n      elsif i.positive?\n\
    \        smallest_integer = i\n        smallest_integer_found = i\n      end\n\
    \    end\n  end\n  return largest_integer, smallest_integer, largest_integer_found,\
    \ smallest_integer_found\nend", "  lst.each do |x|\n    if x.to_i < 0\n      a\
    \ = x.to_i\n    else\n      b = x.to_i\n    end\n  end\n  return a, b\nend", " \
    \ largest_integer = nil\n  smallest_integer = nil\n  lst.each do |integer|\n \
    \   if integer < 0\n      largest_integer = integer\n    elsif integer > 0\n \
    \     smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end\nlargest_integer, smallest_integer = largest_smallest_integers([-1, -10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90])\nputs \"Largest negative integer: #{largest_integer}\"\
    \nputs \"Smallest positive integer: #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nputs \"Largest\
    \ negative integer: #{largest_integer}\"\nputs \"Smallest positive integer: #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])\nputs \"Largest negative integer: #{largest_integer}\"\n\
    puts \"Smallest positive integer: #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nputs \"\
    Largest negative integer: #{largest_integer}\"\nputs \"Smallest positive integer:\
    \ #{smallest_integer}\"\nlargest_integer, smallest_integer = largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nputs \"Largest negative integer: #{largest_integer}\"\
    \nputs \"Smallest positive integer: #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\
    puts \"Largest negative integer: #{largest_integer}\"\nputs \"Smallest positive\
    \ integer: #{smallest_integer}\"\nlargest_integer, smallest_integer = largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nputs \"Largest negative integer:\
    \ #{largest_integer}\"\nputs \"Smallest positive integer: #{smallest_integer}\"\
    \nlargest_integer, smallest_integer = largest_smallest_integers([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nputs \"Largest negative integer: #{largest_integer}\"\
    \nputs \"Smallest positive integer: #{smallest_integer}\"\nlargest_integer, smallest_integer\
    \ = largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17])\nputs \"Largest negative ", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n   \
    \     smallest_integer = i\n      else\n        largest_integer = i\n      end\n\
    \    end\n  end\n  return smallest_integer, largest_integer\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  largest_integer_found = false\n  smallest_integer_found\
    \ = false\n  lst.each do |i|\n    if i.is_a? Integer\n      if largest_integer_found\
    \ == false\n        largest_integer = i\n        largest_integer_found = true\n\
    \      elsif i.to_i < largest_integer.to_i\n        largest_integer = i\n    \
    \  end\n    elsif i.is_a? String\n      if smallest_integer_found == false\n \
    \       smallest_integer = i\n        smallest_integer_found = true\n      elsif\
    \ i.to_i > smallest_integer.to_i\n        smallest_integer = i\n      end\n  \
    \  end\n  end\n  return largest_integer, smallest_integer\nend", "  lst.each do\
    \ |x|\n    if x.to_i < 0\n      a = x.to_i\n      b = nil\n    else\n      a =\
    \ nil\n      b = x.to_i\n    end\n  end\n  return a, b\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |integer|\n    if integer > largest_integer\n\
    \      largest_integer = integer\n    elsif integer < smallest_integer\n     \
    \ smallest_integer = integer\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.to_i < 0\n      largest_integer = x\n    elsif x.to_i > 0\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  if\
    \ lst.empty?\n    return nil\n  else\n    smallest = lst.min\n    largest = lst.max\n\
    \    if smallest < 0\n      smallest\n    elsif largest > 0\n      largest\n \
    \   else\n      nil\n    end\n  end\nend", "  largest_integer = nil\n  smallest_integer\
    \ = nil\n  lst.each do |x|\n    if x.negative?\n      largest_integer = x\n  \
    \  elsif x.positive?\n      smallest_integer = x\n    end\n  end\n  return largest_integer,\
    \ smallest_integer\nend\nlargest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0])\
    \ # => [7, -4]\nlargest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0], nil) #\
    \ => [1, -5, 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1, -5, 3, -7, 2,\
    \ -9, -4, 0], nil, nil) # => [1, -5, 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1,\
    \ -5, 3, -7, 2, -9, -4, 0], nil, nil, nil) # => [1, -5, 3, -7, 2, -9, -4, 0]\n\
    largest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0], nil, nil, nil, nil) #\
    \ => [1, -5, 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1, -5, 3, -7, 2,\
    \ -9, -4, 0], nil, nil, nil, nil, nil) # => [1, -5, 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1,\
    \ -5, 3, -7, 2, -9, -4, 0], nil, nil, nil, nil, nil, nil) # => [1, -5, 3, -7,\
    \ 2, -9, -4, 0]\nlargest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0], nil,\
    \ nil, nil, nil, nil, nil, nil) # => [1, -5, 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1,\
    \ -5, 3, -7, 2, -9, -4, 0], nil, nil, nil, nil, nil, nil, nil, nil) # => [1, -5,\
    \ 3, -7, 2, -9, -4, 0]\nlargest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0],\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil) # => [1, -5, 3, -7, 2, -9, -4,\
    \ 0]\nlargest_smallest_integers([1, -5, 3, -7, 2, -9, -4, 0], nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, n", "  lst.each do |x|\n    if x.to_i < 0\n      a\
    \ = x.to_i\n    else\n      b = x.to_i\n    end\n  end\n  return a, b\nend", " \
    \ lst.each do |x|\n    if x.is_a?(Integer)\n      break if x >= 0\n      break\
    \ if x <= 0\n    end\n  end\n  return [x, x] if x.nil?\n  [x, x] if x >= 0\n \
    \ [x, x] if x <= 0\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |i|\n    if i < 0\n      largest_integer = i\n    elsif i > 0\n\
    \      smallest_integer = i\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      largest_integer = x\n    elsif x.positive?\n      smallest_integer\
    \ = x\n    end\n  end\n  return largest_integer, smallest_integer\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |x|\n    if x.negative?\n   \
    \   largest_integer = x\n    elsif x.positive?\n      smallest_integer = x\n \
    \   end\n  end\n  return largest_integer, smallest_integer\nend", "  if lst.empty?\n\
    \    return nil\n  elsif lst.all? { |x| x.is_a?(Integer) }\n    return lst.sort\n\
    \  elsif lst.all? { |x| x.is_a?(Numeric) }\n    return lst.sort { |a, b| b.to_f\
    \ <=> a.to_f }\n  else\n    return nil\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
