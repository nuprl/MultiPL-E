name: HumanEval_11_string_xor
language: rb
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\ndef string_xor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n\
  \    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"\
  111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n\
  \    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n"
completions: ["  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte do |char|\n    result << char ^ b.byte(char)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte do |x|\n    result << x ^\
    \ b.byte(x.to_i)\n  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte do\
    \ |x|\n    result << x ^ b.byte(x.to_i)\n  end\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\
    \"\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n  end\n  result\n\
    end", "  result = ''\n  a.each_byte do |x|\n    result << x ^ b.byte(x % 256)\n\
    \  end\n  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte do |c|\n    result << c ^\
    \ b.bytes[c]\n  end\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result\
    \ << b.chr if b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = ''\n  a.each_byte { |b| result << b.chr if b == '1' }\n  b.each_byte\
    \ { |a| result << a.chr if a == '1' }\n  result\nend", "  result = ''\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  xor = a.unpack('C*').map {\
    \ |e| e ^ b.unpack('C*').map { |e| e }.pack('C*') }\n  xor = xor.pack('C*')\n\
    \  xor = xor.gsub(/\\x00/, '')\n  xor = xor.gsub(/\\x01/, '1')\n  xor = xor.gsub(/\\\
    x02/, '2')\n  xor = xor.gsub(/\\x03/, '3')\n  xor = xor.gsub(/\\x04/, '4')\n \
    \ xor = xor.gsub(/\\x05/, '5')\n  xor = xor.gsub(/\\x06/, '6')\n  xor = xor.gsub(/\\\
    x07/, '7')\n  xor = xor.gsub(/\\x08/, '8')\n  xor = xor.gsub(/\\x09/, '9')\n \
    \ xor = xor.gsub(/\\x0a/, 'a')\n  xor = xor.gsub(/\\x0b/, 'b')\n  xor = xor.gsub(/\\\
    x0c/, 'c')\n  xor = xor.gsub(/\\x0d/, 'd')\n  xor = xor.gsub(/\\x0e/, 'e')\n \
    \ xor = xor.gsub(/\\x0f/, 'f')\n  xor = xor.gsub(/\\x10/, 'g')\n  xor = xor.gsub(/\\\
    x11/h, 'h')\n  xor = xor.gsub(/\\x12/i, 'i')\n  xor = xor.gsub(/\\x13/j, 'j')\n\
    \  xor = xor.gsub(/\\x14/k, 'k')\n  xor = xor.gsub(/\\x15/l, 'l')\n  xor = xor.gsub(/\\\
    x16/m, 'm')\n  xor = xor.gsub(/\\x17/n, 'n')\n  xor = xor.gsub(/\\x18/o, 'o')\n\
    \  xor = xor.gsub(/\\x19/p, 'p')\n  xor = xor.gsub(/\\x1a/q, 'q')\n  xor = xor.gsub(/\\\
    x1b/r, 'r')\n  xor = xor.gsub(/\\x1c/s, 's')\n  xor = xor.gsub(/\\x1d/t, 't')\n\
    \  xor = xor.gsub(/\\x1e/u, 'u')\n  xor = xor.gsub(/\\x1f/v, 'v')\n  xor = xor.gsub(/\\\
    x20/w, 'w')\n  xor = xor.gsub(/\\x21/x, 'x')\n  xor = xor.gsub(/\\x22/y, 'y')\n\
    \  xor = xor.gsub(/\\x23/z, 'z')\n  xor = xor.g", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  a_bin = a.to_s(2)\n  b_bin\
    \ = b.to_s(2)\n  result = a_bin ^ b_bin\n  result.to_s(2)\nend", "  result = \"\
    \"\n  a.each_byte { |b| result << b.chr if b == 0 }\n  b.each_byte { |a| result\
    \ << a.chr if a == 0 }\n  result\nend", "  result = ''\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  result = ''\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  result = ''\n  a.each_byte do |char|\n\
    \    result << char if char ^ b.byte(char)\n  end\n  result\nend", "  result =\
    \ \"\"\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n  end\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end\n</code>\n<|/ a tags=ruby,bit-manipulation |>\n<| c |>\nI like this solution,\
    \ but I wonder if it can be made more efficient by avoiding string concatenation.\
    \ Perhaps something like `a.each_byte { |c| result << c ^ b.shift }` would work\
    \ better?\n<|/ c |>\n<| c |>\nYes, that would work better. I'll update my answer.\n\
    <|/ c |>\n<| c |>\nThanks for the suggestion! I added an implementation that avoids\
    \ string concatenation.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using bit\
    \ shifting:\n<code>", "  result = \"\"\n  a.each_byte do |x|\n    result << x\
    \ ^ b.byte(x.to_i)\n  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte do\
    \ |x|\n    result << x ^ b.byte(x.to_i)\n  end\n  result\nend", "  result = \"\
    \"\n  a.each_byte { |b| result << b.chr if b == 0 }\n  b.each_byte { |a| result\
    \ << a.chr if a == 0 }\n  result\nend", "  result = ''\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  result = ''\n  a.each_byte { |c| result\
    \ << c ^ b.shift }\n  result\nend", "  a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n\
    \  xor = a_bin ^ b_bin\n  xor_str = xor.to_s(2)\n  return xor_str\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  a_bin\
    \ = a.to_s(2)\n  b_bin = b.to_s(2)\n  xor = a_bin ^ b_bin\n  xor_str = xor.to_s(2)\n\
    \  return xor_str\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if\
    \ b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n  xor_bin = xor(a_bin, b_bin)\n  return\
    \ xor_bin.to_s(2)\nend", "  result = \"\"\n  a.each_byte do |c|\n    result <<\
    \ c ^ b.bytes[c.to_i].to_s\n  end\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ do |x|\n    result << x ^ b.byte(x % 256)\n  end\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte do |char|\n    result << char if char != b.byte(char)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr\
    \ if b }\n  b.each_byte { |a| result << a.chr if a }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte do |char|\n    result << char ^ b.byte(char)\n  end\n\
    \  result\nend", "  result = \"\"\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  xor = a.unpack('C*').map { |x| x ^ b.unpack('C*').map\
    \ { |y| y } }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(2) }.pack('C*')\n\
    \  xor = xor.unpack('C*').map { |x| x.to_s(16) }.pack('C*')\n  xor = xor.unpack('C*').map\
    \ { |x| x.to_s(10) }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(8)\
    \ }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(6) }.pack('C*')\n  xor\
    \ = xor.unpack('C*').map { |x| x.to_s(4) }.pack('C*')\n  xor = xor.unpack('C*').map\
    \ { |x| x.to_s(2) }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(16)\
    \ }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(10) }.pack('C*')\n \
    \ xor = xor.unpack('C*').map { |x| x.to_s(8) }.pack('C*')\n  xor = xor.unpack('C*').map\
    \ { |x| x.to_s(6) }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(4) }.pack('C*')\n\
    \  xor = xor.unpack('C*').map { |x| x.to_s(2) }.pack('C*')\n  xor = xor.unpack('C*').map\
    \ { |x| x.to_s(16) }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(10)\
    \ }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(8) }.pack('C*')\n  xor\
    \ = xor.unpack('C*').map { |x| x.to_s(6) }.pack('C*')\n  xor = xor.unpack('C*').map\
    \ { |x| x.to_s(4) }.pack('C*')\n  xor = xor.unpack('C*').map { |x| x.to_s(2) }.pack('C*')\n\
    \  xor = xor.unpack('C*').map { |x| x.to_s(16", "  result = \"\"\n  a.each_byte\
    \ { |b| result << b.chr if b == 0 }\n  b.each_byte { |a| result << a.chr if a\
    \ == 0 }\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr\
    \ if b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = ''\n  a.each_byte do |c|\n    result << c ^ b.byte(c.ord)\n  end\n\
    \  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b ==\
    \ 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  a_bin\
    \ = a.to_s(2)\n  b_bin = b.to_s(2)\n  xor_bin = nil\n  \n  a_bin.length.times\
    \ do |i|\n    xor_bin << a_bin[i].chr if a_bin[i] != b_bin[i]\n  end\n  \n  return\
    \ xor_bin\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b ==\
    \ 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n  end\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b == 0 }\n  b.each_byte\
    \ { |a| result << a.chr if a == 0 }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ do |char|\n    result << char if char != b.byte(char)\n  end\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = \"\"\n  a.each_byte do |c|\n    result << c ^ b.byte(c.to_i)\n  end\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = \"\"\n  a.each_byte do |x|\n    b.each_byte do |y|\n\
    \      result << x ^ y\n    end\n  end\n  result\nend", "  result = ''\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ do |c|\n    result << c ^ b.bytes[c.to_i].to_i\n  end\n  result\nend", "  result\
    \ = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result\
    \ = \"\"\n  a.each_byte do |char|\n    result << char if char != b.byte(char)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr\
    \ if b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend",
  "  result = \"\"\n  a.each_byte do |char|\n    result << char ^ b.byte(char)\n \
    \ end\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if\
    \ b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n  result = a_bin ^ b_bin\n  result.to_s(2)\n\
    end", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b == 0 }\n  b.each_byte\
    \ { |a| result << a.chr if a == 0 }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = ''\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = ''\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ do |char|\n    result << char if char != b.byte(char)\n  end\n  result\nend",
  "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  xor = a.unpack('C*').map { |x| x ^ b.unpack('C*').first }\n  xor = xor.join('').unpack('C*').first\n\
    \  xor = xor.to_s(16)\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(2) }\n  xor = xor.gsub(/../) { |s| s.to_i(2) }\n  xor = xor.gsub(/../)\
    \ { |s| s.to_i(", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if\
    \ b == 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", " \
    \ result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I only can use Ruby 1.9.3\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses no external libraries.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately I cannot use any external libraries. I only can use Ruby\
    \ 1.9.3\n<|/ c |>\n<| c |>\nI added a solution that uses no external libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I only can use Ruby 1.9.3\n<|/ c |>\n<| a tags=ruby,string,xor,binary\
    \ |>\n<code>", "  result = \"\"\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n  xor = a_bin\
    \ ^ b_bin\n  xor_str = xor.to_s(2)\n  return xor_str\nend", "  result = \"\"\n\
    \  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = ''\n\
    \  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = ''\n\
    \  a.each_byte do |x|\n    b.each_byte do |y|\n      result << x ^ y\n    end\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = ''\n  a.each_byte do |x|\n    result << x ^ b.byte(x.to_i)\n\
    \  end\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift\
    \ }\n  result\nend", "  a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n  xor = a_bin\
    \ ^ b_bin\n  xor_str = xor.to_s(2)\n  return xor_str\nend", "  result = \"\"\n\
    \  a.each_byte { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\
    \n  a.each_byte do |char|\n    result << char if char != b.byte(char)\n  end\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = ''\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n\
    \  result\nend", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b ==\
    \ 0 }\n  b.each_byte { |a| result << a.chr if a == 0 }\n  result\nend", "  a_bin\
    \ = a.to_s(2).split('')\n  b_bin = b.to_s(2).split('')\n  xor = []\n  for i in\
    \ 0...(a_bin.size - 1)\n    xor.push(a_bin[i] ^ b_bin[i])\n  end\n  xor = xor.to_s(2).split('')\n\
    \  xor.reverse!\n  return xor.join\nend", "  result = ''\n  a.each_byte { |c|\
    \ result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte do\
    \ |x|\n    result << x ^ b.bytes[a.byte_index ^ x]\n  end\n  result\nend", " \
    \ result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\nend",
  "  a_bin = a.to_s(2)\n  b_bin = b.to_s(2)\n  result = a_bin ^ b_bin\n  result.to_s(2)\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |c| result << c ^ b.shift }\n  result\n\
    end", "  result = \"\"\n  a.each_byte { |b| result << b.chr if b == 0 }\n  b.each_byte\
    \ { |a| result << a.chr if a == 0 }\n  result\nend", "  result = ''\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |c| result << c ^ b.shift }\n  result\nend", "  result = \"\"\n  a.each_byte\
    \ { |b| result << b.chr if b == 0 }\n  b.each_byte { |a| result << a.chr if a\
    \ == 0 }\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
