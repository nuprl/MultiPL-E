language: rb
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  elsif\
    \ n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpll2mzxsw

    Started

    .

    Finished in 0.001556623 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    642.42 tests/s, 3212.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  else\n    if n == 0\n      0\n    elsif n == 1\n  \
    \    1\n    else\n      fib(n-1) + fib(n-2)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk0x6d74l

    Started

    .

    Finished in 0.001677821 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    596.01 tests/s, 2980.06 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpb6cwh9fj\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: n must be positive\n/tmp/tmpb6cwh9fj.rb:4:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:13:in `call'\n/tmp/tmpb6cwh9fj.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003339216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.47 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7s5g0a7s\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n - 1) + fib(n - 2)\n                      ^\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:13:in `call'\n/tmp/tmp7s5g0a7s.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.004122854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.55 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwmlyyt35

    Started

    .

    Finished in 0.0014584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    685.68 tests/s, 3428.41 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppuependt\nStarted\nUsage: fib n\nUsage: fib n\nE\n\
    ===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n - 1) + fib(n - 2)\n                      ^\n/tmp/tmppuependt.rb:6:in\
    \ `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in\
    \ `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in\
    \ `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in `fib'\n/tmp/tmppuependt.rb:6:in\
    \ `fib'\n/tmp/tmppuependt.rb:13:in `call'\n/tmp/tmppuependt.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.004327331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxfex0lcl\nStarted\nUsage: fib n\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpxfex0lcl.rb:8:in `+'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:15:in `call'\n/tmp/tmpxfex0lcl.rb:15:in\
    \ `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:  \
    \ def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55,\
    \ candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:\
    \     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.001906424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    524.54 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n - 1) +\
    \ fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmn1r3z2e

    Started

    Usage: fib n


    Finished in 0.000868739 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    if n == 0\n      0\n    elsif n == 1\n    \
    \  1\n    else\n      fib(n-1) + fib(n-2)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxm7et_3t

    Started

    .

    Finished in 0.000967237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1033.87 tests/s, 5169.36 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while a < n\n    puts a\n  \
    \  a, b = b, a+b\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjl99o00a\nStarted\n0\n1\n1\n2\n3\n5\n8\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpjl99o00a.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009616903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.98 tests/s, 103.98 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1)} #{fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu5675rug\nStarted\nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\n\
    Invalid input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \nInvalid\
    \ input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n\
    1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \n4.  \n6.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \n7.  \nInvalid input\nInvalid input\n1.  \nInvalid\
    \ input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid\
    \ input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n1.  \n\
    Invalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \nInvalid input\n\
    Invalid input\n1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n\
    3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \n4.  \n6.  \n8.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \n4.  \n6.  \nInvalid input\nInvalid input\n1.  \nInvalid\
    \ input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid\
    \ input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n1.  \n\
    Invalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \n7.  \n9.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \nInvalid input\nInvalid input\n1."
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit 1\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: 'Loaded suite /tmp/tmp_jmltpk_

    Started

    Usage: fib n


    Finished in 0.000536829 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb10yjxd2

    Started

    .

    Finished in 0.001584134 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    631.26 tests/s, 3156.30 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n} is #{fib(n - 1) + fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpggki99eb\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"#{n} is #{fib(n - 1) + fib(n - 2)}\"\n                     \
    \            ^\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n\
    /tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in\
    \ `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in\
    \ `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:6:in `fib'\n/tmp/tmpggki99eb.rb:13:in\
    \ `call'\n/tmp/tmpggki99eb.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002332317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    428.76 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpltrxjkph\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n                       \
    \        ^\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:13:in `call'\n/tmp/tmpltrxjkph.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003642755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.52 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    fib\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2jhhecg5\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: wrong number of arguments (given\
    \ 0, expected 1)\n/tmp/tmp2jhhecg5.rb:2:in `fib'\n/tmp/tmp2jhhecg5.rb:4:in `fib'\n\
    /tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:13:in `call'\n/tmp/tmp2jhhecg5.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002480836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    403.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwmlyyt35

    Started

    .

    Finished in 0.0014584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    685.68 tests/s, 3428.41 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    fibs = [0]\n    fibs << fibs.last + fibs.last\n\
    \    n.times { fibs << fibs.last + fibs.last }\n    fibs.last\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxh73fr5l\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpxh73fr5l.rb:16:in `test_fib'\n     13:\
    \ class TestHumanEval < Test::Unit::TestCase\n     14:   def test_fib\n     15:\
    \     candidate = method(:fib)\n  => 16:     assert_equal(55, candidate.call(10))\n\
    \     17:     assert_equal(1, candidate.call(1))\n     18:     assert_equal(21,\
    \ candidate.call(8))\n     19:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007804299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.13 tests/s, 128.13 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  elsif\
    \ n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpll2mzxsw

    Started

    .

    Finished in 0.001556623 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    642.42 tests/s, 3212.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  elsif\
    \ n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpll2mzxsw

    Started

    .

    Finished in 0.001556623 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    642.42 tests/s, 3212.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    fib(1)\n\
    \  elsif n == 1\n    fib(2)\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: 'Loaded suite /tmp/tmpp3ude7n9

    Started

    E

    ===============================================================================

    Error: test_fib(TestHumanEval): SystemStackError: stack level too deep

    /tmp/tmpp3ude7n9.rb:3:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fib''

    /tmp/tmpp3ude7n9.rb:6:in `fib''

    /tmp/tmpp3ude7n9.rb:8:in `fi'
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    fib(n) called with n <= 0\"\n  else\n    puts \"fib(n) = #{fib(n-1)} + #{fib(n-2)}\"\
    \n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpknintvsk\nStarted\nfib(n) called with n <= 0\nfib(n)\
    \ called with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) =  + \n\
    fib(n) called with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) = \
    \ + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n)\
    \ called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) called with n <= 0\n\
    fib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) = \
    \ + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n)\
    \ =  + \nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\n\
    fib(n) =  + \nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <=\
    \ 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) called with\
    \ n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\n\
    fib(n) =  + \nfib(n) =  + \nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called\
    \ with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called\
    \ with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) called\
    \ with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <=\
    \ 0\nfib(n) =  + \nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called with\
    \ n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called\
    \ with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) =\
    \  + \nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\nfib(n)\
    \ =  + \nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\n\
    fib(n) called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) called with n <=\
    \ 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n)\
    \ =  + \nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\n\
    fib(n) =  + \nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with n <=\
    \ 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) =  + \nfib(n) =  + \nfib(n)\
    \ called with n <= 0\nfib(n) called with n <= 0\nfib(n) =  + \nfib(n) called with\
    \ n <= 0\nfib(n) =  + \nfib(n) called with n <= 0\nfib(n) called with n <= 0\n\
    fib(n) =  + \nfib(n) =  + \nfib(n) called with n "
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  elsif\
    \ n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpll2mzxsw

    Started

    .

    Finished in 0.001556623 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    642.42 tests/s, 3212.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    if n == 1\n      1\n    else\n      fib(n-1)\
    \ + fib(n-2)\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn5e1e_k8\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: n must be positive\n/tmp/tmpn5e1e_k8.rb:4:in\
    \ `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in\
    \ `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in\
    \ `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in `fib'\n/tmp/tmpn5e1e_k8.rb:9:in\
    \ `fib'\n/tmp/tmpn5e1e_k8.rb:17:in `call'\n/tmp/tmpn5e1e_k8.rb:17:in `test_fib'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n\
    \     16:     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002036866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    490.95 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    fib(0)\n\
    \  elsif n == 1\n    fib(1)\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: 'Loaded suite /tmp/tmp48vvko2h

    Started

    E

    ===============================================================================

    Error: test_fib(TestHumanEval): SystemStackError: stack level too deep

    /tmp/tmp48vvko2h.rb:3:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fib''

    /tmp/tmp48vvko2h.rb:6:in `fi'
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxfex0lcl\nStarted\nUsage: fib n\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpxfex0lcl.rb:8:in `+'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:8:in\
    \ `fib'\n/tmp/tmpxfex0lcl.rb:8:in `fib'\n/tmp/tmpxfex0lcl.rb:15:in `call'\n/tmp/tmpxfex0lcl.rb:15:in\
    \ `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:  \
    \ def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55,\
    \ candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:\
    \     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.001906424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    524.54 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1)} #{fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu5675rug\nStarted\nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\n\
    Invalid input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \nInvalid\
    \ input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n\
    1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \n4.  \n6.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \n7.  \nInvalid input\nInvalid input\n1.  \nInvalid\
    \ input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid\
    \ input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n1.  \n\
    Invalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \nInvalid input\n\
    Invalid input\n1.  \nInvalid input\n2.  \nInvalid input\nInvalid input\n1.  \n\
    3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \n4.  \n6.  \n8.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid input\n\
    1.  \nInvalid input\n2.  \n4.  \n6.  \nInvalid input\nInvalid input\n1.  \nInvalid\
    \ input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \nInvalid input\nInvalid\
    \ input\n1.  \nInvalid input\n2.  \n4.  \nInvalid input\nInvalid input\n1.  \n\
    Invalid input\n2.  \nInvalid input\nInvalid input\n1.  \n3.  \n5.  \n7.  \n9.\
    \  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \n4.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n2.  \nInvalid input\n\
    Invalid input\n1.  \n3.  \n5.  \nInvalid input\nInvalid input\n1.  \nInvalid input\n\
    2.  \nInvalid input\nInvalid input\n1."
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    puts \"Usage:\
    \ fib n\"\n    exit 1\n  end\n  a, b = 0, 1\n  while n > 0\n    puts b\n    a,\
    \ b = b, a + b\n    n -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcsq5ikwp\nStarted\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\
    55\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpcsq5ikwp.rb:18:in `test_fib'\n     15:\
    \ class TestHumanEval < Test::Unit::TestCase\n     16:   def test_fib\n     17:\
    \     candidate = method(:fib)\n  => 18:     assert_equal(55, candidate.call(10))\n\
    \     19:     assert_equal(1, candidate.call(1))\n     20:     assert_equal(21,\
    \ candidate.call(8))\n     21:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009725789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.82 tests/s, 102.82 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwmlyyt35

    Started

    .

    Finished in 0.0014584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    685.68 tests/s, 3428.41 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7s5g0a7s\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n - 1) + fib(n - 2)\n                      ^\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:13:in `call'\n/tmp/tmp7s5g0a7s.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.004122854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.55 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while n > 0\n    puts b\n  \
    \  a, b = b, a + b\n    n -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgb7vybco\nStarted\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\
    55\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpgb7vybco.rb:18:in `test_fib'\n     15:\
    \ class TestHumanEval < Test::Unit::TestCase\n     16:   def test_fib\n     17:\
    \     candidate = method(:fib)\n  => 18:     assert_equal(55, candidate.call(10))\n\
    \     19:     assert_equal(1, candidate.call(1))\n     20:     assert_equal(21,\
    \ candidate.call(8))\n     21:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009293406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.60 tests/s, 107.60 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  elsif n == 1\n    puts \"fib(1) is 0\"\n  elsif n == 2\n   \
    \ puts \"fib(2) is 1\"\n  else\n    puts \"fib(#{n}) is #{fib(n-1)+fib(n-2)}\"\
    \n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_jajz_z6\nStarted\nfib(2) is 1\nfib(1) is 0\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"fib(#{n}) is #{fib(n-1)+fib(n-2)}\"\n                      \
    \             ^\n/tmp/tmp_jajz_z6.rb:10:in `fib'\n/tmp/tmp_jajz_z6.rb:10:in `fib'\n\
    /tmp/tmp_jajz_z6.rb:10:in `fib'\n/tmp/tmp_jajz_z6.rb:10:in `fib'\n/tmp/tmp_jajz_z6.rb:10:in\
    \ `fib'\n/tmp/tmp_jajz_z6.rb:10:in `fib'\n/tmp/tmp_jajz_z6.rb:10:in `fib'\n/tmp/tmp_jajz_z6.rb:10:in\
    \ `fib'\n/tmp/tmp_jajz_z6.rb:17:in `call'\n/tmp/tmp_jajz_z6.rb:17:in `test_fib'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n\
    \     16:     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.003425734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.91 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpltrxjkph\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n                       \
    \        ^\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:13:in `call'\n/tmp/tmpltrxjkph.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003642755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.52 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  else\n    puts fib_cache[n]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3ufjn54m\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NameError: undefined local variable or method\
    \ `fib_cache' for #<TestHumanEval:0x00002aefe3844f38 @method_name=\"test_fib\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x00002aefe3844ec0 @start_time=2022-08-06\
    \ 09:42:44.621855474 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002aefe395fd28\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002aefe3957948\
    \ @test_name=\"test_fib(TestHumanEval)\", @exception=#<NameError: undefined local\
    \ variable or method `fib_cache' for #<TestHumanEval:0x00002aefe3844f38 ...>\n\
    \  \n      puts fib_cache[n]\n           ^^^^^^^^^>, @method_name=\"test_fib\"\
    >], @stop_tag=#<Object:0x00002aefe395f878>, @failures=[], @errors=[#<Test::Unit::Error:0x00002aefe3957948\
    \ @test_name=\"test_fib(TestHumanEval)\", @exception=#<NameError: undefined local\
    \ variable or method `fib_cache' for #<TestHumanEval:0x00002aefe3844f38 ...>\n\
    \  \n      puts fib_cache[n]\n           ^^^^^^^^^>, @method_name=\"test_fib\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002aefe395f670 @a_proc=#<Proc:0x00002aefe395f698\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47209803806360>=>#<Proc:0x00002aefe395f698 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aefe395f170\
    \ @a_proc=#<Proc:0x00002aefe395f198 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplb95882l

    Started

    .

    Finished in 0.001205293 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    829.67 tests/s, 4148.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    n must be > 0\"\n  elsif n == 1\n    puts \"1\"\n  elsif n == 2\n    puts \"2\"\
    \n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1364rt_k\nStarted\n2\n1\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n-1) + fib(n-2)\n                    ^\n/tmp/tmp1364rt_k.rb:10:in\
    \ `fib'\n/tmp/tmp1364rt_k.rb:10:in `fib'\n/tmp/tmp1364rt_k.rb:10:in `fib'\n/tmp/tmp1364rt_k.rb:10:in\
    \ `fib'\n/tmp/tmp1364rt_k.rb:10:in `fib'\n/tmp/tmp1364rt_k.rb:10:in `fib'\n/tmp/tmp1364rt_k.rb:10:in\
    \ `fib'\n/tmp/tmp1364rt_k.rb:10:in `fib'\n/tmp/tmp1364rt_k.rb:17:in `call'\n/tmp/tmp1364rt_k.rb:17:in\
    \ `test_fib'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:  \
    \ def test_fib\n     16:     candidate = method(:fib)\n  => 17:     assert_equal(55,\
    \ candidate.call(10))\n     18:     assert_equal(1, candidate.call(1))\n     19:\
    \     assert_equal(21, candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.00366202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.07 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7s5g0a7s\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n - 1) + fib(n - 2)\n                      ^\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:13:in `call'\n/tmp/tmp7s5g0a7s.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.004122854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.55 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    return n\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpirpl3l1g

    Started

    .

    Finished in 0.00074398 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1344.12 tests/s, 6720.61 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  elsif n <= 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplsorpgmf\nStarted\nUsage: fib n\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmplsorpgmf.rb:8:in `+'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:8:in\
    \ `fib'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:8:in\
    \ `fib'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:8:in\
    \ `fib'\n/tmp/tmplsorpgmf.rb:8:in `fib'\n/tmp/tmplsorpgmf.rb:15:in `call'\n/tmp/tmplsorpgmf.rb:15:in\
    \ `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:  \
    \ def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55,\
    \ candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:\
    \     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.002061661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    485.05 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwmlyyt35

    Started

    .

    Finished in 0.0014584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    685.68 tests/s, 3428.41 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplb95882l

    Started

    .

    Finished in 0.001205293 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    829.67 tests/s, 4148.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    fib\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2jhhecg5\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: wrong number of arguments (given\
    \ 0, expected 1)\n/tmp/tmp2jhhecg5.rb:2:in `fib'\n/tmp/tmp2jhhecg5.rb:4:in `fib'\n\
    /tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:13:in `call'\n/tmp/tmp2jhhecg5.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002480836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    403.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpb6cwh9fj\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: n must be positive\n/tmp/tmpb6cwh9fj.rb:4:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:6:in\
    \ `fib'\n/tmp/tmpb6cwh9fj.rb:6:in `fib'\n/tmp/tmpb6cwh9fj.rb:13:in `call'\n/tmp/tmpb6cwh9fj.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003339216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.47 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    fib\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2jhhecg5\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: wrong number of arguments (given\
    \ 0, expected 1)\n/tmp/tmp2jhhecg5.rb:2:in `fib'\n/tmp/tmp2jhhecg5.rb:4:in `fib'\n\
    /tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:13:in `call'\n/tmp/tmp2jhhecg5.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002480836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    403.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyi_lartd

    Started

    .

    Finished in 0.000921252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1085.48 tests/s, 5427.40 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpltrxjkph\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n                       \
    \        ^\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:13:in `call'\n/tmp/tmpltrxjkph.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003642755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.52 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  else\n    puts \"#{n}th Fibonacci number is #{fib(n-1)} + #{fib(n-2)}\"\
    \n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv5rfprgu\nStarted\nUsage: fib n\nUsage: fib n\n1th\
    \ Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number is  + \nUsage: fib\
    \ n\nUsage: fib n\n1th Fibonacci number is  + \n3th Fibonacci number is  + \n\
    Usage: fib n\nUsage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci\
    \ number is  + \n4th Fibonacci number is  + \nUsage: fib n\nUsage: fib n\n1th\
    \ Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number is  + \nUsage: fib\
    \ n\nUsage: fib n\n1th Fibonacci number is  + \n3th Fibonacci number is  + \n\
    5th Fibonacci number is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number\
    \ is  + \nUsage: fib n\n2th Fibonacci number is  + \nUsage: fib n\nUsage: fib\
    \ n\n1th Fibonacci number is  + \n3th Fibonacci number is  + \nUsage: fib n\n\
    Usage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number\
    \ is  + \n4th Fibonacci number is  + \n6th Fibonacci number is  + \nUsage: fib\
    \ n\nUsage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number\
    \ is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is  + \n3th Fibonacci\
    \ number is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is  + \nUsage:\
    \ fib n\n2th Fibonacci number is  + \n4th Fibonacci number is  + \nUsage: fib\
    \ n\nUsage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number\
    \ is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is  + \n3th Fibonacci\
    \ number is  + \n5th Fibonacci number is  + \n7th Fibonacci number is  + \nUsage:\
    \ fib n\nUsage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci\
    \ number is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is  + \n3th\
    \ Fibonacci number is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is\
    \  + \nUsage: fib n\n2th Fibonacci number is  + \n4th Fibonacci number is  + \n\
    Usage: fib n\nUsage: fib n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci\
    \ number is  + \nUsage: fib n\nUsage: fib n\n1th Fibonacci number is  + \n3th\
    \ Fibonacci number is  + \n5th Fibonacci number is  + \nUsage: fib n\nUsage: fib\
    \ n\n1th Fibonacci number is  + \nUsage: fib n\n2th Fibonacci number is  + \n\
    Usage: fib n\nUsage: fib n\n1th Fibonacci numb"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    fibs = [0]\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n\
    \    fibs << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs\
    \ << fibs.last + fibs.last\n    fibs << fibs.last + fibs.last\n    fibs << fibs.last\
    \ + fib\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpwkwy9kek.rb:49: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpwkwy9kek.rb:58: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n <= 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9uiarp_h\nStarted\nInvalid input\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmp9uiarp_h.rb:8:in `+'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:8:in\
    \ `fib'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:8:in\
    \ `fib'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:8:in\
    \ `fib'\n/tmp/tmp9uiarp_h.rb:8:in `fib'\n/tmp/tmp9uiarp_h.rb:15:in `call'\n/tmp/tmp9uiarp_h.rb:15:in\
    \ `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:  \
    \ def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55,\
    \ candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:\
    \     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.001402002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    713.27 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit 1\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: 'Loaded suite /tmp/tmp_jmltpk_

    Started

    Usage: fib n


    Finished in 0.000536829 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwmlyyt35

    Started

    .

    Finished in 0.0014584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    685.68 tests/s, 3428.41 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6prx806w\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n-1) + fib(n-2)\n                    ^\n/tmp/tmp6prx806w.rb:6:in\
    \ `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in\
    \ `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in\
    \ `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in `fib'\n/tmp/tmp6prx806w.rb:6:in\
    \ `fib'\n/tmp/tmp6prx806w.rb:13:in `call'\n/tmp/tmp6prx806w.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.00270943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    369.08 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    fib\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2jhhecg5\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: wrong number of arguments (given\
    \ 0, expected 1)\n/tmp/tmp2jhhecg5.rb:2:in `fib'\n/tmp/tmp2jhhecg5.rb:4:in `fib'\n\
    /tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in `fib'\n/tmp/tmp2jhhecg5.rb:6:in\
    \ `fib'\n/tmp/tmp2jhhecg5.rb:13:in `call'\n/tmp/tmp2jhhecg5.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.002480836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    403.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while a < n\n    puts a\n  \
    \  a, b = b, a + b\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2_1qbsex\nStarted\n0\n1\n1\n2\n3\n5\n8\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmp2_1qbsex.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008126718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.05 tests/s, 123.05 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    puts \"Usage:\
    \ fib n\"\n    exit\n  end\n  if n == 0\n    return 0\n  end\n  if n == 1\n  \
    \  return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxioy_pta

    Started

    .

    Finished in 0.001248672 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.85 tests/s, 4004.25 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpltrxjkph\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts \"#{n}. #{fib(n - 1) + fib(n - 2)}\"\n                       \
    \        ^\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:6:in\
    \ `fib'\n/tmp/tmpltrxjkph.rb:6:in `fib'\n/tmp/tmpltrxjkph.rb:13:in `call'\n/tmp/tmpltrxjkph.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.003642755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.52 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9nkiuxss\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmp9nkiuxss.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010153367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.49 tests/s, 98.49 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  a, b = 0, 1\n  while n > 0\n    puts a\n  \
    \  a, b = b, a + b\n    n -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpot6nh9ll\nStarted\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\
    F\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpot6nh9ll.rb:18:in `test_fib'\n     15:\
    \ class TestHumanEval < Test::Unit::TestCase\n     16:   def test_fib\n     17:\
    \     candidate = method(:fib)\n  => 18:     assert_equal(55, candidate.call(10))\n\
    \     19:     assert_equal(1, candidate.call(1))\n     20:     assert_equal(21,\
    \ candidate.call(8))\n     21:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007928793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.12 tests/s, 126.12 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp00scqddk

    Started

    .

    Finished in 0.001291939 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    774.03 tests/s, 3870.15 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    fib(n) called with n <= 0\"\n    return nil\n  end\n  if n == 1\n    return 0\n\
    \  end\n  if n == 2\n    return 1\n  end\n  fibs = fib(n-1) + fib(n-2)\n  return\
    \ fibs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6n8os0pv\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmp6n8os0pv.rb:20:in `test_fib'\n     17:\
    \ class TestHumanEval < Test::Unit::TestCase\n     18:   def test_fib\n     19:\
    \     candidate = method(:fib)\n  => 20:     assert_equal(55, candidate.call(10))\n\
    \     21:     assert_equal(1, candidate.call(1))\n     22:     assert_equal(21,\
    \ candidate.call(8))\n     23:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<34>\n===============================================================================\n\
    \nFinished in 0.007121969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.41 tests/s, 140.41 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplb95882l

    Started

    .

    Finished in 0.001205293 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    829.67 tests/s, 4148.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n - 1) +\
    \ fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmn1r3z2e

    Started

    Usage: fib n


    Finished in 0.000868739 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 1\n    n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplb95882l

    Started

    .

    Finished in 0.001205293 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    829.67 tests/s, 4148.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    fib(n) called with n <= 0\"\n  elsif n == 1\n    puts \"fib(n) called with n ==\
    \ 1\"\n  else\n    puts \"fib(n) called with n > 1\"\n    puts fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpygbexycs\nStarted\nfib(n) called with n > 1\nfib(n)\
    \ called with n > 1\nfib(n) called with n > 1\nfib(n) called with n > 1\nfib(n)\
    \ called with n > 1\nfib(n) called with n > 1\nfib(n) called with n > 1\nfib(n)\
    \ called with n > 1\nfib(n) called with n > 1\nfib(n) called with n == 1\nfib(n)\
    \ called with n <= 0\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n-1) + fib(n-2)\n                    ^\n/tmp/tmpygbexycs.rb:9:in\
    \ `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:9:in\
    \ `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:9:in\
    \ `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:9:in `fib'\n/tmp/tmpygbexycs.rb:16:in\
    \ `call'\n/tmp/tmpygbexycs.rb:16:in `test_fib'\n     13: class TestHumanEval <\
    \ Test::Unit::TestCase\n     14:   def test_fib\n     15:     candidate = method(:fib)\n\
    \  => 16:     assert_equal(55, candidate.call(10))\n     17:     assert_equal(1,\
    \ candidate.call(1))\n     18:     assert_equal(21, candidate.call(8))\n     19:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001910616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    523.39 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n\
    \ - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgtnc5k51\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpgtnc5k51.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.006172089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.02 tests/s, 162.02 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n    exit\n  end\n  if n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmzzeq6tt

    Started

    Usage: fib n


    Finished in 0.000766131 seconds.

    -------------------------------------------------------------------------------

    0 tests, 0 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    0% passed

    -------------------------------------------------------------------------------

    0.00 tests/s, 0.00 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    n must be > 0\"\n  elsif n <= 1\n    puts \"n must be > 1\"\n  else\n    puts\
    \ fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx995a8_n\nStarted\nn must be > 1\nn must be > 0\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n-1) + fib(n-2)\n                    ^\n/tmp/tmpx995a8_n.rb:8:in\
    \ `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:8:in\
    \ `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:8:in\
    \ `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:8:in `fib'\n/tmp/tmpx995a8_n.rb:15:in\
    \ `call'\n/tmp/tmpx995a8_n.rb:15:in `test_fib'\n     12: class TestHumanEval <\
    \ Test::Unit::TestCase\n     13:   def test_fib\n     14:     candidate = method(:fib)\n\
    \  => 15:     assert_equal(55, candidate.call(10))\n     16:     assert_equal(1,\
    \ candidate.call(1))\n     17:     assert_equal(21, candidate.call(8))\n     18:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.00192579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.27 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    if n == 0\n      0\n    elsif n == 1\n    \
    \  1\n    else\n      fib(n-1) + fib(n-2)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxm7et_3t

    Started

    .

    Finished in 0.000967237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1033.87 tests/s, 5169.36 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    raise(ArgumentError,\
    \ \"n must be positive\")\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpebntomj6\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: n must be positive\n/tmp/tmpebntomj6.rb:4:in\
    \ `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in\
    \ `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in\
    \ `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:6:in\
    \ `fib'\n/tmp/tmpebntomj6.rb:6:in `fib'\n/tmp/tmpebntomj6.rb:13:in `call'\n/tmp/tmpebntomj6.rb:13:in\
    \ `test_fib'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:  \
    \ def test_fib\n     12:     candidate = method(:fib)\n  => 13:     assert_equal(55,\
    \ candidate.call(10))\n     14:     assert_equal(1, candidate.call(1))\n     15:\
    \     assert_equal(21, candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n\
    ===============================================================================\n\
    \nFinished in 0.001425475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    701.52 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5x1irz0_\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval): ArgumentError: negative number\n/tmp/tmp5x1irz0_.rb:4:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in\
    \ `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:6:in `fib'\n/tmp/tmp5x1irz0_.rb:13:in\
    \ `call'\n/tmp/tmp5x1irz0_.rb:13:in `test_fib'\n     10: class TestHumanEval <\
    \ Test::Unit::TestCase\n     11:   def test_fib\n     12:     candidate = method(:fib)\n\
    \  => 13:     assert_equal(55, candidate.call(10))\n     14:     assert_equal(1,\
    \ candidate.call(1))\n     15:     assert_equal(21, candidate.call(8))\n     16:\
    \     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001926433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    519.09 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n\
    \ - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgtnc5k51\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpgtnc5k51.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.006172089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.02 tests/s, 162.02 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  else\n    puts Fib(n) if n <= 1\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy1_yox1u\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpy1_yox1u.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005830618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.51 tests/s, 171.51 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative number\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppr_x7714

    Started

    .

    Finished in 0.000792477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1261.87 tests/s, 6309.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    fib1 = 0\n\
    \    fib2 = 1\n  elsif n == 1\n    fib1 = 1\n    fib2 = 1\n  else\n    fib1 =\
    \ fib(n-1) + fib(n-2)\n    fib2 = fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpislj81a3\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpislj81a3.rb:18:in `test_fib'\n     15:\
    \ class TestHumanEval < Test::Unit::TestCase\n     16:   def test_fib\n     17:\
    \     candidate = method(:fib)\n  => 18:     assert_equal(55, candidate.call(10))\n\
    \     19:     assert_equal(1, candidate.call(1))\n     20:     assert_equal(21,\
    \ candidate.call(8))\n     21:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.009515262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.09 tests/s, 105.09 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    0\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr8ofom3t\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpr8ofom3t.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007522744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 132.93 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  else\n    puts fib(n - 1) + fib(n - 2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7s5g0a7s\nStarted\nInvalid input\nInvalid input\n\
    E\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      puts fib(n - 1) + fib(n - 2)\n                      ^\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in `fib'\n/tmp/tmp7s5g0a7s.rb:6:in\
    \ `fib'\n/tmp/tmp7s5g0a7s.rb:13:in `call'\n/tmp/tmp7s5g0a7s.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.004122854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.55 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n\
    \ - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgtnc5k51\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpgtnc5k51.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.006172089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.02 tests/s, 162.02 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Usage: fib n\"\n  else\n    puts Fibonacci.fib(n)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxq7e177f\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NameError: uninitialized constant Fibonacci\n\
    \  \n      puts Fibonacci.fib(n)\n           ^^^^^^^^^\n/tmp/tmpxq7e177f.rb:6:in\
    \ `fib'\n/tmp/tmpxq7e177f.rb:13:in `call'\n/tmp/tmpxq7e177f.rb:13:in `test_fib'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n\
    \     12:     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.006195938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.40 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    fib = 0\n\
    \  elsif n == 1\n    fib = fib - 1\n  else\n    fib = fib + fib - fib + fib -\
    \ 1\n  end\n  fib\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplj1z74k7\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n\
    \  \n      fib = fib + fib - fib + fib - 1\n                ^\n/tmp/tmplj1z74k7.rb:8:in\
    \ `fib'\n/tmp/tmplj1z74k7.rb:16:in `call'\n/tmp/tmplj1z74k7.rb:16:in `test_fib'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_fib\n\
    \     15:     candidate = method(:fib)\n  => 16:     assert_equal(55, candidate.call(10))\n\
    \     17:     assert_equal(1, candidate.call(1))\n     18:     assert_equal(21,\
    \ candidate.call(8))\n     19:     assert_equal(89, candidate.call(11))\n===============================================================================\n\
    \nFinished in 0.001766745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    566.01 tests/s, 0.00 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpylagy37j

    Started

    .

    Finished in 0.000879151 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1137.46 tests/s, 5687.31 assertions/s

    '
  stdout: ''
  timestamp: 1659793286
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    puts \"Usage:\
    \ fib n\"\n    exit 1\n  end\n  if n == 0\n    1\n  elsif n == 1\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa1u5gbss\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpa1u5gbss.rb:19:in `test_fib'\n     16:\
    \ class TestHumanEval < Test::Unit::TestCase\n     17:   def test_fib\n     18:\
    \     candidate = method(:fib)\n  => 19:     assert_equal(55, candidate.call(10))\n\
    \     20:     assert_equal(1, candidate.call(1))\n     21:     assert_equal(21,\
    \ candidate.call(8))\n     22:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.005753565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.81 tests/s, 173.81 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb10yjxd2

    Started

    .

    Finished in 0.001584134 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    631.26 tests/s, 3156.30 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    return 0\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps4s_anft\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmps4s_anft.rb:13:in `test_fib'\n     10:\
    \ class TestHumanEval < Test::Unit::TestCase\n     11:   def test_fib\n     12:\
    \     candidate = method(:fib)\n  => 13:     assert_equal(55, candidate.call(10))\n\
    \     14:     assert_equal(1, candidate.call(1))\n     15:     assert_equal(21,\
    \ candidate.call(8))\n     16:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.011500183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.96 tests/s, 86.96 assertions/s\n"
  timestamp: 1659793364
- exit_code: 1
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n <= 0\n    puts \"\
    Invalid input\"\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprozdmow2\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmprozdmow2.rb:17:in `test_fib'\n     14:\
    \ class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:\
    \     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n\
    \     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21,\
    \ candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.010442666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.76 tests/s, 95.76 assertions/s\n"
  timestamp: 1659793364
- exit_code: 0
  program: "# Return n-th Fibonacci number.\ndef fib(n)\n  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  end\n  fib_n = fib(n-1) + fib(n-2)\n  return fib_n\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppep5bgql

    Started

    .

    Finished in 0.000679381 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1471.93 tests/s, 7359.64 assertions/s

    '
  stdout: ''
  timestamp: 1659793364
