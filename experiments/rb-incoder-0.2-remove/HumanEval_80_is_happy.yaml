name: HumanEval_80_is_happy
language: rb
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\ndef is_happy(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
  \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"\
  ))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"\
  abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true,\
  \ candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n \
  \   assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"\
  iopaxioi\"))\n  end\nend\n"
completions: ["  s.chars.each_cons(3).all? { |a| a.uniq.length == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.size == 1 }\nend", "  s.split('').each do |letter|\n    next if\
    \ letter == letter\n    next if letter == letter + letter\n    next if letter\
    \ == letter + letter + letter\n    next if letter == letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter\n\
    \    next if letter == letter + letter + letter + letter + letter + letter\n \
    \   next if letter == letter + letter + letter + letter + letter + letter + letter\n\
    \    next if letter == letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter\n    next if letter == letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter + letter\n    next if\
    \ letter == letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter\n    next if letter == letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\n\
    \    next if letter == letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter\n    next if letter ==\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter\n    next if letter == letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter\n    next if letter == letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter\n    next if letter == letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + ", "  s.chars.each_cons(3).all? do |s|\n    !s.uniq.empty?\n\
    \  end\nend", "  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.downcase!\n  s.gsub!(/[^a-z", "  s.split('').each do |letter|\n   \
    \ letters.include?(letter)\n  end\nend", "  return s.length >= 3 && s.chars.all?\
    \ { |c| s.count(c) == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n\
    <div class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<h2 id=\"Exercise-2\">Exercise<a class=\"anchor-link\" href=\"\
    #Exercise-2\">&#182;</a></h2><p>Write a function that takes a string and returns\
    \ the number of vowels contained in the string.</p>", "  s.chars.each_with_index\
    \ do |letter, index|\n    if index > 0 and s[index-1] != letter\n      return\
    \ false\n    end\n    if index > 0 and s[index-2] != letter\n      return false\n\
    \    end\n    if index > 0 and s[index-3] != letter\n      return false\n    end\n\
    \  end\n  true\nend\nis_happy(\"aba\")\nis_happy(\"abba\")\nis_happy(\"abbb\"\
    )\nis_happy(\"abbac\")\nis_happy(\"abac\")\nis_happy(\"abbaca\")\nis_happy(\"\
    abbacab\")\nis_happy(\"abbacabc\")\nis_happy(\"abbacabca\")\nis_happy(\"abbacabcab\"\
    )\nis_happy(\"abbacabcabc\")\nis_happy(\"abbacabcabca\")\nis_happy(\"abbacabcabcab\"\
    )\nis_happy(\"abbacabcabcabc\")\nis_happy(\"abbacabcabcabca\")\nis_happy(\"abbacabcabcabcab\"\
    )\nis_happy(\"abbacabcabcabcabc\")\nis_happy(\"abbacabcabcabcabca\")\nis_happy(\"\
    abbacabcabcabcabcab\")\nis_happy(\"abbacabcabcabcabcabc\")\nis_happy(\"abbacabcabcabcabcabca\"\
    )\nis_happy(\"abbacabcabcabcabcabcab\")\nis_happy(\"abbacabcabcabcabcabcabc\"\
    )\nis_happy(\"abbacabcabcabcabcabcabca\")\nis_happy(\"abbacabcabcabcabcabcabcab\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabc\")\nis_happy(\"abbacabcabcabcabcabcabcabca\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabcab\")\nis_happy(\"abbacabcabcabcabcabcabcabcabc\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabcabca\")\nis_happy(\"abbacabcabcabcabcabcabcabcabcab\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabcabcabc\")\nis_happy(\"abbacabcabcabcabcabcabcabcabcabca\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabcabcab\")\nis_happy(\"abbacabcabcabcabcabcabcabcabcabc\"\
    )\nis_happy(\"abbacabcabcabcabcabcabcabcabcabca\")\nis_happy(\"abbacabcabcabcabcabcabcabcabcab\"\
    )\nis_happy(\"abbacabcabcabcab", "  s.chars.each_cons(3).all? { |c| c.uniq.length\
    \ == 3 }\nend", "  return s.length >= 3 && s.chars.all?(&:distinct?)\nend", " \
    \ s.split('').each do |letter|\n    next if letter == letter\n    break if letter\
    \ == letter + letter\n    break if letter == letter + letter + letter\n  end\n\
    \  true\nend", "  s.each_char.with_index do |char, i|\n    if i % 3 == 0 && i\
    \ != 0\n      char == s[i - 1]\n    end\n  end\nend", "  s.each_char.with_index.all?\
    \ do |char, i|\n    char == s[i+2] && char == s[i+3] && char != s[i+4]\n  end\n\
    end", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == letters.size\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `\"abcabc\"`.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because\
    \ you didn't explain how it works. You haven't explained how it works. You haven't\
    \ explained how it works. You haven't explained how it works. You haven't explained\
    \ how it works. You haven't explained how it works. You haven't explained how\
    \ it works. You haven't explained how it works. You haven't explained how it works.\
    \ You haven't explained how it works. You haven't explained how it works. You\
    \ haven't explained how it works. You haven't explained how it works. You haven't\
    \ explained how it works. You haven't explained how it works. You haven't explained\
    \ how it works. You haven't explained how it works. You haven't explained how\
    \ it works. You haven't explained how it works. You haven't explained how it works.\
    \ You haven't explained how it works. You haven't explained how it works. You\
    \ haven't explained how it works. You haven't explained how it works. You haven't\
    \ explained how it works. You haven't explained how it works. You haven't explained\
    \ how it works. You haven't explained how it works. You haven't explained how\
    \ it works. You haven't explained how it works. You haven't explained how it works.\
    \ You haven't explained how it works. You haven't explained how it works. You\
    \ haven't explained how it works. You haven't explained how it works. You haven't\
    \ explained how it works. You haven't explained how it works. You haven't explained\
    \ how it works. You haven't explained how it works. You haven't explained how\
    \ it works. You haven't explained how it works. You haven't explained how it works.\
    \ You haven't explained how it works. You haven't explained how it works. You\
    \ haven't explained how it works. You haven't explained how it works. You haven't\
    \ explained how it works. You haven't explained how it works. You haven't explained\
    \ how it works. You haven't explained how it works. You haven't explained how\
    \ it works. You haven't explained how it works. You haven't explained how it works.\
    \ You haven't explained how it works. You haven't expla", "  s.chars.each_cons(3).all?\
    \ do |chars|\n    chars.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size\
    \ == c.size }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend",
  "  s.chars.each_cons(3).all? do |c|\n    !c.uniq.empty?\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.length == 3 }\nend", "  s.chars.each_cons(3).all? do |s|\n    !s.uniq.length\n\
    \  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\"\
    >\n<div id=\"footer-text\">\nLast updated 2017-06-26 14:52:01 W. Europe Daylight\
    \ Time\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you so much for your help. I appreciate it. I will try this and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI got it to work. Thank you so much!\n\
    <|/ c |>\n<| c |>\nI added a solution that uses `each_char` instead of `each_cons`\
    \ which might be more efficient.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ `each_char` instead of `each_cons` which might be more efficient.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses `each_char` instead of `each_cons` which\
    \ might be more efficient.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.length == 3 }\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n\
    </div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2021-01-24\
    \ 17:17:12 UTC\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer! I appreciate it! However, I cannot use any external\
    \ libraries. I only have access to Ruby 2.7.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to include a pure Ruby solution\n<|/ c |>\n<| c |>\nThanks so much! I\
    \ appreciate it!\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n\
    <div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2017-03-07 17:32:12\
    \ CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use any gems. I am not allowed\
    \ to use any loops. I am not allowed to use any conditional statements. I am not\
    \ allowed to use any methods. I am not allowed to use any conditional statements.\
    \ I am not allowed to use any methods. I am not allowed to use any conditional\
    \ statements. I am not allowed to use any methods. I am not allowed to use any\
    \ conditional statements. I am not allowed to use any methods. I am not allowed\
    \ to use any conditional statements. I am not allowed to use any methods. I am\
    \ not allowed to use any conditional statements. I am not allowed to use any methods.\
    \ I am not allowed to use any conditional statements. I am not allowed to use\
    \ any methods. I am not allowed to use any conditional statements. I am not allowed\
    \ to use any methods. I am not allowed to use any conditional statements. I am\
    \ not allowed to use any methods. I am not allowed to use any conditional statements.\
    \ I am not allowed to use any methods. I am not allowed to use any conditional\
    \ statements. I am not allowed to use any methods. I am not allowed to use any\
    \ conditional statements. I am not allowed to use any methods. I am not allowed\
    \ to use any conditional statements. I am not allowed to use any methods. I am\
    \ not allowed to use any conditional statements. I am not allowed to use any methods.\
    \ I am not allowed to use any conditional statements. I am not allowed to use\
    \ any methods. I am not allowed to use any conditional statements. I am not allowed\
    \ to use any methods. I am not allowed to use any conditional statements. I am\
    \ not allowed to use any methods. I am not allowed to use any conditional statements.\
    \ I am not allowed to use any methods. I am not allowed to use any conditional\
    \ statements. I am not allowed to use any methods. I am not allowed to use any\
    \ conditional statements. I am not allowed to use any methods. I am not allowed\
    \ to use any conditional statements. I am not allowed to use any methods. I am\
    \ not allowed to use any conditional statements. I am not allowed to use any methods.\
    \ I am not allowed to use any conditional statements. I am not allowed to use\
    \ any methods. I am not allowed to use any conditional statements. I am not allowed\
    \ to use any methods. I am not allowed to use any conditional statements. I am\
    \ not allowed to use any methods. I am not allowed to use any conditional statements.\
    \ I am not allowed to use any methods. I am ", "  s.chars.each_cons(3).all? do\
    \ |letters|\n    letters.uniq.size == 3\n  end\nend\n</pre>\n<p>\n  In Ruby, you\
    \ can use the <code>Enumerable</code> module to write this more concisely:\n</p>\n\
    <pre class=\"code-example\">", "  s.chars.each_cons(3).all? { |a,b,c| a.eql? b\
    \ and b.eql? c }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"\
    footer\">\n<div id=\"footer-text\">\nLast updated 2016-03-24 10:49:33 CEST\n</div>\n\
    </div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. Your solution works but it's too slow for my purposes. I need a solution\
    \ that is as fast as possible. Do you know any solution that is as fast as possible?\n\
    <|/ c |>\n<| c |>\nI added a solution that is as fast as possible\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your solution works but it's too slow for my\
    \ purposes. I need a solution that is as fast as possible. Do you know any solution\
    \ that is as fast as possible?\n<|/ c |>\n<| c |>\nI added a solution that is\
    \ as fast as possible\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but it's too slow for my purposes. I need a solution that is as fast as\
    \ possible. Do you know any solution that is as fast as possible?\n<|/ c |>\n\
    <| a |>\n<code>", "  s.split(//).all? { |e| e.length >= 3 }\nend", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.length\
    \ == 3 }\nend", "  s.chars.each_with_index do |char, i|\n    if i != 0 && i !=\
    \ s.length - 1 && i != s.length - 2 && char == s[i]\n      return false\n    end\n\
    \  end\n  return true\nend", "  s.chars.each_cons(3).all? do |s|\n    not s.uniq.empty?\n\
    \  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\"\
    >\n<div id=\"footer-text\">\nLast updated 2021-01-18 12:13:10 UTC\n</div>\n</div>\n\
    </body>\n</html>\n</code>\n<|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nPlease read\
    \ \"[mcve]\". When asking about code that produces an error, you should include\
    \ the complete error message, including the stack trace. Also, please read \"\
    [ask]\". We'd like to see your effort toward solving the problem, and what you've\
    \ tried so far.\n<|/ c |>\n<| c |>\nPlease read \"[ask]\". We'd like to see your\
    \ effort toward solving the problem, and what you've tried so far.\n<|/ c |>\n\
    <| c |>\nPlease read \"[mcve]\". When asking about code that produces an error,\
    \ you should include the complete error message, including the stack trace. Also,\
    \ please read \"[ask]\". We'd like to see your effort toward solving the problem,\
    \ and what you've tried so far.\n<|/ c |>\n<| c |>\nPlease read \"[mcve]\". When\
    \ asking about code that produces an error, you should include the complete error\
    \ message, including the stack trace. Also, please read \"[ask]\". We'd like to\
    \ see your effort toward solving the problem, and what you've tried so far.\n\
    <|/ c |>\n<| c |>\nPlease read \"[mcve]\". When asking about code that produces\
    \ an error, you should include the complete error message, including the stack\
    \ trace. Also, please read \"[ask]\". We'd like to see your effort toward solving\
    \ the problem, and what you've tried so far.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == 3\n  end\nend",
  "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == 3\n  end\nend\n\
    </pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"\
    footer-text\">\nLast updated 2015-03-19 23:39:11 UTC\n</div>\n</div>\n</body>\n\
    </html>\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\n\
    I see you added a link to my answer but you didn't say anything about it being\
    \ an improvement over your answer. Did you notice anything about it?\n<|/ c |>\n\
    <| c |>\nI didn't notice anything about it. I just wanted to share my solution\
    \ with you. Thanks for your comment. :)\n<|/ c |>\n<| c |>\nI see you added a\
    \ link to my answer but you didn't say anything about it being an improvement\
    \ over your answer. Did you notice anything about it?\n<|/ c |>\n<| c |>\nI didn't\
    \ notice anything about it. I just wanted to share my solution with you. Thanks\
    \ for your comment. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  s.split('').each\
    \ do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.length < 3\n\
    \    next if c.split('').uniq.size != 3\n    puts \"#{c} is happy\"\n    return\
    \ true\n  end\n  puts \"#{s} is happy\"\n  return true\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? do |chars|\n  \
    \  chars.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n\
    </div>\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"\
    prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render\
    \ border-box-sizing rendered_html\">\n<h2 id=\"Exercise-2\">Exercise 2<a class=\"\
    anchor-link\" href=\"#Exercise-2\">&#182;</a></h2><p>Write a function that takes\
    \ a string and returns the number of vowels contained in the string.</p>\n<p>Hint:\
    \ Use <code>s.chars.count</code> to count the number of characters in the string.</p>\n\
    <p>Example:</p>\n<pre>", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"\
    footer\">\n<div id=\"footer-text\">\nLast updated 2017-03-26 14:52:01 W. Europe\
    \ Daylight Time\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any gems. I am only allowed\
    \ to use Ruby 2.4.\n<|/ c |>\n<| c |>\nI updated my answer with my solution. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any gems. I am only allowed to use Ruby 2.4.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer with my solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any gems. I am only allowed to use Ruby 2.4.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_with_index.all? do |char,\
    \ i|\n    char == s[i..i+3]\n  end\nend\nis_happy(\"happy\") # => true\nis_happy(\"\
    happyp\") # => false\nis_happy(\"happypp\") # => false\nis_happy(\"happyppp\"\
    ) # => true\nis_happy(\"happypppp\") # => false\nis_happy(\"happyppppp\") # =>\
    \ false\nis_happy(\"happypppppp\") # => false\nis_happy(\"happyppppppp\") # =>\
    \ false\nis_happy(\"happypppppppp\") # => false\nis_happy(\"happyppppppppp\")\
    \ # => false\nis_happy(\"happypppppppppp\") # => false\nis_happy(\"happyppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppp\") # => false\nis_happy(\"happyppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppp\") # => false\nis_happy(\"happyppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppp\") # => false\nis_happy(\"happypppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppppp\") # => false\nis_happy(\"happyppppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppp\") # => false\nis_happy(\"happyppppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppp\") # => false\nis_happy(\"happyppppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppp\") # => false\nis_happy(\"happyppppppppppppppppp\"\
    ) # => false\n", "  s.chars.each_with_index do |letter, index|\n    if index >\
    \ 0 and s[index-1] == letter\n      return false\n    end\n  end\n  return true\n\
    end\nis_happy(\"happy\")", "  s.chars.each_cons(3).all? { |c| c.uniq.length ==\
    \ 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell\
    \ border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\n\
    </div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<p>Now let's see how we can use <code>each_cons</code> to\
    \ solve the problem of checking if a string is happy:</p>", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.split('').each do |c|\n    break if s.split('').count(c)\
    \ % 3 != 0\n  end\n  s.split('').count >= 3\nend\nis_happy('happy')\nis_happy('happyp')\n\
    is_happy('happypp')\nis_happy('happyppp')\nis_happy('happypppp')\nis_happy('happyppppp')\n\
    is_happy('happypppppp')\nis_happy('happyppppppp')\nis_happy('happypppppppp')\n\
    is_happy('happyppppppppp')\nis_happy('happypppppppppp')\nis_happy('happypppppppppp')\n\
    is_happy('happyppppppppppp')\nis_happy('happypppppppppppp')\nis_happy('happyppppppppppppp')\n\
    is_happy('happypppppppppppppp')\nis_happy('happyppppppppppppppp')\nis_happy('happypppppppppppppppp')\n\
    is_happy('happyppppppppppppppp')\nis_happy('happypppppppppppppppp')\nis_happy('happypppppppppppppppp')\n\
    is_happy('happyppppppppppppppppp')\nis_happy('happypppppppppppppppppp')\nis_happy('happypppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppp",
  "  s.split('').each do |c|\n    if s.count(c) % 3 != 0\n      return false\n   \
    \ end\n  end\n  return true\nend", "  s.each_char.all? { |c| c.is_a?(String) &&\
    \ c.length >= 3 && c.chars.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>", " \
    \ s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2017-03-07 17:32:11 CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby,string,arrays\
    \ |>\n<| c |>\nThanks so much! I didn't know about each_cons. I appreciate your\
    \ help.\n<|/ c |>\n<| c |>\nYou're welcome. `each_cons` was introduced in Ruby\
    \ 2.4.\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require\
    \ `each_cons`.\n<|/ c |>\n<| c |>\nThanks so much! I appreciate your help.\n<|/\
    \ c |>\n<| a tags=ruby,string,arrays |>\n<code>", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.eql?(b) && b.eql?(c) }\nend", "  s.chars.each_cons(3).all? { |c|\
    \ c.uniq.length == 3 }\nend", "  s.split('').each do |letter|\n    next if letter\
    \ == letter\n    next if s.count(letter) == 3\n    return false\n  end\n  return\
    \ true\nend", "  s.each_char.with_index do |char, i|\n    if i % 3 != 0\n    \
    \  return false\n    end\n    if s.chars.uniq.count != 3\n      return false\n\
    \    end\n  end\n  true\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", " \
    \ s.each_char.all? { |c| c.upcase != c.downcase }\nend", "  s.each_char.all? {\
    \ |c| c.is_a?(String) && c.length >= 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n\
    </div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\"><div\
    \ class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"\
    text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Exercise-2\">Exercise<a\
    \ class=\"anchor-link\" href=\"#Exercise-2\">&#182;</a></h2><p>Write a function\
    \ that takes a string and returns the number of vowels contained in the string.</p>",
  "  s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.to_s != b.to_s && b.to_s != c.to_s }\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\"\
    ><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"\
    text_cell_render border-box-sizing rendered_html\">\n<p>Let's try it out!</p>",
  "  s.split('').each do |letter|\n    next if letter == letter\n    next if s.count(letter)\
    \ > 3\n    break\n  end\n  true\nend\nis_happy('happy')\nis_happy('happyp')\n\
    is_happy('happypp')\nis_happy('happyppp')\nis_happy('happypppp')\nis_happy('happyppppp')\n\
    is_happy('happypppppp')\nis_happy('happyppppppp')\nis_happy('happypppppppp')\n\
    is_happy('happyppppppppp')\nis_happy('happypppppppppp')\nis_happy('happypppppppppp')\n\
    is_happy('happyppppppppppp')\nis_happy('happypppppppppppp')\nis_happy('happyppppppppppppp')\n\
    is_happy('happypppppppppppppp')\nis_happy('happyppppppppppppppp')\nis_happy('happypppppppppppppppp')\n\
    is_happy('happyppppppppppppppp')\nis_happy('happypppppppppppppppp')\nis_happy('happypppppppppppppppp')\n\
    is_happy('happyppppppppppppppppp')\nis_happy('happypppppppppppppppppp')\nis_happy('happypppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppppp')\n\
    is_happy('happyppppppppppppppppppp')\nis_happy('happypppppppppppppppppp')\nis_happy('happypppppppppppppppppp",
  "  s.chars.each_cons(3).all? { |c| c.uniq.size == c.size }\nend", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.to_i != b.to_i && a.to_i != c.to_i }\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like the idea of using each_cons to solve this problem. Thanks!\n\
    <|/ c |>\n<| c |>\nI like the idea of using each_cons to solve this problem. Thanks!\n\
    <|/ c |>\n<| c |>\nI like the idea of using each_cons to solve this problem. Thanks!\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "  s.chars.each_cons(3).all? { |c| c.uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend\nis_happy(\"\
    happy\")", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", "  s.each_char.with_index\
    \ do |char, index|\n    next if index == 0\n    next if char != s[index - 1]\n\
    \    next if char != s[index + 1]\n    next if char != s[index + 2]\n    next\
    \ if char != s[index + 3]\n    next if char != s[index + 4]\n    next if char\
    \ != s[index + 5]\n    next if char != s[index + 6]\n    next if char != s[index\
    \ + 7]\n    next if char != s[index + 8]\n    next if char != s[index + 9]\n \
    \   next if char != s[index + 10]\n    next if char != s[index + 11]\n    next\
    \ if char != s[index + 12]\n    next if char != s[index + 13]\n    next if char\
    \ != s[index + 14]\n    next if char != s[index + 15]\n    next if char != s[index\
    \ + 16]\n    next if char != s[index + 17]\n    next if char != s[index + 18]\n\
    \    next if char != s[index + 19]\n    next if char != s[index + 20]\n    next\
    \ if char != s[index + 21]\n    next if char != s[index + 22]\n    next if char\
    \ != s[index + 23]\n    next if char != s[index + 24]\n    next if char != s[index\
    \ + 25]\n    next if char != s[index + 26]\n    next if char != s[index + 27]\n\
    \    next if char != s[index + 28]\n    next if char != s[index + 29]\n    next\
    \ if char != s[index + 30]\n    next if char != s[index + 31]\n    next if char\
    \ != s[index + 32]\n    next if char != s[index + 33]\n    next if char != s[index\
    \ + 34]\n    next if char != s[index + 35]\n    next if char != s[index + 36]\n\
    \    next if char != s[index + 37]\n    next if char != s[index + 38]\n    next\
    \ if char != s[index + 39]\n    next if char != s[index + 40]\n    next if char\
    \ != s[index + 41]\n    next if char != s[index + 42]\n    next if char != s[index\
    \ + 43]\n    next if char != s[index + 44]\n    next if char != s[index + 45]\n\
    \    next if char != s[index + 46]\n    next if char != s[index + 47]\n    next\
    \ if char != s[index + 48]\n    next if char != s[index + 49]\n    next if char\
    \ != s[index", "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", " \
    \ s.chars.each_cons(3).all? { |a,b,c| a.to_i != b.to_i && a.to_i != c.to_i }\n\
    end", "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.length == 3 }\nend", "  s.chars.each_with_index do |char, i|\n\
    \    next if i == 0\n    next if char == s[i-1]\n    next if char == s[i-2]\n\
    \    next if char == s[i-3]\n    next if char == s[i-4]\n    next if char == s[i-5]\n\
    \    next if char == s[i-6]\n    next if char == s[i-7]\n    next if char == s[i-8]\n\
    \    next if char == s[i-9]\n    next if char == s[i-10]\n    next if char ==\
    \ s[i-11]\n    next if char == s[i-12]\n    next if char == s[i-13]\n    next\
    \ if char == s[i-14]\n    next if char == s[i-15]\n    next if char == s[i-16]\n\
    \    next if char == s[i-17]\n    next if char == s[i-18]\n    next if char ==\
    \ s[i-19]\n    next if char == s[i-20]\n    next if char == s[i-21]\n    next\
    \ if char == s[i-22]\n    next if char == s[i-23]\n    next if char == s[i-24]\n\
    \    next if char == s[i-25]\n    next if char == s[i-26]\n    next if char ==\
    \ s[i-27]\n    next if char == s[i-28]\n    next if char == s[i-29]\n    next\
    \ if char == s[i-30]\n    next if char == s[i-31]\n    next if char == s[i-32]\n\
    \    next if char == s[i-33]\n    next if char == s[i-34]\n    next if char ==\
    \ s[i-35]\n    next if char == s[i-36]\n    next if char == s[i-37]\n    next\
    \ if char == s[i-38]\n    next if char == s[i-39]\n    next if char == s[i-40]\n\
    \    next if char == s[i-41]\n    next if char == s[i-42]\n    next if char ==\
    \ s[i-43]\n    next if char == s[i-44]\n    next if char == s[i-45]\n    next\
    \ if char == s[i-46]\n    next if char == s[i-47]\n    next if char == s[i-48]\n\
    \    next if char == s[i-49]\n    next if char == s[i-50]\n    next if char ==\
    \ s[i-51]\n    next if char == s[i-52]\n    next if char", "  s.each_char.with_index\
    \ do |char, i|\n    if i % 3 == 0 && char != s[i-1] && char != s[i+1] && char\
    \ != s[i+2]\n      return false\n    end\n  end\n  return true\nend", "  s.each_char.with_index\
    \ do |char, i|\n    next if i == 0\n    next if char == s[i-1]\n    next if char\
    \ == s[i-2]\n    next if char == s[i-3]\n    next if char == s[i-4]\n    next\
    \ if char == s[i-5]\n    next if char == s[i-6]\n    next if char == s[i-7]\n\
    \    next if char == s[i-8]\n    next if char == s[i-9]\n    next if char == s[i-10]\n\
    \    next if char == s[i-11]\n    next if char == s[i-12]\n    next if char ==\
    \ s[i-13]\n    next if char == s[i-14]\n    next if char == s[i-15]\n    next\
    \ if char == s[i-16]\n    next if char == s[i-17]\n    next if char == s[i-18]\n\
    \    next if char == s[i-19]\n    next if char == s[i-20]\n    next if char ==\
    \ s[i-21]\n    next if char == s[i-22]\n    next if char == s[i-23]\n    next\
    \ if char == s[i-24]\n    next if char == s[i-25]\n    next if char == s[i-26]\n\
    \    next if char == s[i-27]\n    next if char == s[i-28]\n    next if char ==\
    \ s[i-29]\n    next if char == s[i-30]\n    next if char == s[i-31]\n    next\
    \ if char == s[i-32]\n    next if char == s[i-33]\n    next if char == s[i-34]\n\
    \    next if char == s[i-35]\n    next if char == s[i-36]\n    next if char ==\
    \ s[i-37]\n    next if char == s[i-38]\n    next if char == s[i-39]\n    next\
    \ if char == s[i-40]\n    next if char == s[i-41]\n    next if char == s[i-42]\n\
    \    next if char == s[i-43]\n    next if char == s[i-44]\n    next if char ==\
    \ s[i-45]\n    next if char == s[i-46]\n    next if char == s[i-47]\n    next\
    \ if char == s[i-48]\n    next if char == s[i-49]\n    next if char == s[i-50]\n\
    \    next if char == s[i-51]\n    next if char == s[i-52]\n    next if char",
  "  s.chars.each_cons(3).all? do |c|\n    not c.uniq.length >= 3\n  end\nend", " \
    \ s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis doesn't work if you have a string like `\"abc\"`\n<|/ c |>\n\
    <| c |>\nYes, it does. `each_cons` will iterate over `\"abc\"` three times. `each_cons(3)`\
    \ will iterate over `\"abc\"` three times. `each_cons(3).all?` will iterate over\
    \ `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size == 3 }` will iterate\
    \ over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size == 3 }` will\
    \ iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size ==\
    \ 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate over `\"abc\"` three times. `each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }` will iterate ", "  s.chars.each_cons(3).all? { |a,b,c| a.eql?(b) and\
    \ b.eql?(c) }\nend", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend", "  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n\
    \  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\n  s.gsub!(/[a-z]/i, '').downcase\n  s.gsub!(/[a-z]/i, '", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == letters.size\n  end\nend\n</pre>\n</div>\n\
    </div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Now let's\
    \ see how we can use <code>each_cons</code> to solve the problem:</p>", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.to_i != b.to_i && b.to_i != c.to_i }\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if i == 0\n    next if char == s[i-1]\n    next if char\
    \ == s[i-2]\n    next if char == s[i-3]\n    next if char == s[i-4]\n    next\
    \ if char == s[i-5]\n    next if char == s[i-6]\n    next if char == s[i-7]\n\
    \    next if char == s[i-8]\n    next if char == s[i-9]\n    next if char == s[i-10]\n\
    \    next if char == s[i-11]\n    next if char == s[i-12]\n    next if char ==\
    \ s[i-13]\n    next if char == s[i-14]\n    next if char == s[i-15]\n    next\
    \ if char == s[i-16]\n    next if char == s[i-17]\n    next if char == s[i-18]\n\
    \    next if char == s[i-19]\n    next if char == s[i-20]\n    next if char ==\
    \ s[i-21]\n    next if char == s[i-22]\n    next if char == s[i-23]\n    next\
    \ if char == s[i-24]\n    next if char == s[i-25]\n    next if char == s[i-26]\n\
    \    next if char == s[i-27]\n    next if char == s[i-28]\n    next if char ==\
    \ s[i-29]\n    next if char == s[i-30]\n    next if char == s[i-31]\n    next\
    \ if char == s[i-32]\n    next if char == s[i-33]\n    next if char == s[i-34]\n\
    \    next if char == s[i-35]\n    next if char == s[i-36]\n    next if char ==\
    \ s[i-37]\n    next if char == s[i-38]\n    next if char == s[i-39]\n    next\
    \ if char == s[i-40]\n    next if char == s[i-41]\n    next if char == s[i-42]\n\
    \    next if char == s[i-43]\n    next if char == s[i-44]\n    next if char ==\
    \ s[i-45]\n    next if char == s[i-46]\n    next if char == s[i-47]\n    next\
    \ if char == s[i-48]\n    next if char == s[i-49]\n    next if char == s[i-50]\n\
    \    next if char == s[i-51]\n    next if char == s[i-52]\n    next if char",
  "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.size == 3 }\nend\nis_happy(\"abba\") #=> true\nis_happy(\"abbaa\"\
    ) #=> false\nis_happy(\"aaaa\") #=> true\nis_happy(\"aaaaa\") #=> false\nis_happy(\"\
    aaaaaa\") #=> true\nis_happy(\"aaaaaaa\") #=> false\nis_happy(\"aaaaaaab\") #=>\
    \ true\nis_happy(\"aaaaaaaab\") #=> false\nis_happy(\"aaaaaaaabb\") #=> true\n\
    is_happy(\"aaaaaaaabbb\") #=> false\nis_happy(\"aaaaaaaabbbb\") #=> true\nis_happy(\"\
    aaaaaaaabbbbc\") #=> false\nis_happy(\"aaaaaaaabbbbcc\") #=> true\nis_happy(\"\
    aaaaaaaabbbbccc\") #=> false\nis_happy(\"aaaaaaaabbbbcccd\") #=> true\nis_happy(\"\
    aaaaaaaabbbbcccdd\") #=> false\nis_happy(\"aaaaaaaabbbbcccddd\") #=> true\nis_happy(\"\
    aaaaaaaabbbbcccdddd\") #=> false\nis_happy(\"aaaaaaaabbbbcccddddd\") #=> true\n\
    is_happy(\"aaaaaaaabbbbcccdddddd\") #=> false\nis_happy(\"aaaaaaaabbbbcccddddddd\"\
    ) #=> true\nis_happy(\"aaaaaaaabbbbcccdddddddd\") #=> false\nis_happy(\"aaaaaaaabbbbcccdddddddddd\"\
    ) #=> true\nis_happy(\"aaaaaaaabbbbcccddddddddddd\") #=> false\nis_happy(\"aaaaaaaabbbbcccdddddddddddd\"\
    ) #=> true\nis_happy(\"aaaaaaaabbbbcccdddddddddddddd\") #=> false\nis_happy(\"\
    aaaaaaaabbbbcccddddddddddddddd\") #=> true\nis_happy(\"aaaaaaaabbbbcccdddddddddddddddd\"\
    ) #=> false\nis_happy(\"aaaaaaaabbbbcccdddddddddddddddddd\") #=> true\nis_happy(\"\
    aaaaaaaabbbbcccddddddddddddddddddd\") #=> false\nis_happy(\"aaaaaaaabbbbcccdddddddddddddddddddd\"\
    ) #=> true\nis_happy(\"aaaaaaaabbbbcccdddddddddddddddddddddd\") #=> false\nis_happy(\"\
    aaaa", "  s.chars.each_cons(3).all? { |a,b,c| a.eql?(b) and b.eql?(c) }\nend",
  "  s.chars.each_with_index do |char, i|\n    if i != 0 && i != s.length - 1 && i\
    \ != s.length - 2 && char == s[i + 1] && char == s[i + 2]\n      return false\n\
    \    end\n  end\n  return true\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.length\
    \ == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell\
    \ border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\n\
    </div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<p>Now let's see how we can use <code>Enumerable#each_cons</code>\
    \ to solve this problem:</p>", "  s.chars.each_cons(3).all? do |letters|\n   \
    \ letters.uniq.size == letters.size\n  end\nend", "  s.chars.each_cons(3).all?\
    \ do |chars|\n    chars.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.length == 3 }\nend", "  return s.length >= 3 and s.chars.all? {\
    \ |c| s.count(c) == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"\
    footer\">\n<div id=\"footer-text\">\nLast updated 2016-04-20 13:46:42 +02:00\n\
    </div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThanks\
    \ for your answer. Your solution works perfectly for strings with length 3 or\
    \ less. But for strings with length 4 or more, it returns false. For example,\
    \ `is_happy(\"abcabc\") #=> true`\n<|/ c |>\n<| c |>\nI added a solution that\
    \ works for strings of any length.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your solution works perfectly for strings with length 3 or less. But for strings\
    \ with length 4 or more, it returns false. For example, `is_happy(\"abcabc\")\
    \ #=> true`\n<|/ c |>\n<| c |>\nI added a solution that works for strings of any\
    \ length.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |a,b,c| a.to_i\
    \ != b.to_i && a.to_i != c.to_i }\nend\nis_happy(\"happy\") #=> true\nis_happy(\"\
    happyp\") #=> false\nis_happy(\"happypp\") #=> false\nis_happy(\"happyppp\") #=>\
    \ true\nis_happy(\"happypppp\") #=> false\nis_happy(\"happyppppp\") #=> false\n\
    is_happy(\"happypppppp\") #=> true\nis_happy(\"happyppppppp\") #=> false\nis_happy(\"\
    happypppppppp\") #=> false\nis_happy(\"happyppppppppp\") #=> true\nis_happy(\"\
    happypppppppppp\") #=> false\nis_happy(\"happyppppppppppp\") #=> false\nis_happy(\"\
    happypppppppppppp\") #=> true\nis_happy(\"happyppppppppppppp\") #=> false\nis_happy(\"\
    happypppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppp\") #=> true\n\
    is_happy(\"happyppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppp\") #=> true\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happyppppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppp\") #=> true\nis_happy(\"happyppppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happyppppppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppppp\") #", "  s.split('').each do\
    \ |c|\n    next if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)\n\
    \    break if s.include?(c)\n    break if s.include?(c)\n    break if s.include?(c)",
  "  s.chars.each_with_index do |char, i|\n    if i % 3 == 0 && char != s[i - 1] &&\
    \ char != s[i + 1] && char != s[i + 2]\n      return false\n    end\n  end\n \
    \ true\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend", " \
    \ s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2016-03-07 17:32:11 UTC\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks for the response. I'm getting an error when I try to run\
    \ your code. `undefined method 'each_cons' for #<String:0x0000000564a608>` Any\
    \ ideas?\n<|/ c |>\n<| c |>\nI added a link to the Rails API docs for each_cons.\
    \ I hope that helps.\n<|/ c |>\n<| c |>\nThanks. I added the link to the Rails\
    \ API docs for each_cons. I hope that helps.\n<|/ c |>\n<| c |>\nThanks again.\
    \ I'm getting an error when I try to run your code. `undefined method 'each_cons'\
    \ for #<String:0x0000000564a608>` Any ideas?\n<|/ c |>\n<| c |>\nI added a link\
    \ to the Rails API docs for each_cons. I hope that helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"\
    footer\">\n<div id=\"footer-text\">\nLast updated 2016-04-20 13:46:42 +02:00\n\
    </div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\n\
    `each_cons(3)` will give `[[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\"\
    , \"h\", \"i\"]]` which is not what OP wants.\n<|/ c |>\n<| c |>\nI missed that\
    \ requirement. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that will work with any number of letters.\n<|/ c |>\n<| c |>\nThanks for your\
    \ solution. My solution is working fine but i want to know why my code is not\
    \ working and why my code is not working in ruby 2.4.1\n<|/ c |>\n<| c |>\nI added\
    \ a solution that will work with any number of letters.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  s.split('').all? do |char|\n    char.upcase == char.downcase\n\
    \  end\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", " \
    \ s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", "  s.chars.each_with_index.all?\
    \ do |letter, index|\n    index.odd? && letter == letter\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.length == 3 }\nend", "  return s.length >= 3 and s.chars.all? {\
    \ |c| c.is_a?(String) and c.length == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n\
    </div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\"><div\
    \ class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"\
    text_cell_render border-box-sizing rendered_html\">\n<p>Now let's see how we can\
    \ use <code>all?</code> to check if a string is happy or not:</p>", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == 3\n  end\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    if i % 3 == 0 && char != s[i - 1] && char != s[i + 1] && char\
    \ != s[i + 2]\n      return false\n    end\n  end\n  return true\nend", "  s.each_char.all?\
    \ { |c| c.upcase != c.downcase }\nend", "  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[^a-z", "  s.chars.each_cons(3).all? do |s|\n    not s.uniq.length\
    \ >= 3\n  end\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.length == 3 }\n\
    end", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == 3\n\
    \  end\nend", "  s.chars.each_with_index do |letter, index|\n    if index > 0\
    \ and s[index-1] == letter\n      return false\n    end\n  end\n  return true\n\
    end", "  s.chars.each_cons(3).all? do |c|\n    !c.uniq.empty?\n  end\nend\n</pre>\n\
    </div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\"\
    >\nLast updated 2017-03-26 23:53:39 CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nI believe this answer should be accepted as the correct\
    \ one. Thanks !\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  return s.length >= 3\
    \ && s.chars.all? { |c| s.count(c) == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.each_char.with_index.all? { |c, i| c.to_i\
    \ != c.to_i }\nend", "  s.each_char.all? { |c| c.is_a?(String) && c.length >=\
    \ 3 }\nend\nis_happy(\"abracadabra\") #=> true\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #", "  s.chars.each_cons(3).all? do |chars|\n\
    \    chars.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? { |a,b,c|\
    \ a.to_i != b.to_i && a.to_i != c.to_i }\nend\n</code>\n<|/ a tags=ruby |>\n<|\
    \ c |>\n`each_cons(3)` will give `[[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"\
    ], [\"a\", \"b\", \"c\"]]` so `all?` will always return `true`\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I was thinking about a more general solution\
    \ that would allow for strings of any length. I'll update my answer.\n<|/ c |>\n\
    <| c |>\n`each_cons(3)` will give `[[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"\
    ], [\"a\", \"b\", \"c\"]]` so `all?` will always return `true`\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I was thinking about a more general solution\
    \ that would allow for strings of any length. I'll update my answer.\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  s.split(//).each do |letter|\n    letters.include?(letter)\n\
    \  end\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation, hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you please explain\
    \ how this works?\n<|/ c |>\n<| c |>\nI added some explanation, hope it helps.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size\
    \ == 3 }\nend", "  s.gsub!(/[^a-z]/i, '')\n  return s.size >= 3 && s.chars.uniq.size\
    \ == s.size\nend", "  s.chars.each_cons(3).all? { |a,b,c| a.to_s != b.to_s &&\
    \ b.to_s != c.to_s }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size ==\
    \ 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.length == 3 }\nend", " \
    \ s.chars.each_cons(3).all? { |c| c.uniq.size == 1 }\nend\nis_happy(\"abracadabra\"\
    ) #=> true\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\n", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend", "  s.split(//).length\
    \ >= 3 and s.split(//).all? { |x| x.count(x) == 1 }\nend", "  s.chars.each_cons(3).all?\
    \ do |chars|\n    chars.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all?\
    \ do |c|\n    !c.uniq.length\n  end\nend", "  s.chars.each_with_index do |letter,\
    \ index|\n    if index > 0 and s[index-1] == letter\n      return false\n    end\n\
    \  end\n  return true\nend\nis_happy(\"happy\") # => true\nis_happy(\"happyp\"\
    ) # => false\nis_happy(\"happypp\") # => false\nis_happy(\"happyppp\") # => true\n\
    is_happy(\"happypppp\") # => false\nis_happy(\"happyppppp\") # => false\nis_happy(\"\
    happypppppp\") # => true\nis_happy(\"happyppppppp\") # => false\nis_happy(\"happypppppppp\"\
    ) # => false\nis_happy(\"happyppppppppp\") # => false\nis_happy(\"happypppppppppp\"\
    ) # => true\nis_happy(\"happyppppppppppp\") # => false\nis_happy(\"happypppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppp\") # => false\nis_happy(\"happypppppppppppppp\"\
    ) # => true\nis_happy(\"happyppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppp\"\
    ) # => true\nis_happy(\"happyppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => true\nis_happy(\"happypppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => false\nis_happy(\"happyppppppppppppppppppp\") # => false\nis_happy(\"happyppppppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => false\nis_happy(\"happypppppppppppppppppp\") # => false\nis_happy(\"happypppppppppppppppppp\"\
    ) # => false\nis_", "  s.split('').all? { |c| c.length >= 3 && c.split('').uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size == c.size }\nend",
  "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>",
  "  s.each_char.with_index do |char, i|\n    next if i == 0\n    next if char ==\
    \ s[i-1]\n    next if char == s[i-2]\n    next if char == s[i-3]\n    next if\
    \ char == s[i-4]\n    next if char == s[i-5]\n    next if char == s[i-6]\n   \
    \ next if char == s[i-7]\n    next if char == s[i-8]\n    next if char == s[i-9]\n\
    \    next if char == s[i-10]\n    next if char == s[i-11]\n    next if char ==\
    \ s[i-12]\n    next if char == s[i-13]\n    next if char == s[i-14]\n    next\
    \ if char == s[i-15]\n    next if char == s[i-16]\n    next if char == s[i-17]\n\
    \    next if char == s[i-18]\n    next if char == s[i-19]\n    next if char ==\
    \ s[i-20]\n    next if char == s[i-21]\n    next if char == s[i-22]\n    next\
    \ if char == s[i-23]\n    next if char == s[i-24]\n    next if char == s[i-25]\n\
    \    next if char == s[i-26]\n    next if char == s[i-27]\n    next if char ==\
    \ s[i-28]\n    next if char == s[i-29]\n    next if char == s[i-30]\n    next\
    \ if char == s[i-31]\n    next if char == s[i-32]\n    next if char == s[i-33]\n\
    \    next if char == s[i-34]\n    next if char == s[i-35]\n    next if char ==\
    \ s[i-36]\n    next if char == s[i-37]\n    next if char == s[i-38]\n    next\
    \ if char == s[i-39]\n    next if char == s[i-40]\n    next if char == s[i-41]\n\
    \    next if char == s[i-42]\n    next if char == s[i-43]\n    next if char ==\
    \ s[i-44]\n    next if char == s[i-45]\n    next if char == s[i-46]\n    next\
    \ if char == s[i-47]\n    next if char == s[i-48]\n    next if char == s[i-49]\n\
    \    next if char == s[i-50]\n    next if char == s[i-51]\n    next if char ==\
    \ s[i-52]\n    next if char", "  s.chars.each_cons(3).all? do |s|\n    not s.uniq.length\
    \ >= 3\n  end\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.length == 3 }\n\
    end\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div\
    \ id=\"footer-text\">\nLast updated 2016-03-19 12:54:39 CDT\n</div>\n</div>\n\
    </body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Your solution works but I am looking for a more efficient solution. I am looking\
    \ for a solution which does not require to create an array and use uniq. I am\
    \ looking for a solution which does not require to create an array and use uniq.\
    \ I am looking for a solution which does not require to create an array and use\
    \ uniq. I am looking for a solution which does not require to create an array\
    \ and use uniq. I am looking for a solution which does not require to create an\
    \ array and use uniq. I am looking for a solution which does not require to create\
    \ an array and use uniq. I am looking for a solution which does not require to\
    \ create an array and use uniq. I am looking for a solution which does not require\
    \ to create an array and use uniq. I am looking for a solution which does not\
    \ require to create an array and use uniq. I am looking for a solution which does\
    \ not require to create an array and use uniq. I am looking for a solution which\
    \ does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq. I am looking for a solution\
    \ which does not require to create an array and use uniq", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.eql?(b) and b.eql?(c) }\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", " \
    \ s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == 3\n  end\n\
    end", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == 3\n\
    \  end\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend\n</pre>\n\
    <p>\n  Note that <code>each_cons</code> returns an enumerator, so you can call\
    \ <code>all?</code> on it.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use <code>each_cons(3)</code> to return an enumerator that yields 3\
    \ elements at a time.\n</p>\n<p>\n  You can also use <code>each_cons(3)</code>\
    \ to return an enumerator that yields 3 elements at a time.\n</p>\n<p>\n  You\
    \ can also use ", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"\
    footer\">\n<div id=\"footer-text\">\nLast updated 2016-03-19 12:53:39 UTC\n</div>\n\
    </div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I tried to run your code, but I got this error: `undefined method 'each_cons'\
    \ for \"hello\":String`. Any ideas why?\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a link to the Ruby docs for each_cons.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tried to run your code, but I got this error: `undefined\
    \ method 'each_cons' for \"hello\":String`. Any ideas why?\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a link to the Ruby docs for each_cons.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got this error:\
    \ `undefined method 'each_cons' for \"hello\":String`. Any ideas why?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  s.split('').each do |letter|\n    next if letter\
    \ == letter\n    next if letter == letter + letter\n    next if letter == letter\
    \ + letter + letter\n    puts \"#{letter} is happy\"\n    break\n  end\nend",
  "  s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\n`each_cons(3)` will give the wrong result for strings of length\
    \ `3`\n<|/ c |>\n<| c |>\nI fixed the code so it works for strings of length 3\n\
    <|/ c |>\n<| c |>\n`each_cons(3)` will give the wrong result for strings of length\
    \ `3`\n<|/ c |>\n<| c |>\nI fixed the code so it works for strings of length 3\n\
    <|/ c |>\n<| c |>\n`each_cons(3)` will give the wrong result for strings of length\
    \ `3`\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.size == c.size }\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend\n</pre>\n<p>\n  Write a method <code>is_happy</code>\
    \ that takes one argument <code>s</code>.\n  It should return <code>true</code>\
    \ if the string is happy and <code>false</code> otherwise.\n</p>\n<pre>", "  s.chars.each_cons(3).all?\
    \ do |chars|\n    chars.uniq.size == 3\n  end\nend", "  s.split('').each do |letter|\n\
    \    if letter.to_i != letter.to_i\n      return false\n    end\n  end\n  return\
    \ true\nend", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == 3\n  end\nend\nis_happy(\"happy\") #=> true\nis_happy(\"happyp\") #=> false\n\
    is_happy(\"happypp\") #=> true\nis_happy(\"happyppp\") #=> false\nis_happy(\"\
    happypppp\") #=> true\nis_happy(\"happyppppp\") #=> false\nis_happy(\"happypppppp\"\
    ) #=> true\nis_happy(\"happyppppppp\") #=> false\nis_happy(\"happypppppppp\")\
    \ #=> true\nis_happy(\"happyppppppppp\") #=> false\nis_happy(\"happyppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppp\") #=> false\nis_happy(\"happyppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppp\") #=> false\nis_happy(\"happyppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppp\"\
    ) #=> true\nis_happy(\"happyppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happyppppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> true\nis_happy(\"happypppppppppppppppppp\") ", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size\
    \ == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing\
    \ text_cell rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"\
    inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\"\
    >\n<p>Now let's see how we can use <code>each_cons</code> to solve the problem:</p>",
  "  s.chars.each_with_index.all? do |char, i|\n    char == s[i..i+3]\n  end\nend",
  "  s.each_char.with_index.all? do |letter, index|\n    index.odd? && letter == letter\
    \ + letter\n  end\nend\nis_happy(\"happy\") #=> true\nis_happy(\"happyp\") #=>\
    \ false\nis_happy(\"happypp\") #=> false\nis_happy(\"happyppp\") #=> true\nis_happy(\"\
    happypppp\") #=> false\nis_happy(\"happyppppp\") #=> false\nis_happy(\"happypppppp\"\
    ) #=> false\nis_happy(\"happyppppppp\") #=> false\nis_happy(\"happypppppppp\"\
    ) #=> false\nis_happy(\"happyppppppppp\") #=> false\nis_happy(\"happypppppppppp\"\
    ) #=> true\nis_happy(\"happyppppppppppp\") #=> false\nis_happy(\"happypppppppppppp\"\
    ) #=> false\nis_happy(\"happyppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppppp\") #=> false\nis_happy(\"happypppppppppppppppppppp\"\
    ) #=> false\nis_happy(\"happypppppppppppppppppppp\") #=> false\nis_happy(\"happyppppppppppppppppppppp",
  "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ { |c| c.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div\
    \ class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<p>Let's test our function</p>", "  return s.length >= 3 &&\
    \ s.chars.all?(&:distinct?)\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", " \
    \ s.gsub!(/[^a-z]/,'')\n  return s.length >= 3 && s.chars.uniq.size == s.length\n\
    end", "  return s.length >= 3 && s.chars.all? { |c| s.count(c) == 3 }\nend\n</pre>\n\
    </div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Now let's\
    \ try it out!</p>", "  s.split('').each do |letter|\n    next if letter == letter\n\
    \    next if letter == letter + letter\n    next if letter == letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter\n    next\
    \ if letter == letter + letter + letter + letter + letter\n    next if letter\
    \ == letter + letter + letter + letter + letter + letter\n    next if letter ==\
    \ letter + letter + letter + letter + letter + letter + letter\n    next if letter\
    \ == letter + letter + letter + letter + letter + letter + letter + letter\n \
    \   next if letter == letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter\n    next if letter == letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter\n    next if letter == letter\
    \ + letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter\n    next if letter\
    \ == letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter\n    next if letter == letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter\n    next if letter == letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter\n    next if letter == letter + letter + letter + letter + letter +\
    \ letter + letter + letter + letter + letter + letter + letter + letter + letter\n\
    \    next if letter == letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter + letter\n    next if\
    \ letter == letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter + letter\n    next if\
    \ letter == letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter + letter\n    next if\
    \ letter == letter + letter + letter + letter + letter + letter + letter + letter\
    \ + letter + letter + letter + letter + letter + letter + letter\n    next if\
    \ letter == letter + letter + letter + letter + letter + letter + letter + letter\
    \ + ", "  s.split(//).all? do |letter|\n    letters.include?(letter)\n  end\n\
    end\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div\
    \ id=\"footer-text\">\nLast updated 2017-03-07 17:32:11 CEST\n</div>\n</div>\n\
    </body>\n</html>\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <| c |>\nThanks for your answer. Can you please explain me what does this line\
    \ do? `s.split(//).all? do |letter|`\n<|/ c |>\n<| c |>\n`split` will split your\
    \ string into an array of characters. `all?` will check if all elements in the\
    \ array are truthy. `letter` will iterate over each element in the array and check\
    \ if it is truthy\n<|/ c |>\n<| c |>\nThanks. I understand now. One more question.\
    \ Why do we need to use `all?` here? `s.split(//).include?(letter)` will also\
    \ do the same thing. Isn't it?\n<|/ c |>\n<| c |>\n`include?` will check if a\
    \ character is present in the string. `all?` will check if all elements in the\
    \ array are truthy\n<|/ c |>\n<| c |>\nThanks. One more question. Why do we need\
    \ to use `all?` here? `s.split(//).include?(letter)` will also do the same thing.\
    \ Isn't it?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>",
  "  s.chars.each_with_index do |char, i|\n    next if i == 0\n    next if char ==\
    \ s[i-1]\n    next if char == s[i-2]\n    next if char == s[i-3]\n    next if\
    \ char == s[i-4]\n    next if char == s[i-5]\n    next if char == s[i-6]\n   \
    \ next if char == s[i-7]\n    next if char == s[i-8]\n    next if char == s[i-9]\n\
    \    next if char == s[i-10]\n    next if char == s[i-11]\n    next if char ==\
    \ s[i-12]\n    next if char == s[i-13]\n    next if char == s[i-14]\n    next\
    \ if char == s[i-15]\n    next if char == s[i-16]\n    next if char == s[i-17]\n\
    \    next if char == s[i-18]\n    next if char == s[i-19]\n    next if char ==\
    \ s[i-20]\n    next if char == s[i-21]\n    next if char == s[i-22]\n    next\
    \ if char == s[i-23]\n    next if char == s[i-24]\n    next if char == s[i-25]\n\
    \    next if char == s[i-26]\n    next if char == s[i-27]\n    next if char ==\
    \ s[i-28]\n    next if char == s[i-29]\n    next if char == s[i-30]\n    next\
    \ if char == s[i-31]\n    next if char == s[i-32]\n    next if char == s[i-33]\n\
    \    next if char == s[i-34]\n    next if char == s[i-35]\n    next if char ==\
    \ s[i-36]\n    next if char == s[i-37]\n    next if char == s[i-38]\n    next\
    \ if char == s[i-39]\n    next if char == s[i-40]\n    next if char == s[i-41]\n\
    \    next if char == s[i-42]\n    next if char == s[i-43]\n    next if char ==\
    \ s[i-44]\n    next if char == s[i-45]\n    next if char == s[i-46]\n    next\
    \ if char == s[i-47]\n    next if char == s[i-48]\n    next if char == s[i-49]\n\
    \    next if char == s[i-50]\n    next if char == s[i-51]\n    next if char ==\
    \ s[i-52]\n    next if char", "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size\
    \ == letters.size\n  end\nend", "  s.each_char.all? { |c| c.upcase != c.downcase\
    \ }\nend", "  s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == 3\n  end\nend", "  return s.length >=\
    \ 3 && s.chars.all? { |c| s.count(c) == 3 }\nend", "  s.chars.each_cons(3).all?\
    \ do |chars|\n    chars.uniq.size == chars.size\n  end\nend", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n\
    <div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2015-08-30 17:24:33\
    \ CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I tried your solution and it works perfectly. However\
    \ I still don't understand why my code didn't work. Could you please explain why\
    \ my code didn't work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. I still don't understand why my\
    \ code didn't work. Could you please explain why my code didn't work?\n<|/ c |>\n\
    <| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", " \
    \ s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend\nis_happy('abracadabra')",
  "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend", "  return s.length\
    \ >= 3 and s.chars.all?(:distinct?)\nend", "  s.split('').each do |letter|\n \
    \   next if letter == letter\n    next if s.count(letter) != 3\n    break\n  end\n\
    \  true\nend", "  s.split('').all? { |c| c.length == 3 && c.split('').uniq.size\
    \ == 3 }\nend", "  return s.length >= 3 and s.chars.all? { |c| c.is_a?(String)\
    \ and c.length == 3 }\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div\
    \ id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2017-03-26 23:24:39 CEST\n\
    </div>\n</div>\n</body>\n</html>\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nThanks for your answer. I am still getting an error though. `undefined\
    \ method `chars' for #<String:0x0000000564e790>`\n<|/ c |>\n<| c |>\nI added the\
    \ full code of the controller and the view to my original post. Maybe you can\
    \ spot what I am doing wrong?\n<|/ c |>\n<| c |>\nI added the full code of the\
    \ controller and the view to my original post. Maybe you can spot what I am doing\
    \ wrong?\n<|/ c |>\n<| c |>\nI added the full code of the controller and the view\
    \ to my original post. Maybe you can spot what I am doing wrong?\n<|/ c |>\n<|\
    \ c |>\nI added the full code of the controller and the view to my original post.\
    \ Maybe you can spot what I am doing wrong?\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  s.chars.each_cons(3).all? do |letters|\n    letters.uniq.size == letters.size\n\
    \  end\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell\
    \ border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\n\
    </div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<h2 id=\"Exercise-2\">Exercise<a class=\"anchor-link\" href=\"\
    #Exercise-2\">&#182;</a></h2><p>Write a function that takes a string and returns\
    \ the number of vowels contained in the string.</p>\n<p>Hint: Use <code>s.chars.count</code>\
    \ and <code>s.chars.include?</code>.</p>", "  s.chars.each_cons(3).all? { |a|\
    \ a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size ==\
    \ 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 1 }\nend", "  s.chars.each_cons(3).all?\
    \ do |letters|\n    letters.uniq.size == 3\n  end\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2016-03-26 19:31:11 UTC\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ q |>\n\
    <| c |>\nPlease post the code in the question itself and not as an external link.\
    \ Also, please explain what exactly is wrong with your current code.\n<|/ c |>\n\
    <| c |>\nI posted the code in the question, thank you for the suggestion.\n<|/\
    \ c |>\n<| c |>\nPlease post the code in the question itself and not as an external\
    \ link. Also, please explain what exactly is wrong with your current code.\n<|/\
    \ c |>\n<| c |>\nI posted the code in the question, thank you for the suggestion.\n\
    <|/ c |>\n<| c |>\nPlease post the code in the question itself and not as an external\
    \ link. Also, please explain what exactly is wrong with your current code.\n<|/\
    \ c |>\n<| a |>\nThe problem is with your each_cons method. You're not returning\
    \ anything from it, so it returns nil. You're also not using the letters variable\
    \ anywhere, so it also returns nil.\nTry this instead:\n<code>", "  s.chars.each_cons(3).all?\
    \ { |a| a.uniq.size == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size\
    \ == 3 }\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size == 3 }\nend\n</pre>\n\
    </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Now let's\
    \ see how we can use <code>each_cons</code> to solve the problem:</p>", "  s.chars.each_cons(3).all?\
    \ { |a,b,c| a.to_i != b.to_i && a.to_i != c.to_i }\nend\nis_happy(\"abracadabra\"\
    ) #=> true\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abracadabraz\") #=>\
    \ false\nis_happy(\"abracadabraz\") #=> false\nis_happy(\"abrac", "  s.each_char.all?\
    \ { |c| c.upcase != c.downcase }\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == 3\n  end\nend", "  s.chars.each_cons(3).all? do |letters|\n\
    \    letters.uniq.size == letters.size\n  end\nend\n</pre>\n</div>\n</div>\n</div>\n\
    </div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2017-03-07\
    \ 17:32:11 CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got this error:\
    \ ```undefined method `each_cons' for \"a\":String```\n<|/ c |>\n<| c |>\nI updated\
    \ my answer, I forgot to add `chars` to `each_cons`. Now it should work.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got this\
    \ error: ```undefined method `each_cons' for \"a\":String```\n<|/ c |>\n<| c |>\n\
    I updated my answer, I forgot to add `chars` to `each_cons`. Now it should work.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got\
    \ this error: ```undefined method `each_cons' for \"a\":String```\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  s.split('').each do |letter|\n  \
    \  letters.include?(letter)\n  end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    `s.split('').each_cons(3).all?{|a| a.uniq.length == 3}`\n<|/ c |>\n<| c |>\n`s.split('').each_cons(3).all?{|a|\
    \ a.uniq.length == 3}`\n<|/ c |>\n<| c |>\n`s.split('').each_cons(3).all?{|a|\
    \ a.uniq.length == 3}`\n<|/ c |>\n<| c |>\n`s.split('').each_cons(3).all?{|a|\
    \ a.uniq.length == 3}`\n<|/ c |>\n<| c |>\n`s.split('').each_cons(3).all?{|a|\
    \ a.uniq.length == 3}`\n<|/ c |>\n<| a |>\n<code>", "  s.each_char.with_index\
    \ do |char, i|\n    if i % 3 == 0 && char != s[i-1]\n      return false\n    end\n\
    \  end\n  return true\nend", "  s.chars.each_cons(3).all? { |a| a.uniq.size ==\
    \ 3 }\nend", "  s.split('').each do |letter|\n    next if letter.eql?(letter)\n\
    \    next if letter.eql?(letter)\n    next if letter.eql?(letter)\n    puts \"\
    #{letter} is happy\"\n    break\n  end\n  puts \"#{letter} is not happy\"\nend\n\
    is_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\"\
    )\nis_happy(\"abracadabra\")\nis_happy(\"abracadabra\")\n", "  return s.length\
    \ >= 3 && s.chars.all? { |c| c.is_a?(String) && c.length == 3 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
