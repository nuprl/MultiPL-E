name: HumanEval_17_parse_music
language: rb
prompt: "# Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n# Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
  # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
  \ - quater note, lasts one beat\ndef parse_music(music_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
  \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
  \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4,\
  \ 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1,\
  \ 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
completions: ["  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|.])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/o|\\.\\|/).map { |note| note.size }\nend", " \
    \ music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count }\n\
    end", "  music_notes = music_string.split('|')\n  music_notes.each do |note|\n\
    \    note = note.strip\n    note = note.downcase\n    note = note.gsub(/[^a-z]/,\
    \ '')\n    note = note.gsub(/[^0-9]/, '')\n    note = note.gsub(/[^A-Z]/, '')\n\
    \    note = note.gsub(/[^A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n\
    \    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(/[^0-9A-Za-z]/,\
    \ '')\n    note = note.gsub(/[^0-9A-Za-z]/, '')\n    note = note.gsub(", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\d])\\1*/) do |beats|\n      beats.to_i\n  \
    \  end\n  end\nend", "  music_string.scan(/[\\.\\|\\-]\\z/).map { |note| note.size\
    \ }\nend", "  music_string.scan(/./).map do |note|\n    note.scan(/./).map do\
    \ |beat|\n      beat.to_i\n    end\n  end\nend", "  music_notes = music_string.split(\"\
    |\")\n  music_notes.each do |note|\n    note = note.split(\"o\")\n    note[0]\
    \ = note[0].to_i\n    note[1] = note[1].to_i\n    note[2] = note[2].to_i\n   \
    \ note[3] = note[3].to_i\n    note[4] = note[4].to_i\n    note[5] = note[5].to_i\n\
    \    note[6] = note[6].to_i\n    note[7] = note[7].to_i\n    note[8] = note[8].to_i\n\
    \    note[9] = note[9].to_i\n    note[10] = note[10].to_i\n    note[11] = note[11].to_i\n\
    \    note[12] = note[12].to_i\n    note[13] = note[13].to_i\n    note[14] = note[14].to_i\n\
    \    note[15] = note[15].to_i\n    note[16] = note[16].to_i\n    note[17] = note[17].to_i\n\
    \    note[18] = note[18].to_i\n    note[19] = note[19].to_i\n    note[20] = note[20].to_i\n\
    \    note[21] = note[21].to_i\n    note[22] = note[22].to_i\n    note[23] = note[23].to_i\n\
    \    note[24] = note[24].to_i\n    note[25] = note[25].to_i\n    note[26] = note[26].to_i\n\
    \    note[27] = note[27].to_i\n    note[28] = note[28].to_i\n    note[29] = note[29].to_i\n\
    \    note[30] = note[30].to_i\n    note[31] = note[31].to_i\n    note[32] = note[32].to_i\n\
    \    note[33] = note[33].to_i\n    note[34] = note[34].to_i\n    note[35] = note[35].to_i\n\
    \    note[36] = note[36].to_i\n    note[37] = note[37].to_i\n    note[38] = note[38].to_i\n\
    \    note[39] = note[39].to_i\n    note[40] = note[40].to_i\n    note[41] = note[41].to_i\n\
    \    note[42] = note[42].to_i\n    note[43] = note", "  music_string.scan(/./).map\
    \ { |note| note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase\
    \ == '.|' ? 1 : 0 }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\\
    .])/).count }\nend", "  music_notes = music_string.split('|')\n  music_notes.each\
    \ do |note|\n    note = note.strip\n    note = note.upcase\n    note = note.gsub('o',\
    \ '0')\n    note = note.gsub('O', '0')\n    note = note.gsub('|', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')\n    note = note.gsub(';', '0')\n    note = note.gsub('=',\
    \ '0')\n    note = note.gsub('?', '0')\n    note = note.gsub('!', '0')\n    note\
    \ = note.gsub(',', '0')", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\\
    d+/).map(&:to_i) }\nend", "  music_string.scan(/./).map { |note| note.chr }\n\
    end", "  music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([\\d])\\\
    1*/) do |beats|\n      beats.to_i\n    end\n  end\nend", "  music_string.scan(/o|\\\
    .\\|/).map do |note|\n    note.scan(/\\d+/).map(&:to_i)\n  end\nend", "  music_notes\
    \ = music_string.split(\"|\")\n  music_notes.each do |note|\n    note = note.strip\n\
    \    note = note.split(\"\")\n    note.each do |char|\n      char = char.downcase\n\
    \      note_count = notes.key?(char) ? notes[char] : 0\n      note_count = note_count\
    \ + 1\n      notes[char] = note_count\n    end\n  end\nend", "  music_string.scan(/[\\\
    .\\|\\-]\\z/).map do |note|\n    note.upcase\n  end\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\d])\\1*/) do |beats|\n      beats.to_i\n  \
    \  end\n  end\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.count('o')\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\d+/).map(&:to_i)\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_notes = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  music_notes_length = []\n  music_notes_length\
    \ = []\n  music_notes_length = []\n  musi", "  music_string.scan(/([a-z])\\|/).map\
    \ { |note| note.last(2) }\nend", "  music_string.scan(/([a-z])\\|/).map { |note|\
    \ note.scan(/([o|\\.])/).count }\nend", "  music_string.scan(/([a-z])\\|/).map\
    \ { |note| note.scan(/([a-z])/).count }\nend", "  music_notes = []\n  music_notes_length\
    \ = []\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_", "  music_notes = music_string.split('|')\n\
    \  music_notes.each do |note|\n    note = note.strip\n    note = note.downcase\n\
    \    note = note.gsub('o', '0')\n    note = note.gsub('o|', '0')\n    note = note.gsub('.|',\
    \ '0')\n    note = note.gsub('0', 'o')\n    note = note.gsub('1', 'o|')\n    note\
    \ = note.gsub('2', 'o|')\n    note = note.gsub('3', 'o|')\n    note = note.gsub('4',\
    \ 'o|')\n    note = note.gsub('5', 'o|')\n    note = note.gsub('6', 'o|')\n  \
    \  note = note.gsub('7', 'o|')\n    note = note.gsub('8', 'o|')\n    note = note.gsub('9',\
    \ 'o|')\n    note = note.gsub('0', 'o|')\n    note = note.gsub('1', 'o|')\n  \
    \  note = note.gsub('2', 'o|')\n    note = note.gsub('3', 'o|')\n    note = note.gsub('4',\
    \ 'o|')\n    note = note.gsub('5', 'o|')\n    note = note.gsub('6', 'o|')\n  \
    \  note = note.gsub('7', 'o|')\n    note = note.gsub('8', 'o|')\n    note = note.gsub('9',\
    \ 'o|')\n    note = note.gsub('0', 'o|')\n    note = note.gsub('1', 'o|')\n  \
    \  note = note.gsub('2', 'o|')\n    note = note.gsub('3', 'o|')\n    note = note.gsub('4',\
    \ 'o|')\n    note = note.gsub('5', 'o|')\n    note = note.gsub('6', 'o|')\n  \
    \  note = note.gsub('7', 'o|')\n    note = note.gsub('8', 'o|')\n    note = note.gsub('9',\
    \ 'o|')\n    note = note.gsub('0', 'o|')\n    note = note.gsub('1', 'o|')\n  \
    \  note = note.gsub('2', 'o|')\n    note = note.gsub('3', 'o|')\n    note = note.gsub('4',\
    \ 'o|')\n    note = note.gsub('5', 'o|", "  music_notes = music_string.split('|')\n\
    \  music_notes.each do |note|\n    note = note.strip\n    note = note.gsub('o',\
    \ '0')\n    note = note.gsub('o|', '0')\n    note = note.gsub('.|', '0')\n   \
    \ note = note.gsub('0', 'o')\n    note = note.gsub('1', 'o|')\n    note = note.gsub('2',\
    \ '.|')\n    note = note.gsub('3', 'o|')\n    note = note.gsub('4', 'o|')\n  \
    \  note = note.gsub('5', 'o|')\n    note = note.gsub('6', 'o|')\n    note = note.gsub('7',\
    \ 'o|')\n    note = note.gsub('8', 'o|')\n    note = note.gsub('9', 'o|')\n  \
    \  note = note.gsub('10', 'o|')\n    note = note.gsub('11', 'o|')\n    note =\
    \ note.gsub('12', 'o|')\n    note = note.gsub('13', 'o|')\n    note = note.gsub('14',\
    \ 'o|')\n    note = note.gsub('15', 'o|')\n    note = note.gsub('16', 'o|')\n\
    \    note = note.gsub('17', 'o|')\n    note = note.gsub('18', 'o|')\n    note\
    \ = note.gsub('19', 'o|')\n    note = note.gsub('20', 'o|')\n    note = note.gsub('21',\
    \ 'o|')\n    note = note.gsub('22', 'o|')\n    note = note.gsub('23', 'o|')\n\
    \    note = note.gsub('24', 'o|')\n    note = note.gsub('25', 'o|')\n    note\
    \ = note.gsub('26', 'o|')\n    note = note.gsub('27', 'o|')\n    note = note.gsub('28',\
    \ 'o|')\n    note = note.gsub('29', 'o|')\n    note = note.gsub('30', 'o|')\n\
    \    note = note.gsub('31', 'o|')\n    note = note.gsub('32', 'o|')\n    note\
    \ = note.gsub('33', 'o|')\n    note = note.gsub('34', 'o|')\n    ", "  music_string.scan(/[\\\
    .\\|o\\|]\\z/)\nend", "  music_notes = music_string.split('|')\n  music_notes.map!\
    \ { |note| note.split(\"o\").map(&:to_i) }\n  music_notes.map! { |note| note.map(&:to_i).reduce(:+)\
    \ }\n  music_notes.map! { |note| note % 12 + 12 }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.scan(/\\d+/).map(&:to_i) }\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_notes = music_string.split('|')\n\
    \  music_notes.each do |note|\n    note = note.strip\n    note = note.downcase\n\
    \    note = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/o|o/, 'o')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')\n    note\
    \ = note.gsub(/[\\.\\s]/, '')\n    note = note.gsub(/[\\.\\s]/, '')", "  music_string.scan(/([o|.])\\\
    |/).map { |note| note.scan(/\\d+/).map(&:to_i) }\nend", "  music_string.scan(/[\\\
    .\\|\\-]\\z/).map { |note| note.size }\nend", '  music_string.scan(/[\.\|\-]|\/|\+|\*|\#|\(|\)|\[|\]|o|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o\|\.\|o',
  "  music_notes = music_string.split('|')\n  music_notes.map! { |note| note.split(//)\
    \ }\n  music_notes.map! { |note| note.map! { |note| note.to_i } }\n  music_notes.map!\
    \ { |note| note.map! { |note| note.to_i } }\n  music_notes.map! { |note| note.map!\
    \ { |note| note.to_i } }\n  music_notes.map! { |note| note.map! { |note| note.to_i\
    \ } }\n  music_notes.map! { |note| note.map! { |note| note.to_i } }\n  music_notes.map!\
    \ { |note| note.map! { |note| note.to_i } }\n  music_notes.map! { |note| note.map!\
    \ { |note| note.to_i } }\n  music_notes.map! { |note| note.map! { |note| note.to_i\
    \ } }\n  music_notes.map! { |note| note.map! { |note| note.to_i } }\n  music_notes.map!\
    \ { |note| note.map! { |note| note.to_i } }\n  music_notes.map! { |note| note.map!\
    \ { |note| note.to_i } }\n  music_notes.map! { |note| note.map! { |note| note.to_i\
    \ } }\n  music_notes.map! { |note| note.map! { |note| note.to_i } }\n  music_notes.map!\
    \ { |note| note.map! { |note| note.to_i } }\n  music_notes.map! { |note| note.map!\
    \ { |note| note.to_i } }\n  music_notes.map! { |note| note.map! { |note| note.to_i\
    \ } }\n  music_notes.map! { |note| note.map! { |note| note.to_i } }\n  music_notes.map!\
    \ { |note| note.map! { |note| note.to_i } }\n  music_notes.map! { |note| note.map!\
    \ { |note| note.to_i } }\n  music_notes.map! { |note| note.map! { |note| note.to_i\
    \ } }\n  musi", "  music_string.scan(/[\\.\\|\\-]|\\|/).map { |note| note.count('|')\
    \ }\nend", "  music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([\\\
    d])/) do |beats|\n      beats.to_i\n    end\n  end\nend", "  music_notes = music_string.split(\"\
    |\")\n  music_notes.each do |note|\n    note = note.split(\"o\")\n    note[0]\
    \ = note[0].to_i\n    note[1] = note[1].to_i\n    note[2] = note[2].to_i\n   \
    \ note[3] = note[3].to_i\n    note[4] = note[4].to_i\n    note[5] = note[5].to_i\n\
    \    note[6] = note[6].to_i\n    note[7] = note[7].to_i\n    note[8] = note[8].to_i\n\
    \    note[9] = note[9].to_i\n    note[10] = note[10].to_i\n    note[11] = note[11].to_i\n\
    \    note[12] = note[12].to_i\n    note[13] = note[13].to_i\n    note[14] = note[14].to_i\n\
    \    note[15] = note[15].to_i\n    note[16] = note[16].to_i\n    note[17] = note[17].to_i\n\
    \    note[18] = note[18].to_i\n    note[19] = note[19].to_i\n    note[20] = note[20].to_i\n\
    \    note[21] = note[21].to_i\n    note[22] = note[22].to_i\n    note[23] = note[23].to_i\n\
    \    note[24] = note[24].to_i\n    note[25] = note[25].to_i\n    note[26] = note[26].to_i\n\
    \    note[27] = note[27].to_i\n    note[28] = note[28].to_i\n    note[29] = note[29].to_i\n\
    \    note[30] = note[30].to_i\n    note[31] = note[31].to_i\n    note[32] = note[32].to_i\n\
    \    note[33] = note[33].to_i\n    note[34] = note[34].to_i\n    note[35] = note[35].to_i\n\
    \    note[36] = note[36].to_i\n    note[37] = note[37].to_i\n    note[38] = note[38].to_i\n\
    \    note[39] = note[39].to_i\n    note[40] = note[40].to_i\n    note[41] = note[41].to_i\n\
    \    note[42] = note[42].to_i\n    note[43] = note", "  music_string.scan(/./).map\
    \ do |note|\n    note.scan(/./).map do |char|\n      char.ord\n    end\n  end\n\
    end", "  music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([\\-0-9])/)\
    \ do |beats|\n      beats.to_i\n    end\n  end\nend", "  music_string.scan(/./).map\
    \ { |note| note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase\
    \ == '.|' ? 1 : 0 }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_notes = music_string.split(\"|\")\n  music_notes.each do |note|\n\
    \    note = note.strip\n    if note.start_with?(\"o\")\n      note = note[1..-1]\n\
    \      note = note.split(\"\")\n      note.each do |n|\n        notes[n] = notes[n].to_i\n\
    \      end\n      notes[note.first] = notes[note.first].to_i\n    end\n  end\n\
    end", "  music_string.scan(/[\\.\\|o\\|]\\z/)\nend", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\d])/) do |beats|\n      beats.to_i\n    end\n\
    \  end\nend", "  music_string.scan(/([o|\\.])\\1*/) do |note|\n    note.scan(/([\\\
    -])\\1*/) do |beat|\n      beat.scan(/([\\-])\\1*/) do |beat|\n        beat.scan(/([\\\
    -])\\1*/) do |beat|\n          beat.scan(/([\\-])\\1*/) do |beat|\n          \
    \  beat.scan(/([\\-])\\1*/) do |beat|\n              beat.scan(/([\\-])\\1*/)\
    \ do |beat|\n                beat.scan(/([\\-])\\1*/) do |beat|\n            \
    \      beat.scan(/([\\-])\\1*/) do |beat|\n                    beat.scan(/([\\\
    -])\\1*/) do |beat|\n                      beat.scan(/([\\-])\\1*/) do |beat|\n\
    \                        beat.scan(/([\\-])\\1*/) do |beat|\n                \
    \          beat.scan(/([\\-])\\1*/) do |beat|\n                            beat.scan(/([\\\
    -])\\1*/) do |beat|\n                              beat.scan(/([\\-])\\1*/) do\
    \ |beat|\n                                beat.scan(/([\\-])\\1*/) do |beat|\n\
    \                                  beat.scan(/([\\-])\\1*/) do |beat|\n      \
    \                              beat.scan(/([\\-])\\1*/) do |beat|\n          \
    \                            beat.scan(/([\\-])\\1*/) do |beat|\n            \
    \                            beat.scan(/([\\-])\\1*/) do |beat|\n            \
    \                              beat.scan(/([\\-])\\1*/) do |beat|\n          \
    \                                  beat.scan(/([\\-])\\1*/) do |beat|\n      \
    \                                        beat.scan(/([\\-])\\1*/) do |beat|\n\
    \                                                beat.scan(/([\\-])\\1*/) do |beat|\n\
    \                                                  beat.scan(/([\\-])\\1*/) do\
    \ |beat|\n                                                    beat.scan(/([\\\
    -])\\1*/) do |beat|\n                                                      beat.scan(/([\\\
    -])\\1*/) do |beat|\n                                                        beat.scan(/([\\\
    -])\\1*/) do |beat|\n                                                        \
    \  beat.scan(/([\\-])\\1*/) do |beat|\n                                      \
    \                      beat.scan(/([\\-])\\1*/) do |beat|", "  music_string.scan(/./).map\
    \ { |note| note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase\
    \ == '.|' ? 1 : 0 }\nend", "  music_string.scan(/./).map do |note|\n    note.scan(/./).map\
    \ do |chord|\n      chord.scan(/./).map do |chord|\n        chord.scan(/./).map\
    \ do |chord|\n          chord.scan(/./).map do |chord|\n            chord.scan(/./).map\
    \ do |chord|\n              chord.scan(/./).map do |chord|\n                chord.scan(/./).map\
    \ do |chord|\n                  chord.scan(/./).map do |chord|\n             \
    \       chord.scan(/./).map do |chord|\n                      chord.scan(/./).map\
    \ do |chord|\n                        chord.scan(/./).map do |chord|\n       \
    \                   chord.scan(/./).map do |chord|\n                         \
    \   chord.scan(/./).map do |chord|\n                              chord.scan(/./).map\
    \ do |chord|\n                                chord.scan(/./).map do |chord|\n\
    \                                  chord.scan(/./).map do |chord|\n          \
    \                          chord.scan(/./).map do |chord|\n                  \
    \                    chord.scan(/./).map do |chord|\n                        \
    \                chord.scan(/./).map do |chord|\n                            \
    \              chord.scan(/./).map do |chord|\n                              \
    \              chord.scan(/./).map do |chord|\n                              \
    \                chord.scan(/./).map do |chord|\n                            \
    \                    chord.scan(/./).map do |chord|\n                        \
    \                          chord.scan(/./).map do |chord|\n                  \
    \                                  chord.scan(/./).map do |chord|\n          \
    \                                            chord.scan(/./).map do |chord|\n\
    \                                                        chord.scan(/./).map do\
    \ |chord|\n                                                          chord.scan(/./).map\
    \ do |chord|\n                                                            chord.scan(/./).map\
    \ do |chord|\n                                                              chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \ chord.scan(/./).map do |chord|\n                                           \
    \                       chord.scan(/./).map do |chord|\n                     \
    \                                               chord.scan(/./).map do |chord|\n\
    \                                                                    chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \     chord.scan(/./).map do |chord|\n                                       \
    \                             chord.scan(/./).map do |chord|\n               \
    \                                                     chord.scan(/./).map do |chord|\n\
    \                                                                    chord.scan(/./).map\
    \ do |chord", "  music_string.scan(/([a-z])\\|/) do |note|\n    note.scan(/([a-z])/)\
    \ do |note|\n      note.scan(/([a-z])/) do |note|\n        note.scan(/([a-z])/)\
    \ do |note|\n          note.scan(/([a-z])/) do |note|\n            note.scan(/([a-z])/)\
    \ do |note|\n              note.scan(/([a-z])/) do |note|\n                note.scan(/([a-z])/)\
    \ do |note|\n                  note.scan(/([a-z])/) do |note|\n              \
    \      note.scan(/([a-z])/) do |note|\n                      note.scan(/([a-z])/)\
    \ do |note|\n                        note.scan(/([a-z])/) do |note|\n        \
    \                  note.scan(/([a-z])/) do |note|\n                          \
    \  note.scan(/([a-z])/) do |note|\n                              note.scan(/([a-z])/)\
    \ do |note|\n                                note.scan(/([a-z])/) do |note|\n\
    \                                  note.scan(/([a-z])/) do |note|\n          \
    \                          note.scan(/([a-z])/) do |note|\n                  \
    \                    note.scan(/([a-z])/) do |note|\n                        \
    \                note.scan(/([a-z])/) do |note|\n                            \
    \              note.scan(/([a-z])/) do |note|\n                              \
    \              note.scan(/([a-z])/) do |note|\n                              \
    \                note.scan(/([a-z])/) do |note|\n                            \
    \                    note.scan(/([a-z])/) do |note|\n                        \
    \                          note.scan(/([a-z])/) do |note|\n                  \
    \                                  note.scan(/([a-z])/) do |note|\n          \
    \                                            note.scan(/([a-z])/) do |note|\n\
    \                                                        note.scan(/([a-z])/)\
    \ do |note|\n                                                          note.scan(/([a-z])/)\
    \ do |note|\n                                                            note.scan(/([a-z])/)\
    \ do |note|\n                                                              note.scan(/([a-z])/)\
    \ do |note|\n                                                                note.scan(/([a-z])/)\
    \ do |note|\n                                                                \
    \  note.scan(/([a-z])/) do |note|\n                                          \
    \                          note.scan(/([a-z])/) do |note", "  music_string.scan(/[\\\
    .\\|\\-]\\z/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  ", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.last(1).to_i }\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you so much for taking the time to write this out. I really appreciate it.\
    \ I will try this out and let you know how it goes. Thank you again!\n<|/ c |>\n\
    <| c |>\nI ran the code and it worked perfectly! Thank you so much for taking\
    \ the time to write this out. I really appreciate it. I will try this out and\
    \ let you know how it goes. Thank you again!\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  music_string.scan(/./).map\
    \ do |note|\n    note.scan(/./).map do |beat|\n      beat.to_i\n    end\n  end\n\
    end", "  music_notes = music_string.split('|')\n  music_notes.map! do |note|\n\
    \    note.split('o').map! do |beat|\n      beat.to_i\n    end\n  end\n  music_notes.flatten!\n\
    \  music_notes.map! do |note|\n    note.each_with_index do |beat, index|\n   \
    \   note[index] = note[index].to_i\n    end\n  end\n  music_notes.map! do |note|\n\
    \    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_notes.map! do |note|\n    note.each_with_index do |beat,\
    \ index|\n      note[index] = note[index].to_i\n    end\n  end\n  music_notes.map!\
    \ do |note|\n    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_notes.map! do |note|\n    note.each_with_index do |beat,\
    \ index|\n      note[index] = note[index].to_i\n    end\n  end\n  music_notes.map!\
    \ do |note|\n    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_notes.map! do |note|\n    note.each_with_index do |beat,\
    \ index|\n      note[index] = note[index].to_i\n    end\n  end\n  music_notes.map!\
    \ do |note|\n    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_notes.map! do |note|\n    note.each_with_index do |beat,\
    \ index|\n      note[index] = note[index].to_i\n    end\n  end\n  music_notes.map!\
    \ do |note|\n    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_notes.map! do |note|\n    note.each_with_index do |beat,\
    \ index|\n      note[index] = note[index].to_i\n    end\n  end\n  music_notes.map!\
    \ do |note|\n    note.each_with_index do |beat, index|\n      note[index] = note[index].to_i\n\
    \    end\n  end\n  music_note", "  music_string.scan(/[\\.\\|\\-]|\\//) do |note|\n\
    \    note = note.downcase\n    note = note.gsub(/[\\.\\|\\-]/, '')\n    note =\
    \ note.gsub(/[\\d]/, '.')\n    note = note.gsub(/\\d/, '')\n    note = note.gsub(/o|o/,\
    \ 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n \
    \   note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note =\
    \ note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/,\
    \ 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n \
    \   note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note =\
    \ note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/,\
    \ 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n \
    \   note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note =\
    \ note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/,\
    \ 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n \
    \   note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note =\
    \ note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/,\
    \ 'o')\n    note = note.gsub(/o|o/, 'o')\n    note = note.gsub(/o|o/, 'o')\n \
    \   note = note.gsub(/o|o/, '", "  music_string.scan(/o|\\.\\|/).map { |note|\
    \ note.count('o') }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\\
    .])/).count }\nend", "  music_string.scan(/./).map { |note| note.downcase }\n\
    end", "  music_string.scan(/[\\.\\|\\-]|\\|/).map { |note| note.count('|') }\n\
    end", "  music_string.scan(/([o|.])\\1*/).map { |note| note.length }\nend", " \
    \ music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([\\d])\\1*/) do\
    \ |beat|\n      beat.to_i\n    end\n  end\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/./).map\
    \ { |note| note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase\
    \ == '.|' ? 1 : 0 }\nend", "  music_string.scan(/./).map { |note| note.downcase\
    \ }\nend", "  music_notes = music_string.split(//)\n  music_notes.each do |note|\n\
    \    note = note.strip\n    note = note.downcase\n    note = note.gsub(/[^a-z]/,\
    \ '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n\
    \    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n  \
    \  note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note\
    \ = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note =\
    \ note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/,\
    \ '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n\
    \    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n  \
    \  note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note\
    \ = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note =\
    \ note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/,\
    \ '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n\
    \    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n  \
    \  note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note\
    \ = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note =\
    \ note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/,\
    \ '')\n    note = note.gsub(/[aeiou]/, '')\n    note = note.gsub(/[aeiou]/, '')\n\
    \    note = note.gsub(/[", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|.])/).count\
    \ }\nend", "  music_string.scan(/./).map { |note| note.downcase == 'o' ? 4 : note.downcase\
    \ == 'o|' ? 2 : note.downcase == '.|' ? 1 : 0 }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.count('o') }\nend\n</code>\n<|/ a tags=ruby,regex |>\n\
    <| c |>\nI like your solution, but I believe that `music_string.scan(/([o|.])\\\
    1*/)` will match `o|.` as a single note, instead of two separate notes. I believe\
    \ that `music_string.scan(/([o|.])\\1*/).map { |note| note.count('o') }` will\
    \ fix that.\n<|/ c |>\n<| c |>\n, thank you, you are right. I updated my answer.\
    \ By the way, I believe that `music_string.scan(/([o|.])\\1*/).map { |note| note.count('o')\
    \ }` will fix that too.\n<|/ c |>\n<| c |>\nI believe that `music_string.scan(/([o|.])\\\
    1*/).map { |note| note.count('o') }` will fix that too.\n<|/ c |>\n<| c |>\n,\
    \ thank you, you are right. I updated my answer. By the way, I believe that `music_string.scan(/([o|.])\\\
    1*/).map { |note| note.count('o') }` will fix that too.\n<|/ c |>\n<| c |>\nThank\
    \ you for taking the time to write this answer. I am going to try this out and\
    \ see how it works. I appreciate it.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>\n\
    music_string = \"o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.",
  "  music_string.scan(/([o|\\.])\\|/).map { |note| note.scan(/\\d+/).map(&:to_i)\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.length }\nend",
  "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\d+/).map(&:to_i) }\n\
    end", "  music_string.scan(/([a-z])\\|/).map { |note| note.last(1).to_i }\nend",
  "  music_string.scan(/([o|.])\\1*/).map { |note| note.count('o') }\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).map { |beat| beat.to_i } }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.scan(/\\d/).map(&:to_i) }\nend", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\-0-9]+)/) do |beats|\n      beats.to_i\n  \
    \  end\n  end\nend", "  music_notes = music_string.split('|')\n  music_notes.map!\
    \ do |note|\n    note.strip!\n    note = note.upcase\n    note = note.gsub(/[O|o|\\\
    .]/, '')\n    note = note.gsub(/[Bb|b|#]/, '')\n    note = note.gsub(/[Ff|f]/,\
    \ '')\n    note = note.gsub(/[Gg|g]/, '')\n    note = note.gsub(/[Dd|d]/, '')\n\
    \    note = note.gsub(/[Ee|e]/, '')\n    note = note.gsub(/[Aa|a]/, '')\n    note\
    \ = note.gsub(/[Cc|c]/, '')\n    note = note.gsub(/[Gg|g]/, '')\n    note = note.gsub(/[Dd|d]/,\
    \ '')\n    note = note.gsub(/[Ee|e]/, '')\n    note = note.gsub(/[Aa|a]/, '')\n\
    \    note = note.gsub(/[Cc|c]/, '')\n    note = note.gsub(/[Gg|g]/, '')\n    note\
    \ = note.gsub(/[Dd|d]/, '')\n    note = note.gsub(/[Ee|e]/, '')\n    note = note.gsub(/[Aa|a]/,\
    \ '')\n    note = note.gsub(/[Cc|c]/, '')\n    note = note.gsub(/[Gg|g]/, '')\n\
    \    note = note.gsub(/[Dd|d]/, '')\n    note = note.gsub(/[Ee|e]/, '')\n    note\
    \ = note.gsub(/[Aa|a]/, '')\n    note = note.gsub(/[Cc|c]/, '')\n    note = note.gsub(/[Gg|g]/,\
    \ '')\n    note = note.gsub(/[Dd|d]/, '')\n    note = note.gsub(/[Ee|e]/, '')\n\
    \    note = note.gsub(/[Aa|a]/, '')\n    note = note.gsub(/[Cc|c]/, '')\n    note\
    \ = note.gsub(/[Gg|g]/, '')\n    note = note.gsub(/[Dd|d]/, '')\n    note = note.gsub(/[Ee|e]/,\
    \ '')\n    note = note.gsub(/", "  music_string.scan(/[\\.\\|\\-]\\z/).map { |note|\
    \ note.size }\nend", "  music_string.scan(/[\\.\\|\\/]|\\-/).map { |note| note.downcase\
    \ == 'o' ? 4 : note.downcase == 'o|' ? 2 : 1 }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.count('o') }\nend", "  music_string.scan(/([o|.])\\1*/).map\
    \ { |note| note.count('o') }\nend", "  music_string.scan(/([a-z])\\|/).map { |note|\
    \ note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([a-z])\\|/).map {\
    \ |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([o|.])\\1*/).map\
    \ { |note| note.count('o') }\nend", "  music_string.scan(/[\\.\\|\\/o]/).map {\
    \ |note| note.size }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\\
    d+/).map(&:to_i) }\nend", "  music_string.scan(/([a-z])\\|([a-z])/).map { |note,\
    \ beats| beat_count(note, beats) }\nend", "  music_string.scan(/./).map do |note|\n\
    \    case note\n    when 'o'\n      4\n    when 'o|'\n      2\n    when '.|'\n\
    \      1\n    else\n      raise \"Invalid note #{note}\"\n    end\n  end\nend",
  "  music_string.scan(/([o|.])\\1*/).map { |note| note.count('o') }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.scan(/\\d+/).map(&:to_i) }\nend", "  music_string.scan(/[\\\
    .\\|o|o\\|]\\z/).map { |note| note.count('|') }\nend", "  music_string.scan(/./).map\
    \ { |note| note.chr.to_i(16) }\nend", "  music_string.scan(/([o|.])\\1*/).map\
    \ { |note| note.count('o') }\nend", "  music_notes = music_string.split('|')\n\
    \  music_notes.each do |note|\n    note = note.strip\n    note = note.downcase\n\
    \    note = note.gsub(/[#\\*]/,\"\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\*]/,\"#\")\n \
    \   note = note.gsub(/[#\\*]/,\"#\")\n    note = note.gsub(/[#\\", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\-0-9]+)/) do |beats|\n      beats.to_i\n  \
    \  end\n  end\nend", "  music_string.scan(/([a-z])\\|([a-z])/).map do |note, beats|\n\
    \    note.upcase\n  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks\
    \ for the answer. I'm going to try this out and see how it goes.\n<|/ c |>\n<|\
    \ c |>\nI added a little more explanation to the answer, hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for the explanation. I think I understand what you're saying,\
    \ but I'm still not quite sure how to implement it. Could you give me an example\
    \ of how I would use your code to parse a string like \"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\
    ?\n<|/ c |>\n<| c |>\nI added an example to the answer. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for the example. I'm going to try this out and see how it\
    \ goes.\n<|/ c |>\n<| a tags=ruby,regex |>\nI believe this should work:\n<code>\n\
    music_string = \"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\nmusic_string.scan(/([a-z])\\\
    |([a-z])/).map do |note, beats|\n  note.upcase\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for the answer. I'm going to try this out and see how it goes.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nmusic_string = \"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\
    \nmusic_string.scan(/([a-z])\\|([a-z])/).map do |note, beats|\n  note.upcase\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks for the answer. I'm going\
    \ to try this out and see how it ", "  music_string.scan(/[\\.\\|\\-]|\\//) do\
    \ |note|\n    note.scan(/\\d/) do |beats|\n      beats.to_i\n    end\n  end\n\
    end", "  music_notes = music_string.split('|')\n  music_notes.map! do |note|\n\
    \    note.split('o').map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n\
    \    note.map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map\
    \ { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i\
    \ }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n\
    \  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n  music_notes.map!\
    \ do |note|\n    note.map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n\
    \    note.map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map\
    \ { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i\
    \ }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n\
    \  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n  music_notes.map!\
    \ do |note|\n    note.map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n\
    \    note.map { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map\
    \ { |n| n.to_i }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i\
    \ }\n  end\n  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n\
    \  music_notes.map! do |note|\n    note.map { |n| n.to_i }\n  end\n  music_notes.map!\
    \ do |note|\n    note.map { |n| n.to_i }\n  end\n  music_note", "  music_string.scan(/([a-z])\\\
    |([a-z])/).map do |note, beats|\n    note.to_i(16).to_s(16).rjust(2, '0')\n  end\n\
    end", "  music_string.scan(/([o|\\.])\\|/) do |note|\n    note.scan(/([o|\\.])/)\
    \ do |last_note|\n      last_note.scan(/([o|\\.])/) do |last_last_note|\n    \
    \    last_last_note.scan(/([o|\\.])/) do |last_last_last_note|\n          last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_note|\n            last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_note|\n              last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_note|\n                last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_note|\n                  last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_note|\n                    last_last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_last_note|\n               \
    \       last_last_last_last_last_last_last_last_last_note.scan(/([o|\\.])/) do\
    \ |last_last_last_last_last_last_last_last_last_last_note|\n                 \
    \       last_last_last_last_last_last_last_last_last_last_note.scan(/([o|\\.])/)\
    \ do |last_last_last_last_last_last_last_last_last_last_last_note|\n         \
    \                 last_last_last_last_last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_last_last_last_last_note|\n\
    \                            last_last_last_last_last_last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_last_last_last_last_last_note|\n\
    \                              last_last_last_last_last_last_last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_last_last_last_last_last_last_note|\n\
    \                                last_last_last_last_last_last_last_last_last_last_last_last_last_last_note.scan(/([o|\\\
    .])/) do |last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_note|\n\
    \                                  last_last_last_last_last_last_last_last_last_last_last_last_last_",
  "  music_string.gsub!(/o|\\.\\|/, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\\
    ./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n\
    \  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\\
    |/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n\
    \  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\\
    ./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n\
    \  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\\
    |/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n\
    \  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\\
    ./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n\
    \  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\\
    |/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n\
    \  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\\
    ./, '')\n  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n\
    \  music_string.gsub!(/o\\|/, '')\n  music_string.gsub!(/o\\./, '')\n  music_string.gsub!(/o\\",
  "  music_string.scan(/([o|.])\\1*/).map { |note| note.length }\nend", "  music_string.scan(/o|\\\
    .\\|/).map { |note| note.size }\nend", "  music_string.scan(/./).map do |note|\n\
    \    note.scan(/./).map do |octave|\n      octave.scan(/./).map do |beat|\n  \
    \      beat.to_i\n      end\n    end\n  end\nend", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\-]?\\d+)/) do |beats|\n      beats.map { |beat|\
    \ beat.to_i }\n    end\n  end\nend", "  music_string.scan(/([o|.])\\1*/).map {\
    \ |note| note.scan(/\\d/).map(&:to_i) }\nend", "  music_notes = music_string.split('|')\n\
    \  music_notes.map! { |note| note.split(//).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:last)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note.map(&:first)).map(&:flatten).map(&:to_i) }\n  music_notes.map!\
    \ { |note| note.zip(note", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\\
    .])/).count }\nend", "  music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([a-z])/)\
    \ do |letter|\n      note.scan(/([\\d])/) do |beat|\n        note.scan(/([\\d])/)\
    \ do |beat|\n          note.scan(/([\\d])/) do |beat|\n            note.scan(/([\\\
    d])/) do |beat|\n              note.scan(/([\\d])/) do |beat|\n              \
    \  note.scan(/([\\d])/) do |beat|\n                  note.scan(/([\\d])/) do |beat|\n\
    \                    note.scan(/([\\d])/) do |beat|\n                      note.scan(/([\\\
    d])/) do |beat|\n                        note.scan(/([\\d])/) do |beat|\n    \
    \                      note.scan(/([\\d])/) do |beat|\n                      \
    \      note.scan(/([\\d])/) do |beat|\n                              note.scan(/([\\\
    d])/) do |beat|\n                                note.scan(/([\\d])/) do |beat|\n\
    \                                  note.scan(/([\\d])/) do |beat|\n          \
    \                          note.scan(/([\\d])/) do |beat|\n                  \
    \                    note.scan(/([\\d])/) do |beat|\n                        \
    \                note.scan(/([\\d])/) do |beat|\n                            \
    \              note.scan(/([\\d])/) do |beat|\n                              \
    \              note.scan(/([\\d])/) do |beat|\n                              \
    \                note.scan(/([\\d])/) do |beat|\n                            \
    \                    note.scan(/([\\d])/) do |beat|\n                        \
    \                          note.scan(/([\\d])/) do |beat|\n                  \
    \                                  note.scan(/([\\d])/) do |beat|\n          \
    \                                            note.scan(/([\\d])/) do |beat|\n\
    \                                                        note.scan(/([\\d])/)\
    \ do |beat|\n                                                          note.scan(/([\\\
    d])/) do |beat|\n                                                            note.scan(/([\\\
    d])/) do |beat|\n                                                            \
    \  note.scan(/([\\d])/) do |beat|\n                                          \
    \                      note.scan(/([\\d])/) do |beat|\n                      \
    \                                            note.scan(/([\\d])/) do |beat|\n\
    \                                                                    note.scan(/([\\\
    d])/) ", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.last(2) }\nend",
  "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\.])/).count }\n\
    end", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\d+/).map(&:to_i)\
    \ }\nend", "  music_string.scan(/[\\.\\|\\-]\\z/)\nend", "  music_string.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n    note.scan(/[\\.\\|\\-]|\\|/) do |note|\n      note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n        note.scan(/[\\.\\|\\-]|\\|/) do |note|\n   \
    \       note.scan(/[\\.\\|\\-]|\\|/) do |note|\n            note.scan(/[\\.\\\
    |\\-]|\\|/) do |note|\n              note.scan(/[\\.\\|\\-]|\\|/) do |note|\n\
    \                note.scan(/[\\.\\|\\-]|\\|/) do |note|\n                  note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                    note.scan(/[\\.\\|\\-]|\\|/) do\
    \ |note|\n                      note.scan(/[\\.\\|\\-]|\\|/) do |note|\n     \
    \                   note.scan(/[\\.\\|\\-]|\\|/) do |note|\n                 \
    \         note.scan(/[\\.\\|\\-]|\\|/) do |note|\n                           \
    \ note.scan(/[\\.\\|\\-]|\\|/) do |note|\n                              note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                                note.scan(/[\\.\\|\\\
    -]|\\|/) do |note|\n                                  note.scan(/[\\.\\|\\-]|\\\
    |/) do |note|\n                                    note.scan(/[\\.\\|\\-]|\\|/)\
    \ do |note|\n                                      note.scan(/[\\.\\|\\-]|\\|/)\
    \ do |note|\n                                        note.scan(/[\\.\\|\\-]|\\\
    |/) do |note|\n                                          note.scan(/[\\.\\|\\\
    -]|\\|/) do |note|\n                                            note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                                              note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                                                note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                                                  note.scan(/[\\\
    .\\|\\-]|\\|/) do |note|\n                                                   \
    \ note.scan(/[\\.\\|\\-", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\\
    d+/).map(&:to_i) }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.length\
    \ }\nend", "  music_string.scan(/([a-z])\\|([a-z])/).map { |note, beats|\n   \
    \ note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase == '.|'\
    \ ? 1 : 0\n  }\nend", "  music_string.scan(/([o|.])\\|/).map { |note| note.scan(/([o|.])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|?/).map { |note| note.scan(/([o|.])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/o|.|/)\nend", "  music_string.scan(/o|\\.\\|/).map\
    \ { |note| note.count('|') }\nend", "  music_string.scan(/([o|.])\\1*/) do |note|\n\
    \    note.scan(/([\\d])\\1*/) do |beat|\n      beat.to_i\n    end\n  end\nend",
  "  music_string.scan(/./).map { |note| note.downcase }\nend", "  music_string.scan(/./).map\
    \ { |note| note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase\
    \ == '.|' ? 1 : 0 }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\\
    d+/).map(&:to_i) }\nend", "  music_string.scan(/[\\.\\|\\-]\\z/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  ", "  music_string.scan(/([o|.])\\1*/).map\
    \ { |note| note.scan(/\\d+/).map(&:to_i) }\nend", "  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  music_string.scan(/[\\.\\\
    |\\/]\\z/)\n  music_string.scan(/[\\.\\|\\/]\\z/)\n  musi", "  music_notes = []\n\
    \  music_notes_strings = music_string.split('|')\n  music_notes_strings.each do\
    \ |music_note_string|\n    music_note = music_note_string.strip\n    music_note\
    \ = music_note.gsub(/o|\\.\\//, '')\n    music_note = music_note.gsub(/o\\|/,\
    \ '|')\n    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/\\\
    .\\//, '')\n    music_note = music_note.gsub(/\\.\\|/, '|')\n    music_note =\
    \ music_note.gsub(/\\.\\//, '/')\n    music_note = music_note.gsub(/\\//, '')\n\
    \    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/o\\\
    |/, '|')\n    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/\\\
    .\\//, '')\n    music_note = music_note.gsub(/\\.\\|/, '|')\n    music_note =\
    \ music_note.gsub(/\\.\\//, '/')\n    music_note = music_note.gsub(/\\//, '')\n\
    \    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/o\\\
    |/, '|')\n    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/\\\
    .\\//, '')\n    music_note = music_note.gsub(/\\.\\|/, '|')\n    music_note =\
    \ music_note.gsub(/\\.\\//, '/')\n    music_note = music_note.gsub(/\\//, '')\n\
    \    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/o\\\
    |/, '|')\n    music_note = music_note.gsub(/o\\//, '/')\n    music_note = music_note.gsub(/\\\
    .\\//, '')\n    music_note = music_note.gsub(/\\.\\|/, '|')\n    music_note =\
    \ music_note.gsub(/\\.\\//, '/')\n    music_", "  music_string.scan(/o|.|/).map\
    \ { |note| note.size }\nend", "  music_string.scan(/o|\\.\\|/).map { |note| note.count('o')\
    \ }\nend", "  music_string.scan(/[\\.\\|\\-]|\\/|o|o\\|/)\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.size }\nend", "  music_string.scan(/./).map do |note|\n\
    \    note.scan(/./).map do |chord|\n      chord.scan(/./).map do |chord|\n   \
    \     chord.scan(/./).map do |chord|\n          chord.scan(/./).map do |chord|\n\
    \            chord.scan(/./).map do |chord|\n              chord.scan(/./).map\
    \ do |chord|\n                chord.scan(/./).map do |chord|\n               \
    \   chord.scan(/./).map do |chord|\n                    chord.scan(/./).map do\
    \ |chord|\n                      chord.scan(/./).map do |chord|\n            \
    \            chord.scan(/./).map do |chord|\n                          chord.scan(/./).map\
    \ do |chord|\n                            chord.scan(/./).map do |chord|\n   \
    \                           chord.scan(/./).map do |chord|\n                 \
    \               chord.scan(/./).map do |chord|\n                             \
    \     chord.scan(/./).map do |chord|\n                                    chord.scan(/./).map\
    \ do |chord|\n                                      chord.scan(/./).map do |chord|\n\
    \                                        chord.scan(/./).map do |chord|\n    \
    \                                      chord.scan(/./).map do |chord|\n      \
    \                                      chord.scan(/./).map do |chord|\n      \
    \                                        chord.scan(/./).map do |chord|\n    \
    \                                            chord.scan(/./).map do |chord|\n\
    \                                                  chord.scan(/./).map do |chord|\n\
    \                                                    chord.scan(/./).map do |chord|\n\
    \                                                      chord.scan(/./).map do\
    \ |chord|\n                                                        chord.scan(/./).map\
    \ do |chord|\n                                                          chord.scan(/./).map\
    \ do |chord|\n                                                            chord.scan(/./).map\
    \ do |chord|\n                                                              chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \ chord.scan(/./).map do |chord|\n                                           \
    \                       chord.scan(/./).map do |chord|\n                     \
    \                                               chord.scan(/./).map do |chord|\n\
    \                                                                      chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \         chord.scan(/./).map do |chord|\n                                   \
    \                                       chord.scan(/./).map do |chord|\n     \
    \                                                                       chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \               chord.scan(/./).map do |chord", "  music_string.scan(/([a-z])\\\
    |([a-z])/).map do |note, beats|\n    note.downcase == 'o' ? 4 : note.downcase\
    \ == 'o|' ? 2 : note.downcase == '.|' ? 1 : 0\n  end\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([a-z])\\\
    |/) do |note|\n    note.scan(/([a-z])/) do |note|\n      note.scan(/([a-z])/)\
    \ do |note|\n        note.scan(/([a-z])/) do |note|\n          note.scan(/([a-z])/)\
    \ do |note|\n            note.scan(/([a-z])/) do |note|\n              note.scan(/([a-z])/)\
    \ do |note|\n                note.scan(/([a-z])/) do |note|\n                \
    \  note.scan(/([a-z])/) do |note|\n                    note.scan(/([a-z])/) do\
    \ |note|\n                      note.scan(/([a-z])/) do |note|\n             \
    \           note.scan(/([a-z])/) do |note|\n                          note.scan(/([a-z])/)\
    \ do |note|\n                            note.scan(/([a-z])/) do |note|\n    \
    \                          note.scan(/([a-z])/) do |note|\n                  \
    \              note.scan(/([a-z])/) do |note|\n                              \
    \    note.scan(/([a-z])/) do |note|\n                                    note.scan(/([a-z])/)\
    \ do |note|\n                                      note.scan(/([a-z])/) do |note|\n\
    \                                        note.scan(/([a-z])/) do |note|\n    \
    \                                      note.scan(/([a-z])/) do |note|\n      \
    \                                      note.scan(/([a-z])/) do |note|\n      \
    \                                        note.scan(/([a-z])/) do |note|\n    \
    \                                            note.scan(/([a-z])/) do |note|\n\
    \                                                  note.scan(/([a-z])/) do |note|\n\
    \                                                    note.scan(/([a-z])/) do |note|\n\
    \                                                      note.scan(/([a-z])/) do\
    \ |note|\n                                                        note.scan(/([a-z])/)\
    \ do |note|\n                                                          note.scan(/([a-z])/)\
    \ do |note|\n                                                            note.scan(/([a-z])/)\
    \ do |note|\n                                                              note.scan(/([a-z])/)\
    \ do |note|\n                                                                note.scan(/([a-z])/)\
    \ do |note|\n                                                                \
    \  note.scan(/([a-z])/) do |note|\n                                          \
    \                          note.scan(/([a-z])/) do |note", "  music_string.scan(/./).map\
    \ { |note| note.scan(/./).count }\nend", "  music_string.scan(/./).map { |note|\
    \ note.count('|') }.uniq\nend", "  music_string.scan(/([a-z])\\|([a-z])/).map\
    \ do |note, beats|\n    note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 :\
    \ note.downcase == '.|' ? 1 : 0\n  end\nend", "  music_string.scan(/[\\.\\|\\\
    -]\\z/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\\
    |/)\n  music_string.scan(/o\\|/)\n  music_string.scan(/o\\|/)\n  ", "  music_string.scan(/([o|\\\
    .])\\|/).map { |note| note.scan(/([o|\\.])/).count }\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([o|.])/).count }\nend", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/[\\\
    .\\|\\-]\\z/)\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\\
    d/).map(&:to_i) }\nend", "  music_string.scan(/o|\\.\\|/).map { |note| note.count('|')\
    \ }\nend", "  music_notes = []\n  music_notes_str = \"\"\n  music_notes_str =\
    \ \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  music_notes_str = \"\"\n  music_notes_str\
    \ = \"\"\n  music_notes_str = \"\"\n  musi", "  music_string.scan(/([a-z])\\|/).map\
    \ { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.count('o') }\nend", "  music_string.scan(/./).map { |note|\
    \ note.downcase == 'o' ? 4 : note.downcase == 'o|' ? 2 : note.downcase == '.|'\
    \ ? 1 : 0 }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/([a-z])\\|([a-z])/).map do |note, beats|\n  \
    \  note.downcase\n  end\nend", "  music_string.scan(/[\\.\\|\\-]|\\|/).map { |note|\
    \ note.to_i }\nend", "  music_string.scan(/./).map { |note| note.downcase == 'o'\
    \ ? 4 : note.downcase == 'o|' ? 2 : note.downcase == '.|' ? 1 : 0 }\nend", " \
    \ music_string.scan(/./).map do |note|\n    note.scan(/./).map do |octave|\n \
    \     octave.scan(/./).map do |beat|\n        beat.to_i\n      end\n    end\n\
    \  end\nend", "  music_string.scan(/./).map { |note| note.downcase }\nend", " \
    \ music_string.scan(/([a-z])\\|/) do |note|\n    note.scan(/([a-z])/) do |note|\n\
    \      note.scan(/([a-z])/) do |note|\n        note.scan(/([a-z])/) do |note|\n\
    \          note.scan(/([a-z])/) do |note|\n            note.scan(/([a-z])/) do\
    \ |note|\n              note.scan(/([a-z])/) do |note|\n                note.scan(/([a-z])/)\
    \ do |note|\n                  note.scan(/([a-z])/) do |note|\n              \
    \      note.scan(/([a-z])/) do |note|\n                      note.scan(/([a-z])/)\
    \ do |note|\n                        note.scan(/([a-z])/) do |note|\n        \
    \                  note.scan(/([a-z])/) do |note|\n                          \
    \  note.scan(/([a-z])/) do |note|\n                              note.scan(/([a-z])/)\
    \ do |note|\n                                note.scan(/([a-z])/) do |note|\n\
    \                                  note.scan(/([a-z])/) do |note|\n          \
    \                          note.scan(/([a-z])/) do |note|\n                  \
    \                    note.scan(/([a-z])/) do |note|\n                        \
    \                note.scan(/([a-z])/) do |note|\n                            \
    \              note.scan(/([a-z])/) do |note|\n                              \
    \              note.scan(/([a-z])/) do |note|\n                              \
    \                note.scan(/([a-z])/) do |note|\n                            \
    \                    note.scan(/([a-z])/) do |note|\n                        \
    \                          note.scan(/([a-z])/) do |note|\n                  \
    \                                  note.scan(/([a-z])/) do |note|\n          \
    \                                            note.scan(/([a-z])/) do |note|\n\
    \                                                        note.scan(/([a-z])/)\
    \ do |note|\n                                                          note.scan(/([a-z])/)\
    \ do |note|\n                                                            note.scan(/([a-z])/)\
    \ do |note|\n                                                              note.scan(/([a-z])/)\
    \ do |note|\n                                                                note.scan(/([a-z])/)\
    \ do |note|\n                                                                \
    \  note.scan(/([a-z])/) do |note|\n                                          \
    \                          note.scan(/([a-z])/) do |note", "  music_notes = []\n\
    \  music_notes_length = []\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_notes_length_index\
    \ = 0\n  music_notes_length_index = 0\n  music_notes_length_index = 0\n  music_",
  "  music_string.scan(/./).map do |note|\n    note.downcase\n  end\nend", "  music_string.scan(/([a-z])\\\
    |/).map do |note|\n    note.scan(/([a-z])/).map do |beat|\n      beat.to_i\n \
    \   end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer!\
    \ I appreciate it. I will try this out and see how it goes. I do have one question,\
    \ though. Why are you using two maps? I thought the second map was just to convert\
    \ the strings into integers. Am I missing something?\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. `map` returns an array of the results of its block. `scan` returns\
    \ an array of arrays. So I used two `map`s to get an array of arrays of integers.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nI got it to work! Thank you so much! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. By the way, I added\
    \ a solution that uses `scan` instead of `map`.\n<|/ c |>\n<| c |>\nThank you\
    \ so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\nHere's a solution\
    \ using scan:\n<code>\nmusic_string = \".o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|",
  "  music_string.scan(/([o|.])\\1*/) do |note|\n    note.scan(/([\\-])/) do |beats|\n\
    \      beats.scan(/([\\d])/) do |beat|\n        beat\n      end\n    end\n  end\n\
    end", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\.])/).count\
    \ }\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\d/).map(&:to_i)\
    \ }\nend", "  music_string.scan(/./).map do |note|\n    note.scan(/./).map do\
    \ |chord|\n      chord.scan(/./).map do |chord|\n        chord.scan(/./).map do\
    \ |chord|\n          chord.scan(/./).map do |chord|\n            chord.scan(/./).map\
    \ do |chord|\n              chord.scan(/./).map do |chord|\n                chord.scan(/./).map\
    \ do |chord|\n                  chord.scan(/./).map do |chord|\n             \
    \       chord.scan(/./).map do |chord|\n                      chord.scan(/./).map\
    \ do |chord|\n                        chord.scan(/./).map do |chord|\n       \
    \                   chord.scan(/./).map do |chord|\n                         \
    \   chord.scan(/./).map do |chord|\n                              chord.scan(/./).map\
    \ do |chord|\n                                chord.scan(/./).map do |chord|\n\
    \                                  chord.scan(/./).map do |chord|\n          \
    \                          chord.scan(/./).map do |chord|\n                  \
    \                    chord.scan(/./).map do |chord|\n                        \
    \                chord.scan(/./).map do |chord|\n                            \
    \              chord.scan(/./).map do |chord|\n                              \
    \              chord.scan(/./).map do |chord|\n                              \
    \                chord.scan(/./).map do |chord|\n                            \
    \                    chord.scan(/./).map do |chord|\n                        \
    \                          chord.scan(/./).map do |chord|\n                  \
    \                                  chord.scan(/./).map do |chord|\n          \
    \                                            chord.scan(/./).map do |chord|\n\
    \                                                        chord.scan(/./).map do\
    \ |chord|\n                                                          chord.scan(/./).map\
    \ do |chord|\n                                                            chord.scan(/./).map\
    \ do |chord|\n                                                              chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \ chord.scan(/./).map do |chord|\n                                           \
    \                       chord.scan(/./).map do |chord|\n                     \
    \                                               chord.scan(/./).map do |chord|\n\
    \                                                                      chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \         chord.scan(/./).map do |chord|\n                                   \
    \                                       chord.scan(/./).map do |chord|\n     \
    \                                                                       chord.scan(/./).map\
    \ do |chord|\n                                                               \
    \               chord.scan(/./).map do |chord", "  music_string.scan(/([o|.])\\\
    1*/) do |note|\n    note.scan(/([\\d])\\1*/) do |beat|\n      beat.to_i\n    end\n\
    \  end\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\\
    .])/).count }\nend", "  music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n \
    \   note = note.downcase\n    if note == 'o'\n      music_string.scan(/[\\.\\\
    |\\-]\\z/).each do |note|\n        note = note.downcase\n        if note == 'o'\n\
    \          music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n            note\
    \ = note.downcase\n            if note == 'o'\n              music_string.scan(/[\\\
    .\\|\\-]\\z/).each do |note|\n                note = note.downcase\n         \
    \       if note == 'o'\n                  music_string.scan(/[\\.\\|\\-]\\z/).each\
    \ do |note|\n                    note = note.downcase\n                    if\
    \ note == 'o'\n                      music_string.scan(/[\\.\\|\\-]\\z/).each\
    \ do |note|\n                        note = note.downcase\n                  \
    \      if note == 'o'\n                          music_string.scan(/[\\.\\|\\\
    -]\\z/).each do |note|\n                            note = note.downcase\n   \
    \                         if note == 'o'\n                              music_string.scan(/[\\\
    .\\|\\-]\\z/).each do |note|\n                                note = note.downcase\n\
    \                                if note == 'o'\n                            \
    \      music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n                  \
    \                  note = note.downcase\n                                    if\
    \ note == 'o'\n                                      music_string.scan(/[\\.\\\
    |\\-]\\z/).each do |note|\n                                        note = note.downcase\n\
    \                                        if note == 'o'\n                    \
    \                      music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n  \
    \                                          note = note.downcase\n            \
    \                                if note == 'o'\n                            \
    \                  music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n      \
    \                                          note = note.downcase\n            \
    \                                    if note == 'o'\n                        \
    \                          music_string.scan(/[\\.\\|\\-]\\z/).each do |note|\n\
    \                                                    note = note.downcase\n  \
    \                                                  if note == 'o'\n          \
    \                                            music_string.scan(/[\\.\\|\\-]\\\
    z/).each do |note|\n                                                        note\
    \ = note.downcase\n                                                        if\
    \ note == 'o'\n                                                          music_string.scan(/[\\\
    .\\|\\-]\\z/).", "  music_string.scan(/o|\\.\\|/).map { |note| note.count('o')\
    \ }\nend", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\.])/).count\
    \ }\nend", "  music_string.scan(/[\\.\\|\\-]|\\|/) do |note|\n    note.scan(/o|o\\\
    |/) do |last_beat|\n      last_beat = last_beat[0].to_i\n      music_string.scan(/o|o\\\
    |/) do |last_beat|\n        last_beat = last_beat[0].to_i\n        music_string.scan(/o|o\\\
    |/) do |last_beat|\n          last_beat = last_beat[0].to_i\n          music_string.scan(/o|o\\\
    |/) do |last_beat|\n            last_beat = last_beat[0].to_i\n            music_string.scan(/o|o\\\
    |/) do |last_beat|\n              last_beat = last_beat[0].to_i\n            \
    \  music_string.scan(/o|o\\|/) do |last_beat|\n                last_beat = last_beat[0].to_i\n\
    \                music_string.scan(/o|o\\|/) do |last_beat|\n                \
    \  last_beat = last_beat[0].to_i\n                  music_string.scan(/o|o\\|/)\
    \ do |last_beat|\n                    last_beat = last_beat[0].to_i\n        \
    \            music_string.scan(/o|o\\|/) do |last_beat|\n                    \
    \  last_beat = last_beat[0].to_i\n                      music_string.scan(/o|o\\\
    |/) do |last_beat|\n                        last_beat = last_beat[0].to_i\n  \
    \                      music_string.scan(/o|o\\|/) do |last_beat|\n          \
    \                last_beat = last_beat[0].to_i\n                          music_string.scan(/o|o\\\
    |/) do |last_beat|\n                            last_beat = last_beat[0].to_i\n\
    \                            music_string.scan(/o|o\\|/) do |last_beat|\n    \
    \                          last_beat = last_beat[0].to_i\n                   \
    \           music_string.scan(/o|o\\|/) do |last_beat|\n                     \
    \           last_beat = last_beat[0].to_i\n                                music_string.scan(/o|o\\\
    |/) do |last_beat|\n                                  last_beat = last_beat[0].to_i\n\
    \                                  music_string.scan(/o|o\\|/) do |last_beat|\n\
    \                                    last_beat = last_beat[0].to_i\n         \
    \                           music_string.scan(/o|o\\|/) do |last_beat|\n     \
    \                                 last_beat = last_beat[0].to_i\n            \
    \                          ", "  music_string.scan(/([o|.])\\|/).map { |note|\
    \ note.count('|') }\nend", "  music_notes = music_string.split('|')\n  music_notes.each\
    \ do |note|\n    note = note.strip\n    note = note.gsub('o', '0')\n    note =\
    \ note.gsub('o|', '0')\n    note = note.gsub('.|', '0')\n    note = note.gsub('o0',\
    \ '0')\n    note = note.gsub('o1', '1')\n    note = note.gsub('o2', '2')\n   \
    \ note = note.gsub('o3', '3')\n    note = note.gsub('o4', '4')\n    note = note.gsub('o5',\
    \ '5')\n    note = note.gsub('o6', '6')\n    note = note.gsub('o7', '7')\n   \
    \ note = note.gsub('o8', '8')\n    note = note.gsub('o9', '9')\n    note = note.gsub('o10',\
    \ '10')\n    note = note.gsub('o11', '11')\n    note = note.gsub('o12', '12')\n\
    \    note = note.gsub('o13', '13')\n    note = note.gsub('o14', '14')\n    note\
    \ = note.gsub('o15', '15')\n    note = note.gsub('o16', '16')\n    note = note.gsub('o17',\
    \ '17')\n    note = note.gsub('o18', '18')\n    note = note.gsub('o19', '19')\n\
    \    note = note.gsub('o20', '20')\n    note = note.gsub('o21', '21')\n    note\
    \ = note.gsub('o22', '22')\n    note = note.gsub('o23', '23')\n    note = note.gsub('o24',\
    \ '24')\n    note = note.gsub('o25', '25')\n    note = note.gsub('o26', '26')\n\
    \    note = note.gsub('o27', '27')\n    note = note.gsub('o28', '28')\n    note\
    \ = note.gsub('o29', '29')\n    note = note.gsub('o30', '30')\n    note = note.gsub('o31',\
    \ '31')\n    note = note.gsub('o32', '32')\n    note = note.gsub('o33', '33')\n\
    \    note = note.gsub('o34', '34')\n    note = note.gsub", "  music_string.scan(/([a-z])\\\
    |/).map { |note| note.scan(/([a-z])/).count }\nend", "  music_string.scan(/[\\\
    .\\|\\/o]/).map { |note| note.count('|') }\nend", "  music_string.scan(/./).map\
    \ { |note| note.count('|') }\nend", "  music_string.scan(/([a-z])\\|/).map { |note|\
    \ note.scan(/([a-z])/).count }\nend", "  music_string.scan(/([o|.])\\1*/) do |note|\n\
    \    note.scan(/([\\-0-9])/) do |beats|\n      beats.to_i\n    end\n  end\nend",
  "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|.])/).count }\nend",
  "  music_string.gsub!(/o|\\.\\|/, '')\n  music_string.gsub!(/o/, '|')\n  music_string.gsub!(/|/,\
    \ 'o')\n  music_string.gsub!(/o\\|/, '|')\n  music_string.gsub!(/o\\./, '.')\n\
    \  music_string.gsub!(/\\.\\./, '|')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\\
    .\\./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\\
    ./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./,\
    \ '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n\
    \  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\\
    .\\|/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\.\\\
    |/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\.\\|/,\
    \ '.')\n  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n\
    \  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\\
    .\\./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\\
    ./, '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./,\
    \ '.')\n  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n\
    \  music_string.gsub!(/\\.\\|/, '.')\n  music_string.gsub!(/\\.\\./, '.')\n  music_string.gsub!(/\\\
    .\\|/, '.')\n  music_", "  music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([a-z])/).count\
    \ }\nend", "  music_string.scan(/o|.|/).map { |note| note.count('o') }\nend",
  "  music_string.scan(/./).map { |note| note.count('|') }.uniq\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.scan(/\\d/).map(&:to_i) }\nend", "  music_string.scan(/([o|.])\\\
    1*/).map { |note| note.scan(/\\d+/).map(&:to_i) }\nend", "  music_string.scan(/o|\\\
    .\\|/).map do |note|\n    note.count('o') * 4\n  end.flatten\nend", "  music_string.scan(/([o|.])\\\
    |/) do |note|\n    note.scan(/([o|.])/) do |rest|\n      rest.scan(/([o|.])/)\
    \ do |rest|\n        rest.scan(/([o|.])/) do |rest|\n          rest.scan(/([o|.])/)\
    \ do |rest|\n            rest\n          end\n        end\n      end\n    end\n\
    \  end\nend", "  music_string.scan(/([o|.])\\1*/).map { |note| note.scan(/\\d+/).map(&:to_i)\
    \ }\nend", "  music_string.scan(/([o|.])\\|/).map { |note| note.count('|') }\n\
    end", "  music_string.scan(/./).map { |note| note.count('|') }.uniq\nend", " \
    \ music_string.scan(/([a-z])\\|/).map { |note| note.scan(/([o|\\.])/).count }\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
