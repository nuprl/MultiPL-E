name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  longest = find_longest_postfix(string)\n  reversed = reverse(string[longest.first..-1])\n\
    \  string.insert(longest.first, reversed)\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest += string.reverse(longest.size)\n  longest.upcase!\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.size - longest.last))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  prefix = string.rjust(longest)\n  suffix\
    \ = string[longest..-1]\n  string[longest..-1] = prefix + suffix\n  string\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0, longest.size\
    \ - longest.last))\n  longest\nend", "  longest_postfix = find_longest_postfix(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_post", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_postfix(string)\n  longest.downcase!\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest.prepend(string.slice!(0, longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  prefix = string[0,longest]\n  suffix = string[longest,string.length]\n  string[0,longest]\
    \ = string[longest,string.length] = suffix\n  string[longest,string.length] =\
    \ prefix\n  string\nend", "  longest = find_longest_postfix(string)\n  longest\
    \ += string.reverse(longest.size)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest_postfix\
    \ = find_longest_postfix(string)\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_post", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0, longest.size\
    \ - longest.last))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest += longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest ", "  longest = find_longest_palindrome(string)\n  longest_postfix\
    \ = longest + string.reverse(longest)\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.end))\n  longest\nend", "  longest = find_longest_postfix_palindrome(string)\n\
    \  longest += string.reverse(longest.size)\n  return longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix\
    \ = \"\"\n  max_length_suffix = \"\"\n  max_length_prefix_reverse = \"\"\n  max_length_suffix_reverse\
    \ = \"\"\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index = 0\n  max_length_suffix_reverse", " \
    \ longest = find_longest_postfix_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.size - longest.last))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  return longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(longest.last(longest.length).reverse)\n  longest\nend", " \
    \ longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  longest_palindrome\
    \ = find_longest_palindrome(string)\n  longest_palindrome = longest_palindrome.to_s.reverse\n\
    \  longest_palindrome << string\n  longest_palindrome\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest_postfix = longest + string[longest.length..-1].reverse\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse", "  max_length\
    \ = 0\n  max_length_postfix = []\n  max_length_postfix_reverse = []\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index2 = 0\n  max_length_postfix_reverse_index3\
    \ = 0\n  max_length_postfix_reverse_index4 = 0\n  max_length_postfix_reverse_index5\
    \ = 0\n  max_length_postfix_reverse_index6 = 0\n  max_length_postfix_reverse_index7\
    \ = 0\n  max_length_postfix_reverse_index8 = 0\n  max_length_postfix_reverse_index9\
    \ = 0\n  max_length_postfix_reverse_index10 = 0\n  max_length_postfix_reverse_index11\
    \ = 0\n  max_length_postfix_reverse_index12 = 0\n  max_length_postfix_reverse_index13\
    \ = 0\n  max_length_postfix_reverse_index14 = 0\n  max_length_postfix_reverse_index15\
    \ = 0\n  max_length_postfix_reverse_index16 = 0\n  max_length_postfix_reverse_index17\
    \ = 0\n  max_length_postfix_reverse_index18 = 0\n  max_length_postfix_reverse_index19\
    \ = 0\n  max_length_postfix_reverse_index20 = 0\n  max_length_postfix_reverse_index21\
    \ = 0\n  max_length_postfix_reverse_index22 = 0\n  max_length_postfix_reverse_index23\
    \ = 0\n  max_length_postfix_reverse_index24 = 0\n  max_length_postfix_reverse_index25\
    \ = 0\n  max_length_postfix_reverse_index26 = 0\n  max_length_postfix_reverse_index27\
    \ = 0\n  max_length_postfix_reverse_index28 = 0\n  max_length_postfix_reverse_index29\
    \ = 0\n  max_length_postfix_reverse_index30 = 0\n  max_length_postfix_reverse_index31\
    \ = 0\n  max_length_postfix_reverse_index32 = 0\n  max_length_postfix_reverse_index33\
    \ = 0\n  max_length_postfix_reverse_index34 = 0\n  max_length_postfix_reverse_index35\
    \ = 0\n  max_length_postfix_reverse_index36 = 0\n  max_length_postfix_reverse_index37\
    \ = 0\n  max_length_postfix_reverse_index38 = 0\n  max_length_postfix_reverse_index39\
    \ = 0\n  max_length_postfix_reverse_index40 = 0\n  max_length_postfix_reverse_index41\
    \ = 0\n  max_length_postfix_reverse_index42 = 0\n  max_length_postfix_reverse_index43\
    \ = 0\n  max_length_postfix_reverse_index44 = 0\n  max_length_postfix_reverse_index45\
    \ = 0\n  max_length_postfix_reverse_index46 = 0\n  max_length_postfix_reverse_index47\
    \ = 0\n  max_length_postfix_reverse_index48 = 0\n  max_length_postfix_reverse_index49\
    \ = 0\n  max_length_", "  longest = find_longest_postfix(string)\n  reversed =\
    \ string.reverse\n  result = string + reversed.sub(longest, reversed)\n  result\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.downcase)\n\
    \  longest.prepend(longest.upcase)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string).reverse)\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.upcase!\n  longest.downcase!\n\
    \  longest.prepend(longest.last(longest.length))\n  longest.prepend(longest.first(longest.length))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest = longest + longest + string[longest.length..-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + longest + string[0..longest.length-1]\n  longest = longest + longest + string[0..longest.length-1]\n\
    \  longest = longest + longest + string[0..longest.length-1]\n  longest = longest\
    \ + ", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\
    \n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\
    \n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(longest.last(longest.length).reverse)\n  longest\nend", " \
    \ longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest ", "  longest = find_longest_palindrome(string)\n  longest\
    \ += string.reverse(longest.index(longest))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  reversed = reverse(string[longest..-1])\n  string.insert(longest, reversed)\n\
    end\n</code>\n<|/ a tags=ruby,algorithm,string |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"abba\"`.\n<|/ c |>\n<| c |>\nIt works. Try it with `\"abba\"\
    `.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `\"abba\"`.\n<|/ c |>\n<|\
    \ c |>\nIt works. Try it with `\"abba\"`.\n<|/ c |>\n<| c |>\nIt works. Try it\
    \ with `\"abba\"`.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using recursion:\n\
    <code>", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n \
    \ longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest.length))\n  longest.prepend(longest.slice!(0...longest.length))\n\
    \  longest.prepend(longest.slice!(0...longest", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest_postfix\
    \ = find_longest_postfix(string)\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_post", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string.downcase).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  prefix = string[0,longest]\n\
    \  suffix = string[longest,string.length]\n  reversed_prefix = prefix.reverse\n\
    \  reversed_suffix = suffix.reverse\n  final_string = reversed_prefix + reversed_suffix\n\
    \  return final_string\nend", "  longest = find_longest_palindrome(string)\n \
    \ longest.prepend(find_longest_palindrome(string.slice(longest.end)))\n  longest\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest\
    \ += string.reverse(longest.size)\n  longest.downcase!\n  longest\nend", "  longest\
    \ = find_longest_postfix(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest.prepend(longest.first(longest.length))\n  longest.downcase!\n  longest\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(longest.rindex,\
    \ longest.length))\n  longest\nend", "  longest_postfix = longest_palindrome(string)\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  return longest_postfix\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  longest\nend", "  max_length\
    \ = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse = \"\"\n\
    \  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse = \"\"\n\
    \  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix =\
    \ \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_post",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest.downcase!\n  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest.prepend(string.downcase.reverse)\n  ", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length))\n\
    \  longest.prepend(longest.first(longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest = longest + find_longest_palindrome(string.gsub(longest,\"\
    \",1))\n  longest = longest + find_longest_palindrome(string.gsub(longest,\"\"\
    ,2))\n  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",3))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",4))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",5))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",6))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",7))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",8))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",9))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",10))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",11))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",12))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",13))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",14))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",15))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",16))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",17))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",18))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",19))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",20))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",21))\n\
    \  longest = longest + find_longest_palindrome(string.gsub(longest,\"\",22))\n\
    \  longest = lon", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest[0\
    \ .. longest.length-1])\n  longest\nend", "  max_length = 0\n  max_length_postfix_length\
    \ = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length = 0\n\
    \  max_length_prefix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length",
  "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.size)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest += string.reverse(longest.size)\n\
    \  longest.downcase!\n  longest\nend", "  max_length = 0\n  max_length_postfix\
    \ = \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = ", "  longest_postfix = find_longest_postfix(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_post", "  longest_postfix = longest_palindrome(string)\n  longest_postfix\
    \ = longest_postfix.reverse\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix\nend", "  longest = find_longest_palindrome(string)\n  longest\
    \ += string.reverse(longest.index(longest))\n  return longest\nend", "  longest\
    \ = find_longest_postfix(string)\n  longest += string.reverse(longest)\n  longest\n\
    end", "  longest = find_longest_palindrome(string)\n  longest_postfix = longest\
    \ + longest + \"-\"\n  longest_postfix = longest_postfix.reverse\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  return longest\nend",
  "  longest = find_longest_postfix(string)\n  longest.downcase!\n  longest.prepend(longest.reverse)\n\
    \  longest.downcase!\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest += longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest ", "  longest =\
    \ find_longest_palindrome(string)\n  longest += string[longest.length..-1].reverse\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest += longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest + longest + longest + longest + longest\
    \ + longest + longest + longest + longest ", "  longest = find_longest_postfix(string)\n\
    \  longest.downcase!\n  longest.prepend(longest + \"a\")\n  longest.prepend(longest\
    \ + \"b\")\n  longest.prepend(longest + \"c\")\n  longest.prepend(longest + \"\
    d\")\n  longest.prepend(longest + \"e\")\n  longest.prepend(longest + \"f\")\n\
    \  longest.prepend(longest + \"g\")\n  longest.prepend(longest + \"h\")\n  longest.prepend(longest\
    \ + \"i\")\n  longest.prepend(longest + \"j\")\n  longest.prepend(longest + \"\
    k\")\n  longest.prepend(longest + \"l\")\n  longest.prepend(longest + \"m\")\n\
    \  longest.prepend(longest + \"n\")\n  longest.prepend(longest + \"o\")\n  longest.prepend(longest\
    \ + \"p\")\n  longest.prepend(longest + \"q\")\n  longest.prepend(longest + \"\
    r\")\n  longest.prepend(longest + \"s\")\n  longest.prepend(longest + \"t\")\n\
    \  longest.prepend(longest + \"u\")\n  longest.prepend(longest + \"v\")\n  longest.prepend(longest\
    \ + \"w\")\n  longest.prepend(longest + \"x\")\n  longest.prepend(longest + \"\
    y\")\n  longest.prepend(longest + \"z\")\n  longest.prepend(longest + \"a\")\n\
    \  longest.prepend(longest + \"b\")\n  longest.prepend(longest + \"c\")\n  longest.prepend(longest\
    \ + \"d\")\n  longest.prepend(longest + \"e\")\n  longest.prepend(longest + \"\
    f\")\n  longest.prepend(longest + \"g\")\n  longest.prepend(longest + \"h\")\n\
    \  longest.prepend(longest + \"i\")\n  longest.prepend(longest + \"j\")\n  longest.prepend(longest\
    \ + \"k\")\n  longest.prepend(longest + \"l\")\n  longest.prepend(longest + \"\
    m\")\n  longest.prepend(longest + \"n\")\n  longest.prepend(longest + \"o\")\n\
    \  longest.prepend(longest + \"p\")\n  longest.prepend(longest + \"q\")\n  longest.prepend(longest\
    \ + \"r\")\n  longest.prepend(longest + \"s\")\n  longest.prepend(longest + \"\
    t\")\n", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n \
    \ longest += string.reverse(longest.size)\n  longest.downcase!\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest_palindrome = longest + reverse(string[longest.length..-1]) + longest\n\
    \  longest_palindrome\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string[longest.length..-1].reverse\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.size)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest_postfix\
    \ = longest + string.reverse(longest)\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse", "  longest = find_longest_postfix(string)\n  longest\
    \ += string.reverse(longest)\n  return longest\nend", "  longest_postfix = find_longest_postfix(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_post", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(longest.size - longest.last))\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest_postfix = longest + longest\
    \ + \"-\"\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_post", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest_postfix = longest + longest + longest\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!",
  "  longest_postfix = find_longest_postfix(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_postfix.reverse!\n  longest_postfix.reverse!\n  longest_postfix.reverse!\n\
    \  longest_post", "  longest = find_longest_postfix(string)\n  longest += string.reverse(longest)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest_palindrome\
    \ = longest + string.reverse(longest)\n  longest_palindrome\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest[0 ..\
    \ longest.length-1])\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest = longest + reverse(string[longest..-1])\n  return longest\nend", " \
    \ longest = find_longest_palindrome(string)\n  longest = longest + string[longest.length..-1].reverse\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest_postfix\
    \ = longest + longest + \"-\"\n  longest_postfix = longest_postfix.reverse\n \
    \ longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ \"\")\n  longest_postfix = longest_postfix.gsub(/-$/, \"\")\n  longest_postfix\
    \ = longest_postfix.gsub(/-$/", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(longest.last).last)\n  longest\nend",
  "  max_length = 0\n  max_length_postfix = []\n  max_length_postfix_reverse = []\n\
    \  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index =\
    \ 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length))\n\
    \  longest.prepend(longest.first(longest.length))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).reverse)\n\
    \  longest\nend", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length = 0\n\
    \  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest <<\
    \ string.reverse[longest.size - longest.downcase.length]\n  longest\nend", " \
    \ max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix = \"\
    \"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_postfix_reverse =\
    \ \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_postfix(string)\n  longest.reverse!\n\
    \  longest << find_longest_prefix(string)\n  longest.reverse!\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest_postfix = longest + longest\
    \ + \"-\"\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_post", " \
    \ longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest_postfix\
    \ = longest + longest + \"-\"\n  longest_postfix = longest_postfix.reverse\n \
    \ longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_post", "  longest = find_longest_palindrome(string)\n  longest\
    \ += string.reverse(longest.index(longest))\n  return longest\nend", "  longest\
    \ = find_longest_postfix(string)\n  reversed = reverse(string)\n  result = string\
    \ + reverse + longest\n  result\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest_postfix = longest + longest + \"a\"\n  longest_postfix = longest_postfix.reverse\n\
    \  longest_postfix = longest_postfix.gsub(/[^a-z]/i, '')\n  longest_postfix =\
    \ longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfix.gsub(/[^a-z]/i,\
    \ '')\n  longest_postfix = longest_postfix.reverse\n  longest_postfix = longest_postfi",
  "  longest = find_longest_postfix_palindrome(string)\n  longest += string.reverse(longest.size)\n\
    \  return longest\nend", "  longest = find_longest_palindrome(string)\n  prefix\
    \ = string[0,longest]\n  suffix = string[longest,string.length]\n  reversed_prefix\
    \ = prefix.reverse\n  reversed_suffix = suffix.reverse\n  new_string = reversed_prefix\
    \ + reversed_suffix\n  return new_string\nend", "  longest = find_longest_postfix(string)\n\
    \  longest += string.reverse(longest)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string).reverse)\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice!(0, longest.length))\n  longest\nend", "  longest\
    \ = find_longest_postfix(string)\n  longest.reverse!\n  longest << find_longest_prefix(string)\n\
    \  longest.reverse!\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string.slice!(0, longest.length)))\n\
    \  longest\nend", "  longest_postfix = find_longest_postfix(string)\n  longest_postfix\
    \ = longest_postfix.reverse\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(longest_postfix)\n  longest_postfix.reverse!\n\
    \  longest_postfi", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest += longest + \"-\"\n  longest.upcase!\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice(longest.size\
    \ - longest.last))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest += string.reverse(longest.size)\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest += string.reverse(longest.first)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  return longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string).reverse)\n  longest\nend",
  "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length =\
    \ 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length = 0\n\
    \  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length =\
    \ 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "  longest = find_longest_postfix(string)\n  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest.prepend(longest.first(longest.length))\n  longest.prepend(longest.first(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest_postfix\
    \ = longest + longest + \"-\"\n  longest_postfix = longest_postfix.reverse\n \
    \ longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_postfix = longest_postfix.gsub(/-$/, '')\n  longest_postfix =\
    \ longest_postfix.gsub(/-$/, '')\n  longest_postfix = longest_postfix.gsub(/-$/,\
    \ '')\n  longest_post", "  longest = find_longest_postfix(string)\n  longest =\
    \ longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest +=\
    \ string.reverse(longest.size)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest += string.reverse(longest.size)\n  longest.downcase!\n\
    \  return longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest += string.reverse(longest.size)\n  longest.downcase!\n  return longest\n\
    end", "  longest = find_longest_postfix(string)\n  longest += string.reverse(longest[1..-1])\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.rindex))\n  longest\nend", "  max_length = 0\n  max_length_postfix =\
    \ nil\n  max_length_prefix = nil\n  max_length_suffix = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string[longest.length..-1].reverse\n  longest\nend", " \
    \ longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  longest = find_longest_postfix(string)\n\
    \  longest += string.reverse(longest[0 .. longest.length-1])\n  longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.downcase!\n  longest +=\
    \ longest + \"-\"\n  longest.downcase!\n  longest.prepend(longest + \"-\")\n \
    \ longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"\
    -\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n\
    \  longest.prepend(longest + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(longest\
    \ + \"-\")\n  longest.prepend(longest + \"-\")\n  longest.prepend(lon", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0, longest.length))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest.prepend(string.upcase)\n  longest\n\
    end", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest[longest.size..-1]).to_s\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(longest.last(longest.length).reverse)\n  longest\nend", " \
    \ longest = find_longest_postfix(string)\n  reversed = reverse(string[longest.first..-1])\n\
    \  string.insert(longest.last, reversed)\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  return longest\nend",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest << longest << longest <<\
    \ longest << longest << longest << longest << longest ", "  max_length = 0\n \
    \ max_length_postfix = \"\"\n  max_length_postfix_reverse = \"\"\n  \n  string.split(\"\
    \").each do |char|\n    if char == char.reverse\n      max_length = max_length\
    \ + 1\n      max_length_postfix = char\n      max_length_postfix_reverse = char.reverse\n\
    \    end\n  end\n  \n  max_length_postfix = max_length_postfix.reverse\n  max_length_postfix_reverse\
    \ = max_length_postfix_reverse.reverse\n  \n  max_length_postfix.concat(max_length_postfix_reverse)\n\
    \  \n  max_length_postfix.split(\"\").each do |char|\n    if char == char.reverse\n\
    \      return char\n    end\n  end\n  \n  return nil\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(longest.rindex, longest.length))\n  longest\n\
    end", "  longest = find_longest_postfix_palindrome(string)\n  longest.downcase!\n\
    \  longest << find_prefix_palindrome(string, longest)\n  longest.downcase!\n \
    \ longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest.index(longest))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(longest.last(longest.length).reverse)\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(longest.last(longest.length))\n  longest.prepend(longest.first(longest.length))\n\
    \  longest\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(longest.size\
    \ - longest.first))\n  longest\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest += string.reverse(longest.index(longest))\n  longest\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest = longest + longest + string[longest.length..-1]\n\
    \  longest = longest.downcase\n  longest = longest.insert(longest.length-1, longest.rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.rjust(longest.length).ljust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length).ljust(longest.length).rjust(longest.length))\n\
    \  longest = longest.insert(longest.length-1, longest.ljust(longest.length).rjust(longest.length).ljust(longest.length).",
  "  longest = find_longest_postfix(string)\n  longest.downcase!\n  longest.prepend(string.downcase)\n\
    \  longest.prepend(string.downcase.reverse)\n  longest\nend", "  max_length =\
    \ 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_",
  "  longest = find_longest_palindrome(string)\n  longest_postfix = longest + string[longest.length..-1]\n\
    \  longest_postfix = longest_postfix.reverse\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n\
    \  longest_postfix.reverse!\n  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n\
    \  longest_postfix.prepend(string)\n  longest_postfix.reverse!\n  longest_postfi",
  "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_reverse = \"\
    \"\n  max_length_prefix_reverse_index = 0\n  max_length_prefix_reverse_index2\
    \ = 0\n  max_length_prefix_reverse_index3 = 0\n  max_length_prefix_reverse_index4\
    \ = 0\n  max_length_prefix_reverse_index5 = 0\n  max_length_prefix_reverse_index6\
    \ = 0\n  max_length_prefix_reverse_index7 = 0\n  max_length_prefix_reverse_index8\
    \ = 0\n  max_length_prefix_reverse_index9 = 0\n  max_length_prefix_reverse_index10\
    \ = 0\n  max_length_prefix_reverse_index11 = 0\n  max_length_prefix_reverse_index12\
    \ = 0\n  max_length_prefix_reverse_index13 = 0\n  max_length_prefix_reverse_index14\
    \ = 0\n  max_length_prefix_reverse_index15 = 0\n  max_length_prefix_reverse_index16\
    \ = 0\n  max_length_prefix_reverse_index17 = 0\n  max_length_prefix_reverse_index18\
    \ = 0\n  max_length_prefix_reverse_index19 = 0\n  max_length_prefix_reverse_index20\
    \ = 0\n  max_length_prefix_reverse_index21 = 0\n  max_length_prefix_reverse_index22\
    \ = 0\n  max_length_prefix_reverse_index23 = 0\n  max_length_prefix_reverse_index24\
    \ = 0\n  max_length_prefix_reverse_index25 = 0\n  max_length_prefix_reverse_index26\
    \ = 0\n  max_length_prefix_reverse_index27 = 0\n  max_length_prefix_reverse_index28\
    \ = 0\n  max_length_prefix_reverse_index29 = 0\n  max_length_prefix_reverse_index30\
    \ = 0\n  max_length_prefix_reverse_index31 = 0\n  max_length_prefix_reverse_index32\
    \ = 0\n  max_length_prefix_reverse_index33 = 0\n  max_length_prefix_reverse_index34\
    \ = 0\n  max_length_prefix_reverse_index35 = 0\n  max_length_prefix_reverse_index36\
    \ = 0\n  max_length_prefix_reverse_index37 = 0\n  max_length_prefix_reverse_index38\
    \ = 0\n  max_length_prefix_reverse_index39 = 0\n  max_length_prefix_reverse_index40\
    \ = 0\n  max_length_prefix_reverse_index41 = 0\n  max_length_prefix_reverse_index42\
    \ = 0\n  max_length_prefix_reverse_index43 = 0\n  max_length_prefix_reverse_index44\
    \ = 0\n  max_length_prefix_reverse_index45 = 0\n  max_length_prefix_reverse_index46\
    \ = 0\n  max_length_prefix_reverse_index47 = 0\n  max_length_prefix_reverse_index48\
    \ = 0\n  max_length_prefix_reverse_index49 = 0\n  max_length_prefix_reverse_index50\
    \ = 0\n  max_length_prefix_reverse_index51 = 0\n  max_length_prefix_reverse_index52\
    \ = 0\n  max_length_prefix_reverse_index53 = 0\n  max_length_prefix_reverse_index54\
    \ = 0\n  max_length_prefix_reverse_index55 = 0", "  longest = find_longest_postfix(string)\n\
    \  longest = longest + longest + string[longest.length..-1]\n  longest = longest.downcase\n\
    \  longest = longest.gsub(/[^a-z]/, '')\n  longest = longest.gsub(/\\s+/, '')\n\
    \  longest = longest.gsub(/\\s+/, '-')\n  longest = longest.gsub(/-+/, '-')\n\
    \  longest = longest.gsub(/-+$/, '')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')\n  longest = longest.gsub(/-+$/, '-')\n \
    \ longest = longest.gsub(/-+$/, '-')", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(longest.rindex, longest.length))\n  longest\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
