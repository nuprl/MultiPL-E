name: HumanEval_99_closest_integer
language: rb
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# Note:\n# Rounding away from\
  \ zero means that if the given number is equidistant\n# from two integers, the one\
  \ you should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  def closest_integer(value)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n\
  \    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"\
  10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"\
  -15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"\
  0\"))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
