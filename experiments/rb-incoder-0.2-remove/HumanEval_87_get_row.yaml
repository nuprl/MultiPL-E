name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\ndef get_row(lst, x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i] == x\n    \
    \  row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", " \
    \ row = []\n  for i in 0...lst.size\n    row = row + [lst[i]]\n  end\n  row.sort!\n\
    \  row.sort!\n  row.reverse!\n  row.reverse!\n  for i in 0...lst.size\n    if\
    \ row[i] == x\n      return [(i + 1, 0)]\n    end\n  end\n  return []\nend", " \
    \ row = []\n  for i in 0..(lst.size-1)\n    row = row + [lst[i][x]]\n  end\n \
    \ row.sort!\n  row.sort!\n  row.reverse!\n  return row\nend", "    row = [0] *\
    \ len(lst)\n    row.insert(x, 0)\n    return row", "  row = []\n  for i in 0...lst.length\n\
    \    if lst[i] >= x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n \
    \ row.sort!{|a, b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in 0..lst.size-1\n\
    \    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n\
    \  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row = []\n \
    \ for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n \
    \ row.sort!.reverse!\n  row\nend", "  row = []\n  for i in 0...lst.length\n  \
    \  if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n\
    \  row.sort! {|a, b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i] == x\n      row << [i, i]\n      break\n    end\n  end\n\
    \  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n      \
    \  return [i, j]\n      end\n    end\n  end\nend", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i][0] == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n\
    \  row.each do |row|\n    row.sort!\n  end\n  row\nend", "  row = []\n  for i\
    \ in 0..(lst.size-1)\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\n\
    end", "  row = []\n  for i in 0..lst.size-1\n    if lst[i][0] == x\n      row\
    \ << [lst[i][1], lst[i+1][1]]\n    end\n  end\n  row.sort!\n  row.sort!{|a, b|\
    \ b[0] <=> a[0]}\n  return row\nend", "  row = []\n  for i in lst\n    row.push(i)\n\
    \  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n  end\n  row.each do |i|\n\
    \    i.each do |j|\n      if j == x\n        puts \"(#{i.first}, #{i.last})\"\n\
    \      end\n    end\n  end\nend", "  rows = []\n  row = []\n  for i in lst\n \
    \   row.push(i)\n    if i == x\n      rows.push(row)\n      row = []\n  end\n\
    \  rows.sort!\n  rows.reverse!\n  return rows\nend", "  rows = []\n  for i in\
    \ 0...lst.size\n    if lst[i][0] == x\n      rows << [lst[i]]\n    end\n  end\n\
    \  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n    row.reverse!\n\
    \  end\n  return rows\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0]\
    \ == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a,b| b[1] <=> a[1]}\n  row\nend", "  rows = []\n  for i in 0..lst.size-1\n\
    \    if lst[i][0] == x\n      rows << [(i+1, lst[i][1])]\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows.each do |row|\n    row.sort!\n  end\n  return rows\n\
    end", "  row = []\n  for i in 0...lst.size\n    row << [lst[i][0], lst[i][x]]\n\
    \  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row =\
    \ []\n  for i in 0..(lst.size-1)\n    row.push([i, lst[i]])\n  end\n  row.sort!\n\
    \  row.each do |row|\n    row.sort!\n  end\n  row.each do |row|\n    row.each\
    \ do |column|\n      break if column[0] == x\n    end\n  end\n  row\nend", " \
    \ row = []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  row = []\n  for i in 0...lst.length\n \
    \   if lst[i] == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] ==\
    \ x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  return row\nend", "  row = []\n  for i in 0..(lst.length\
    \ - 1)\n    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "  row = []\n  for i in 0..(lst.length\
    \ - 1)\n    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row = 0\n  result = []\n\
    \  while row < len(lst)\n    column = 0\n    while column < len(lst[row])\n  \
    \    if lst[row][column] == x\n        result.push([row, column])\n      column\
    \ += 1\n    row += 1\n  result.sort!\n  result.sort!.reverse!\n  return result\n\
    end", "  row = []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n\
    \  row.sort!\n  row.sort!.reverse\n  row\nend", "  row = []\n  for i in 0...lst.length\n\
    \    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n \
    \ row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in\
    \ 0..lst.size-1\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a,b| b[1] <=> a[1]}\n  return row\n\
    end", "  rows = []\n  row = []\n  for i in lst\n    if i == x\n      row << i\n\
    \    else\n      rows << row\n      row << i\n    end\n  end\n  rows << row\n\
    \  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n    row.reverse!\n\
    \  end\n  return rows\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0]\
    \ == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  row\nend", "  rows = []\n  for i in 0..lst.count\n\
    \    row = []\n    for j in 0..lst[i].count\n      if lst[i][j] == x\n       \
    \ row = [(i, j)]\n        break\n    end\n    rows.push(row)\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  return rows\nend", "  row = []\n  for i in lst\n    if i ==\
    \ x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\n\
    end", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n      row <<\
    \ [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1]\
    \ <=> a[1]}\n  return row\nend", "  row = []\n  for i in lst\n    row.push([i,\
    \ i.index(x)])\n  row.sort!\n  row.sort!\n  row.reverse!\n  return row\nend",
  "  rows = []\n  for i in 0..(lst.size - 1)\n    row = lst[i]\n    if row[x] == x\n\
    \      rows.push([i, row])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  return\
    \ rows\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n  \
    \    row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a,\
    \ b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in lst\n    if i\
    \ == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\n\
    end", "  row = []\n  for i in 0...lst.size\n    row = row + [lst[i]]\n  end\n\
    \  row.sort!\n  row.sort! {|a,b| b[1] <=> a[1]}\n  row.reverse!\n  row.map {|i|\
    \ i[0]}\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i] == x\n\
    \      row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", " \
    \ rows = []\n  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n      rows <<\
    \ [(i + 1, lst[i][1])]\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows\n\
    end", "  row = []\n  for i in 0...lst.length\n    row.push([lst[i]])\n  end\n\
    \  row.sort_by! { |i| i[0] }\n  row.sort_by! { |i| i[1].length }\n  row.each do\
    \ |i|\n    i.sort_by! { |j| -j }\n  end\n  row.each do |i|\n    i.each do |j|\n\
    \      if j == x\n        row.push([i, j])\n      end\n    end\n  end\n  return\
    \ row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i] >= x\n \
    \     row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[0]\
    \ <=> a[0]}\n  row\nend", "  row = []\n  for i in 0...lst.length\n    if lst[i]\
    \ == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return\
    \ row\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n   \
    \   row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row =\
    \ []\n  for i in 0..(lst.size-1)\n    row = row + [lst[i]]\n  end\n  row.sort!\n\
    \  row.sort! {|a, b| b[1] <=> a[1]}\n  row = [row[x]]\n  row.reverse!\n  row\n\
    end", "  rows = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n      rows.push(lst[i])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.reverse!\n  end\n  return rows\nend", "  row = []\n  for i in lst\n \
    \   if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  for i in 0...lst.length\n    row << [lst[i], lst[i]]\n\
    \  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n\
    \  row.each {|x| x.reverse!}\n  row.each {|x| x.reverse!}\n", "  row = []\n  for\
    \ i in 0..lst.size-1\n    if lst[i] >= x\n      row << [lst[i], i]\n    end\n\
    \  end\n  row.sort!\n  row.sort!{|a, b| b[0] <=> a[0]}\n  row\nend", "  row =\
    \ []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << [i, lst[i]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\n\
    end", "  row = []\n  for i in lst\n    row.push([i, i.index(x)])\n  row.sort!\n\
    \  row.sort!\n  row.reverse!\n  return row\nend", "  row = []\n  for i in 0...lst.size\n\
    \    if lst[i] > x\n      break\n    row << i\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n\
    \      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i][0] == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n \
    \ row.each do |row|\n    row.sort!\n  end\n  return row\nend", "  row = []\n \
    \ for i in lst\n    row.push(i)\n  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n\
    \  end\n  row.each do |i|\n    i.each do |j|\n      if j == x\n        puts \"\
    #{i[0]} #{i[1]}\"\n      end\n    end\n  end\nend", "  row = []\n  for i in 0..(lst.length\
    \ - 1)\n    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort!{|a, b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in\
    \ 0..(lst.size - 1)\n    if lst[i][0] == x\n      row << [lst[i]]\n    end\n \
    \ end\n  row.sort!\n  row.each do |row|\n    row.sort!\n  end\n  row\nend", " \
    \ row = []\n  for i in lst\n    row.push(i)\n  end\n  row.sort!\n  row.map! {|i|\
    \ i.to_i}\n  row.push(x)\n  row.sort!\n  row.map! {|i| i.to_i}\n  row\nend", " \
    \ row = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << i\n  \
    \  end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  row = []\n  for\
    \ i in 0..(lst.size - 1)\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[0] <=> a[0]}\n  return row\n\
    end", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0] == x\n      row\
    \ << [lst[i]]\n    end\n  end\n  row.sort!\n  row.sort!{|a,b| b[1] <=> a[1]}\n\
    \  row\nend", "  row = 0\n  coords = []\n  while row < lst.size\n    coords <<\
    \ [row, lst[row].size - 1]\n    row += 1\n  end\n  coords.sort!\n  coords.reverse!\n\
    \  coords.each do |coord|\n    coord.sort!\n  end\n  coords.each do |coord|\n\
    \    coord.sort!\n  end\n  coords.each do |coord|\n    coord.each do |coord|\n\
    \      coord.each do |coord|\n        coord.each do |coord|\n          coord.each\
    \ do |coord|\n            coord.each do |coord|\n              coord.each do |coord|\n\
    \                coord.each do |coord|\n                  coord.each do |coord|\n\
    \                    coord.each do |coord|\n                      coord.each do\
    \ |coord|\n                        coord.each do |coord|\n                   \
    \       coord.each do |coord|\n                            coord.each do |coord|\n\
    \                              coord.each do |coord|\n                       \
    \         coord.each do |coord|\n                                  coord.each\
    \ do |coord|\n                                    coord.each do |coord|\n    \
    \                                  coord.each do |coord|\n                   \
    \                     coord.each do |coord|\n                                \
    \          coord.each do |coord|\n                                           \
    \ coord.each do |coord|\n                                              coord.each\
    \ do |coord|\n                                                coord.each do |coord|\n\
    \                                                  coord.each do |coord|\n   \
    \                                                 coord.each do |coord|\n    \
    \                                                  coord.each do |coord|\n   \
    \                                                     coord.each do |coord|\n\
    \                                                          coord.each do |coord|\n\
    \                                                            coord.each do |coord|\n\
    \                                                              coord.each do |coord|\n\
    \                                                                coord.each do\
    \ |coord|\n                                                                  coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.each do |coord|\n      \
    \                                                              coord.each do |coord|\n\
    \                                                                    coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.", "  row = []\n  for i\
    \ in 0...lst.size\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n\
    \    end\n  end\n  row.sort!\n  row.sort!\n  row.reverse!\n  row\nend", "  row\
    \ = []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  rows = []\n  for i in 0...lst.size\n  \
    \  if lst[i][0] == x\n      rows.push(lst[i])\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows.each do |row|\n    row.sort!\n    row.reverse!\n  end\n\
    \  return rows\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row =\
    \ []\n  for i in 0...lst.size\n    if lst[i] == x\n      row << i\n    end\n \
    \ end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row = []\n  for i in\
    \ 0...lst.size\n    if lst[i] == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  rows = []\n  for i in 0..lst.count\n  \
    \  row = lst[i]\n    row.each do |j|\n      if j == x\n        rows.push([i, j])\n\
    \      end\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows\nend", "  row\
    \ = []\n  for i in lst\n    row.push(i)\n  end\n  row.sort!\n  row.each do |i|\n\
    \    i.sort!\n  end\n  row.each do |i|\n    i.each do |j|\n      if j == x\n \
    \       return i\n      end\n    end\n  end\nend", "  row = []\n  for i in lst\n\
    \    if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  for i in 0..(lst.length - 1)\n    if lst[i][0] ==\
    \ x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n  row.each do |r|\n \
    \   r.sort!\n  end\n  row\nend", "  row = []\n  for i in lst\n    if i == x\n\
    \      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0] == x\n      row << [lst[i][1],\
    \ lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n\
    \  row\nend", "  row = []\n  for i in 0...lst.size\n    row << [lst[i]]\n  end\n\
    \  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row.each do |r|\n    r.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  end\n  row\nend", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n\
    \  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", " \
    \ row = []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "    row = [0] * len(lst)\n    row.insert(x,\
    \ 0)\n    return row", "  row = []\n  for i in 0..(lst.size-1)\n    row.push([i,\
    \ lst[i]])\n  end\n  row.sort!\n  row.sort! { |a, b| b[1] <=> a[1] }\n  row.map!\
    \ { |a| [a[0], a[1]] }\n  row.map { |a| [a[0], a[1]] }.select { |a| a[0] == x\
    \ }\nend", "    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst\
    \ = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n   \
    \ lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    ", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i][0] == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n \
    \ row.sort! {|a, b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in 0...lst.length\n\
    \    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n \
    \ row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n\
    \  row.sort!\n  row.sort!.reverse\n  return row\nend", "    lst = lst.sort\n \
    \   lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    ", "  row = []\n  for i in 0...lst.size\n    if lst[i] > x\n      break\n\
    \    row << i\n  end\n  row.sort!\n  row.sort! {|a, b| b - a}\n  row.reverse!\n\
    \  row\nend", "  row = []\n  for i in 0...lst.size\n    row = row + [lst[i]]\n\
    \  end\n  row.sort!\n  row.sort!{|a,b| b[1] <=> a[1]}\n  row.each do |i|\n   \
    \ i.sort!{|a,b| b[0] <=> a[0]}\n  end\n  row\nend", "    row, col = [], []\n \
    \   row.append 0\n    col.append 0\n    i = 0\n    while i < len(lst)\n      \
    \  if lst[i] == x\n            row.append i\n            col.append i\n      \
    \      i += 1\n        else\n            i += 1\n    return row, col", "  row\
    \ = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << i\n    end\n\
    \  end\n  row.sort!\n  row.sort!\n  return row\nend", "    lst = lst.sort\n  \
    \  lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n    lst = lst.sort\n\
    \    ", "  rows = []\n  for i in 0..lst.size-1\n    if lst[i][0] == x\n      rows\
    \ << [lst[i]]\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n\
    \    row.sort!\n    row.reverse!\n  end\n  rows\nend", "  row = []\n  for i in\
    \ 0..(lst.size - 1)\n    if lst[i][0] == x\n      row << [lst[i]]\n    end\n \
    \ end\n  row.sort!\n  row.each do |r|\n    r.sort!\n  end\n  return row\nend",
  "  row = []\n  for i in 0...lst.length\n    if lst[i] > x\n      break\n    else\
    \ \n      row << [lst[i], i]\n  end\n  row.sort!\n  row.sort!{|a, b| b[0] <=>\
    \ a[0]}\n  row\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] ==\
    \ x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in lst\n  \
    \  row.push(i)\n  end\n  row.push(x)\n  row.sort!\n  row.sort!.reverse\n  row\n\
    end", "  row = []\n  for i in 0..lst.size-1\n    if lst[i] == x\n      row <<\
    \ [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n\
    \  row\nend", "  row = []\n  for i in 0..lst.size-1\n    if lst[i][0] == x\n \
    \     row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in 0...lst.length\n\
    \    if lst[i] == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!\n\
    \  row.each do |i|\n    row.sort!\n  end\n  return row\nend", "  lst.each do |row|\n\
    \    row.each do |item|\n      if item == x\n        return row\n      end\n \
    \   end\n  end\nend", "  row = []\n  for i in 0...lst.length\n    if lst[i] ==\
    \ x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return\
    \ row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n\
    \      row << [lst[i]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1]\
    \ <=> a[1]}\n  row\nend", "    rows = lst.count\n    columns = lst[0].count\n\
    \    \n    coordinates = []\n    \n    for row in range(rows):\n        row_coordinates\
    \ = []\n        for column in range(columns):\n            row_coordinates.append((row,\
    \ column))\n        coordinates.append(row_coordinates)\n    \n    coordinates.sort(key=lambda\
    \ coordinate: coordinate[0])\n    coordinates.sort(key=lambda coordinate: coordinate[1],\
    \ reverse=True)\n    \n    coordinates_row = []\n    \n    for coordinate in coordinates:\n\
    \        if coordinate[0] == x:\n            coordinates_row.append(coordinate)\n\
    \    \n    return coordinates_row", "  row = []\n  for i in lst\n    if i == x\n\
    \      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  row = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << i\n   \
    \ end\n  end\n  row.sort!\n  row.sort! {|a, b| b}\n  row\nend", "  row = []\n\
    \  for i in 0..(lst.size - 1)\n    row = row + [lst[i]]\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  for i in 0..(row.size - 1)\n    if row[i] == x\n    \
    \  return [[i, 0]]\n    end\n  end\n  return []\nend", "  row = []\n  for i in\
    \ 0...lst.size\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n \
    \   end\n  end\n  row.sort!\n  row.sort! {|a, b| b[0] <=> a[0]}\n  return row\n\
    end", "  row = 0\n  result = []\n  while row < len(lst)\n    column = 0\n    while\
    \ column < len(lst[row])\n      if lst[row][column] == x\n        result.push([row,\
    \ column])\n      column += 1\n    row += 1\n  result.sort!\n  result.sort!.reverse!\n\
    \  return result\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0]\
    \ == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  return row\nend", "  row = []\n  for i in 0..lst.size-1\n\
    \    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n\
    \  row.sort!\n  row.sort!{|a, b| b[1] <=> a[1]}\n  return row\nend", "  row =\
    \ []\n  for i in 0...lst.size\n    if lst[i][0] == x\n      row << [lst[i][1],\
    \ lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n\
    \  return row\nend", "    row = lst.index(x)\n    coords = lst[:row]\n    coords.reverse()\n\
    \    coords.insert(0,0)\n    return coords", "  row = []\n  for i in lst\n   \
    \ if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0] == x\n\
    \      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in lst\n    if i ==\
    \ x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n  return\
    \ row\nend", "  row = []\n  for i in 0..lst.size-1\n    row.push([i, lst[i]])\n\
    \  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n  end\n  row\nend", "  row\
    \ = []\n  for i in 0..lst.size-1\n    if lst[i][0] == x\n      row << [lst[i][1],\
    \ lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a,b| b[1] <=> a[1]}\n\
    \  return row\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  row = []\n\
    \  for i in 0...lst.size\n    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\n\
    end", "  row = []\n  for i in lst\n    row.push(i)\n  end\n  row.sort!\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.", "  row = []\n  for i in 0..(lst.size -\
    \ 1)\n    if lst[i] == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n  \
    \    row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\n\
    \  return row\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  row = []\n\
    \  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n      row << [lst[i]]\n\
    \    end\n  end\n  row.sort!\n  row.each do |row|\n    row.sort!\n  end\n  return\
    \ row\nend", "  row = []\n  for i in 0..(lst.length - 1)\n    if lst[i] < x\n\
    \      break\n    row << [lst[i], i]\n  end\n  row.sort!\n  row.each do |r|\n\
    \    r.sort!\n  end\n  row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n\
    \    if lst[i] <= x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n \
    \ row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row = []\n  for i in 0..(lst.length\
    \ - 1)\n    if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "    row = lst[:] # copy the list\n\
    \    row.sort! # sort the list\n    row.each do |row|\n        row.sort! # sort\
    \ the row\n        row.each do |column|\n            if column == x\n        \
    \        return [row, column]\n            end\n        end\n    end\nend", " \
    \ row = []\n  for i in 0...lst.length\n    row = row + [(i + 1, lst[i])]\n  end\n\
    \  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row = row[x..-1]\n  row.sort!\n\
    \  row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    row = row + [lst[i]]\n\
    \  end\n  row.sort!\n  row.sort!\n  row.reverse!\n  row = [row[x]]\n  row.sort!\n\
    \  row.reverse!\n  row\nend", "  rows = []\n  row = []\n  for i in lst\n    if\
    \ i == x\n      row << i\n      rows << row\n      row = []\n    end\n  end\n\
    \  rows << row\n  rows.sort!\n  rows.each do |row|\n    row.sort!\n  end\n  rows\n\
    end", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0] == x\n      row\
    \ << [lst[i]]\n    end\n  end\n  row.sort!\n  row.sort!{|a,b| b[1] <=> a[1]}\n\
    \  return row\nend", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] ==\
    \ x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1]\
    \ <=> a[1]}\n  return row\nend", "  row = 0\n  while row < lst.size\n    if lst[row][x]\
    \ == x\n      return [row, x]\n    row += 1\n  end\nend", "  row = 0\n  while\
    \ row < lst.size\n    row = row + 1\n    col = row - 1\n    if lst[row][col] ==\
    \ x\n      return [row, col]\n    end\n  end\nend", "  rows = []\n  for i in 0..lst.size-1\n\
    \    if lst[i][0] == x\n      rows << [lst[i]]\n    end\n  end\n  rows.sort!\n\
    \  rows.each do |row|\n    row.sort!\n  end\n  return rows\nend", "  row = []\n\
    \  for i in 0..lst.size-1\n    row.push([i, lst[i]])\n  end\n  row.sort!\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row.each do |i|\n    i.sort!\n  end\n  row\nend",
  "  row = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << [i, lst[i]]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\n\
    end", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n     \
    \ row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in lst\n    if i == x\n      row << i\n   \
    \ end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  row = []\n  for\
    \ i in lst\n    row.push(i)\n  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n\
    \  end\n  row.each do |i|\n    i.each do |j|\n      if j == x\n        return\
    \ i\n      end\n    end\n  end\nend", "  row = 0\n  coords = []\n  while row <\
    \ len(lst) and lst[row][x] == x\n    row += 1\n    coords.append((row, x))\n \
    \ coords.sort\n  coords.reverse\n  coords.each do |coord|\n    coords.sort\n \
    \ end\nend", "  rows = []\n  for i in 0...lst.size\n    row = lst[i]\n    if row.include?(x)\n\
    \      rows << [(i + 1, row.index(x))]\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n  end\n  rows\nend", "  row = []\n  for\
    \ i in 0..(lst.size-1)\n    if lst[i] == x\n      row << [lst[i], i]\n    end\n\
    \  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend", "  row =\
    \ []\n  for i in 0..lst.size-1\n    if lst[i] == x\n      row << i\n    end\n\
    \  end\n  row.sort!\n  row.sort!{|a,b| b}\n  return row\nend", "  row = 0\n  coords\
    \ = []\n  while row < len(lst)\n    coord = (row, 0)\n    coords.append(coord)\n\
    \    row += 1\n  end\n  coords.each do |coord|\n    coord.each do |column|\n \
    \     if column < x\n        coords.delete(coord)\n      end\n    end\n  end\n\
    \  return coords\nend", "  row = []\n  for i in 0..(lst.size-1)\n    row = row\
    \ + [lst[i]]\n  end\n  row.sort!\n  row.sort!\n  row.reverse!\n  row = [row[x]]\n\
    \  row.reverse!\n  row\nend", "  row = []\n  for i in lst\n    if i == x\n   \
    \   row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return row\n\
    end", "  row = []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n\
    \  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i][0] == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n \
    \ row.each do |i|\n    i.sort!\n  end\n  row\nend", "  row = []\n  for i in 0..lst.size-1\n\
    \    if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n\
    \  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", "  row =\
    \ []\n  for i in 0..(lst.length - 1)\n    row.push([lst[i]])\n  end\n  row.sort!\n\
    \  row.each do |row|\n    row.sort!\n  end\n  row.each do |row|\n    row.each\
    \ do |column|\n      if column[0] == x\n        return row\n      end\n    end\n\
    \  end\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i] == x\n  \
    \    row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  row = []\n  for i in 0...lst.size\n    if lst[i] >= x\n      row << [lst[i],\
    \ i]\n    end\n  end\n  row.sort!\n  row.sort!{|a, b| b[1] <=> a[1]}\n  row\n\
    end", "  row = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row =\
    \ []\n  for i in 0..(lst.length - 1)\n    row.push([lst[i]])\n  end\n  row.sort_by!\
    \ { |i| i.length }\n  row.sort_by! { |i| -i.length }\n  row.each do |i|\n    i.sort_by!\
    \ { |j| j.length }\n    i.sort_by! { |j| -j.length }\n  end\n  row.each do |i|\n\
    \    i.each do |j|\n      if j == x\n        row.push([i, j])\n      end\n   \
    \ end\n  end\n  row\nend", "  row = []\n  for i in 0..(lst.length - 1)\n    if\
    \ lst[i] >= x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!{|a,\
    \ b| b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n  \
    \  if lst[i] == x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[1] <=> a[1]}\n  row\nend", "  rows = []\n  for i in 0..(lst.size -\
    \ 1)\n    row = lst[i]\n    row.each_with_index do |y, j|\n      if y == x\n \
    \       rows.push([i, j])\n      end\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  return rows\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", "  row =\
    \ []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse\n  row\nend", "  row = []\n  for i in 0...lst.size\n    if\
    \ lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n\
    \  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i\
    \ in 0..(lst.size-1)\n    if lst[i][0] == x\n      row << [lst[i]]\n    end\n\
    \  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend", " \
    \ row = []\n  for i in 0..(lst.size-1)\n    if lst[i] >= x\n      row << [lst[i],\
    \ i]\n    end\n  end\n  row.sort!\n  row.sort!{|a,b| b[1] <=> a[1]}\n  return\
    \ row\nend", "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i][0] == x\n\
    \      row << [lst[i]]\n    end\n  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n\
    \  end\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0]\
    \ == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n  row.sort! {|a, b|\
    \ b[0] <=> a[0]}\n  row\nend", "  row = []\n  for i in lst\n    if i == x\n  \
    \    row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == j\n        next if i == 0\n      end\n      yield [i, j] if col == x\n\
    \    end\n  end\nend", "  row = []\n  for i in 0..(lst.size-1)\n    row = row\
    \ + [lst[i][x]]\n  end\n  row.sort!\n  row.sort!.reverse\n  return row\nend",
  "  row = []\n  for i in 0...lst.length\n    if lst[i] >= x\n      row << [lst[i],\
    \ i]\n    end\n  end\n  row.sort!\n  row.sort!{|a, b| b[1] <=> a[1]}\n  row\n\
    end", "  row = []\n  for i in 0...lst.size\n    if lst[i] >= x\n      row.push(i)\n\
    \    end\n  end\n  row.sort\n  row.sort!.reverse\n  row\nend", "  row = []\n \
    \ for i in 0...lst.length\n    if lst[i] > x\n      break\n    else \n      row\
    \ << i\n  end\n  row.sort!\n  row.sort!\n  row.reverse!\n  row\nend", "  row =\
    \ []\n  for i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  rows = []\n  for i in 0..(lst.size-1)\n\
    \    row = lst[i]\n    if row.include?(x)\n      rows.push([i, row.index(x)])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows\nend", "  row = []\n  for\
    \ i in 0..lst.size-1\n    if lst[i][0] == x\n      row << [lst[i]]\n    end\n\
    \  end\n  row.sort!\n  row.sort!{|a, b| b[0] <=> a[0]}\n  return row\nend", " \
    \ row = []\n  for i in 0...lst.length\n    if lst[i] == x\n      row << i\n  \
    \  end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  row =\
    \ []\n  for i in 0...lst.size\n    if lst[i] == x\n      row << i\n    end\n \
    \ end\n  row.sort!\n  row.sort!.reverse\n  return row\nend", "  row = []\n  for\
    \ i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0]\
    \ == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!\
    \ {|a, b| b[1] <=> a[1]}\n  row\nend", "  row = []\n  for i in 0...lst.size\n\
    \    if lst[i] >= x\n      row.push(i)\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in lst\n    if i == x\n      row << i\n   \
    \ end\n  end\n  row.sort!\n  row.sort!.reverse\n  return row\nend", "  row = []\n\
    \  for i in 0..(lst.size - 1)\n    row = row + [(i + 1, lst[i][1])]\n  end\n \
    \ row.sort!\n  row = row.reverse\n  row.sort!\n  row = row.reverse\n  row.each\
    \ do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row = row.reverse\n\
    \  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row\
    \ = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n\
    \  row = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n\
    \  row.sort!\n  row = row.reverse\n  row.each do |i|\n    row = row + [(i[0],\
    \ i[1])]\n  end\n  row.sort!\n  row = row.reverse\n  row.each do |i|\n    row\
    \ = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row = row.reverse\n  row.each\
    \ do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row = row.reverse\n\
    \  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row\
    \ = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n\
    \  row = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n\
    \  row.sort!\n  row = row.reverse\n  row.each do |i|\n    row = row + [(i[0],\
    \ i[1])]\n  end\n  row.sort!\n  row = row.reverse\n  row.each do |i|\n    row\
    \ = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row = row.reverse\n  row.each\
    \ do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row = row.reverse\n\
    \  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n  row\
    \ = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i[1])]\n  end\n  row.sort!\n\
    \  row = row.reverse\n  row.each do |i|\n    row = row + [(i[0], i", "  row =\
    \ []\n  for i in 0..(lst.size-1)\n    row = row + [lst[i][x]]\n  end\n  row.sort!\n\
    \  row.sort!.reverse\n  return row\nend", "  row = []\n  for i in 0...lst.size\n\
    \    row.push([lst[i][0], lst[i][1]])\n  end\n  row.sort!\n  row.sort! {|a, b|\
    \ b[1] <=> a[1]}\n  row.map {|a| [a[0], a[1]]}\nend", "  row = []\n  for i in\
    \ lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in 0..lst.size-1\n    row = row + [(x[i], i)]\n\
    \  end\n  row.sort!\n  row.sort!{|a, b| b[1] <=> a[1]}\n  row\nend", "  row =\
    \ []\n  for i in 0..(lst.size-1)\n    if lst[i] <= x\n      row << [lst[i], i]\n\
    \    end\n  end\n  row.sort!\n  row.sort! {|a, b| b[1] <=> a[1]}\n  row\nend",
  "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i][0] == x\n      row << [lst[i][1],\
    \ lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort! {|a,b| b[1] <=> a[1]}\n\
    \  return row\nend", "  row = []\n  for i in lst\n    if i == x\n      row <<\
    \ i\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", " \
    \ row = []\n  for i in 0..(lst.size-1)\n    row = row + [(x+i, lst[i])]\n  end\n\
    \  row.sort!\n  row.sort!{|a,b| b[1]}\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i][0] == x\n      row << [lst[i]]\n    end\n  end\n  row.sort!\n \
    \ row.sort!{|a,b| b[1] <=> a[1]}\n  return row\nend", "  row = []\n  for i in\
    \ 0...lst.size\n    if lst[i] >= x\n      row.push(i)\n    end\n  end\n  row.sort!\n\
    \  row.sort!\n  return row\nend", "  row = []\n  for i in 0..(lst.size-1)\n  \
    \  if lst[i] >= x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!{|a,\
    \ b| b[1] <=> a[1]}\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n  \
    \  if lst[i][0] == x\n      row << [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n\
    \  row.sort! {|a, b| b[0] <=> a[0]}\n  return row\nend", "  row = []\n  for i\
    \ in 0..lst.size-1\n    if lst[i] == x\n      row << i\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse\n  row\nend", "  row = []\n  for i in lst\n    row.push(i)\n\
    \  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n  end\n  row.each do |i|\n\
    \    i.each do |j|\n      if j == x\n        puts \"(#{row.index(i)},#{row.index(j)})\"\
    \n      end\n    end\n  end\nend", "    row, col = len(lst), 0\n    lst = sorted(lst,\
    \ key=lambda x:(x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:(x[1], -x[0]))\n\
    \    while row > 0 and col < len(lst[0]):\n        if lst[row][col] == x:\n  \
    \          return [(row, col)]\n        elif lst[row][col] > x:\n            row\
    \ -= 1\n        else:\n            col += 1 \n    return []", "  row = []\n  for\
    \ i in lst\n    if i == x\n      row << i\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in lst\n    if i == x\n      row << i\n   \
    \ end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
