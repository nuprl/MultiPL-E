name: HumanEval_131_digits
language: rb
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1) \n# 1\n# >>> digits(4)\
  \ \n# 0\ndef digits(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n\
  \    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5,\
  \ candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5,\
  \ candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625,\
  \ candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n"
completions: ["  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit, i| sum\
    \ * 10 + digit.to_i if digit.to_i % 2 == 1 }\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  digits = n.to_s.split(//).map { |d| d.to_i }\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0) {\
    \ |sum, digit, i| sum + digit.to_i*(2 ** (i % 2)) }\nend", "  n.to_s.split(//).each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i }\nend", "  digits = n.to_s.split(//)\n\
    \  digits.each do |digit|\n    if digit.to_i.odd?\n      digit.to_i\n    end\n\
    \  end\nend", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\").map\
    \ { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit, i| sum *\
    \ 10 + digit.to_i }\nend", "  n.to_s.split(\"\").each_with_index.inject(0) {|sum,\
    \ digit, i| sum * 10 + digit.to_i}\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0) {\
    \ |sum, digit, i| sum * 10 + digit.to_i }\nend", "  n.to_s.split(\"\").map { |s|\
    \ s.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit| sum * 10\
    \ + (digit.to_i % 2) }\nend", "  n.to_s.split(\"\").map {|i| i.to_i}.inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) {|sum, digit, index| sum\
    \ + digit.to_i*(index&1)}\nend", "  n.to_s.reverse.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(//).each_with_index.inject(0)\
    \ {|sum, digit, i| sum * 10 + digit.to_i}\nend", "  n.to_s.split(//).map { |d|\
    \ d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).inject(:*)\nend", "  n.to_s.split(//).each_with_index.map\
    \ { |d, i| i % 2 == 0 ? d.to_i : 0} * n\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i if digit.to_i % 2 == 1 }\nend", "  n.to_s.split(//).inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit, i| sum *\
    \ 10 + (digit.to_i % 2 == 0 ? digit.to_i : 0) }\nend", "  digits = n.to_s.reverse.split(//).map\
    \ { |d| d.to_i }\n  digits.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\n\
    end", "  n.to_s.split(//).inject(0) { |sum, digit| sum * 2 + digit.to_i }\nend",
  "  digits = n.to_s.split(//)\n  digits.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.reverse.scan(/\\d/).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) { |sum, digit, i| sum * 10 + digit.to_i if digit.to_i\
    \ % 2 == 1 }\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  n.to_s.split(//).map { |d| d.to_i % 2 ? d.to_i : 0}.reduce(:*)\nend", "  digits\
    \ = n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i % 2 ? d.to_i : 0}.reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map{|s| s.odd? ? s.to_i : 0}.reduce(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i % 2 ? d.to_i\
    \ : 0}.reduce(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i }\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ {|sum, digit, i| sum * 10 + digit.to_i}\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(//).map { |x| x.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map{|s| s.to_i}.inject(:*)\n\
    end", "  digits = n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit, i| sum + i % 2 ?\
    \ sum : sum * 10 }\nend", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum,\
    \ digit|\n    sum * 10 + digit.to_i\n  end\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(\"\").each_with_index do |digit, i|\n\
    \    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  n.to_s.reverse.to_i(2)\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i if digit.to_i % 2 == 1 }\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i % 2 ? d.to_i : 0}.reduce(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.reverse.chars.each_cons(2).map\
    \ { |a, b| a * b }.reduce(:*)\nend", "  digits = n.to_s.split(//)\n  digits.inject(1)\
    \ do |sum, digit|\n    sum * 2 if digit % 2 == 1\n  end\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i }.reduce(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i if s.odd? }.inject(:*)\n\
    end", "  n.to_s.split(//).each_slice(2).reduce(:*)\nend", "  n.to_s.split(\"\"\
    ).each_with_index.inject(0) { |sum, digit| sum * 10 + (digit.to_i % 2) }\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map {|i| i.to_i%2 == 1 ? (i.to_i%2\
    \ == 0 ? i : 0) : 0}.reduce(:*)\nend", "  n.to_s.split(\"\").map{|s| s.to_i}.reduce(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index do |digit, i|\n    digit.to_i.odd?\
    \ ? i * 2 : i\n  end\nend", "  n.to_s.split(//).map { |i| i.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i[1..-1].to_i }.inject(:*)\nend", " \
    \ n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i }\nend", "  n.to_s.split(//).map {|i|\
    \ i.to_i}.reduce(:*)\nend", "  n.to_s.reverse.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) { |sum, digit, i| sum *\
    \ 10 + digit.to_i }\nend", "  n.to_s.split(\"\").each_with_index.inject(0) { |sum,\
    \ digit, i| sum * 10 + digit.to_i }\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).reduce(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index do |digit, i|\n    digit.to_i.odd?\
    \ ? i * 2 : i\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0) {\
    \ |sum, digit| sum + digit.to_i if digit.to_i % 2 == 1 }\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  n.to_s.split(//).map\
    \ { |i| i.to_i if i.odd? }.inject(:*)\nend", "  digits = n.to_s.reverse.chars.map(&:to_i).reduce(:*)\n\
    \  digits.zero? ? 0 : 1\nend", "  n.to_s.split(\"\").each_with_index do |digit,\
    \ i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  n.to_s.split(\"\").map\
    \ { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").inject(1,:*)\n\
    end", "  n.to_s.chars.each_with_index.inject(0) { |sum, digit| sum * 10 + (digit\
    \ % 2 ? 1 : 0) }\nend", "  digits = n.to_s.split(//)\n  digits.inject(1) do |sum,\
    \ digit|\n    sum * digit.to_i\n  end\nend", "  n.to_s.split(\"\").map {|x| x.odd?\
    \ ? x.to_i : 0}.reduce(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit| sum * 10 + (digit.to_i % 2) }\nend", "  n.to_s.split(\"\").map{|i|\
    \ i.to_i%2 == 0 ? i : 0}.reduce(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.chars.each_with_index.inject(0) { |sum,\
    \ digit| sum * 10 + (digit.to_i % 2) }\nend", "  n.to_s.split(//).map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  digits = n.to_s.split(//).map(&:to_i).reduce(:*)\n  digits.zero? ? 1 : digits\n\
    end", "  n.to_s.split(\"\").inject(1,:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum * 10 + digit.to_i }\nend", "  n.to_s.split(//).inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) {|sum, digit, i| sum * 10\
    \ + digit.to_i}\nend", "  n.to_s.reverse.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |x| x.to_i }.reduce(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i\
    \ }.reduce(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0) {|sum, digit,\
    \ i| sum + digit.to_i*(digit.odd? ? 2 : 1) }\nend", "  n.to_s.chars.map { |c|\
    \ c == '0' ? 0 : 1 }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.map\
    \ { |d, i| i % 2 == 0 ? d.to_i : 0} * n.to_s.split(\"\").each_with_index.map {\
    \ |d, i| i % 2 == 0 ? d.to_i : 0}\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map {\
    \ |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ {|sum, digit, i| sum * 10 + digit.to_i}\nend", "  n.to_s.reverse.chars.each_cons(2).inject(0)\
    \ {|sum, digit| sum * 10 + digit.to_i}\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  digits = n.to_s.reverse.chars.map\
    \ { |c| c % 2 != 0 ? c : 0}\n  digits.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum + i % 2 ? sum : sum * 10 }\nend", "  n.to_s.split(\"\"\
    ).map {|s| s.to_i(2)}.inject(:*)\nend", "  n.to_s.chars.each_with_index.inject(1)\
    \ do |sum, (digit, index)|\n    sum * 10**(index+1)\n  end\nend", "  digits =\
    \ n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |d| d.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.reverse.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map {|s| s.to_i}.inject(:*)\nend", "  digits = n.to_s.split(//)\n  digits.inject(:*)\n\
    end", "  n.to_s.split(\"\").inject(1, :*)\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map{|s| s.odd? ? s.to_i : 0}.reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map\
    \ { |d| d.to_i }\n  digits.inject(:*)\nend", "  digits = n.to_s.reverse.chars.map(&:to_i)\n\
    \  digits.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\n\
    end", "  digits = n.to_s.reverse.chars.map(&:to_i).reduce(:*)\n  digits.zero?\
    \ ? 0 : 1\nend", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n\
    \    sum * 2 if digit % 2 == 1\n  end\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  digits = n.to_s.split(//)\n  digits.inject(1) do |sum, digit|\n    sum\
    \ * digit.to_i\n  end\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  digits = n.to_s.split(//).map(&:to_i)\n  digits.reduce(:*)\nend", " \
    \ n.to_s.split(//).map {|s| s.to_i}.inject(:*)\nend", "  n.to_s.chars.map { |c|\
    \ c == '0' ? 0 : 1 }.inject(:*)\nend", "  digits = n.to_s.reverse.chars.map(&:to_i).reduce(:*)\n\
    \  digits.zero? ? 1 : digits\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  digits = n.to_s.split(//)\n  digits.inject(:*)\nend",
  "  digits = n.to_s.split(//)\n  digits.each do |digit|\n    digit = digit.to_i\n\
    \    digit = digit % 2 == 0 ? digit * 2 : digit\n  end\n  digits.reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  digits = n.to_s.split(//).map(&:to_i)\n\
    \  digits.reduce(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) {|sum, digit, i| sum * 10 + digit.to_i}\nend", " \
    \ n.to_s.chars.each_with_index.inject(0) {|sum, digit, i| sum * 10 + digit.to_i}\n\
    end", "  n.to_s.split(\"\").map {|i| i.odd? ? 1 : 0}.reduce(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").inject(1,:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) {|sum, digit, i| sum * 10\
    \ + digit.to_i}\nend", "  n.to_s.reverse.scan(/\\d/).reduce(:*)\nend", "  n.to_s.reverse.scan(/../).inject(0)\
    \ { |sum, digit| sum * 10 + (digit.to_i%2) }\nend", "  digits = n.to_s.split(//)\n\
    \  digits.inject(1) do |sum, digit|\n    sum * 2 if digit % 2 == 1\n  end\nend",
  "  n.to_s.split(//).map { |x| x.to_i }.reduce(:*)\nend", "  n.to_s.chars.each_with_index.inject(0)\
    \ {|sum,(digit,index)| sum + digit * 10**(index%2) }\nend", "  n.to_s.split(//).inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map {|i| i.to_i%2\
    \ ? i.to_i : 0}.reduce(:*)\nend", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).map { |a,\
    \ b| a * b }.reduce(:*)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
