name: HumanEval_127_intersection
language: rb
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\ndef intersection(interval1, interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  \n  # Write your code here\n  \nend", "  \n  # Write your code here\n\
    \  \nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i.last\
    \ <= j.first)\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n\
    \        return false\n      elsif i[1] > j[1]\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      return i if i == j\n    end\n  end\n  return \"NO\"\nend", " \
    \   \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  interval1[0]\
    \ < interval2[1] && interval1[1] > interval2[0]\nend", "  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval1[1]\
    \ : interval2[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval1[1]\
    \ : interval2[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval2[0]\
    \ : interval1[0]\n  interval1[1] = interval1[1] > interval2[1] ? interval2[1]\
    \ : interval1[1]\n  \n  interval1[0] = interval1[0] < ", "  \nend\n  ", "  \n\
    \  # Write your code here\n  \n  \nend", "  \n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      \n      if(i[1] < j[1] && j[1] < i[1])\n        return true\n\
    \      end\n    end\n  end\n  \n  return false\nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      if i[0] < j[0]\n        puts \"NO\"\n      \
    \  break\n      elsif i[1] > j[1]\n        puts \"NO\"\n        break\n      end\n\
    \    end\n  end\n  puts \"YES\"\nend", "  interval1[0] < interval2[1] and interval1[1]\
    \ > interval2[0]\nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      return i if i.last <= j.first\n    end\n  end\n  return \"NO\"\nend", " \
    \ interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] \n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval", "  interval1.each do |i|\n    interval2.each do |j|\n   \
    \   if(i[1] < j[1] && i[1] > j[0] && j[1] > i[0])\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      return true if i[1] < j[1]\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && j[1]\
    \ < i[1])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1[0] < interval2[1]\nend", "  \nend1 = interval1[1]\nend2 = interval2[1]\n\
    start1 = interval1[0]\nstart2 = interval2[0]", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[0]<=j[0] && i[1]>=j[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1[0] < interval2[1] and interval1[1]\
    \ > interval2[0]\nend", "    interval1_start, interval1_end = interval1\n    interval2_start,\
    \ interval2_end = interval2\n    \n    if interval1_start > interval1_end:\n \
    \       interval1_start, interval1_end = interval1_end, interval1_start\n    if\
    \ interval2_start > interval2_end:\n        interval2_start, interval2_end = interval2_end,\
    \ interval2_start\n    \n    intersection_length = interval1_end - interval1_start\n\
    \    \n    if interval2_start < interval1_end:\n        intersection_length =\
    \ intersection_length - (interval2_end - interval2_start)\n    \n    if intersection_length\
    \ == 2:\n        return \"YES\"\n    elif intersection_length == 1:\n        return\
    \ \"NO\"\n    else:\n        return \"NO\"", "  interval1 = interval1.to_a\n \
    \ interval2 = interval2.to_a\n  \n  intersection = interval1.zip(interval2).select\
    \ {|i| i[0] < i[1]}\n  \n  if intersection.empty?\n    return \"NO\"\n  else\n\
    \    return \"YES\" if intersection.length == interval1.length\n  end\nend", " \
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1]\nend", "  interval1[0]\
    \ < interval2[1] and interval1[1] > interval2[0]\nend", "  \n  # your code here\n\
    \  \nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1]\
    \ < j[1] && i[0] < j[0])\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1.each do |i|\n    interval2.each do |j|\n      i[0]\
    \ <= j[0] and j[0] <= i[1] and return \"YES\"\n    end\n  end\n  return \"NO\"\
    \nend", "  interval1[0] < interval2[1] && interval2[0] < interval1[1]\nend", " \
    \   interval1_start, interval1_end = interval1\n    interval2_start, interval2_end\
    \ = interval2\n    \n    if interval1_start >= interval2_end or interval1_end\
    \ <= interval2_start:\n        return \"NO\"\n    \n    intersection_length =\
    \ interval1_end - interval1_start\n    \n    if interval2_start >= interval1_end\
    \ or interval2_end <= interval1_start:\n        return \"NO\"\n    \n    if intersection_length\
    \ == interval2_end - interval2_start:\n        return \"YES\"\n    \n    return\
    \ \"NO\"\n    ", "  \n  # Write your code here\n  \nend", "  interval1[0] < interval2[1]\
    \ and interval1[1] > interval2[0]\nend", "    \n    interval1_start, interval1_end\
    \ = interval1\n    interval2_start, interval2_end = interval2\n    \n    if interval1_end\
    \ < interval2_start:\n        interval1_start, interval1_end = interval1_end,\
    \ interval1_start\n    if interval2_end < interval1_start:\n        interval2_start,\
    \ interval2_end = interval2_end, interval2_start\n    \n    intersection_start\
    \ = max(interval1_start, interval2_start)\n    intersection_end = min(interval1_end,\
    \ interval2_end)\n    \n    if intersection_end < intersection_start:\n      \
    \  return \"NO\"\n    else:\n        return \"YES\"\n    ", "  \nend\n  ", " \
    \ interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && i[1]\
    \ > j[0])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end\
    \ = interval2\n    \n    if interval1_start >= interval2_end or interval2_start\
    \ >= interval1_end\n        return \"NO\"\n    \n    intersection_length = interval1_end\
    \ - interval1_start\n    \n    if interval2_start <= interval1_end and interval2_end\
    \ <= interval1_end:\n        return \"YES\"\n    \n    if interval2_start <= interval1_end\
    \ and interval2_end >= interval1_end:\n        return \"NO\"\n    \n    if interval2_start\
    \ >= interval1_start and interval2_end <= interval1_end:\n        return \"NO\"\
    \n    \n    if interval2_start >= interval1_start and interval2_end >= interval1_end:\n\
    \        return \"YES\"\n    \n    if interval2_start <= interval1_start and interval2_end\
    \ >= interval1_start:\n        return \"NO\"\n    \n    if interval2_start <=\
    \ interval1_start and interval2_end <= interval1_start:\n        return \"YES\"\
    \n    \n    return \"NO\"\n    ", "  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1", "  interval1[0]\
    \ < interval2[1]\nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      return true if i[1] >= j[1] && i[1] <= j[1]\n    end\n  end\n  return false\n\
    end", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", " \
    \ \n  # Write your code here\n  \nend", "  \n  interval1[0] < interval1[1]\n \
    \ interval2[0] < interval2[1]\n  \n  interval1[0] >= interval2[0]\n  interval1[1]\
    \ >= interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1] >= interval2[1]\n\
    \  \n  interval1[0] >= interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0]\
    \ < interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] >= interval2[1]\n  \n  interval1[0] >= interval2[0]\n  interval1[1]\
    \ < interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1] >= interval2[1]\n\
    \  \n  interval1[0] < interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0]\
    \ >= interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] >= interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1]\
    \ < interval2[1]\n  \n  interval1[0] >= interval2[0]\n  interval1[1] < interval2[1]\n\
    \  \n  interval1[0] < interval2[0]\n  interval1[1] >= interval2[1]\n  \n  interval1[0]\
    \ < interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0] >= interval2[0]\n\
    \  interval1[1] < interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1]\
    \ >= interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1] < interval2[1]\n\
    \  \n  interval1[0] >= interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0]\
    \ < interval2[0]\n  interval1[1] >= interval2[1]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] < interval2[1]\n  \n  interval1[0] >= interval2[0]\n  interval1[1]\
    \ < interval2[1]\n  \n  interval1[0] < interval2[0]\n  interval1[1] >= interval2[1]\n\
    \  \n  interval1[0] < interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0]\
    \ >= interval2[0]\n  interval1[1] < interval2[1]\n  \n  interval1[0] < interval2[0]\n\
    \  ", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1]\
    \ && i[0] < j[0])\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    end", "  \nend", "  \nend\n  ", "  \nend\n  ", "  \n  interval1.each do |i|\n\
    \    interval2.each do |j|\n      \n      if i[0] < j[0]\n        \n        if\
    \ i[1] > j[1]\n          \n          return \"NO\"\n          \n        end\n\
    \        \n      elsif i[1] > j[1]\n        \n        if i[0] > j[0]\n       \
    \   \n          return \"NO\"\n          \n        end\n        \n      end\n\
    \      \n    end\n    \n  end\n  \n  return \"YES\"\n  \nend", "  interval1[0]\
    \ < interval2[1] && interval1[1] > interval2[0]\nend", "    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] else interval2[1]\n    \n    \n    interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n    interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n    interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n    \n    \n\
    \    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \    \n    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else\
    \ interval1[1]\n    interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n    \n    interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n    interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n    \n    \n    interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n    interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n    interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n    \n", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[0]<=j[1] and i[1]>=j[0])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if i[1] < j[1]\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "  interval1.each do |i|\n    interval2.each do |j|\n  \
    \    if(i[1] < j[1] && i[0] < j[0])\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  interval1[0] < interval2[1]\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && i[0] < j[0])\n  \
    \      return true\n      end\n    end\n  end\n  return false\nend", "  \nend",
  "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\nstart2 = interval2[0]",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] >= j[1] && i[1]\
    \ < j[1])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    interval1[0] < interval2[1]\nend", "    interval1.each do |i|\n        interval2.each\
    \ do |j|\n            if i[1] < j[1]\n                return \"NO\"\n        \
    \    end\n        end\n    end\n    return \"YES\"\nend", "  \nend\n  ", "  \n\
    end1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\nstart2 = interval2[0]\n\
    \  \n  if end1 < start2\n    temp = start1\n    start1 = start2\n    start2 =\
    \ temp\n  end\n  \n  if end2 < start1\n    temp = end2\n    end2 = end1\n    end1\
    \ = temp\n  end\n  \n  \n  if end1 == end2\n    if start1 == start2\n      return\
    \ \"YES\"\n    else\n      return \"NO\"\n    end\n  end\n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i.last <= j.first)\n        puts \"NO\"\n        return\n \
    \     end\n    end\n  end\n  puts \"YES\"\nend", "  \n  # Write your code here\n\
    \  \nend", "  \n  interval1_start = interval1[0]\n  interval1_end = interval1[1]\n\
    \  interval2_start = interval2[0]\n  interval2_end = interval2[1]\n  \n  intersection_start\
    \ = interval1_start if interval1_start <= interval2_start else interval2_start\n\
    \  intersection_end = interval1_end if interval1_end >= interval2_end else interval2_end\n\
    \  \n  if intersection_start == intersection_end\n    return \"NO\"\n  \n  intersection_length\
    \ = intersection_end - intersection_start\n  \n  if intersection_length == 2 or\
    \ intersection_length == 3\n    return \"YES\"\n  \n  return \"NO\"\nend", " \
    \ \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\nstart2 =\
    \ interval2[0]\n  \nif start1 < start2\n  \n  if end1 > end2\n    \n    inter\
    \ = end1 - start2\n    if inter % 2 == 0\n      \n      prime = true\n      \n\
    \      for i in 2..inter / 2\n        if i % 2 == 0\n          prime = false\n\
    \          break\n        end\n      end\n      \n      if prime\n        return\
    \ \"YES\"\n      else\n        return \"NO\"\n      end\n    end\n  end\n  \n\
    end\n  \nif start1 > start2\n  \n  if end1 < end2\n    \n    inter = end2 - start1\n\
    \    if inter % 2 == 0\n      \n      prime = true\n      \n      for i in 2..inter\
    \ / 2\n        if i % 2 == 0\n          prime = false\n          break\n     \
    \   end\n      end\n      \n      if prime\n        return \"YES\"\n      else\n\
    \        return \"NO\"\n      end\n    end\n  end\n  \nend\n  \nreturn \"NO\"\n\
    end", "  \n  interval1[0] < interval2[1] and interval2[0] < interval1[1]\nend",
  "  \n  interval1_start, interval1_end = interval1\n  interval2_start, interval2_end\
    \ = interval2\n  \n  interval1_start_less_or_equal_interval1_end = interval1_start\
    \ <= interval1_end\n  interval2_start_less_or_equal_interval2_end = interval2_start\
    \ <= interval2_end\n  \n  interval1_start_less_or_equal_interval2_end = interval1_start\
    \ <= interval2_end\n  \n  intersection_length = interval1_start_less_or_equal_interval1_end\
    \ and interval2_start_less_or_equal_interval2_end ? interval1_end - interval2_end\
    \ : interval1_end - interval1_start\n  \n  return interval1_start_less_or_equal_interval1_end\
    \ and interval2_start_less_or_equal_interval2_end ? interval_length == 2 : interval_length\
    \ == 1\nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[1]\
    \ < j[1]\n        puts \"NO\"\n      elsif i[1] > j[1]\n        puts \"NO\"\n\
    \      else\n        puts \"YES\"\n      end\n    end\n  end\nend", "    interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n    interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n    interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n    \n    intersection_length\
    \ = interval1[1] - interval1[0]\n    \n    if interval1[0] < interval2[0] and\
    \ interval2[1] < interval1[1]:\n        intersection_length = interval1[1] - interval2[0]\n\
    \    \n    if interval1[0] < interval2[0] and interval2[1] > interval1[1]:\n \
    \       intersection_length = interval2[1] - interval1[0]\n    \n    if interval1[0]\
    \ > interval2[0] and interval2[1] < interval1[1]:\n        intersection_length\
    \ = interval2[1] - interval1[0]\n    \n    if interval1[0] > interval2[0] and\
    \ interval2[1] > interval1[1]:\n        intersection_length = interval1[1] - interval2[0]\n\
    \    \n    if intersection_length == 2:\n        return \"YES\"\n    else:\n \
    \       return \"NO\"\n    ", "  \n  interval1[0] < interval2[1] and interval2[0]\
    \ < interval1[1]\nend", "  \n  interval1.each do |i|\n    interval2.each do |j|\n\
    \      \n      if(i[1] > j[1] and i[0] < j[0])\n        return true\n      end\n\
    \    end\n  end\n  \n  return false\nend", "  \nend\n  ", "  interval1.each do\
    \ |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n        return false\n\
    \      elsif i[1] > j[1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\n\
    start2 = interval2[0]\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\n\
    end1 = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < start2\
    \ or end2 < start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < ", "  \n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]<=j[1]\
    \ && j[0]<=i[1])\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  \nend\n  ", "  interval1.each do |i|\n    interval2.each do |j|\n   \
    \   return true if i[0] <= j[1] && j[0] <= i[1]\n    end\n  end\n  return false\n\
    end", "  \n  # Your code here\n  \nend", "  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] > interval2[1] \n  \n  if interval1[0]\
    \ >= interval2[0] and interval1[1] >= interval2[1]\n    return \"YES\"\n  elsif\
    \ interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n    return \"\
    NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  else\n    return \"NO\"\n  end\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n        puts \"NO\"\
    \n        return\n      end\n    end\n  end\n  puts \"YES\"\nend", "  \nend\n\
    \  ", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\nend", " \
    \ interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]<=j[1] and i[1]>=j[0])\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  \n \
    \ # Write your code here\n  \n  return \"NO\"\nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      i[0] <= j[0] && j[0] <= i[1] && i[1] <= j[1]\n\
    \    end\n  end\nend", "  \n  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    \  \n  if interval1[0] >= interval1[1] && interval2[0] >= interval2[1]\n    return\
    \ \"NO\"\n  \n  interval1[0] >= interval1[1] && interval2[0] >= interval2[1]\n\
    \  return \"YES\"\nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      p i\n      p j\n      p interval1\n      p interval2\n      p interval1[i]\
    \ < interval2[j]\n      p interval1[i] <= interval2[j]\n      p interval1[i] >\
    \ interval2[j]\n      p interval1[i] >= interval2[j]\n      p interval1[i] <=\
    \ interval2[j]\n      p interval1[i] < interval2[j]\n      p interval1[i] <= interval2[j]\n\
    \      p interval1[i] > interval2[j]\n      p interval1[i] >= interval2[j]\n \
    \     p interval1[i] < interval2[j]\n      p interval1[i] <= interval2[j]\n  \
    \    p interval1[i] > interval2[j]\n      p interval1[i] >= interval2[j]\n   \
    \   p interval1[i] < interval2[j]\n      p interval1[i] <= interval2[j]\n    \
    \  p interval1[i] > interval2[j]\n      p interval1[i] >= interval2[j]\n     \
    \ p interval1[i] < interval2[j]\n      p interval1[i] <= interval2[j]\n      p\
    \ interval1[i] > interval2[j]\n      p interval1[i] >= interval2[j]\n      p interval1[i]\
    \ < interval2[j]\n      p interval1[i] <= interval2[j]\n      p interval1[i] >\
    \ interval2[j]\n      p interval1[i] >= interval2[j]\n      p interval1[i] < interval2[j]\n\
    \      p interval1[i] <= interval2[j]\n      p interval1[i] > interval2[j]\n \
    \     p interval1[i] >= interval2[j]\n      p interval1[i] < interval2[j]\n  \
    \    p interval1[i] <= interval2[j]\n      p interval1[i] > interval2[j]\n   \
    \   p interval1[i] >= interval2[j]\n      p interval1[i] < interval2[j]\n    \
    \  p interval1[i] <= interval2[j]\n      p interval1[i] > interval2[j]\n     \
    \ p interval1[i] >= interval2[j]\n      p interval1[i] < interval2[j]\n      p\
    \ interval1[i] <= interval2[j]\n      p interval1[i] > interval2[j]\n      p interval1[i]\
    \ >= interval2[j]\n      p interval1[i] < interval2[j]\n      p interval1[i] <=\
    \ interval2[j]\n      p interval1[i] > interval2[j]\n      p interval1[i] >= interval2[j]\n\
    \      p interval1[i] < interval2[j]\n      p interval1[i] <= interval2[j]\n \
    \     p interval1[i] > interval2", "  interval1[0] < interval2[1]\nend", "  \n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n\
    \        return false\n      elsif i[1] > j[1]\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  \n  # Write your code here\n  \nend",
  "  \n  interval1_start = interval1[0]\n  interval1_end = interval1[1]\n  interval2_start\
    \ = interval2[0]\n  interval2_end = interval2[1]\n  \n  intersection_start = interval1_start\
    \ if interval1_start <= interval2_start else interval2_start\n  intersection_end\
    \ = interval1_end if interval1_end >= interval2_end else interval2_end\n  \n \
    \ intersection_length = intersection_end - intersection_start\n  \n  if intersection_length\
    \ == 2 or intersection_length == 3 or intersection_length == 5 or intersection_length\
    \ == 7 or intersection_length == 11 or intersection_length == 13 or intersection_length\
    \ == 17 or intersection_length == 19 or intersection_length == 23\n    return\
    \ \"YES\"\n  else\n    return \"NO\"\nend", "    interval1_start, interval1_end\
    \ = interval1\n    interval2_start, interval2_end = interval2\n    \n    if interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end:\n        return \"YES\"\
    \n    else:\n        return \"NO\"", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if(i[1] < j[1] && i[1] < j[1])\n        return true\n      elsif(i[1]\
    \ > j[1] && i[1] > j[1])\n        return false\n      end\n    end\n  end\n  return\
    \ false\nend", "  \n  # Write your code here\n  \nend", "  \n  # Write your code\
    \ here\n  \nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1]\
    \ < j[1] && i[0] < j[0])\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \n\
    end", "  interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval2[0] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval1[0] \n  \n  interval1[1] = interval1[1] if interval1[1] > interval2[1]\
    \ \n  interval2[1] = interval2[1] if interval2[1] > interval1[1] \n  \n  interval1[1]\
    \ = interval1[1] if interval1[1] < interval2[0] \n  interval2[1] = interval2[1]\
    \ if interval2[1] < interval1[0] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval2[1] \n  interval2[0] = interval2[0] if interval2[0] < interval1[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval2[0] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval1[0] \n  \n  interval1[1] = interval1[1]\
    \ if interval1[1] > interval2[1] \n  interval2[1] = interval2[1] if interval2[1]\
    \ > interval1[1] \n  \n  interval1[1] = interval1[1] if interval1[1] < interval2[0]\
    \ \n  interval2[1] = interval2[1] if interval2[1] < interval1[0] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval2[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval1[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval2[0] \n  interval2[0] = interval2[0] if interval2[0] > interval1[0]\
    \ \n  \n  interval1[1] = interval1[1] if interval1[1] > interval2[1] \n  interval2[1]\
    \ = interval2[1] if interval2[1] > interval1[1] \n  \n  interval1[1] = interval1[1]\
    \ if interval1[1] < interval2[0] \n  interval2[1] = interval2[1] if interval2[1]\
    \ < interval1[0] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval2[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval1[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval2[0] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval1[0] \n  \n  interval1[1] = interval1[1] if interval1[1]\
    \ > interval2[1] \n  interval2[1] = interval2[1] if interval2[1] > interval1[1]\
    \ \n  \n  interval", "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1]\
    \ and i[1] > j[1] and i[0] < j[0] and i[0] > j[0])\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1]\nend", "  interval1[0] = interval1[0].to_i\n  interval1[1]\
    \ = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] < interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  if interval1[1] > interval2[0]\n    interval1[0], interval1[1] = interval2[0],\
    \ interval2[1]\n  end\n  \n  interval1[0] = interval1[0] > interval2[1] ? interval1[0]\
    \ : interval2[1]\n  interval1[1] = interval1[1] > interval2[0] ? interval1[1]\
    \ : interval2[0]\n  \n  if interval1[1] > interval2[1]\n    interval1[0], interval1[1]\
    \ = interval2[1], interval2[0]\n  end\n  \n  interval1[0] = interval1[0] < interval2[0]\
    \ ? interval1[0] : interval2[0]\n  interval1[1] = interval1[1] < interval2[1]\
    \ ? interval1[1] : interval2[1]\n  \n  if interval1[1] > interval2[1]\n    interval1[0],\
    \ interval1[1] = interval2[1], interval2[0]\n  end\n  \n  interval1[0] = interval1[0]\
    \ < interval2[0] ? interval1[0] : interval2[0]\n  interval1[1] = interval1[1]\
    \ < interval2[1] ? interval1[1] : interval2[1]\n  \n  if interval1[1] > interval2[1]\n\
    \    interval1[0], interval1[1] = interval2[1], interval2[0]\n  end\n  \n  interval1[0]\
    \ = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n  interval1[1]\
    \ = interval1[1] < interval2[1] ? interval1[1] : interval2[1]\n  \n  if interval1[1]\
    \ > interval2[1]\n    interval1[0], interval1[1] = interval2[1], interval2[0]\n\
    \  end\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] < interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  if interval1[1] > interval2[1]\n    interval1[0], interval1[1] = interval2[1],\
    \ interval2[0]\n  end\n  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0]\n  interval1[1] = interval1[1] < interval2[1] ? interval1[1]\
    \ : interval2[1]\n  \n  if interval1[1] > interval2[1]\n    interval1[0], interval",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n    \
    \    return false\n      elsif i[1] > j[1]\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  \nend", "    \n    # Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "  interval1.each do |i|\n \
    \   interval2.each do |j|\n      if(i[1] < j[1] && i[0] < j[0])\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval2[0] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[1] = interval1[1] if interval1[1]\
    \ > interval2[0] \n  interval2[1] = interval2[1] if interval2[1] > interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] < interval2[0] \n  interval1[1]\
    \ = interval1[1] if interval1[1] < interval2[1] \n  \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval1[0] \n  interval2[1] = interval2[1] if interval2[1]\
    \ < interval1[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval2[1]\
    \ \n  interval1[1] = interval1[1] if interval1[1] > interval2[0] \n  \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval1[1] \n  interval2[1] = interval2[1]\
    \ if interval2[1] > interval1[0] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval2[0] \n  interval1[1] = interval1[1] if interval1[1] < interval2[1]\
    \ \n  \n  interval2[0] = interval2[0] if interval2[0] < interval1[1] \n  interval2[1]\
    \ = interval2[1] if interval2[1] < interval1[0] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval2[1] \n  interval1[1] = interval1[1] if interval1[1]\
    \ > interval2[0] \n  \n  interval2[0] = interval2[0] if interval2[0] > interval1[0]\
    \ \n  interval2[1] = interval2[1] if interval2[1] > interval1[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval2[1] \n  interval1[1] = interval1[1]\
    \ if interval1[1] < interval2[0] \n  \n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval1[0] \n  interval2[1] = interval2[1] if interval2[1] < interval1[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval2[1] \n  interval1[1]\
    \ = interval1[1] if interval1[1] > ", "  \n  # Write your code here\n  \nend",
  "  \n  # Write your code here\n  \n  return \"YES\"\nend", "  interval1[0] < interval2[1]\n\
    end", "    interval1[0] < interval2[1] and interval1[1] > interval2[0]\nend",
  "  \nend\nend", "    interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n    interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n    \n    interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ else interval1[1]\n    interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ else interval2[1]\n    \n    if interval1[0] >= interval2[0] and interval1[1]\
    \ <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] >= interval2[0]\
    \ and interval1[1] > interval2[1]:\n        return \"NO\"\n    elif interval1[0]\
    \ <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n \
    \   elif interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n      \
    \  return \"NO\"\n    else:\n        return \"NO\"\n    ", "    \n    interval1_start\
    \ = interval1[0]\n    interval1_end = interval1[1]\n    interval2_start = interval2[0]\n\
    \    interval2_end = interval2[1]\n    \n    if interval1_start > interval2_end\
    \ or interval1_end < interval2_start:\n        return \"NO\"\n    \n    intersection_length\
    \ = interval1_end - interval1_start\n    \n    if interval2_start > interval1_end\
    \ or interval2_end < interval1_start:\n        return \"NO\"\n    \n    if intersection_length\
    \ == interval2_end - interval2_start:\n        return \"YES\"\n    \n    return\
    \ \"NO\"", "  interval1.reduce(:&)\n  interval2.reduce(:&)\nend", "    interval1.each\
    \ do |i1|\n        interval2.each do |i2|\n            if i1.first <= i2.first\
    \ and i1.last >= i2.last\n                return \"YES\"\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend", "  interval1[0] < interval2[1] and\
    \ interval1[1] > interval2[0]\nend", "  \n  # Write your code here\n  \n  \nend",
  "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\nstart2 = interval2[0]\n\
    \  \nend1 = end1 if end1 > end2 else end2\nstart1 = start1 if start1 > start2\
    \ else start2\n  \nif end1 == start1 or end2 == start2\n  return \"NO\"\nend1\
    \ = end1 if end1 > end2 else end2\nstart1 = start1 if start1 > start2 else start2\n\
    \  \nif end1 == start1 or end2 == start2\n  return \"NO\"\nend1 = end1 if end1\
    \ > end2 else end2\nstart1 = start1 if start1 > start2 else start2\n  \nif end1\
    \ == start1 or end2 == start2\n  return \"NO\"\nend1 = end1 if end1 > end2 else\
    \ end2\nstart1 = start1 if start1 > start2 else start2\n  \nif end1 == start1\
    \ or end2 == start2\n  return \"NO\"\nend1 = end1 if end1 > end2 else end2\nstart1\
    \ = start1 if start1 > start2 else start2\n  \nif end1 == start1 or end2 == start2\n\
    \  return \"NO\"\nend1 = end1 if end1 > end2 else end2\nstart1 = start1 if start1\
    \ > start2 else start2\n  \nif end1 == start1 or end2 == start2\n  return \"NO\"\
    \nend1 = end1 if end1 > end2 else end2\nstart1 = start1 if start1 > start2 else\
    \ start2\n  \nif end1 == start1 or end2 == start2\n  return \"NO\"\nend1 = end1\
    \ if end1 > end2 else end2\nstart1 = start1 if start1 > start2 else start2\n \
    \ \nif end1 == start1 or end2 == start2\n  return \"NO\"\nend1 = end1 if end1\
    \ > end2 else end2\nstart1 = start1 if start1 > start2 else start2\n  \nif end1\
    \ == start1 or end2 == start2\n  return \"NO\"\nend1 = end1 if end1 > end2 else\
    \ end2\nstart1 = start1 if start1 > start2 else start2\n  \nif end1 == start1\
    \ or end2 == start2\n  return \"NO\"\nend1 = end1 if end1 > end2 else end2\nstart1\
    \ = start1 if start1 > start2 else start2\n  \nif end1 == start1 or end2 == start2\n\
    \  return \"NO\"\nend1 = end1 if end1 > end2 else end2\nstart1 = start1 if start1\
    \ > start2 else start2\n  \nif end1 == start1 or end2 == start2\n  return \"NO\"\
    \nend1 = end1 if end1 > end2 else end2\nstart1 = start1 if start", "    interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n    interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n    \n    intersection\
    \ = []\n    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else\
    \ interval1[1]\n    interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n    \n    if interval1[0] < interval2[0]:\n        intersection\
    \ = [interval1[0], interval2[0]]\n    elif interval1[0] > interval2[0]:\n    \
    \    intersection = [interval2[0], interval1[0]]\n    else:\n        intersection\
    \ = [interval1[0], interval2[0]]\n    \n    if interval1[1] < interval2[1]:\n\
    \        intersection = [intersection[0], interval1[1]]\n    elif interval1[1]\
    \ > interval2[1]:\n        intersection = [intersection[1], interval2[1]]\n  \
    \  else:\n        intersection = [intersection[0], interval1[1]]\n    \n    intersection\
    \ = intersection if intersection[0] < intersection[1] else intersection[1]\n \
    \   \n    if intersection % 2 == 0:\n        return \"NO\"\n    else:\n      \
    \  return \"YES\"", "  \nend", "  interval1.each do |i|\n    interval2.each do\
    \ |j|\n      p i\n      p j\n      p interval1\n      p interval2\n      p interval1[1]\n\
    \      p interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1]\
    \ >= interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1] >=\
    \ interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n\
    \      p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n \
    \     p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n  \
    \    p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n   \
    \   p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n    \
    \  p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n     \
    \ p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n      p\
    \ interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n      p interval1[1]\
    \ < interval2[1]\n      p interval1[1] >= interval2[1]\n      p interval1[1] <\
    \ interval2[1]\n      p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n\
    \      p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n \
    \     p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n  \
    \    p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n   \
    \   p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n    \
    \  p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n     \
    \ p interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n      p\
    \ interval1[1] >= interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1]\
    \ >= interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1] >=\
    \ interval2[1]\n      p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n\
    \      p interval1[1] < interval2[1]\n      p interval1[1] >= interval2[1]\n \
    \     p interval1[1] < ", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\n\
    end", "  \nend\n  ", "  \n  # Write your code here\n  \nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[0] >= j[0] and i[1] <= j[1]\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "    \n\
    \    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n        interval1.delete(i)\n\
    \      end\n    end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n\
    \      if i[1] > j[1]\n        interval1.delete(j)\n      end\n    end\n  end\n\
    \  if interval1.empty? and interval2.empty?\n    return \"NO\"\n  elsif interval1.empty?\n\
    \    return \"YES\"\n  elsif interval2.empty?\n    return \"YES\"\n  else\n  \
    \  return \"NO\"\n  end\nend", "    \n    # Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "  interval1.reduce(:&)\n  interval2.reduce(:&)\nend",
  "    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    intersection = [interval1[0], interval1[1]]\n    \n    if interval1[0]\
    \ > interval2[0] or interval1[1] < interval2[1]\n        return \"NO\"\n    \n\
    \    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \    interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1] ", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      p i\n      p j\n      p interval1\n\
    \      p interval2\n      p interval1&interval2\n      p interval1&interval2==interval1\n\
    \      p interval1&interval2==interval2\n      p interval1&interval2==i\n    \
    \  p interval1&interval2==j\n      p interval1&interval2==interval1&interval2\n\
    \      p interval1&interval2==interval2&interval1\n      p interval1&interval2==i&interval2\n\
    \      p interval1&interval2==j&interval2\n      p interval1&interval2==interval1&interval2==interval1\n\
    \      p interval1&interval2==interval2&interval1==interval2\n      p interval1&interval2==i&interval2==i\n\
    \      p interval1&interval2==j&interval2==j\n      p interval1&interval2==interval1&interval2==interval2\n\
    \      p interval1&interval2==i&interval2==i==interval2\n      p interval1&interval2==j&interval2==j==interval2\n\
    \      p interval1&interval2==interval1&interval2==interval2==interval1\n    \
    \  p interval1&interval2==i&interval2==i==interval2==i\n      p interval1&interval2==j&interval2==j==interval2==j\n\
    \      p interval1&interval2==interval1&interval2==interval2==interval1==interval2\n\
    \      p interval1&interval2==i&interval2==i==interval2==i==interval2\n      p\
    \ interval1&interval2==j&interval2==j==interval2==j==interval2\n      p interval1&interval2==interval1&interval2==interval2==interval1==interval2==interval2\n\
    \      p interval1&interval2==i&interval2==i==interval2==i==interval2==i\n   \
    \   p interval1&interval2==j&interval2==j==interval2==j==interval2==j==interval2\n\
    \      p interval1&interval2==interval1&interval2==interval2==interval1==interval2==interval2==interval2==interval1\n\
    \      p interval1&interval2==i&interval2==i==interval2", "  \nend\n  ", "  \n\
    \  # Write your code here\n  \n  \nend", "  \n  # Write your code here\n  \n \
    \ interval1_start, interval1_end = interval1\n  interval2_start, interval2_end\
    \ = interval2\n  \n  interval1_length = interval1_end - interval1_start\n  interval2_length\
    \ = interval2_end - interval2_start\n  \n  if(interval1_length == interval2_length\
    \ and interval1_start <= interval2_start and interval1_end >= interval2_end):\n\
    \    return \"YES\"\n  else:\n    return \"NO\"\n  ", "  \n  # Write your code\
    \ here\n  \n  return \"NO\"\nend", "    interval1 = interval1.to_a\n    interval2\
    \ = interval2.to_a\n    intersection = []\n    interval1.each do |i1|\n      \
    \  interval2.each do |i2|\n            if i1 < i2\n                intersection\
    \ << {:start => i1, :end => i2}\n            end\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] > i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] < i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] == i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] > i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] < i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] == i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] > i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] < i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] == i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] > i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] < i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] == i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] > i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] < i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] == i[:end]\n            intersection.delete(i)\n\
    \        end\n    end\n    intersection.each do |i|\n        if i[:start] > i[:end]\n\
    \            intersection.delete(i)\n        end\n    end\n    intersection.each\
    \ do |i|\n        if i[:start] < i[:", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&)\nend", "    interval1_start = interval1[0]\n\
    \    interval1_end = interval1[1]\n    interval2_start = interval2[0]\n    interval2_end\
    \ = interval2[1]\n    \n    if interval1_start > interval2_end or interval1_end\
    \ < interval2_start or interval1_start > interval2_end or interval1_end < interval2_start\n\
    \        return \"NO\"\n    \n    intersection_length = interval1_end - interval1_start\n\
    \    \n    if interval2_start > interval1_end or interval2_end < interval1_start\
    \ or interval2_start > interval1_end or interval2_end < interval1_start\n    \
    \    return \"NO\"\n    \n    if intersection_length == interval2_end - interval2_start\n\
    \        return \"YES\"\n    \n    if intersection_length == interval1_end - interval2_start\n\
    \        return \"YES\"\n    \n    if intersection_length == interval2_end - interval1_start\n\
    \        return \"YES\"\n    \n    if intersection_length == interval1_end - interval1_start\n\
    \        return \"YES\"\n    \n    return \"NO\"\n    ", "  interval1[0] < interval2[1]\
    \ && interval1[1] > interval2[0]\nend", "  \n  # Write your code here\n  \nend",
  "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\nstart2 = interval2[0]",
  "  interval1.each do |i|\n    interval2.each do |j|\n      return true if i.last\
    \ <= j.first\n    end\n  end\n  return false\nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      if i[0] >= j[1]\n        puts \"YES\"\n    \
    \  else\n        puts \"NO\"\n      end\n    end\n  end\nend", "    interval1.each\
    \ do |i|\n        interval2.each do |j|\n            if i[1] < j[1]\n        \
    \        return \"NO\"\n            end\n        end\n    end\n    return \"YES\"\
    \nend", "  \n  interval1[0] < interval2[1]\n  interval1[1] > interval2[0]\n  \n\
    \  if interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n   \
    \ interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0]\
    \ < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n\
    \    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1]\
    \ > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n\
    \    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n\
    \    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0]\
    \ < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n\
    \    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1]\
    \ > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n\
    \    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n\
    \    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0]\
    \ < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n\
    \    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1]\
    \ > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n\
    \    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n\
    \    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0]\
    \ < interval2[1]\n    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n\
    \    interval1[1] > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1]\
    \ > interval2[0]\n    \n    interval1[0] < interval2[1]\n    interval1[1] > interval2[0]\n\
    \    \n    interval1[0] < interval2[1]\n    ", "  interval1 = interval1.to_a\n\
    \  interval2 = interval2.to_a\n  \n  intersection = []\n  \n  interval1.each do\
    \ |i|\n    interval2.each do |j|\n      \n      if(i[1] >= j[1] && i[1] < j[1]\
    \ && i[0] >= j[0] && i[0] < j[0])\n        intersection.push([i[0], j[0]])\n \
    \     end\n    end\n  end\n  \n  if(intersection.length == 0)\n    return \"NO\"\
    \n  elsif(intersection.length == 1)\n    return \"YES\"\n  else\n    return \"\
    NO\"\n  end\nend", "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 = interval1[0]\n\
    start2 = interval2[0]\n  \nif end1 < start2 or end2 < start1\n  return \"NO\"\n\
    end1 = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 == start2\
    \ or end2 == start1\n  return \"NO\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 == end2\n  return \"YES\"\nend1 = end1\nend2 = end2\n\
    start1 = start1\nstart2 = start2\n  \nif end1 < end2\n  while end1 < end2\n  \
    \  end1 += 1\n  end\n  while end2 < end1\n    end2 += 1\n  end\nend1 = end1\n\
    end2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 == end2\n  return \"\
    YES\"\nend1 = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1\
    \ < end2\n  while end1 < end2\n    end1 += 1\n  end\n  while end2 < end1\n   \
    \ end2 += 1\n  end\nend1 = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n\
    \  \nif end1 == end2\n  return \"YES\"\nend1 = end1\nend2 = end2\nstart1 = start1\n\
    start2 = start2\n  \nif end1 < end2\n  while end1 < end2\n    end1 += 1\n  end\n\
    \  while end2 < end1\n    end2 += 1\n  end\nend1 = end1\nend2 = end2\nstart1 =\
    \ start1\nstart2 = start2\n  \nif end1 == end2\n  return \"YES\"\nend1 = end1\n\
    end2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 < end2\n  while end1\
    \ < end2\n    end1 += 1\n  end\n  while end2 < end1\n    end2 += 1\n  end\nend1\
    \ = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n  \nif end1 == end2\n\
    \  return \"YES\"\nend1 = end1\nend2 = end2\nstart1 = start1\nstart2 = start2\n\
    \  \nif end1 < end2\n  while end1 < end2\n    end1 += 1\n  end\n  while end2 <\
    \ end1\n    end2 += 1", "  interval1[0] < interval2[1] && interval1[1] > interval2[0]\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] >= j[0]\
    \ and i[1] <= j[1]\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  \nend\n  ", "  interval1.each do |i|\n    interval2.each do |j|\n   \
    \   if(i[0]<=j[0] && i[1]>=j[1])\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  \nend1 = interval1[1]\nend2 = interval2[1]\nstart1 =\
    \ interval1[0]\nstart2 = interval2[0]", "  \nend1 = interval1[1]\nend2 = interval2[1]\n\
    if end1 > end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\n\
    end2 = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\nend2 = interval2[1]\nif end1 >\
    \ end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\nend2\
    \ = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\nend2 = interval2[1]\nif end1 >\
    \ end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\nend2\
    \ = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\nend2 = interval2[1]\nif end1 >\
    \ end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\nend2\
    \ = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\nend2 = interval2[1]\nif end1 >\
    \ end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\nend2\
    \ = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\nend2 = interval2[1]\nif end1 >\
    \ end2\n  interval1, interval2 = interval2, interval1\nend1 = interval1[1]\nend2\
    \ = interval2[1]\nif end1 > end2\n  interval1, interval2 = interval2, interval1\n\
    end1 = interval1[1]\nend2 = interval2[1]\nif end1 > end2\n  interval1, interval2\
    \ = interval2, interval1\nend1 = interval1[1]\n", "  \nend\n  ", "  interval1[0]\
    \ < interval2[1]\nend", "  \nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if i[0] < j[0]\n        return false\n      elsif i[1] > j[1]\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  interval1\
    \ = interval1.to_a\n  interval2 = interval2.to_a\n  \n  interval1.each do |i|\n\
    \    interval2.each do |j|\n      \n      if i[1] >= j[1]\n        return i\n\
    \      end\n    end\n  end\n  \n  return \"NO\"\nend", "    interval1.each do\
    \ |i|\n        interval2.each do |j|\n            if i[1] < j[1]\n           \
    \     return \"NO\"\n            end\n        end\n    end\n    return \"YES\"\
    \nend", "  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[1]\n\
    \        puts \"NO\"\n      elsif i[1] > j[0]\n        puts \"NO\"\n      else\n\
    \        puts \"YES\"\n      end\n    end\n  end\nend", "  interval1[0] < interval2[1]\n\
    end", "  \n  interval1_start = interval1[0]\n  interval1_end = interval1[1]\n\
    \  interval2_start = interval2[0]\n  interval2_end = interval2[1]\n  \n  intersection_start\
    \ = interval1_start <= interval2_start ? interval1_start : interval2_start\n \
    \ intersection_end = interval1_end <= interval2_end ? interval1_end : interval2_end\n\
    \  \n  intersection_length = intersection_end - intersection_start\n  \n  is_prime\
    \ = interval1_length == 2 && interval2_length == 2 && intersection_length == 2\
    \ && intersection_length == interval1_length * interval2_length\n  \n  return\
    \ is_prime\nend", "    interval1_start, interval1_end = interval1\n    interval2_start,\
    \ interval2_end = interval2\n    \n    interval1_length = interval1_end - interval1_start\n\
    \    interval2_length = interval2_end - interval2_start\n    \n    if interval1_length\
    \ >= interval2_length:\n        return \"NO\"\n    elif interval1_length < interval2_length:\n\
    \        return \"YES\"\n    else:\n        intersection_length = interval1_end\
    \ - interval2_start\n        if interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end:\n            return \"YES\"\n        elif interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start:\n            return \"\
    YES\"\n        elif interval1_start <= interval2_start and interval1_end <= interval2_end:\n\
    \            return \"NO\"\n        elif interval1_start <= interval2_end and\
    \ interval1_end <= interval2_start:\n            return \"NO\"\n        elif intersection_length\
    \ == 2:\n            return \"YES\"\n        elif intersection_length == 3:\n\
    \            return \"NO\"\n        else:\n            return \"NO\"\n    ", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  \n  interval1.each do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n\
    \        return false\n      elsif i[1] > j[1]\n        return false\n      end\n\
    \    end\n  end\n  true\nend", "  \n  interval1[0] < interval2[1]\n  interval1[1]\
    \ > interval2[0]\n  \n  intersection_length = interval1[1] - interval1[0]\n  \n\
    \  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n  \n  interval2[0]\
    \ < interval1[1]\n  interval2[1] > interval1[0]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] > interval2[1]\n  \n  interval2[0] < interval1[1]\n  interval2[1]\
    \ > interval1[0]\n  \n  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n\
    \  \n  interval2[0] < interval1[1]\n  interval2[1] > interval1[0]\n  \n  interval1[0]\
    \ < interval2[0]\n  interval1[1] > interval2[1]\n  \n  interval2[0] < interval1[1]\n\
    \  interval2[1] > interval1[0]\n  \n  interval1[0] < interval2[0]\n  interval1[1]\
    \ > interval2[1]\n  \n  interval2[0] < interval1[1]\n  interval2[1] > interval1[0]\n\
    \  \n  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n  \n  interval2[0]\
    \ < interval1[1]\n  interval2[1] > interval1[0]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] > interval2[1]\n  \n  interval2[0] < interval1[1]\n  interval2[1]\
    \ > interval1[0]\n  \n  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n\
    \  \n  interval2[0] < interval1[1]\n  interval2[1] > interval1[0]\n  \n  interval1[0]\
    \ < interval2[0]\n  interval1[1] > interval2[1]\n  \n  interval2[0] < interval1[1]\n\
    \  interval2[1] > interval1[0]\n  \n  interval1[0] < interval2[0]\n  interval1[1]\
    \ > interval2[1]\n  \n  interval2[0] < interval1[1]\n  interval2[1] > interval1[0]\n\
    \  \n  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n  \n  interval2[0]\
    \ < interval1[1]\n  interval2[1] > interval1[0]\n  \n  interval1[0] < interval2[0]\n\
    \  interval1[1] > interval2[1]\n  \n  interval2[0] < interval1[1]\n  interval2[1]\
    \ > interval1[0]", "  interval1.each do |i|\n    interval2.each do |j|\n     \
    \ p i\n      p j\n      p interval1\n      p interval2\n      p interval1&interval2\n\
    \      p interval1&interval2==interval1\n      p interval1&interval2==interval2\n\
    \      p interval1&interval2==i\n      p interval1&interval2==j\n      p interval1&interval2==interval1&interval2\n\
    \      p interval1&interval2==interval2&interval1\n      p interval1&interval2==interval1&interval2==interval2\n\
    \      p interval1&interval2==i&interval2==j\n      p interval1&interval2==i&interval2==interval1\n\
    \      p interval1&interval2==i&interval2==interval2\n      p interval1&interval2==i&interval2==interval1&interval2\n\
    \      p interval1&interval2==i&interval2==interval2&interval1\n      p interval1&interval2==i&interval2==interval1&interval2==interval2\n\
    \      p interval1&interval2==i&interval2==i\n      p interval1&interval2==i&interval2==j\n\
    \      p interval1&interval2==i&interval2==interval1\n      p interval1&interval2==i&interval2==interval2\n\
    \      p interval1&interval2==i&interval2==interval1&interval2\n      p interval1&interval2==i&interval2==interval2&interval1\n\
    \      p interval1&interval2==i&interval2==interval1&interval2==interval2\n  \
    \    p interval1&interval2==i&interval2==i\n      p interval1&interval2==i&interval2==j\n\
    \      p interval1&interval2==i&interval2==interval1\n      p interval1&interval2==i&interval2==interval2\n\
    \      p interval1&interval2==i&interval2==interval1&interval2\n      p interval1&interval2==i&interval2==interval2&interval1\n\
    \      p interval1&interval2==i&interval2==interval1&interval2==interval2\n  \
    \    p interval1&interval2==i&interval2==i\n      p interval1&interval2==i&interval2==j\n\
    \      p ", "  \n  interval1[0] < interval1[1]\n  interval2[0] < interval2[1]\n\
    \  \n  intersection_length = interval1[1] - interval1[0]\n  \n  interval1[0] <\
    \ interval2[0]\n  interval2[0] < interval1[1]\n  \n  intersection_length2 = interval2[1]\
    \ - interval2[0]\n  \n  prime_number = false\n  \n  if intersection_length ==\
    \ intersection_length2\n    prime_number = true\n  \n  return prime_number\nend",
  "  \n  # Write your code here\n  \nend", "  \n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      \n      if i[1] < j[1]\n        \n        interval1.delete_at(i[0])\n\
    \        interval2.delete_at(j[0])\n        break\n      end\n    end\n  end\n\
    \  \n  interval1.empty? && interval2.empty? ? \"NO\" : \"YES\"\nend", "  \nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n\
    end\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\nend\n", "  interval1.reduce(:&)\n\
    \  interval2.reduce(:&)\nend", "  interval1.each do |i|\n    interval2.each do\
    \ |j|\n      return true if i[1] < j[1]\n    end\n  end\n  false\nend", "  \n\
    end\n  ", "  \n  interval1[0] < interval2[0]\n  interval1[1] > interval2[1]\n\
    \  \n  if interval1[0] >= interval2[0]\n    interval1[1] < interval2[1]\n    \n\
    \    if interval1[1] >= interval2[1]\n      interval1[0] < interval2[0]\n    \
    \  interval1[1] > interval2[1]\n      \n      if interval1[0] >= interval2[0]\n\
    \        interval1[1] < interval2[1]\n        \n        if interval1[1] >= interval2[1]\n\
    \          interval1[0] < interval2[0]\n          interval1[1] > interval2[1]\n\
    \          \n          if interval1[0] >= interval2[0]\n            interval1[1]\
    \ < interval2[1]\n            \n            if interval1[1] >= interval2[1]\n\
    \              interval1[0] < interval2[0]\n              interval1[1] > interval2[1]\n\
    \              \n              if interval1[0] >= interval2[0]\n             \
    \   interval1[1] < interval2[1]\n                \n                if interval1[1]\
    \ >= interval2[1]\n                  interval1[0] < interval2[0]\n           \
    \       interval1[1] > interval2[1]\n                  \n                  if\
    \ interval1[0] >= interval2[0]\n                    interval1[1] < interval2[1]\n\
    \                    \n                    if interval1[1] >= interval2[1]\n \
    \                     interval1[0] < interval2[0]\n                      interval1[1]\
    \ > interval2[1]\n                      \n                      if interval1[0]\
    \ >= interval2[0]\n                        interval1[1] < interval2[1]\n     \
    \                   \n                        if interval1[1] >= interval2[1]\n\
    \                          interval1[0] < interval2[0]\n                     \
    \     interval1[1] > interval2[1]\n                          \n              \
    \            if interval1[0] >= interval2[0]\n                            interval1[1]\
    \ < interval2[1]\n                            \n                            if\
    \ interval1[1] >= interval2[1]\n                              interval1[0] < interval2[0]\n\
    \                              interval1[1] > interval2[1]\n                 \
    \             \n                              if interval1[0] >= interval2[0]\n\
    \                                interval1[1] < interval2[1]\n               \
    \                 \n                                if interval1[1] >= interval2[1]\n\
    \                                  interval1[0] < interval2[0]\n             \
    \                     interval1[1] > interval2[1]\n                          \
    \        \n                                  if interval1[0] >= interval2[0]\n\
    \                                    interval1[1] < interval2[1]\n           \
    \                         \n                                    if interval1[1]\
    \ >= interval2[1]\n                                      interval1[0] < interval2[0]\n\
    \                                      interval1[1] > interval2[1]\n         \
    \                             \n                                      return \"\
    YES\"\n                                    end\n                             \
    \     end\n                                end\n                             \
    \ end\n                            end\n                          end\n      \
    \                  end\n                      end\n                    end\n \
    \                 end\n                end\n              end\n", "  \nend\n  ",
  "  interval1[0] < interval2[1] and interval1[1] > interval2[0]\nend", "  \nend\n\
    \  ", "  \n  interval1_start = interval1[0]\n  interval1_end = interval1[1]\n\
    \  interval2_start = interval2[0]\n  interval2_end = interval2[1]\n  \n  interval1_length\
    \ = interval1_end - interval1_start\n  interval2_length = interval2_end - interval2_start\n\
    \  \n  if interval1_length == interval2_length\n    return \"YES\"\n  \n  if interval1_length\
    \ > interval2_length\n    return \"NO\"\n  \n  if interval1_length < interval2_length\n\
    \    return \"NO\"\n  \n  if interval1_start <= interval2_start <= interval1_end\
    \ or interval1_start <= interval2_end <= interval1_end\n    return \"YES\"\n \
    \ \n  if interval2_start <= interval1_start <= interval2_end or interval2_start\
    \ <= interval1_end <= interval2_end\n    return \"YES\"\n  \n  if interval1_start\
    \ <= interval2_start <= interval1_end or interval2_start <= interval1_end <= interval2_end\n\
    \    return \"YES\"\n  \n  if interval1_start <= interval2_start <= interval1_end\
    \ or interval1_start <= interval2_end <= interval2_end\n    return \"YES\"\n \
    \ \n  if interval1_start <= interval2_start <= interval1_end or interval2_start\
    \ <= interval1_end <= interval2_end\n    return \"YES\"\n  \n  if interval1_start\
    \ <= interval2_start <= interval1_end or interval1_start <= interval2_end <= interval2_end\n\
    \    return \"YES\"\n  \n  if interval1_start <= interval2_start <= interval1_end\
    \ or interval2_start <= interval1_end <= interval2_end\n    return \"YES\"\n \
    \ \n  if interval1_start <= interval2_start <= interval1_end or interval1_start\
    \ <= interval2_end <= interval2_end\n    return \"YES\"\n  \n  if interval1_start\
    \ <= interval2_start <= interval1_end or interval2_start <= interval1_end <= interval2_end\n\
    \    return \"YES\"\n  \n  if interval1_start <= interval2_start <= interval1_end\
    \ or interval1_start <= interval2_end <= interval2_end\n    return \"YES\"\n \
    \ \n  if interval1_start <= interval2_start <= interval1_end or interval2_start\
    \ <= interval1_end <= interval2_end\n    return \"YES\"\n  \n  if interval1_start\
    \ <= interval2_start <= interval1_end or interval1_start <= interval2_end <= interval2_end\n\
    \    return \"YES\"\n  \n  if interval1_start <= interval2_start <= interval1_end\
    \ or interval2_start <= interval1_end <= interval2_end\n    return \"YES\"\n \
    \ \n  if interval1_start <= ", "  \nend\n  ", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if i[0] < j[0]\n        puts \"YES\"\n      else\n        puts\
    \ \"NO\"\n      end\n    end\n  end\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      i[0] <= j[0] && j[0] <= i[1] && i[1] <= j[1]\n    end\n  end\n\
    end", "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  if interval1[0] == interval1[1] and interval2[0] == interval2[1]:\n   \
    \ return \"NO\"\n  \n  intersection_length = interval1[1] - interval1[0]\n  \n\
    \  if interval2[1] - interval2[0] < intersection_length:\n    return \"NO\"\n\
    \  \n  prime_numbers = prime_numbers_between(interval1[0], interval1[1])\n  \n\
    \  prime_numbers.each do |prime|\n    if prime_numbers_between(interval2[0], interval2[1]).include?(prime)\n\
    \      return \"YES\"\n    end\n  end\n  \n  return \"NO\"\nend", "  interval1\
    \ = interval1.to_a\n  interval2 = interval2.to_a\n  \n  interval1.each do |i|\n\
    \    interval2.each do |j|\n      \n      if i[1] < j[1]\n        interval1.delete(i)\n\
    \      elsif j[1] < i[1]\n        interval2.delete(j)\n      end\n    end\n  end\n\
    \  \n  if interval1.empty? and interval2.empty?\n    return \"NO\"\n  elsif interval1.empty?\n\
    \    return \"YES\"\n  elsif interval2.empty?\n    return \"YES\"\n  else\n  \
    \  return \"NO\"\n  end\nend", "  \nend\nend", "  \n  # Write your code here\n\
    \  \n  return \"NO\"\nend", "  \n  # your code here\n  \nend", "  \n  # Write\
    \ your code here\n  \nend", "  interval1.each do |i|\n    interval2.each do |j|\n\
    \      i[0] <= j[0] && j[0] <= i[1] && i[1] <= j[1]\n    end\n  end\nend", " \
    \ interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n    return\
    \ \"YES\"\n  elsif interval1[0] >= interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] < interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] < interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] > interval2[0] and interval1[1] < interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] > interval2[0] and interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  else\n    return \"NO\"\n  end\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[1] >= j[1] && i[1] <= j[1]\n \
    \       return true\n      end\n    end\n  end\n  return false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
