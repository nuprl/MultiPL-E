name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  s.each_char.with_index do |c,i|\n    if i % 2 == 0 && c == 'A'\n\
    \      count += 1\n    end\n  end\nend\n</pre>\n</div>", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i].upcase == 'A'\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + (i & 1) }\nend",
  "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum + 1 if index\
    \ % 2 == 0 && char.upcase == 'A'\n  end\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like your solution, however it only works on even indices. I\
    \ updated my question to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a solution that works for any index.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, however it only works on even indices. I updated my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution that works\
    \ for any index.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  count = 0\n\
    \  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U'\n      count += 1\n    end\n  end\n  count\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2016-03-26 19:31:11 UTC\n</div>\n</div>\n</body>\n</html>\n<|/ file filename=index.html\
    \ |>\n<| c |>\nThe `each_char` method was introduced in Ruby 1.9.2. In Ruby 1.8.7,\
    \ it would be `each_char`.\n<|/ c |>\n<| c |>\nThanks for the info. I'm still\
    \ learning Ruby, so I didn't know that.\n<|/ c |>\n<| c |>\nI added a link to\
    \ the documentation for each_char.\n<|/ c |>\n<| c |>\nThanks for the link. I\
    \ didn't know that either.\n<|/ c |>\n<| a |>\n<code>", "  count = 0\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'A' || c == 'E' || c == 'I'\n  end\n  count\n\
    end", "    count = 0\n    i = 0\n    while i < s.length\n        if s[i] =~ /[AEIOU]/\n\
    \            count += 1\n        end\n        i += 1\n    end\n    return count\n\
    end", "  count = 0\n  s.each_char.with_index do |char, i|\n    if i % 2 == 0 &&\
    \ char.upcase == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n  \
    \  if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char.upcase == char\n      puts \"#{char}\
    \ is at index #{i}\"\n    end\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (ch, i)| sum + 1 if i % 2 == 0 and ch.upcase == ch }\nend", "  count\
    \ = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if i % 2 == 0 && c.upcase\
    \ == 'A'\n  end\n  count\nend\n</pre>\n</div>", "  count = 0\n  s.each_char do\
    \ |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  for i in 0...s.length\n    if s[i] == ?\n    \
    \  count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index do\
    \ |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do\
    \ |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'A'\
    \ || c == 'E' || c == 'I'\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index%2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  s.each_index do |i|\n    if s[i] =~ /[AEIOU]/\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'A' || c == 'E' || c == 'I'\n  end\n  count\n\
    end", "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum + char.upcase\
    \ if char.even? }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "  count = 0\n  s.each_index do |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\nend", " \
    \ s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + i.odd? ? sum + 1 : sum\
    \ } \nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby |>\n<code>", "  count =\
    \ 0\n  s.each_char.with_index do |char, index|\n    if index % 2 == 0\n      count\
    \ += 1 if char.upcase == 'A'\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index do |i|\n    if\
    \ s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", "    count\
    \ = 0\n    i = 0\n    while i < s.length\n        if s[i] =~ /[AEIOU]/\n     \
    \       count += 1\n        end\n        i += 1\n    end\n    return count\nend",
  "  count = 0\n  s.each_index do |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\nend", " \
    \ count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n \
    \     count += 1\n    end\n  end\n  count\nend\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</", "  count = 0\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'A' || c == 'E' || c == 'I'\n  end\n  count\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if\
    \ i % 2 == 0 && char.upcase == char\n  end\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i].upcase == 'A' || s[i].upcase == 'E' || s[i].upcase == 'I'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    count += 1 if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U'\n  end\n  count\nend\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <cell>\ncount_upper(\"AHOJ\")\n</cell>\n<cell>\ncount_upper(\"AHOJ\")\n</cell>\n\
    <", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + i.odd? ? sum +\
    \ 1 : sum }\nend", "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  s.each_index do |i|\n    if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n  \
    \  if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_index do |i|\n    if s[i] =~ /[AEIOU]/\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) do\
    \ |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if\
    \ i % 2 == 0 && char.upcase == char\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + char.upcase if char.even? }\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' ||\
    \ c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (char, i)| sum + 1 if i % 2 == 0 && char.upcase == char }\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I didn't know that each_with_index existed! I thought it would be a method\
    \ of String. Thanks again!\n<|/ c |>\n<| c |>\n`each_with_index` is part of Enumerable\
    \ (http://ruby-doc.org/core-2.3.0/Enumerable.html)\n<|/ c |>\n<| c |>\nI see.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't\
    \ require the creation of a temporary array.\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  s.chars.each_with_index.inject(0) { |sum, (char, i)| sum +\
    \ 1 if i % 2 == 0 and char.upcase == char }\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (char, i)| sum + 1 if i % 2 == 0 && char == char.upcase }\nend", " \
    \ count = 0\n  for i in 0...s.length\n    if s[i] == 'A'\n      count += 1\n \
    \   end\n  end\n  count\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa",
  "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n  \
    \  if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 == 0\n  \
    \    count += 1 if c == 'A' || c == 'E' || c == 'I'\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char.with_index do |char, i|\n    if i % 2 == 0 &&\
    \ char.upcase == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n \
    \   sum + 1 if index&1 == 0 && char == char.upcase\n  end\nend", "  s.each_char.with_index.with_object(Hash.new(0))\
    \ { |c,i| c[i].update(/[AEIOU]/) { |v| v += 1 } }\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it! I did some research on\
    \ `each_char` and I understand it now. I'm still a beginner at Ruby, so I appreciate\
    \ your help!\n<|/ c |>\n<| c |>\n: No problem. `each_char` gives you a character\
    \ at a time, so you can do things like `each_char.with_index.with_object(Hash.new(0))\
    \ { |c,i| c[i].update(/[AEIOU]/) { |v| v += 1 } }`\n<|/ c |>\n<| a tags=ruby |>\n\
    <code>", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c\
    \ == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + (char == 'A' || char == 'E' || char == 'I'\
    \ || char == 'O' || char == 'U' ? 1 : 0)\n  end\nend", "  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i % 2 == 0 && c.upcase == 'A'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  s.each_index do |i|\n    if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count +=\
    \ 1\n    end\n  end\n  count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (c, n)| sum + 1 if c == 'A' && n % 2 == 0 }\nend", "  count = 0\n  for\
    \ i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_index do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\n\
    \      count += 1\n    end\n  end\n  count\nend\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")\n</cell>\n<cell>\ncount_upper(\"\
    AABBCC\")\n</cell>\n<cell>\ncount_upper(\"AABBCC\")", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "    count = 0\n    for i in 0...s.length\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "  count = 0\n\
    \  for i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||\
    \ s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  s.each_index do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n  count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaAeEeIiOoUu\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAeEeIiOoUu", "  s.chars.each_with_index.inject(0) { |sum, (char,\
    \ i)| sum + 1 if i % 2 == 0 && char.upcase == char }\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain what this line is\
    \ doing? `s.chars.each_with_index.inject(0) { |sum, (char, i)| sum + 1 if i %\
    \ 2 == 0 && char.upcase == char }`\n<|/ c |>\n<| c |>\n`each_with_index` iterates\
    \ over the string and gives you the character and its index. `inject` iterates\
    \ over the array and adds the value to the sum when the condition is true. `sum\
    \ + 1 if i % 2 == 0 && char.upcase == char` adds the value to the sum when the\
    \ index is even (`i % 2 == 0`) and the character is uppercase. `char.upcase ==\
    \ char` checks if the character is uppercase. `char.upcase == char` checks if\
    \ the character is uppercase. `char.upcase == char` checks if the character is\
    \ uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char` checks if the character is uppercase. `char.upcase == char` checks\
    \ if the character is uppercase. `char.upcase == char` checks if the character\
    \ is uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char` checks if the character is uppercase. `char.upcase == char` checks\
    \ if the character is uppercase. `char.upcase == char` checks if the character\
    \ is uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char` checks if the character is uppercase. `char.upcase == char` checks\
    \ if the character is uppercase. `char.upcase == char` checks if the character\
    \ is uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char` checks if the character is uppercase. `char.upcase == char` checks\
    \ if the character is uppercase. `char.upcase == char` checks if the character\
    \ is uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char` checks if the character is uppercase. `char.upcase == char` checks\
    \ if the character is uppercase. `char.upcase == char` checks if the character\
    \ is uppercase. `char.upcase == char` checks if the character is uppercase. `",
  "  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if i % 2 == 0 &&\
    \ c.upcase == 'A'\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char == char.upcase\n    count += 1 if i % 2\
    \ == 0\n  end\n  count\nend", "    count = 0\n    for i in 0...s.length\n    \
    \    if s[i] == 'A'\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  s.chars.each_with_index.inject(0) { |sum, (ch, i)| sum + 1 if\
    \ i % 2 == 0 && ch.upcase == ch }\nend", "  count = 0\n  s.each_char do |c|\n\
    \    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n \
    \ count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I'\n      count += 1\n    end\n  end\n  count\nend\n</cell>\n<cell>\n\
    count_upper(\"Ahoy!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!\")\n</cell>\n<cell>\n\
    count_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n\
    <cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n\
    </cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\"\
    )\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"Ahoy!!!\")\n</cell>\n<cell>\ncount_upper(\"\
    Ahoy!!!\")\n</", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + (i\
    \ % 2 == 0 ? 1 : 0) }\nend", "  s.chars.each_with_index.inject(0) {|sum, (c,i)|\
    \ sum + 1 if i % 2 == 0 and c.upcase == c}\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (_, i)| sum + 1 if i.even? && i.upcase == true }\nend", "  count = 0\n\
    \  s.each_char do |c|\n    count += 1 if c == 'A' || c == 'E' || c == 'I'\n  end\n\
    \  count\nend", "  s.chars.each_with_index.inject(0) { |sum, (char, i)| sum +\
    \ 1 if i % 2 == 0 && char.upcase == char }\nend", "    count = 0\n    i = 0\n\
    \    while i < s.length\n        if s[i] == ?\n            count += 1\n      \
    \  i += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c =~ /[AEIOU]/\n  end\n  count\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 ==\
    \ 0 && c.upcase == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 == 0 && c.upcase\
    \ == 'A'\n      count += 1\n    end\n  end\n  count\nend", "    count = 0\n  \
    \  i = 0\n    while i < s.length\n        if s[i] >= 'a' and s[i] <= 'z'\n   \
    \         count += 1\n            i += 1\n        end\n    end\n    return count\n\
    end", "  count = 0\n  s.each_index do |i|\n    if s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.chars.each_with_index.inject(0) {|sum, (c, i)| sum\
    \ + if i % 2 == 0 then c >= 'A' && c <= 'Z' then 1 else 0 end}\nend", "  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char.upcase == 'A'\n      puts \"Found #{char}\"\
    \n    end\n  end\nend\ncount_upper(\"AABBCCC\")", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (ch, i)| sum + 1 if i % 2 == 0 && ch.upcase == ch }\nend", "  count\
    \ = 0\n  s.each_char.with_index do |char, i|\n    if i % 2 == 0 && char.upcase\
    \ == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum +\
    \ 1 if index&1 == 0 && char == char.upcase\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, e| sum + e.to_i.even? }\nend\n</code>\n<|/ a tags=ruby,regex |>\n<|\
    \ a dscore=1 |>\n<code>", "  s.chars.each_with_index.inject(0) do |sum, (char,\
    \ i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) {\
    \ |sum, (c,i) | sum + 1 if i % 2 == 0 and c == 'A'; sum }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c ==\
    \ 'I'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, e| sum + e.to_i.even?\
    \ }\nend", "    count = 0\n    for i in 0...s.length\n        if s[i] == 'A'\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  count\
    \ = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 == 0 && c.upcase == 'A'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char == char.upcase\n      count += 1\n \
    \   end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.each_char.with_index do |char, i|\n    next if i %\
    \ 2 == 0\n    next if char.upcase == 'A'\n    next if char.upcase == 'E'\n   \
    \ next if char.upcase == 'I'\n    next if char.upcase == 'O'\n    next if char.upcase\
    \ == 'U'\n    next if char.upcase == 'Y'\n    next if char.upcase == 'a'\n   \
    \ next if char.upcase == 'e'\n    next if char.upcase == 'i'\n    next if char.upcase\
    \ == 'o'\n    next if char.upcase == 'u'\n    next if char.upcase == 'y'\n   \
    \ next if char.upcase == 'A'\n    next if char.upcase == 'E'\n    next if char.upcase\
    \ == 'I'\n    next if char.upcase == 'O'\n    next if char.upcase == 'U'\n   \
    \ next if char.upcase == 'Y'\n    next if char.upcase == 'a'\n    next if char.upcase\
    \ == 'e'\n    next if char.upcase == 'i'\n    next if char.upcase == 'o'\n   \
    \ next if char.upcase == 'u'\n    next if char.upcase == 'y'\n    next if char.upcase\
    \ == 'A'\n    next if char.upcase == 'E'\n    next if char.upcase == 'I'\n   \
    \ next if char.upcase == 'O'\n    next if char.upcase == 'U'\n    next if char.upcase\
    \ == 'Y'\n    next if char.upcase == 'a'\n    next if char.upcase == 'e'\n   \
    \ next if char.upcase == 'i'\n    next if char.upcase == 'o'\n    next if char.upcase\
    \ == 'u'\n    next if char.upcase == 'y'\n    next if char.upcase == 'A'\n   \
    \ next if char.upcase == 'E'\n    next if char.upcase == 'I'\n    next if char.upcase\
    \ == 'O'\n    next if char.upcase == 'U'\n    next if char.upcase == 'Y'\n   \
    \ next if char.upcase == 'a'\n    next if char.upcase == 'e'\n    next if char.upcase\
    \ == 'i'\n    next if char.upcase == 'o'\n    next if char", "    count = 0\n\
    \    for i in 0...s.length\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I'\
    \ or s[i] == 'O' or s[i] == 'U'\n            count += 1\n        end\n    end\n\
    \    return count\nend", "  s.chars.each_with_index.inject(0) do |sum, (char,\
    \ index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n  end\nend", " \
    \ count = 0\n  s.each_char do |c|\n    count += 1 if c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U'\n  end\n  count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (_, i)| sum + i.odd? ? sum + 1 : sum }\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (i, _)| sum + 1 if i % 2 == 0 && s[i].upcase == s[i].downcase }\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if c =~ /[AEIOU]/\n  end\n  count\n\
    end\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n</cell>\n<cell>\ncount_upper(\"The quick brown fox jumps over the lazy dog\"\
    )\n", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 == 0\n  \
    \    count += 1 if c == 'A' || c == 'E' || c == 'I'\n    end\n  end\n  count\n\
    end", "    count = 0\n    i = 0\n    while i < s.length\n        if s[i] =~ /[aeiou]/\n\
    \            count += 1\n            i += 2\n        else\n            i += 1\n\
    \        end\n    end\n    return count\nend", "  count = 0\n  for i in 0...s.length\n\
    \    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  count = 0\n  for i in 0...s.length\n\
    \    if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.scan(/[aeiou]/).inject(0) { |sum, s| sum + s.upcase if s.odd? }\nend\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  count = 0\n  for i in 0...s.length\n\
    \    if s[i] == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    if index % 2 == 0 && char.upcase == \"A\"\n   \
    \   sum + 1\n    end\n  end\nend", "  s.chars.each_with_index.inject(0) { |sum,\
    \ (char, i)| sum + 1 if i % 2 == 0 and char.upcase == char }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char == char.upcase\n  end\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, however I believe\
    \ it would be more efficient to iterate over the string once and count the uppercase\
    \ vowels using a `Hash` instead of iterating over the string twice.\n<|/ c |>\n\
    <| c |>\nYes, I agree that `Hash` would be more efficient. However, the OP asked\
    \ for a solution that doesn't use any additional methods. I believe that `each_char`\
    \ is more readable than `each_with_index`.\n<|/ c |>\n<| c |>\nI agree that `each_char`\
    \ is more readable, but I believe that `each_with_index` is more efficient than\
    \ `each_char` because it does not require the creation of a temporary array.\n\
    <|/ c |>\n<| c |>\nI agree that `each_char` is more readable, but I believe that\
    \ `each_with_index` is more efficient than `each_char` because it does not require\
    \ the creation of a temporary array.\n<|/ c |>\n<| c |>\nI agree that `each_char`\
    \ is more readable, but I believe that `each_with_index` is more efficient than\
    \ `each_char` because it does not require the creation of a temporary array.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, index)|\n    if index % 2 == 0\n      sum += 1 if char.upcase == 'A'\n\
    \    end\n    sum\n  end\nend", "  count = 0\n  s.each_index do |i|\n    if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  for i in 0...s.length\n    if s[i] == ?\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\nend", " \
    \ count = 0\n  s.each_char do |c|\n    count += 1 if c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U'\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (i, c)| sum + (c == 'A' ? 0 : 1) if i % 2 == 0 }\nend", "  count = 0\n\
    \  s.each_index do |i|\n    if s[i] == s[i].upcase\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.each_char.with_index do |c, i|\n    if i % 2 == 0\
    \ && c.upcase == c\n      puts i\n    end\n  end\nend\ncount_upper(\"hello\")",
  "  s.chars.each_with_index.inject(0) { |sum, (i, _)| sum + 1 if i % 2 == 0 && s[i].upcase\
    \ == s[i].downcase }\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A'\
    \ || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  for i in 0...s.length\n    if s[i] == 'A' or s[i] == 'E' or s[i]\
    \ == 'I' or s[i] == 'O' or s[i] == 'U'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i % 2 == 0 && c.upcase\
    \ == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend", "  count = 0\n  for i in 0...s.length\n    if s[i] == ?\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index do |i|\n \
    \   if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum +\
    \ 1 if index % 2 == 0 && char == char.upcase\n  end\nend", "  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char.upcase == 'A'\n      count += 1\n  \
    \  end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if c\
    \ == 'A' || c == 'E' || c == 'I'\n  end\n  count\nend", "  s.each_char.with_index\
    \ do |char, i|\n    next if i % 2 == 0\n    next if char.upcase == 'A'\n    next\
    \ if char.upcase == 'E'\n    next if char.upcase == 'I'\n    next if char.upcase\
    \ == 'O'\n    next if char.upcase == 'U'\n    next if char.upcase == 'a'\n   \
    \ next if char.upcase == 'e'\n    next if char.upcase == 'i'\n    next if char.upcase\
    \ == 'o'\n    next if char.upcase == 'u'\n    next\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    if index % 2 == 0\n      sum += 1 if char.upcase\
    \ == 'A'\n    end\n    sum\n  end\nend\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell>\ncount_upper(\"hello\")\n</cell>\n<cell>\ncount_upper(\"hello\"\
    )\n</cell>\n<cell", "  count = 0\n  s.each_char.with_index do |c, i|\n    if i\
    \ % 2 == 0 && c.upcase == 'A'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  s.each_char.with_index do |char, i|\n    if i % 2 == 0 && char.upcase\
    \ == 'A'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i % 2 == 0 && c.upcase == c\n      count += 1\n    end\n \
    \ end\n  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c\
    \ == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char do |c|\n  \
    \  if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char do |c|\n    count += 1 if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'\n  end\n  count\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index%2 == 0 && char.upcase == 'A'\n\
    \  end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, but I\
    \ find it a bit hard to read. I'd rather use a `case` statement to make it more\
    \ readable. `s.chars.each_with_index.inject(0) { |sum, (char, index)| sum + 1\
    \ if index%2 == 0 && char.upcase == 'A' }`\n<|/ c |>\n<| c |>\nI agree with you,\
    \ that's why I added the comment in the code. Thanks!\n<|/ c |>\n<| c |>\nI added\
    \ your solution to the answer.\n<|/ c |>\n<| c |>\nI added your solution to the\
    \ answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  count = 0\n  s.each_char do\
    \ |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n\
    \  count\nend", "    count = 0\n    i = 0\n    while i < s.length\n        if\
    \ s[i] =~ /[AEIOU]/\n            count += 1\n        end\n        i += 1\n   \
    \ end\n    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U'\n      count += 1\n    end\n  end\n  count\nend", "    count = 0\n  \
    \  i = 0\n    while i < s.length\n        if s[i] >= 'A' && s[i] <= 'Z'\n    \
    \        count += 1\n        i += 1\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"HELLO\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"HELLO\
    \ WORLD\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"HELLO WORLD HELLO\
    \ WORLD\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"HELLO WORLD HELLO\
    \ WORLD HELLO WORLD\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\")\n\
    </cell>\n<code language=julia-1.0>\ncount_upper(\"HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HEL", "  count = 0\n  s.each_index\
    \ do |i|\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  for\
    \ i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  s.scan(/[aeiou]/).inject(0) { |sum,\
    \ e| sum + e.to_i.even? }\nend", "  count = 0\n  for i in 0...s.length\n    if\
    \ s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E'\
    \ || c == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  s.each_char do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count +=\
    \ 1\n    end\n  end\n  count\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any methods that aren't already covered\
    \ in the book. I am also not allowed to use any methods that aren't covered in\
    \ the book. I am not allowed to use any methods that aren't covered in the book.\
    \ I am not allowed to use any methods that aren't covered in the book. I am not\
    \ allowed to use any methods that aren't covered in the book. I am not allowed\
    \ to use any methods that aren't covered in the book. I am not allowed to use\
    \ any methods that aren't covered in the book. I am not allowed to use any methods\
    \ that aren't covered in the book. I am not allowed to use any methods that aren't\
    \ covered in the book. I am not allowed to use any methods that aren't covered\
    \ in the book. I am not allowed to use any methods that aren't covered in the\
    \ book. I am not allowed to use any methods that aren't covered in the book. I\
    \ am not allowed to use any methods that aren't covered in the book. I am not\
    \ allowed to use any methods that aren't covered in the book. I am not allowed\
    \ to use any methods that aren't covered in the book. I am not allowed to use\
    \ any methods that aren't covered in the book. I am not allowed to use any methods\
    \ that aren't covered in the book. I am not allowed to use any methods that aren't\
    \ covered in the book. I am not allowed to use any methods that aren't covered\
    \ in the book. I am not allowed to use any methods that aren't covered in the\
    \ book. I am not allowed to use any methods that aren't covered in the book. I\
    \ am not allowed to use any methods that aren't covered in the book. I am not\
    \ allowed to use any methods that aren't covered in the book. I am not allowed\
    \ to use any methods that aren't covered in the book. I am not allowed to use\
    \ any methods that aren't covered in the book. I am not allowed to use any methods\
    \ that aren't covered in the book. I am not allowed to use any methods that aren't\
    \ covered in the book. I am not allowed to use any methods that aren't covered\
    \ in the book. I am not allowed to use any methods that aren't covered in the\
    \ book. I am not allowed to use any methods that aren't covered in the book. I\
    \ am not allowed to use any methods that aren't covered in the book. I am not\
    \ allowed to use any methods that aren't covered in the book. I am not allowed\
    \ to use any methods that aren't covered in the book. I am not allowed to use\
    \ any methods that aren't covered in the book. I am not allowed to use any methods\
    \ that aren't covered in the book", "  count = 0\n  s.each_char do |c|\n    if\
    \ c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char do |c|\n    if c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U'\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U'\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum +\
    \ (index&1 == 0 && char == 'A' ? 1 : 0)\n  end\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'A' || c == 'E' || c == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "    count = 0\n    i = 0\n    while i < s.length\n   \
    \     if s[i] >= 'A' and s[i] <= 'Z'\n            count += 1\n        i += 1\n\
    \    return count\nend", "  count = 0\n  s.each_char do |c|\n    count += 1 if\
    \ c == 'A' || c == 'E' || c == 'I'\n  end\n  count\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, e| sum + e.to_i.even? }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  count = 0\n  s.each_index do |i|\n    if s[i] =~ /[AEIOU]/\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char.upcase == 'A'\n      count += 1\n  \
    \  end\n  end\n  count\nend", "  s.chars.each_with_index.inject(0) {|sum, (c,i)|\
    \ sum + 1 if i % 2 == 0 and c == 'A'; sum + 0 }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == 'A'\n\
    \  end\nend\n</pre>\n            </div>\n          \n          \n          \n\
    \          \n          \n            \n            <div class=\"sourcecode\">\n\
    \              \n              <p class=\"source-link\">\n                Source:\
    \ \n                <a href=\"javascript:toggleSource('method-i-count_upper_source')\"\
    \ id=\"l_method-i-count_upper_source\">show</a>\n                \n          \
    \    </p>\n              <div id=\"method-i-count_upper_source\" class=\"dyn-source\"\
    >\n                <pre><span class=\"ruby-comment\"># File /usr/local/rvm/gems/ruby-2.0.0-p0/gems/activesupport-4.0.0/lib/active_support/core_ext/string/access.rb,\
    \ line 16</span>\n<span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\
    \ ruby-title\">count_upper</span>(<span class=\"ruby-identifier\">s</span>)\n\
    \  <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">chars</span>.<span\
    \ class=\"ruby-identifier\">each_with_index</span>.<span class=\"ruby-identifier\"\
    >inject</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-keyword\"\
    >do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\"\
    >sum</span>, (<span class=\"ruby-identifier\">char</span>, <span class=\"ruby-identifier\"\
    >index</span>)<span class=\"ruby-operator\">|</span>\n    <span class=\"ruby-keyword\"\
    >if</span> <span class=\"ruby-identifier\">index</span> <span class=\"ruby-operator\"\
    >%</span> <span class=\"ruby-number\">2</span> <span class=\"ruby-operator\">==</span>\
    \ <span class=\"ruby-number\">0</span> <span class=\"ruby-operator\">&amp;&amp;</span>\
    \ <span class=\"ruby-identifier\">char</span>.<span class=\"ruby-identifier\"\
    >upcase</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\"\
    >'A'</span>\n      <span class=\"ruby-identifier\">sum</span> <span class=\"ruby-operator\"\
    >+</span> <span class=\"ruby-number\">1</span>\n    <span class=\"ruby-keyword\"\
    >end</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\"\
    >end</span></pre>\n              </div>\n            </div>\n            \n  \
    \        </div>\n        \n        <div class=\"method\">\n          <div class=\"\
    title method-title\" id=\"method-i-count_words_with_index\">\n            \n \
    \             <b>count_words_with_index</b>(sentence, options={})\n          \
    \  \n            <a href=\"../../../classes/ActiveSupport/Inflector/Inflections.html#method-i-count_words_with_index\"\
    \ name=\"method-i-count_words_with_index\" class=\"permalink\">Link</a>\n    \
    \      </div>\n          \n          \n            <div class=\"description\"\
    >\n              <p>Returns the plural form of the word when counting words.</p>",
  "  count = 0\n  for i in 0...s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I'\n      count += 1\n    end\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
