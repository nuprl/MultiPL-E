name: HumanEval_116_sort_array
language: rb
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\ndef sort_array(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
  \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
  \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
  \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5,\
  \ 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
  \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
  \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
  \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
completions: ["  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |i| i.to_s(2) }\nend", " \
    \ arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "    arr.sort!\nend", "    arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\nend", " \
    \ arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", "    arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\nend", " \
    \ arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\n  arr.each_with_index do |n, i|\n    arr[i] = [arr[i].to_i,\
    \ arr[i].to_s.reverse].max\n  end\n  arr\nend", "  arr.sort!\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = [e, arr[i].to_s.chars.map(&:to_i).inject(:+)]\n  end\n\
    \  arr\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \   arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend",
  "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend",
  "  arr.sort!\nend", "  arr.sort!\n  arr.map! {|x| x.to_s(2).count(\"1\") }\n  arr.sort!\
    \ {|x,y| x.to_s(2).count(\"1\") > y.to_s(2).count(\"1\") ? -1 : 1}\nend\n</code>\n\
    <|/ a |>\n<| c |>\nI like the idea of using count, but this doesn't work for negative\
    \ numbers. I added a solution that works for negative numbers, too.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \   arr.sort!\n    arr.map { |e| [e, bin(e).count('1')] }.sort_by { |e| e[1] }.map\
    \ { |e| e[0] }\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n \
    \ arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\n  arr.map { |i| i.to_s(2) }\n\
    end", "  arr.sort!\n  arr.map {|x| x.to_s(2).count(\"1\") }\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "    arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "    arr.sort!\n\
    end", "    arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \ arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2)\
    \ }\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x|\
    \ x.to_s(2) }\nend", "    arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "    arr.sort!\nend", "  arr.sort!\n  arr.map { |x|\
    \ x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\n  arr.map { |i| i.to_s(2) }\nend", "    arr.sort!\nend", " \
    \ arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |i| i if i.to_s(2).count(\"\
    1\").zero? ? i.to_s(10) : i.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.each_with_index do |x, i|\n    if\
    \ x.zero?\n      arr[i] = -1\n    else\n      arr[i] = x.to_s(2).count('1').to_i\n\
    \    end\n  end\n  arr\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.each_with_index do |n, i|\n    arr[i]\
    \ = n.to_s(2)\n  end\n  arr.sort!\nend", "    arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \ arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = x.to_s(2)\n  end\n  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \ arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \ arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.each_with_index do\
    \ |x, i|\n    arr[i] = x.to_s(2)\n  end\n  arr.sort!\nend", "  arr.sort!\nend",
  "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend",
  "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", "    arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.each_with_index do |x, i|\n    arr[i] = x.to_s(2)\n  end\n  arr.sort!\n\
    end", "    arr.sort!\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\nend", " \
    \ arr.sort!\nend", "  arr.sort!\n  arr.each_with_index do |x, i|\n    arr[i] =\
    \ x.to_s(2)\n  end\n  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\n  arr.map { |x| x.to_s(2) }\n\
    end", "    arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.map { |x| x.to_s(2) }\nend", "  arr.sort!\n  arr.map { |i| i.to_s(2) }\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    end", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\nend", "  arr.sort!\n\
    \  arr.map { |i| i if i.to_s(2).count(\"1\").zero? ? i.to_s(2) : i.to_s(2).count(\"\
    1\").zero? ? i.to_s(2).to_i : i.to_s(2).to_i.to_s }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
