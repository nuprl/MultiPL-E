name: HumanEval_81_numerical_letter_grade
language: rb
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you a list of GPAs for some students and you have to write \n# a function that\
  \ can output a list of letter grades using the following table:\n# GPA       | \
  \   Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3  \
  \              A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\ndef numerical_letter_grade(grades)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n\
  \    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"\
  D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n\
  \    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"\
  E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n"
completions: ["  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i] -= grades[i-1]\
    \ }\n  grades.reverse!\n  grades.each { |i| grades[i] += 1 }\n  grades.each {\
    \ |i| grades[i] /= 2 }\n  grades.each { |i| grades[i] = grades[i].to_s.upcase\
    \ }\n  grades\nend", "  grades = grades.to_f\n  grades.times do |i|\n    grade\
    \ = grades.to_f - i\n    if grade < 0\n      grade = grade * -1\n    end\n   \
    \ grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n \
    \   grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade + 90.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade / 4.0\n    if grade < 0\n      grade = grade * -1\n    end\n\
    \    grade = grade ", "  grades.each do |grade|\n    puts \"#{grade} -> #{letter_grade(grade)}\"\
    \n  end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat have you tried so far?\
    \ Where are you stuck?\n<|/ c |>\n<| c |>\nI have tried using an if statement\
    \ to see if grade is greater than or less than 3.0 and then using an else statement\
    \ to output the letter grade but that doesn't work\n<|/ c |>\n<| c |>\nPlease\
    \ show your code. Also, please explain what \"doesn't work\" means.\n<|/ c |>\n\
    <| c |>\nI have added the code I have so far\n<|/ c |>\n<| c |>\nWhat do you mean\
    \ by \"doesn't work\"? What happens when you run your code? What do you expect\
    \ to happen? What have you tried to fix it?\n<|/ c |>\n<| a |>\n<code>", "  grades.each\
    \ do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", " \
    \ grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f\
    \ - i\n    grade = grade / grades.to_f\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade.round\n    grade = grade.to_s\n    grade = grade.upcase\n\
    \    grade = grade.gsub(\".0\", \"\")\n    grade = grade.gsub(\",\", \"\")\n \
    \   grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"$\", \"\")\n   \
    \ grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade\
    \ = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade =\
    \ grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"\
    %\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\"\
    , \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\
    \")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n\
    \    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n  \
    \  grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade\
    \ = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade =\
    \ grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"\
    %\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\"\
    , \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\
    \")\n    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n\
    \    grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n  \
    \  grade = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade\
    \ = grade.gsub(\"%\", \"\")\n    grade = grade.gsub(\"%\", \"\")\n    grade =\
    \ grade.gsub(\"%\", \"\")\n    grade = grade.gsub", "  grades.each do |grade|\n\
    \    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much! This was very helpful!\n<|/ c |>\n<| c |>\n\
    You're welcome. Don't forget to accept the answer if it solved your problem.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  grades.each do |grade|\n    if grade\
    \ > 3.7\n      puts \"#{grade}+\".upcase\n    elsif grade > 3.3\n      puts \"\
    #{grade}\".upcase\n    elsif grade > 3.0\n      puts \"#{grade}+\".upcase\n  \
    \  elsif grade > 2.7\n      puts \"#{grade}\".upcase\n    elsif grade > 2.3\n\
    \      puts \"#{grade}\".upcase\n    elsif grade > 2.0\n      puts \"#{grade}+\"\
    .upcase\n    elsif grade > 1.7\n      puts \"#{grade}\".upcase\n    elsif grade\
    \ > 1.3\n      puts \"#{grade}\".upcase\n    elsif grade > 1.0\n      puts \"\
    #{grade}+\".upcase\n    elsif grade > 0.7\n      puts \"#{grade}\".upcase\n  \
    \  elsif grade > 0.0\n      puts \"#{grade}\".upcase\n    else\n      puts \"\
    #{grade}\".upcase\n    end\n  end\nend\n</code>\n<|/ q tags=ruby |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| c |>\nThe question is in the title\n<|/ c\
    \ |>\n<| c |>\nThe question is in the title\n<|/ c |>\n<| c |>\nThe question is\
    \ in the title\n<|/ c |>\n<| c |>\nThe question is in the title\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>", "  grades.each do |grade|\n    if grade >= 4.0\n   \
    \   puts \"A+\"\n    elsif grade > 3.7\n      puts \"A\"\n    elsif grade > 3.3\n\
    \      puts \"A-\"\n    elsif grade > 3.0\n      puts \"B+\"\n    elsif grade\
    \ > 2.7\n      puts \"B\"\n    elsif grade > 2.3\n      puts \"B-\"\n    elsif\
    \ grade > 2.0\n      puts \"C+\"\n    elsif grade > 1.7\n      puts \"C\"\n  \
    \  elsif grade > 1.3\n      puts \"C-\"\n    elsif grade > 1.0\n      puts \"\
    D+\"\n    elsif grade > 0.7\n      puts \"D\"\n    elsif grade > 0.0\n      puts\
    \ \"D-\"\n    else\n      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,if-statement,loops\
    \ |>\n<| c |>\nThank you so much! I didn't know you could use an elsif statement\
    \ like that. I'm still learning Ruby so I appreciate your help.\n<|/ c |>\n<|\
    \ c |>\nNo problem! I added some more information to my answer to help you understand\
    \ how it works. If you found my answer helpful, please consider accepting it!\
    \ :)\n<|/ c |>\n<| c |>\nI did but my reputation is too low for it to show publicly.\
    \ Thanks again!\n<|/ c |>\n<| a tags=ruby,if-statement,loops |>\n<code>", "  grades.each\
    \ do |grade|\n    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend\n</code>\n\
    <|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nWhat is your question?\n<|/ c |>\n\
    <| c |>\nThe question is, how do I get the letter grade to display in the view?\n\
    <|/ c |>\n<| c |>\nWhat does your `letter_grade` method look like?\n<|/ c |>\n\
    <| c |>", "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f\
    \ - i\n    grade = grade / grades.to_f\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade.round\n", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f\
    \ }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i]\
    \ = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.each { |i| grades[i] = grades[i].to_f }\n  grades.each { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f\
    \ }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i]\
    \ = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.each { |i| grades[i] = grades[i].to_f }\n  grades.each { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i] = grades[i].to_f\
    \ }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each { |i| grades[i]\
    \ = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i }\n  grades.each\
    \ { |i| grades[i] = grades[i].to_f }\n  grades.each { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.each { |i| grades[i] = grades[i].", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    grade = grades.to_f - i\n    grade = grade / grades.to_f\n    grade\
    \ = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = gra", " \
    \ grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand that my code is not the\
    \ most efficient but I am not allowed to use any loops or arrays. I am only allowed\
    \ to use if statements and loops.\n<|/ c |>\n<| c |>\nI understand that my code\
    \ is not the most efficient but I am not allowed to use any loops or arrays. I\
    \ am only allowed to use if statements and loops.\n<|/ c |>\n<| c |>\nI understand\
    \ that my code is not the most efficient but I am not allowed to use any loops\
    \ or arrays. I am only allowed to use if statements and loops.\n<|/ c |>\n<| c\
    \ |>\nI understand that my code is not the most efficient but I am not allowed\
    \ to use any loops or arrays. I am only allowed to use if statements and loops.\n\
    <|/ c |>\n<| c |>\nI understand that my code is not the most efficient but I am\
    \ not allowed to use any loops or arrays. I am only allowed to use if statements\
    \ and loops.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i]\
    \ -= grades[i].abs }\n  grades.times { |i| grades[i] /= 2.0 }\n  grades.times\
    \ { |i| grades[i] *= 4.0 }\n  grades.times { |i| grades[i] += grades[i].abs }\n\
    \  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i] *= 3.0\
    \ }\n  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i]\
    \ /= 3.0 }\n  grades.times { |i| grades[i] *= 2.0 }\n  grades.times { |i| grades[i]\
    \ += grades[i].abs }\n  grades.times { |i| grades[i] /= 2.0 }\n  grades.times\
    \ { |i| grades[i] *= 1.0 }\n  grades.times { |i| grades[i] += grades[i].abs }\n\
    \  grades.times { |i| grades[i] /= 1.0 }\n  grades.times { |i| grades[i] *= 0.0\
    \ }\n  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i]\
    \ /= 0.0 }\n  grades.times { |i| grades[i] *= -1 }\n  grades.times { |i| grades[i]\
    \ += grades[i].abs }\n  grades.times { |i| grades[i] /= -1 }\n  grades.times {\
    \ |i| grades[i] *= -1 }\n  grades.times { |i| grades[i] += grades[i].abs }\n \
    \ grades.times { |i| grades[i] /= -1 }\n  grades.times { |i| grades[i] *= -1 }\n\
    \  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i]\
    \ /= -1 }\n  grades.times { |i| grades[i] *= -1 }\n  grades.times { |i| grades[i]\
    \ += grades[i].abs }\n  grades.times { |i| grades[i] /= -1 }\n  grades.times {\
    \ |i| grades[i] *= -1 }\n  grades.times { |i| grades[i] += grades[i].abs }\n \
    \ grades.times { |i| grades[i] /= -1 }\n  grades.", "  grades.each do |grade|\n\
    \    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nI dont know what to\
    \ do to get the letter grades to display in the view\n<|/ c |>\n<| c |>\nWhat\
    \ is your question? What have you tried? What isn't working? What errors are you\
    \ getting? What have you done to try to fix the problem? What is your expected\
    \ output? What is your actual output? Please read \"[ask]\" including the linked\
    \ pages and \"[mcve]\".\n<|/ c |>\n<| c |>\nI dont know what to do to get the\
    \ letter grades to display in the view\n<|/ c |>\n<| c |>\nWhat is your expected\
    \ output? What is your actual output? Please read \"[ask]\" including the linked\
    \ pages and \"[mcve]\".\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\nYour letter_grade method should look like this:\n<code>", "  grades.each\
    \ do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much for your help. I really appreciate\
    \ it. I was able to get it to work. Thank you so much!\n<|/ c |>\n<| c |>\nNo\
    \ problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades.each\
    \ do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", " \
    \ grades = grades.to_f\n  grades.times do |i|\n    if grades[i] >= 4.0\n     \
    \ grades[i] = 'A+'\n    elsif grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif\
    \ grades[i] >= 3.3\n      grades[i] = 'A-'\n    elsif grades[i] >= 3.0\n     \
    \ grades[i] = 'B+'\n    elsif grades[i] >= 2.7\n      grades[i] = 'B'\n    elsif\
    \ grades[i] >= 2.3\n      grades[i] = 'B-'\n    elsif grades[i] >= 2.0\n     \
    \ grades[i] = 'C+'\n    elsif grades[i] >= 1.7\n      grades[i] = 'C'\n    elsif\
    \ grades[i] >= 1.3\n      grades[i] = 'C-'\n    elsif grades[i] >= 1.0\n     \
    \ grades[i] = 'D+'\n    elsif grades[i] >= 0.7\n      grades[i] = 'D'\n    elsif\
    \ grades[i] >= 0.0\n      grades[i] = 'D-'\n    elsif grades[i] == 0.0\n     \
    \ grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it! I didn't know that you\
    \ could use an if statement like that. I'm going to try this out right now!\n\
    <|/ c |>\n<| c |>\nI got it to work! Thank you so much! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  grades.each do |grade|\n    if grade > 3.7\n      puts \"#{grade}\
    \ is an A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7\n      puts\
    \ \"#{grade} is a B\"\n    elsif grade > 2.3\n      puts \"#{grade} is a B-\"\n\
    \    elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n    elsif grade > 1.7\n\
    \      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n      puts \"#{grade}\
    \ is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade} is a D+\"\n    elsif\
    \ grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\n      puts\
    \ \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\n    end\n \
    \ end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n  grades.times {\
    \ |i| grades -= i }\n  grades.times { |i| grades /= 2.0 }\n  grades.times { |i|\
    \ grades *= 1.0 }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades\
    \ /= 2.0 }\n  grades.times { |i| grades *= 1.0 }\n  grades.times { |i| grades\
    \ += i }\n  grades.times { |i| grades /= 2.0 }\n  grades.times { |i| grades *=\
    \ 1.0 }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades /= 2.0\
    \ }\n  grades.times { |i| grades *= 1.0 }\n  grades.times { |i| grades += i }\n\
    \  grades.times { |i| grades /= 2.0 }\n  grades.times { |i| grades *= 1.0 }\n\
    \  grades.times { |i| grades += i }\n  grades.times { |i| grades /= 2.0 }\n  grades.times\
    \ { |i| grades *= 1.0 }\n  grades.times { |i| grades += i }\n  grades.times {\
    \ |i| grades /= 2.0 }\n  grades.times { |i| grades *= 1.0 }\n  grades.times {\
    \ |i| grades += i }\n  grades.times { |i| grades /= 2.0 }\n  grades.times { |i|\
    \ grades *= 1.0 }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades\
    \ /= 2.0 }\n  grades.times { |i| grades *= 1.0 }\n  grades.times { |i| grades\
    \ += i }\n  grades.times { |i| grades /= 2.0 }\n  grades.times { |i| grades *=\
    \ 1.0 }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades /= 2.0\
    \ }\n  grades.times { |i| grades *= 1.0 }\n  grades.times { |i| grades += i }\n\
    \  grades.times { |i| grades /= 2.0 }\n  grades.times { |i| grades *= 1.0 }\n\
    \  grades.times { |i| grades += i ", "  grades = grades.to_f\n  grades.times {\
    \ |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i] = grades[i]\
    \ * 10 }\n  grades.times { |i| grades[i] = grades[i].to_s }\n  grades.times {\
    \ |i| grades[i] = grades[i].upcase }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^0-9]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^0-9]/, '') }\n", "  grades = grades.to_f\n  grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.first(3).map\
    \ { |i| grades[i] }.join\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nThanks so much for the help. I really appreciate it. I will try this out\
    \ and let you know how it goes.\n<|/ c |>\n<| c |>\nI ran the code and it worked!\
    \ Thank you so much. I am going to try to understand it now and try to understand\
    \ how it works. Thanks again!\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks so much for the help. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI ran the code and it worked! Thank you so much. I am going to try to\
    \ understand it now and try to understand how it works. Thanks again!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  grades = grades.to_f\n  grades.times { |i| grades\
    \ -= i }\n  grades.times { |i| grades *= 2 }\n  grades.times { |i| grades += i\
    \ }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n\
    \  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times\
    \ { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i|\
    \ grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades\
    \ /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /=\
    \ 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n\
    \  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times\
    \ { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i|\
    \ grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades\
    \ *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *=\
    \ -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1\
    \ }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n\
    \  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times\
    \ { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i|\
    \ grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades\
    \ /= 2 }\n  ", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.times { |i| grades[i] -= grades[i].modulo(2.0) }\n  grades.times\
    \ { |i| grades[i] += grades[i].modulo(2.0).abs }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] = grades[i].to_s.upcase }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  ", "  grades.each do |grade|\n    if grade > 3.0 \n      puts \"#{grade}\
    \ is an excellent grade\"\n    elsif grade > 2.7\n      puts \"#{grade} is a good\
    \ grade\"\n    elsif grade > 2.0\n      puts \"#{grade} is a good grade\"\n  \
    \  elsif grade > 1.7\n      puts \"#{grade} is a good grade\"\n    elsif grade\
    \ > 1.0\n      puts \"#{grade} is a good grade\"\n    elsif grade > 0.7\n    \
    \  puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n    \
    \  puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n    \
    \  puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n    \
    \  puts \"#{grade} is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade\"\n    elsi", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i].to_i }\n    grades.sort!\n    grades.reverse!\n\
    \    grades.each_with_index do |grade, index|\n        if grade >= 4.0\n     \
    \       grades[index] = \"+\" \n        elsif grade > 3.7\n            grades[index]\
    \ = \"A\"\n        elsif grade > 3.3\n            grades[index] = \"A-\"\n   \
    \     elsif grade > 3.0\n            grades[index] = \"B+\"\n        elsif grade\
    \ > 2.7\n            grades[index] = \"B\"\n        elsif grade > 2.3\n      \
    \      grades[index] = \"B-\"\n        elsif grade > 2.0\n            grades[index]\
    \ = \"C+\"\n        elsif grade > 1.7\n            grades[index] = \"C\"\n   \
    \     elsif grade > 1.3\n            grades[index] = \"C-\"\n        elsif grade\
    \ > 1.0\n            grades[index] = \"D+\"\n        elsif grade > 0.7\n     \
    \       grades[index] = \"D\"\n        elsif grade > 0.0\n            grades[index]\
    \ = \"D-\"\n        else\n            grades[index] = \"E\"\n        end\n   \
    \ end\n    grades.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| c |>\nThanks so much for this! I really appreciate it. I was able to get it\
    \ to work but now I'm getting an undefined method `join' for #<Array:0x007fb0f00e3cc0>\n\
    <|/ c |>\n<| c |>\nAh, I see what you did there. Thanks so much!\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a solution that doesn't require the use\
    \ of any loops.\n<|/ c |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it. I was able to get it to work but now I'm getting an undefined method `join'\
    \ for #<Array:0x007fb0f00e3cc0>\n<|/ c |>\n<| c |>\nAh, I see what you did there.\
    \ Thanks so much!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades.each do |grade|\n\
    \    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times\
    \ { |i| grades[i] -= grades[i].modulo(2.0) }\n  grades.times { |i| grades[i] /=\
    \ 2.0 }\n  grades.times { |i| grades[i] = grades[i].to_s.upcase }\n  grades\n\
    end\n</code>\n<|/ q |>\n<| c |>\nPlease show us what you have tried so far.\n\
    <|/ c |>\n<| c |>\nPlease show us what you have tried so far.\n<|/ c |>\n<| c\
    \ |>\nI added the code I have\n<|/ c |>\n<| c |>\nWhat is your question?\n<|/\
    \ c |>\n<| c |>\nI added the question at the end\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI believe this should work:\n<code>", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    grade = grades.to_f - i\n    if grade < 0\n      grade = grade *\
    \ -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade = grade\
    \ * -1\n    end\n    grade = grade * 100\n    if grade < 0\n", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = (grades[i] * 4).ceil }\n    grades.times { |i| grades[i] = grades[i].to_s\
    \ }\n    grades.times { |i| grades[i] = grades[i].upcase }\n    grades.times {\
    \ |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }", "  grades.each\
    \ do |grade|\n    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades.each do |grade|\n    if grade >= 4.0\n      \"A+\"\n    elsif\
    \ grade >= 3.7\n      \"A\"\n    elsif grade >= 3.3\n      \"A-\"\n    elsif grade\
    \ >= 3.0\n      \"B+\"\n    elsif grade >= 2.7\n      \"B\"\n    elsif grade >=\
    \ 2.3\n      \"B-\"\n    elsif grade >= 2.0\n      \"C+\"\n    elsif grade >=\
    \ 1.7\n      \"C\"\n    elsif grade >= 1.3\n      \"C-\"\n    elsif grade >= 1.0\n\
    \      \"D+\"\n    elsif grade >= 0.7\n      \"D\"\n    elsif grade >= 0.0\n \
    \     \"D-\"\n    else\n      \"E\"\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI appreciate your effort but this doesn't really answer the question.\
    \ He wants to know how to write a function that will output the letter grade based\
    \ on a GPA list. Your solution doesn't do that.\n<|/ c |>\n<| c |>\nI understand\
    \ that, but I thought the OP was asking how to write a function that will output\
    \ the letter grade based on a GPA list. My solution does that. Did you read the\
    \ question?\n<|/ c |>\n<| c |>\nYes, I read the question. I was just saying that\
    \ your solution doesn't do that. Your solution doesn't do what the OP wants. Your\
    \ solution doesn't do what the OP wants. Your solution doesn't do what the OP\
    \ wants. Your solution doesn't do what the OP wants. Your solution doesn't do\
    \ what the OP wants. Your solution doesn't do what the OP wants. Your solution\
    \ doesn't do what the OP wants. Your solution doesn't do what the OP wants. Your\
    \ solution doesn't do what the OP wants. Your solution doesn't do what the OP\
    \ wants. Your solution doesn't do what the OP wants. Your solution doesn't do\
    \ what the OP wants. Your solution doesn't do what the OP wants. Your solution\
    \ doesn't do what the OP wants. Your solution doesn't do what the OP wants. Your\
    \ solution doesn't do what the OP wants. Your solution doesn't do what the OP\
    \ wants. Your solution doesn't do what the OP wants. Your solution doesn't do\
    \ what the OP wants. Your solution doesn't do what the OP wants. Your solution\
    \ doesn't do what the OP wants. Your solution doesn't do what the OP wants. Your\
    \ solution doesn't ", "  grades = grades.to_f\n  grades.times do |i|\n    grade\
    \ = grades.to_f - i\n    grade = grade / grades.to_f\n    grade = grade * 100\n\
    \    grade = grade / 100\n    grade = grade.round\n    grade = grade * 10\n  \
    \  grade = grade / 10\n    grade = grade * 1\n    grade = grade / 1\n    grade\
    \ = grade * 0.01\n    grade = grade / 0.01\n    grade = grade * 0.001\n    grade\
    \ = grade / 0.001\n    grade = grade * 0.000001\n    grade = grade / 0.000001\n\
    \    grade = grade * 0.0000001\n    grade = grade / 0.0000001\n    grade = grade\
    \ * 0.000000001\n    grade = grade / 0.000000001\n    grade = grade * 0.000000000001\n\
    \    grade = grade / 0.000000000001\n    grade = grade * 0.000000000000001\n \
    \   grade = grade / 0.000000000000001\n    grade = grade * 0.0000000000000001\
    \ \n    grade = grade / 0.0000000000000001 \n    grade = grade * 0.00000000000000001\n\
    \    grade = grade / 0.00000000000000001\n    grade = grade * 0.00000000000000000001\n\
    \    grade = grade / 0.00000000000000000001\n    grade = grade * 0.00000000000000000000001\n\
    \    grade = grade / 0.00000000000000000000001\n    grade = grade * 0.0000000000000000000000001\n\
    \    grade = grade / 0.0000000000000000000000001\n    grade = grade * 0.0000000000000000000000000001\n\
    \    grade = grade / 0.0000000000000000000000000001\n    grade = grade * 0.0000000000000000000000000000001\n\
    \    grade = grade / 0.0000000000000000000000000000001\n    grade = grade * 0.00000000000000000000000000000001\
    \ \n    grade = grade / 0.00000000000000000000000000000001 \n    grade = grade\
    \ * 0.000000000000000000000000000000001\n    grade = grade / 0.000000000000000000000000000000001\n\
    \    grade = grade * 0.000000000000000000000000000000000001\n    grade = grade\
    \ / 0.000000000000000000000000000000000001\n    grade = grade * 0.000000000000000000000000000000000000001\n\
    \    grade = grade / 0.000000000000000000000000000000000000001\n    grade = grade\
    \ * 0.00000000000000000000000000000000000000001\n    grade = grade / 0.00000000000000000000000000000000000000001\n\
    \    grade = grade * 0.00000000000000000000000000000000000000000001\n    grade\
    \ = gra", "    grades = grades.to_f\n    grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n    grades.sort!\n    grades.reverse!\n    grades.each_with_index do |grade,\
    \ index|\n        if grade >= 4.0\n            grades[index] = \"A+\"\n      \
    \  elsif grade >= 3.7\n            grades[index] = \"A\"\n        elsif grade\
    \ >= 3.3\n            grades[index] = \"A-\"\n        elsif grade >= 3.0\n   \
    \         grades[index] = \"B+\"\n        elsif grade >= 2.7\n            grades[index]\
    \ = \"B\"\n        elsif grade >= 2.3\n            grades[index] = \"B-\"\n  \
    \      elsif grade >= 2.0\n            grades[index] = \"C+\"\n        elsif grade\
    \ >= 1.7\n            grades[index] = \"C\"\n        elsif grade >= 1.3\n    \
    \        grades[index] = \"C-\"\n        elsif grade >= 1.0\n            grades[index]\
    \ = \"D+\"\n        elsif grade >= 0.7\n            grades[index] = \"D\"\n  \
    \      elsif grade >= 0.0\n            grades[index] = \"D-\"\n        else\n\
    \            grades[index] = \"E\"\n        end\n    end\n    grades\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your help. I appreciate\
    \ it\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  grades.each do |grade|\n\
    \    if grade > 3.7\n      puts \"#{grade} is an A\"\n    elsif grade > 3.3\n\
    \      puts \"#{grade} is an A-\"\n    elsif grade > 3.0\n      puts \"#{grade}\
    \ is a B+\"\n    elsif grade > 2.7\n      puts \"#{grade} is a B\"\n    elsif\
    \ grade > 2.3\n      puts \"#{grade} is a B-\"\n    elsif grade > 2.0\n      puts\
    \ \"#{grade} is a C+\"\n    elsif grade > 1.7\n      puts \"#{grade} is a C\"\n\
    \    elsif grade > 1.3\n      puts \"#{grade} is a C-\"\n    elsif grade > 1.0\n\
    \      puts \"#{grade} is a D+\"\n    elsif grade > 0.7\n      puts \"#{grade}\
    \ is a D\"\n    elsif grade > 0.0\n      puts \"#{grade} is a D-\"\n    else\n\
    \      puts \"#{grade} is an E\"\n    end\n  end\nend\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nI dont know how to do\
    \ it\n<|/ c |>\n<| c |>\nWhat have you tried so far? Where are you stuck? What\
    \ is your specific problem? Please read [ask] and [mcve].\n<|/ c |>\n<| c |>\n\
    I dont know how to do it\n<|/ c |>\n<| c |>\nI dont know how to do it\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  grades = grades.to_f\n  grades.times do |i|\n  \
    \  if grades[i] >= 4.0\n      grades[i] = \"A+\"\n    elsif grades[i] >= 3.7\n\
    \      grades[i] = \"A\"\n    elsif grades[i] >= 3.3\n      grades[i] = \"A-\"\
    \n    elsif grades[i] >= 3.0\n      grades[i] = \"B+\"\n    elsif grades[i] >=\
    \ 2.7\n      grades[i] = \"B\"\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ \"B-\"\n    elsif grades[i] >= 2.0\n      grades[i] = \"C+\"\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = \"C\"\n    elsif grades[i] >= 1.3\n      grades[i]\
    \ = \"C-\"\n    elsif grades[i] >= 1.0\n      grades[i] = \"D+\"\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = \"D\"\n    elsif grades[i] >= 0.0\n      grades[i]\
    \ = \"D-\"\n    else\n      grades[i] = \"E\"\n    end\n  end\n  grades\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks for\
    \ your answer. Can you please explain how you got this output? I am not able to\
    \ understand how you got this output.\n<|/ c |>\n<| c |>\nI used the code you\
    \ provided and added some comments. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how you got this output? I am not able\
    \ to understand how you got this output.\n<|/ c |>\n<| c |>\nI used the code you\
    \ provided and added some comments. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how you got this output? I am not able\
    \ to understand how you got this output.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  grades = grades.to_f\n  grades.times { |i| grades -= i }\n \
    \ grades.times { |i| grades *= 2 }\n  grades.times { |i| grades += i }\n  grades.times\
    \ { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i|\
    \ grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades\
    \ /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /=\
    \ 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n\
    \  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times\
    \ { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i|\
    \ grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades\
    \ *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *=\
    \ -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1\
    \ }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n\
    \  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times\
    \ { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i|\
    \ grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades\
    \ /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /=\
    \ 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n\
    \  ", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades.each do |grade|\n    if grade >= 4.0 && grade\
    \ <= 4.7\n      puts \"A+\"\n    elsif grade > 4.7 && grade <= 5.3\n      puts\
    \ \"A\"\n    elsif grade > 5.3 && grade <= 5.7\n      puts \"A-\"\n    elsif grade\
    \ > 5.7 && grade <= 6.0\n      puts \"B+\"\n    elsif grade > 6.0 && grade <=\
    \ 6.7\n      puts \"B\"\n    elsif grade > 6.7 && grade <= 7.3\n      puts \"\
    B-\"\n    elsif grade > 7.3 && grade <= 7.7\n      puts \"C+\"\n    elsif grade\
    \ > 7.7 && grade <= 8.0\n      puts \"C\"\n    elsif grade > 8.0 && grade <= 8.7\n\
    \      puts \"C-\"\n    elsif grade > 8.7 && grade <= 9.0\n      puts \"D+\"\n\
    \    elsif grade > 9.0 && grade <= 9.7\n      puts \"D\"\n    elsif grade > 9.7\
    \ && grade <= 10.0\n      puts \"D-\"\n    elsif grade > 10.0 && grade <= 10.7\n\
    \      puts \"E\"\n    else\n      puts \"F\"\n    end\n  end\nend\n</code>\n\
    <|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nWhat is your question?\n<|/ c |>\n\
    <| c |>\nWhat is your question? What have you tried so far? What problems did\
    \ you encounter?\n<|/ c |>\n<| c |>\nI edited the question to make it more clear\n\
    <|/ c |>\n<| c |>\nI edited the question to make it more clear\n<|/ c |>\n<| c\
    \ |>\nI edited the question to make it more clear\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  grades.each do |grade|\n    if grade > 3.7\n      puts \"#{grade}\
    \ is an A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7\n      puts\
    \ \"#{grade} is a B\"\n    elsif grade > 2.3\n      puts \"#{grade} is a B-\"\n\
    \    elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n    elsif grade > 1.7\n\
    \      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n      puts \"#{grade}\
    \ is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade} is a D+\"\n    elsif\
    \ grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\n      puts\
    \ \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\n    end\n \
    \ end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c\
    \ |>\n<| c |>\nI do not know how to write this function\n<|/ c |>\n<| c |>\nWhat\
    \ have you tried so far? Where are you stuck? Do you know how to write a loop?\n\
    <|/ c |>\n<| c |>\nI do not know how to write this function\n<|/ c |>\n<| c |>\n\
    I do not know how to write this function\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f - i\n  \
    \  grade = grade / grades.to_f\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade / 100\n    grade = gra", "  grades = grades.to_f\n  grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each\
    \ { |grade| return grade if grade > 0 }\n  grades.last\nend", "  grades.each do\
    \ |grade|\n    puts \"#{grade} #{letter_grade(grade)}\"\n  end\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades.each do |grade|\n    if grade >= 4.0\n      \"A+\"\n    elsif\
    \ grade >= 3.7\n      \"A\"\n    elsif grade >= 3.3\n      \"A-\"\n    elsif grade\
    \ >= 3.0\n      \"B+\"\n    elsif grade >= 2.7\n      \"B\"\n    elsif grade >=\
    \ 2.3\n      \"B-\"\n    elsif grade >= 2.0\n      \"C+\"\n    elsif grade >=\
    \ 1.7\n      \"C\"\n    elsif grade >= 1.3\n      \"C-\"\n    elsif grade >= 1.0\n\
    \      \"D+\"\n    elsif grade >= 0.7\n      \"D\"\n    elsif grade >= 0.0\n \
    \     \"D-\"\n    else\n      \"E\"\n    end\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nThe question is how\
    \ to do it\n<|/ c |>\n<| c |>\nWhat is your question? What have you tried so far?\
    \ What problems did you encounter? Please read \"[ask]\" including the linked\
    \ pages, and \"[mcve]\".\n<|/ c |>\n<| c |>\nI edited the question\n<|/ c |>\n\
    <| c |>\nWhat is your question? What have you tried so far? What problems did\
    \ you encounter? Please read \"[ask]\" including the linked pages, and \"[mcve]\"\
    .\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  grades.each do |grade|\n\
    \    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem! If this answer solved your problem, please mark it as accepted (click\
    \ the check mark next to the answer).\n<|/ c |>\n<| c |>\nI did but I have to\
    \ wait 5 minutes before I can accept it\n<|/ c |>\n<| c |>\nNo problem! Thanks\
    \ for letting me know!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i].to_i }\n    grades.minmax\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n\
    \    grades.minmax_by { |i| i }\n    grades.minmax_by { |i| i }\n    grades.minmax_by\
    \ { |i| i }\n    grades.minmax_by { |i| i }\n    ", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif\
    \ grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i]\
    \ = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nThis doesn't work. `grades.to_f` converts the array\
    \ to an `Array` of `Float`s. `grades.to_f` doesn't change the original array.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used `grades = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]` as the input and it returned `['A+', 'A',\
    \ 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'E']`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I used `grades = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]` as the input and it returned `['A+',\
    \ 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'E']`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I used `grades = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]` as the input and it returned `['A+',\
    \ 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'E']`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I used `grades = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]` ", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    grade = grades.to_f - i\n    grade = grade / grades.to_f\n    grade\
    \ = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade.round\n", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 2.0 }\n  grades.times { |i| grades[i] += grades[i].to_f\
    \ / 4.0 }\n  grades.times { |i| grades[i] -= grades[i].to_f / 3.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].to_f / 3.7 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 3.3 }\n  grades.times { |i| grades[i] += grades[i].to_f / 3.0\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 2.7 }\n  grades.times\
    \ { |i| grades[i] += grades[i].to_f / 2.3 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 2.0 }\n  grades.times { |i| grades[i] += grades[i].to_f / 1.7\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 1.3 }\n  grades.times\
    \ { |i| grades[i] += grades[i].to_f / 1.0 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 0.7 }\n  grades.times { |i| grades[i] += grades[i].to_f / 0.0\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times\
    \ { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 0.0 }\n  grades.times { |i| grades[i] -= grades[i].to_f / 0.0\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times\
    \ { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 0.0 }\n  grades.times { |i| grades[i] -= grades[i].to_f / 0.0\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times\
    \ { |i| grades[i] -= grades[i].to_f / 0.0 }\n  grades.times { |i| grades[i] -=\
    \ grades[i].to_f / 0.0 }\n  grades.", "  grades = grades.to_f\n  grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i] = grades[i]\
    \ * 10 }\n  grades.times { |i| grades[i] = grades[i].abs }\n  grades.times { |i|\
    \ grades[i] = grades[i] / 10 }\n  grades.times { |i| grades[i] = grades[i].to_s.split('').map\
    \ { |s| s.upcase }.join('') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]+$/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '') }\n \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]+$/, '", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |i| grades[i] -= grades[i].to_i / 2 }\n  grades.reverse!\n  grades.each\
    \ { |i| grades[i] += grades[i].to_i / 2 }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |i| grades[i] = grades[i].to_s.upcase }\n  grades\nend", "  \
    \  grades = grades.to_f\n    grades.times { |i| grades[i] = grades[i].to_i }\n\
    \    grades.times { |i| grades[i] -= grades[i].to_f / 2.0 }\n    grades.times\
    \ { |i| grades[i] += grades[i].to_f / 2.0 }\n    grades.times { |i| grades[i]\
    \ /= 2.0 }\n    grades.times { |i| grades[i] = grades[i].to_s.upcase }\n    grades\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I do\
    \ not understand how this would work. Can you please explain how this would work?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but I do not understand how this would work. Can you\
    \ please explain how this would work?\n<|/ c |>\n<| c |>\nI added an explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but I do not understand\
    \ how this would work. Can you please explain how this would work?\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  grades.each do |grade|\n    puts\
    \ \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    grade = grade / 4.0\n\
    \    grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n \
    \   grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n  \
    \  grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n   \
    \ grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n    grade\
    \ = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n    grade =\
    \ grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n    grade = grade\
    \ * 100\n    grade = grade / 4.0\n    grade = grade * 100\n    grade = grade /\
    \ 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n\
    \    grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n \
    \   grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n  \
    \  grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n   \
    \ grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n    grade\
    \ = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n    grade =\
    \ grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n    grade = grade\
    \ / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n    grade = grade *\
    \ 100\n    grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n\
    \    grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n \
    \   grade = grade / 4.0\n    grade = grade * 100\n    grade = grade / 4.0\n  \
    \  grade = grade * 100\n    grade = grade / 4.0\n    grade = grade * 100\n   \
    \ grade = grade / ", "  grades = grades.to_f\n  grades.times { |i| grades[i] =\
    \ grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each_with_index\
    \ { |grade, index|\n    if grade >= 4.0\n      grades[index] = \"+\" \n    elsif\
    \ grade >= 3.7\n      grades[index] = \"A\"\n    elsif grade >= 3.3\n      grades[index]\
    \ = \"A-\"\n    elsif grade >= 3.0\n      grades[index] = \"B+\"\n    elsif grade\
    \ >= 2.7\n      grades[index] = \"B\"\n    elsif grade >= 2.3\n      grades[index]\
    \ = \"B-\"\n    elsif grade >= 2.0\n      grades[index] = \"C+\"\n    elsif grade\
    \ >= 1.7\n      grades[index] = \"C\"\n    elsif grade >= 1.3\n      grades[index]\
    \ = \"C-\"\n    elsif grade >= 1.0\n      grades[index] = \"D+\"\n    elsif grade\
    \ >= 0.7\n      grades[index] = \"D\"\n    elsif grade >= 0.0\n      grades[index]\
    \ = \"D-\"\n    else\n      grades[index] = \"E\"\n    end\n  }\n  grades.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you so much! I really appreciate\
    \ your help. I really appreciate your effort. I will try this out and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI ran the code and it gave me this error:\
    \ undefined method `to_f' for \"4.0\":String Did you mean?  to_i\n<|/ c |>\n<|\
    \ c |>\nI fixed the error, but now it gives me this error: undefined method `join'\
    \ for \"4.0\":String Did you mean?  join\n<|/ c |>\n<| c |>\nI fixed the error\
    \ and now it gives me this error: undefined method `join' for \"4.0\":String Did\
    \ you mean?  join\n<|/ c |>\n<| c |>\nI fixed the error and now it gives me this\
    \ error: undefined method `join' for \"4.0\":String Did you mean?  join\n<|/ c\
    \ |>\n<| a |>\n<code>", "  grades.each do |grade|\n    if grade >= 4.0\n     \
    \ puts \"A+\"\n    elsif grade > 3.7 && grade < 4.0\n      puts \"A\"\n    elsif\
    \ grade > 3.3 && grade < 3.7\n      puts \"A-\"\n    elsif grade > 3.0 && grade\
    \ < 3.3\n      puts \"B+\"\n    elsif grade > 2.7 && grade < 3.0\n      puts \"\
    B\"\n    elsif grade > 2.3 && grade < 2.7\n      puts \"B-\"\n    elsif grade\
    \ > 2.0 && grade < 2.3\n      puts \"C+\"\n    elsif grade > 1.7 && grade < 2.0\n\
    \      puts \"C\"\n    elsif grade > 1.3 && grade < 1.7\n      puts \"C-\"\n \
    \   elsif grade > 1.0 && grade < 1.3\n      puts \"D+\"\n    elsif grade > 0.7\
    \ && grade < 1.0\n      puts \"D\"\n    elsif grade > 0.0 && grade < 0.7\n   \
    \   puts \"D-\"\n    elsif grade < 0.0\n      puts \"E\"\n    end\n  end\nend\n\
    </code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\n\
    What is your question? What have you tried so far?\n<|/ c |>\n<| c |>\nI edited\
    \ the question to make it more clear.\n<|/ c |>\n<| c |>\nI edited the question\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI edited the question to make it\
    \ more clear.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  grades.each do |grade|\n\
    \    if grade > 3.7\n      puts \"#{grade}+\" if grade > 3.3\n      puts \"#{grade}-\"\
    \ if grade > 3.0\n      puts \"#{grade}+\" if grade > 2.7\n      puts \"#{grade}-\"\
    \ if grade > 2.3\n      puts \"#{grade}+\" if grade > 2.0\n      puts \"#{grade}-\"\
    \ if grade > 1.7\n      puts \"#{grade}+\" if grade > 1.0\n      puts \"#{grade}-\"\
    \ if grade > 0.7\n      puts \"#{grade}+\" if grade > 0.0\n      puts \"#{grade}\"\
    \n    elsif grade > 3.3\n      puts \"#{grade}+\" if grade > 3.0\n      puts \"\
    #{grade}-\" if grade > 2.7\n      puts \"#{grade}+\" if grade > 2.3\n      puts\
    \ \"#{grade}-\" if grade > 2.0\n      puts \"#{grade}+\" if grade > 1.7\n    \
    \  puts \"#{grade}-\" if grade > 1.0\n      puts \"#{grade}+\" if grade > 0.7\n\
    \      puts \"#{grade}\"\n    elsif grade > 3.0\n      puts \"#{grade}+\" if grade\
    \ > 2.7\n      puts \"#{grade}-\" if grade > 2.3\n      puts \"#{grade}+\" if\
    \ grade > 2.0\n      puts \"#{grade}-\" if grade > 1.7\n      puts \"#{grade}+\"\
    \ if grade > 1.0\n      puts \"#{grade}-\" if grade > 0.7\n      puts \"#{grade}+\"\
    \ if grade > 0.0\n      puts \"#{grade}\"\n    elsif grade > 2.7\n      puts \"\
    #{grade}+\" if grade > 2.3\n      puts \"#{grade}-\" if grade > 2.0\n      puts\
    \ \"#{grade}+\" if grade > 1.7\n      puts \"#{grade}-\" if grade > 1.0\n    \
    \  puts \"#{grade}+\" if grade > 0.7\n      puts \"#{grade}\"\n    elsif grade\
    \ > 2.3\n      puts \"#{grade}+\" if grade > 2.0\n      puts \"#{grade}-\" if\
    \ grade > 1.7\n      puts \"#{grade}+\" if grade > 1.0\n      puts \"#{grade}-\"\
    \ if grade > 0.7\n      puts \"#{grade}+\" if grade > 0.0\n      puts \"#{grade}\"\
    \n", "  grades.each do |grade|\n    if grade > 3.7\n      puts \"#{grade} is an\
    \ A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an A-\"\n    elsif grade\
    \ > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7\n      puts \"\
    #{grade} is a B\"\n    elsif grade > 2.3\n      puts \"#{grade} is a B-\"\n  \
    \  elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n    elsif grade > 1.7\n\
    \      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n      puts \"#{grade}\
    \ is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade} is a D+\"\n    elsif\
    \ grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\n      puts\
    \ \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\n    end\n \
    \ end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nI edited my question\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI edited my question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited my question to make it more clear.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "  grades = grades.to_f\n  grades.times { |i|\
    \ grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each\
    \ { |i| grades[i] -= grades[i].to_f / 2.0 }\n  grades.reverse!\n  grades.each\
    \ { |i| grades[i] += grades[i].to_f / 2.0 }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |i| grades[i] = grades[i].to_s.upcase }\n  grades\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I was\
    \ looking for. I was looking for a way to do this without using an array. Thanks\
    \ anyways.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't what\
    \ I was looking for. I was looking for a way to do this without using an array.\
    \ Thanks anyways.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't\
    \ what I was looking for. I was looking for a way to do this without using an\
    \ array. Thanks anyways.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ isn't what I was looking for. I was looking for a way to do this without using\
    \ an array. Thanks anyways.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  grades =\
    \ grades.to_f\n  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i]\
    \ = 'A+'\n    elsif grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i]\
    \ >= 3.3\n      grades[i] = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i]\
    \ = 'B+'\n    elsif grades[i] >= 2.7\n      grades[i] = 'B'\n    elsif grades[i]\
    \ >= 2.3\n      grades[i] = 'B-'\n    elsif grades[i] >= 2.0\n      grades[i]\
    \ = 'C+'\n    elsif grades[i] >= 1.7\n      grades[i] = 'C'\n    elsif grades[i]\
    \ >= 1.3\n      grades[i] = 'C-'\n    elsif grades[i] >= 1.0\n      grades[i]\
    \ = 'D+'\n    elsif grades[i] >= 0.7\n      grades[i] = 'D'\n    elsif grades[i]\
    \ >= 0.0\n      grades[i] = 'D-'\n    else\n      grades[i] = 'E'\n    end\n \
    \ end\n  grades\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts\
    \ but I cannot use any of those methods. I cannot use any of those methods. I\
    \ cannot use any of those methods. I cannot use any of those methods. I cannot\
    \ use any of those methods. I cannot use any of those methods. I cannot use any\
    \ of those methods. I cannot use any of those methods. I cannot use any of those\
    \ methods. I cannot use any of those methods. I cannot use any of those methods.\
    \ I cannot use any of those methods. I cannot use any of those methods. I cannot\
    \ use any of those methods. I cannot use any of those methods. I cannot use any\
    \ of those methods. I cannot use any of those methods. I cannot use any of those\
    \ methods. I cannot use any of those methods. I cannot use any of those methods.\
    \ I cannot use any of those methods. I cannot use any of those methods. I cannot\
    \ use any of those methods. I cannot use any of those methods. I cannot use any\
    \ of those methods. I cannot use any of those methods. I cannot use any of those\
    \ methods. I cannot use any of those methods. I cannot use any of those methods.\
    \ I cannot use any of those methods. I cannot use any of those methods. I cannot\
    \ use any of those methods. I cannot use any of ", "  grades.each do |grade|\n\
    \    if grade > 3.0 \n      puts \"#{grade} is an A+\"\n    elsif grade > 2.7\
    \ \n      puts \"#{grade} is an A\"\n    elsif grade > 2.3 \n      puts \"#{grade}\
    \ is an A-\"\n    elsif grade > 2.0 \n      puts \"#{grade} is an B+\"\n    elsif\
    \ grade > 1.7 \n      puts \"#{grade} is an B\"\n    elsif grade > 1.3 \n    \
    \  puts \"#{grade} is an B-\"\n    elsif grade > 1.0 \n      puts \"#{grade} is\
    \ an C+\"\n    elsif grade > 0.7 \n      puts \"#{grade} is an C\"\n    elsif\
    \ grade > 0.0 \n      puts \"#{grade} is an C-\"\n    elsif grade > 0.0 \n   \
    \   puts \"#{grade} is an D+\"\n    elsif grade > 0.7 \n      puts \"#{grade}\
    \ is an D\"\n    elsif grade > 0.0 \n      puts \"#{grade} is an D-\"\n    elsif\
    \ grade > 0.0 \n      puts \"#{grade} is an E\"\n    else\n      puts \"#{grade}\
    \ is an F\"\n    end\n  end\nend", "  grades = grades.to_f\n  grades.times { |i|\
    \ grades[i] = grades[i].to_i }\n  grades.min\nend", "  grades.each do |grade|\n\
    \    if grade >= 4.0\n      puts \"A+\"\n    elsif grade > 3.7\n      puts \"\
    A\"\n    elsif grade > 3.3\n      puts \"A-\"\n    elsif grade > 3.0\n      puts\
    \ \"B+\"\n    elsif grade > 2.7\n      puts \"B\"\n    elsif grade > 2.3\n   \
    \   puts \"B-\"\n    elsif grade > 2.0\n      puts \"C+\"\n    elsif grade > 1.7\n\
    \      puts \"C\"\n    elsif grade > 1.3\n      puts \"C-\"\n    elsif grade >\
    \ 1.0\n      puts \"D+\"\n    elsif grade > 0.7\n      puts \"D\"\n    elsif grade\
    \ > 0.0\n      puts \"D-\"\n    else\n      puts \"E\"\n    end\n  end\nend",
  "    grades = grades.to_f\n    grades.times { |i| grades[i] = grades[i].to_i }\n\
    \    grades.times { |i| grades[i] -= grades[i].to_f / 2.0 }\n    grades.times\
    \ { |i| grades[i] += grades[i].to_f / 4.0 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 3.0 }\n    grades.times { |i| grades[i] += grades[i].to_f\
    \ / 3.7 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 3.3 }\n    grades.times\
    \ { |i| grades[i] += grades[i].to_f / 3.0 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 2.7 }\n    grades.times { |i| grades[i] += grades[i].to_f\
    \ / 2.3 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 2.0 }\n    grades.times\
    \ { |i| grades[i] += grades[i].to_f / 1.7 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 1.3 }\n    grades.times { |i| grades[i] += grades[i].to_f\
    \ / 1.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 0.7 }\n    grades.times\
    \ { |i| grades[i] += grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f\
    \ / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n    grades.times\
    \ { |i| grades[i] -= grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f\
    \ / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n    grades.times\
    \ { |i| grades[i] -= grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f\
    \ / 0.0 }\n    grades.times { |i| grades[i] -= grades[i].to_f / 0.0 }\n    grades.",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each_with_index do |grade, index|\n    grades[index]\
    \ = grade >= 4.0 ? \"A+\" : (grade >= 3.7 ? \"A\" : grade >= 3.3 ? \"A-\" : grade\
    \ >= 3.0 ? \"B+\" : grade >= 2.7 ? \"B\" : grade >= 2.3 ? \"B-\" : grade >= 2.0\
    \ ? \"C+\" : grade >= 1.7 ? \"C\" : grade >= 1.3 ? \"C-\" : grade >= 1.0 ? \"\
    D+\" : grade >= 0.7 ? \"D\" : grade >= 0.0 ? \"D-\" : \"E\"\n  end\n  grades.join(\"\
    \ \")\nend\n</code>\n<|/ a |>\n<| c |>\nI appreciate your efforts. I did try the\
    \ code but unfortunately it didn't work. I am still getting the same error. I\
    \ am not sure why it isn't working.\n<|/ c |>\n<| c |>\nI updated my answer. Try\
    \ it now. Let me know if it works.\n<|/ c |>\n<| c |>\nI appreciate your efforts.\
    \ I did try the code but unfortunately it didn't work. I am still getting the\
    \ same error. I am not sure why it isn't working.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer. Try it now. Let me know if it works.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts. I did try the code but unfortunately it didn't work. I am still\
    \ getting the same error. I am not sure why it isn't working.\n<|/ c |>\n<| a\
    \ tags=ruby,ruby-on-rails |>\nI got it working by changing my code to the following:\n\
    <code>", "    grades = grades.to_f\n    grades.times { |i| grades -= i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i }\n   \
    \ grades.times { |i| grades /= i }\n    grades.times { |i| grades *= i }\n   \
    \ grades.times { |i| grades += i }\n    grades.times { |i| grades /= i }\n   \
    \ grades.times { |i| grades *= i }\n    grades.times { |i| grades += i ", "  grades\
    \ = grades.to_f\n  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i]\
    \ = 'A+'\n    elsif grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i]\
    \ >= 3.3\n      grades[i] = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i]\
    \ = 'B+'\n    elsif grades[i] >= 2.7\n      grades[i] = 'B'\n    elsif grades[i]\
    \ >= 2.3\n      grades[i] = 'B-'\n    elsif grades[i] >= 2.0\n      grades[i]\
    \ = 'C+'\n    elsif grades[i] >= 1.7\n      grades[i] = 'C'\n    elsif grades[i]\
    \ >= 1.3\n      grades[i] = 'C-'\n    elsif grades[i] >= 1.0\n      grades[i]\
    \ = 'D+'\n    elsif grades[i] >= 0.7\n      grades[i] = 'D'\n    elsif grades[i]\
    \ >= 0.0\n      grades[i] = 'D-'\n    else\n      grades[i] = 'E'\n    end\n \
    \ end\n  grades\nend", "  grades = grades.to_f\n  grades.times do |i|\n    grade\
    \ = grades.to_f - i\n    grade = grade / 4.0\n    grade = grade > 0 ? \"A+\" :\
    \ \"A\"\n    grade = grade > 3.7 ? \"A\" : (grade > 3.3 ? \"A-\" : (grade > 3.0\
    \ ? \"B+\" : grade > 2.7 ? \"B\" : grade > 2.3 ? \"B-\" : grade > 2.0 ? \"C+\"\
    \ : grade > 1.7 ? \"C\" : grade > 1.3 ? \"C-\" : grade > 1.0 ? \"D+\" : grade\
    \ > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" : \"E\")\n    grade = grade + \"\\n\"\n\
    \  end\n  grades\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much\
    \ for your help. I really appreciate it. I will try this out and let you know\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the code and it gave me\
    \ this error \"undefined method `times' for [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7]:Array\" Any ideas on how to fix this?\n<|/ c |>\n<| c |>\n\
    I fixed the code so it should work now. Try it out and let me know if it works.\n\
    <|/ c |>\n<| c |>\nIt worked! Thank you so much! I really appreciate it!\n<|/\
    \ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a tags=ruby |>\n\
    <code>", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades.each do |grade|\n    if grade >= 4.0\n    \
    \  puts \"A+\"\n    elsif grade > 3.7\n      puts \"A\"\n    elsif grade > 3.3\n\
    \      puts \"A-\"\n    elsif grade > 3.0\n      puts \"B+\"\n    elsif grade\
    \ > 2.7\n      puts \"B\"\n    elsif grade > 2.3\n      puts \"B-\"\n    elsif\
    \ grade > 2.0\n      puts \"C+\"\n    elsif grade > 1.7\n      puts \"C\"\n  \
    \  elsif grade > 1.3\n      puts \"C-\"\n    elsif grade > 1.0\n      puts \"\
    D+\"\n    elsif grade > 0.7\n      puts \"D\"\n    elsif grade > 0.0\n      puts\
    \ \"D-\"\n    else\n      puts \"E\"\n    end\n  end\nend", "  grades.each do\
    \ |grade|\n    if grade > 4.0 then\n      puts \"#{grade} is an A+\"\n    elsif\
    \ grade > 3.7 then\n      puts \"#{grade} is an A\"\n    elsif grade > 3.3 then\n\
    \      puts \"#{grade} is an A-\"\n    elsif grade > 3.0 then\n      puts \"#{grade}\
    \ is a B+\"\n    elsif grade > 2.7 then\n      puts \"#{grade} is a B\"\n    elsif\
    \ grade > 2.3 then\n      puts \"#{grade} is a B-\"\n    elsif grade > 2.0 then\n\
    \      puts \"#{grade} is a C+\"\n    elsif grade > 1.7 then\n      puts \"#{grade}\
    \ is a C\"\n    elsif grade > 1.3 then\n      puts \"#{grade} is a C-\"\n    elsif\
    \ grade > 1.0 then\n      puts \"#{grade} is a D+\"\n    elsif grade > 0.7 then\n\
    \      puts \"#{grade} is a D\"\n    elsif grade > 0.0 then\n      puts \"#{grade}\
    \ is a D-\"\n    else\n      puts \"#{grade} is an E\"\n    end\n  end\nend",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f\
    \ - i\n    grade = grade / grades.to_f\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade + 100\n    grade = grade / 10\n    grade = grade *\
    \ 10\n    grade = grade / 10\n    grade = grade + 10\n    grade = grade / 10\n\
    \    grade = grade * 10\n    grade = grade / 10\n    grade = grade + 10\n    grade\
    \ = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n    grade = grade\
    \ + 10\n    grade = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n\
    \    grade = grade + 10\n    grade = grade / 10\n    grade = grade * 10\n    grade\
    \ = grade / 10\n    grade = grade + 10\n    grade = grade / 10\n    grade = grade\
    \ * 10\n    grade = grade / 10\n    grade = grade + 10\n    grade = grade / 10\n\
    \    grade = grade * 10\n    grade = grade / 10\n    grade = grade + 10\n    grade\
    \ = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n    grade = grade\
    \ + 10\n    grade = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n\
    \    grade = grade + 10\n    grade = grade / 10\n    grade = grade * 10\n    grade\
    \ = grade / 10\n    grade = grade + 10\n    grade = grade / 10\n    grade = grade\
    \ * 10\n    grade = grade / 10\n    grade = grade + 10\n    grade = grade / 10\n\
    \    grade = grade * 10\n    grade = grade / 10\n    grade = grade + 10\n    grade\
    \ = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n    grade = grade\
    \ + 10\n    grade = grade / 10\n    grade = grade * 10\n    grade = grade / 10\n\
    \    grade = grade + 10\n    grade = ", "  grades.each do |grade|\n    puts \"\
    #{grade}\\t#{letter_grade(grade)}\"\n  end\nend", "  grades.each do |grade|\n\
    \    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades.each do\
    \ |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f\
    \ - i\n    if grade < 0\n      grade = grade * -1\n      grade = grade + 100\n\
    \    end\n    grade = grade / 100\n    if grade < 4.0\n      grade = \"A+\"\n\
    \    elsif grade < 3.7\n      grade = \"A\"\n    elsif grade < 3.3\n      grade\
    \ = \"A-\"\n    elsif grade < 3.0\n      grade = \"B+\"\n    elsif grade < 2.7\n\
    \      grade = \"B\"\n    elsif grade < 2.3\n      grade = \"B-\"\n    elsif grade\
    \ < 2.0\n      grade = \"C+\"\n    elsif grade < 1.7\n      grade = \"C\"\n  \
    \  elsif grade < 1.3\n      grade = \"C-\"\n    elsif grade < 1.0\n      grade\
    \ = \"D+\"\n    elsif grade < 0.7\n      grade = \"D\"\n    elsif grade < 0.0\n\
    \      grade = \"D-\"\n    else\n      grade = \"E\"\n    end\n    puts grade\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't\
    \ work. `grades.to_f` will throw an error because `grades` is an array. `grades.to_f`\
    \ will also throw an error because `grades` is an array. `grades.to_f` will also\
    \ throw an error because `grades` is an array. `grades.to_f` will also throw an\
    \ error because `grades` is an array. `grades.to_f` will also throw an error because\
    \ `grades` is an array. `grades.to_f` will also throw an error because `grades`\
    \ is an array. `grades.to_f` will also throw an error because `grades` is an array.\
    \ `grades.to_f` will also throw an error because `grades` is an array. `grades.to_f`\
    \ will also throw an error because `grades` is an array. `grades.to_f` will also\
    \ throw an error because `grades` is an array. `grades.to_f` will also throw an\
    \ error because `grades` is an array. `grades.to_f` will also throw an error because\
    \ `grades` is an array. `grades.to_f` will also throw an error because `grades`\
    \ is ", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades.each do |grade|\n    puts \"#{grade}: #{letter_grade(grade)}\"\
    \n  end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat have you tried so far?\
    \ Where are you stuck? Do you know how to read a file? Do you know how to convert\
    \ a string to a number? Do you know how to write a loop? Do you know how to compare\
    \ two numbers?\n<|/ c |>\n<| c |>\nI dont know how to read a file and how to convert\
    \ a string to a number\n<|/ c |>\n<| c |>\nYou don't know how to read a file?\
    \ Do you know how to read a file? Do you know how to convert a string to a number?\
    \ Do you know how to write a loop? Do you know how to compare two numbers?\n<|/\
    \ c |>\n<| c |>\nI dont know how to read a file and how to convert a string to\
    \ a number\n<|/ c |>\n<| c |>\nI dont know how to read a file and how to convert\
    \ a string to a number\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.minmax\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grades.min\n\
    \  grades.max\n  grades.min\n  grades.max\n  grades.min\n  grades.max\n  grade",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades.each do |grade|\n    if grade > 3.0 \n      puts \"#{grade} is\
    \ an excellent grade!\"\n    elsif grade > 2.7 \n      puts \"#{grade} is a good\
    \ grade!\"\n    elsif grade > 2.3 \n      puts \"#{grade} is a good grade!\"\n\
    \    elsif grade > 2.0 \n      puts \"#{grade} is a good grade!\"\n    elsif grade\
    \ > 1.7 \n      puts \"#{grade} is a good grade!\"\n    elsif grade > 1.3 \n \
    \     puts \"#{grade} is a good grade!\"\n    elsif grade > 1.0 \n      puts \"\
    #{grade} is a good grade!\"\n    elsif grade > 0.7 \n      puts \"#{grade} is\
    \ a good grade!\"\n    elsif grade > 0.0 \n      puts \"#{grade} is a good grade!\"\
    \n    elsif grade > 0.0 \n      puts \"#{grade} is a good grade!\"\n    else\n\
    \      puts \"#{grade} is an excellent grade!\"\n    end\n  end\nend\n</code>\n\
    <|/ q tags=ruby |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is\
    \ your question? What have you tried so far?\n<|/ c |>\n<| c |>\nThe question\
    \ is \"Write a function that takes an array of GPAs and outputs a list of letter\
    \ grades using the following table:\nGPA       |    Letter grade\n4.0        \
    \        A+\n> 3.7                A \n> 3.3                A- \n> 3.0        \
    \        B+\n> 2.7                B \n> 2.3                B-\n> 2.0         \
    \       C+\n> 1.7                C\n> 1.3                C-\n> 1.0           \
    \     D+ \n> 0.7                D \n> 0.0                D-\n0.0             \
    \   E\nExample:", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.sort!\n  grades.reverse!\n  grades.first(3).each do |i|\n    grades.delete_at(i)\n\
    \  end\n  grades.first(3).each do |i|\n    grades.insert(i, grades.last)\n  end\n\
    \  grades.first(3).each do |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each\
    \ do |i|\n    grades.insert(i, grades.last)\n  end\n  grades.first(3).each do\
    \ |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each do |i|\n    grades.insert(i,\
    \ grades.last)\n  end\n  grades.first(3).each do |i|\n    grades.delete_at(i)\n\
    \  end\n  grades.first(3).each do |i|\n    grades.insert(i, grades.last)\n  end\n\
    \  grades.first(3).each do |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each\
    \ do |i|\n    grades.insert(i, grades.last)\n  end\n  grades.first(3).each do\
    \ |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each do |i|\n    grades.insert(i,\
    \ grades.last)\n  end\n  grades.first(3).each do |i|\n    grades.delete_at(i)\n\
    \  end\n  grades.first(3).each do |i|\n    grades.insert(i, grades.last)\n  end\n\
    \  grades.first(3).each do |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each\
    \ do |i|\n    grades.insert(i, grades.last)\n  end\n  grades.first(3).each do\
    \ |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each do |i|\n    grades.insert(i,\
    \ grades.last)\n  end\n  grades.first(3).each do |i|\n    grades.delete_at(i)\n\
    \  end\n  grades.first(3).each do |i|\n    grades.insert(i, grades.last)\n  end\n\
    \  grades.first(3).each do |i|\n    grades.delete_at(i)\n  end\n  grades.first(3).each\
    \ do |i|\n    grades.insert(i, grades.last)\n  end\n  grades.", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    if grade < 0\n      grade\
    \ = -grade\n      grade = grade * -1\n    end\n    grade = grade / 4.0\n    grade\
    \ = grade + 0.01\n    if grade < 0\n      grade = -grade\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    grade = grade + 0.01\n    if grade\
    \ < 0\n      grade = -grade\n      grade = grade * -1\n    end\n    grade = grade\
    \ / 4.0\n    grade = grade + 0.01\n    if grade < 0\n      grade = -grade\n  \
    \    grade = grade * -1\n    end\n    grade = grade / 4.0\n    grade = grade +\
    \ 0.01\n    if grade < 0\n      grade = -grade\n      grade = grade * -1\n   \
    \ end\n    grade = grade / 4.0\n    grade = grade + 0.01\n    if grade < 0\n \
    \     grade = -grade\n      grade = grade * -1\n    end\n    grade = grade / 4.0\n\
    \    grade = grade + 0.01\n    if grade < 0\n      grade = -grade\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    grade = grade + 0.01\n \
    \   if grade < 0\n      grade = -grade\n      grade = grade * -1\n    end\n  \
    \  grade = grade / 4.0\n    grade = grade + 0.01\n    if grade < 0\n      grade\
    \ = -grade\n      grade = grade * -1\n    end\n    grade = grade / 4.0\n    grade\
    \ = grade + 0.01\n    if grade < 0\n      grade = -grade\n      grade = grade\
    \ * -1\n    end\n    grade = grade / 4.0\n    grade = grade + 0.01\n    if grade\
    \ < 0\n      grade = -grade\n      grade = grade * -1\n    end\n    grade = grade\
    \ / 4.0\n    grade = grade + 0.01\n    if grade < 0\n      grade = -grade\n  \
    \    grade = grade * -1\n    end\n    grade = grade / 4.0\n    grade = grade +\
    \ 0.01\n    if grade < 0\n      grade = -grade\n      grade = grade * -1\n   \
    \ end\n    grade = grade / 4.0\n    ", "  grades = grades.to_f\n  grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.min\nend", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    if grade < 0\n      grade\
    \ = grade * -1\n      grade = grade + 100\n    end\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade / 100\n  \
    \  grade = grade * ", "  grades = grades.to_f\n  grades.times do |i|\n    if grades[i]\
    \ >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i] >= 3.7\n      grades[i]\
    \ = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] = 'A-'\n    elsif grades[i]\
    \ >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i] >= 2.7\n      grades[i]\
    \ = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] = 'B-'\n    elsif grades[i]\
    \ >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i] >= 1.7\n      grades[i]\
    \ = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] = 'C-'\n    elsif grades[i]\
    \ >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i] >= 0.7\n      grades[i]\
    \ = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] = 'D-'\n    elsif grades[i]\
    \ == 0.0\n      grades[i] = 'E'\n    end\n  end\n  grades.join('')\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis is not the answer to the question.\
    \ He wants to know how to convert a float to a string with letters instead of\
    \ numbers. Your code doesn't do that.\n<|/ c |>\n<| c |>\nThe OP has already written\
    \ a function that does exactly that. He just wants to know how to use it.\n<|/\
    \ c |>\n<| c |>\nI know, but he has written a function that does exactly that.\
    \ He just wants to know how to use it.\n<|/ c |>\n<| c |>\nI know, but he has\
    \ written a function that does exactly that. He just wants to know how to use\
    \ it.\n<|/ c |>\n<| c |>\nI know, but he has written a function that does exactly\
    \ that. He just wants to know how to use it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  grades.each do |grade|\n    if grade > 3.7\n      puts \"#{grade}+\"\
    .upcase\n    elsif grade > 3.3\n      puts \"#{grade}\".upcase\n    elsif grade\
    \ > 3.0\n      puts \"#{grade}+\".upcase\n    elsif grade > 2.7\n      puts \"\
    #{grade}\".upcase\n    elsif grade > 2.3\n      puts \"#{grade}\".upcase\n   \
    \ elsif grade > 2.0\n      puts \"#{grade}+\".upcase\n    elsif grade > 1.7\n\
    \      puts \"#{grade}\".upcase\n    elsif grade > 1.3\n      puts \"#{grade}\"\
    .upcase\n    elsif grade > 1.0\n      puts \"#{grade}+\".upcase\n    elsif grade\
    \ > 0.7\n      puts \"#{grade}\".upcase\n    elsif grade > 0.0\n      puts \"\
    #{grade}\".upcase\n    else\n      puts \"#{grade}\".upcase\n    end\n  end\n\
    end\n</code>\n<|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nPlease read \"[mcve]\"\
    . Your code is not minimal, complete, or verifiable. For example, there is no\
    \ `grades` variable in your code. Also, there is no `grades` array in your code.\
    \ Also, there is no `letter_grades` array in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade` method in your code. Also, there is no `letter_grade`\
    \ method in your code. Also, there is no `letter_grade` method in your code. Also,\
    \ there is no `letter_grade", "    grades = grades.to_f\n    grades.times { |i|\
    \ grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i] / 4.0\
    \ }\n    grades.times { |i| grades[i] = grades[i] * 3.0 }\n    grades.times {\
    \ |i| grades[i] = grades[i] / 3.0 }\n    grades.times { |i| grades[i] = grades[i]\
    \ * 2.0 }\n    grades.times { |i| grades[i] = grades[i] / 2.0 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 1.7 }\n    grades.times { |i| grades[i] = grades[i]\
    \ * 1.3 }\n    grades.times { |i| grades[i] = grades[i] * 1.0 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 0.7 }\n    grades.times { |i| grades[i] = grades[i]\
    \ * 0.3 }\n    grades.times { |i| grades[i] = grades[i] * 0.1 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 0.01 }\n    grades.times { |i| grades[i] = grades[i]\
    \ * 0.001 }\n    grades.times { |i| grades[i] = grades[i] * 0.0001 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 0.00001 }\n    grades.times { |i| grades[i] =\
    \ grades[i] * 0.000001 }\n    grades.times { |i| grades[i] = grades[i] * 0.0000001\
    \ }\n    grades.times { |i| grades[i] = grades[i] * 0.00000001 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 0.000000001 }\n    grades.times { |i| grades[i]\
    \ = grades[i] * 0.0000000001 }\n    grades.times { |i| grades[i] = grades[i] *\
    \ 0.00000000001 }\n    grades.times { |i| grades[i] = grades[i] * 0.000000000001\
    \ }\n    grades.times { |i| grades[i] = grades[i] * 0.0000000000001 }\n    grades.times\
    \ { |i| grades[i] = grades[i] * 0.000000000000001 }\n    grades.times { |i| grades[i]\
    \ = grades[i] * 0.0000000000000001 }\n    grades.times { |i| grades[i] = grades[i]\
    \ * 0.00000000000000001 }\n    grades.times { |i| grades[i] = grades[i] * 0.000000000000000001\
    \ }\n    grades.times { |i| grades[i] = grades[i] * 0.00000000", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif\
    \ grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i]\
    \ = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend", "  grades\
    \ = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f - i\n    grade\
    \ = grade / 4.0\n    grade = grade * 100\n    grade = grade.to_i\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade.to_i\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade.to_i\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade.to_i\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade.to_i\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade.to_i\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.to_i\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.to_i\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.to_i\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade.to_i\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade.to_i\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade.to_i\n    grade = grade / ",
  "  grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\n\
    end", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.sort!\n  grades.reverse!\n  grades.each_with_index do |grade, index|\n\
    \    if grade >= 4.0\n      grades[index] = 'A+'\n    elsif grade >= 3.7\n   \
    \   grades[index] = 'A'\n    elsif grade >= 3.3\n      grades[index] = 'A-'\n\
    \    elsif grade >= 3.0\n      grades[index] = 'B+'\n    elsif grade >= 2.7\n\
    \      grades[index] = 'B'\n    elsif grade >= 2.3\n      grades[index] = 'B-'\n\
    \    elsif grade >= 2.0\n      grades[index] = 'C+'\n    elsif grade >= 1.7\n\
    \      grades[index] = 'C'\n    elsif grade >= 1.3\n      grades[index] = 'C-'\n\
    \    elsif grade >= 1.0\n      grades[index] = 'D+'\n    elsif grade >= 0.7\n\
    \      grades[index] = 'D'\n    elsif grade >= 0.0\n      grades[index] = 'D-'\n\
    \    else\n      grades[index] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your help. I appreciate it. I was able\
    \ to get it to work by changing my code to the following:\n<|/ c |>\n<| c |>",
  "  grades.each do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n    elsif grade\
    \ >= 3.7\n      puts \"A\"\n    elsif grade >= 3.3\n      puts \"A-\"\n    elsif\
    \ grade >= 3.0\n      puts \"B+\"\n    elsif grade >= 2.7\n      puts \"B\"\n\
    \    elsif grade >= 2.3\n      puts \"B-\"\n    elsif grade >= 2.0\n      puts\
    \ \"C+\"\n    elsif grade >= 1.7\n      puts \"C\"\n    elsif grade >= 1.3\n \
    \     puts \"C-\"\n    elsif grade >= 1.0\n      puts \"D+\"\n    elsif grade\
    \ >= 0.7\n      puts \"D\"\n    elsif grade >= 0.0\n      puts \"D-\"\n    else\n\
    \      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If\
    \ this answer helped you, please accept it by clicking the check mark next to\
    \ it. This will help future visitors who may have a similar question.\n<|/ c |>\n\
    <| c |>\nI did but my reputation is too low for it to show publicly.\n<|/ c |>\n\
    <| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i] >= 3.0 ? \"\
    A+\" : (grades[i] >= 3.7 ? \"A\" : (grades[i] >= 3.3 ? \"A-\" : (grades[i] >=\
    \ 3.0 ? \"B+\" : grades[i] >= 2.7 ? \"B\" : grades[i] >= 2.3 ? \"B-\" : grades[i]\
    \ >= 2.0 ? \"C+\" : grades[i] >= 1.7 ? \"C\" : grades[i] >= 1.3 ? \"C-\" : grades[i]\
    \ >= 1.0 ? \"D+\" : grades[i] >= 0.7 ? \"D\" : grades[i] >= 0.0 ? \"D-\" : \"\
    E\") }\n  grades\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ efforts, but I believe you misunderstood my question. I am not asking how to\
    \ write a function that can output a list of letter grades. I am asking how to\
    \ write a function that can output a list of letter grades using the table I provided.\
    \ I am not asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am asking how to write a function that can output\
    \ a list of letter grades using the table I provided. I am not asking how to write\
    \ a function that can output a list of letter grades using the table I provided.\
    \ I am asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am not asking how to write a function that can\
    \ output a list of letter grades using the table I provided. I am asking how to\
    \ write a function that can output a list of letter grades using the table I provided.\
    \ I am not asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am asking how to write a function that can output\
    \ a list of letter grades using the table I provided. I am not asking how to write\
    \ a function that can output a list of letter grades using the table I provided.\
    \ I am asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am not asking how to write a function that can\
    \ output a list of letter grades using the table I provided. I am asking how to\
    \ write a function that can output a list of letter grades using the table I provided.\
    \ I am not asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am asking how to write a function that can output\
    \ a list of letter grades using the table I provided. I am not asking how to write\
    \ a function that can output a list of letter grades using the table I provided.\
    \ I am asking how to write a function that can output a list of letter grades\
    \ using the table I provided. I am not asking how to write a function that can\
    \ output a list of letter grades using the table I provided. I am asking how to\
    \ write a function that can output a list of letter grades using the table I provided.\
    \ I am not asking how to ", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i] }\n  grades.times { |i| grades[i] -= grades[i].abs }\n  grades.times\
    \ { |i| grades[i] /= 2.0 }\n  grades.times { |i| grades[i] *= 4.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i] /= 4.0 }\n\
    \  grades.times { |i| grades[i] *= 3.0 }\n  grades.times { |i| grades[i] += grades[i].abs\
    \ }\n  grades.times { |i| grades[i] /= 3.0 }\n  grades.times { |i| grades[i] *=\
    \ 2.0 }\n  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i|\
    \ grades[i] /= 2.0 }\n  grades.times { |i| grades[i] *= 1.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i] /= 1.0 }\n\
    \  grades.times { |i| grades[i] *= 0.0 }\n  grades.times { |i| grades[i] += grades[i].abs\
    \ }\n  grades.times { |i| grades[i] /= 0.0 }\n  grades.times { |i| grades[i] *=\
    \ 0.0 }\n  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i|\
    \ grades[i] /= 0.0 }\n  grades.times { |i| grades[i] *= 0.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i] /= 0.0 }\n\
    \  grades.times { |i| grades[i] *= 0.0 }\n  grades.times { |i| grades[i] += grades[i].abs\
    \ }\n  grades.times { |i| grades[i] /= 0.0 }\n  grades.times { |i| grades[i] *=\
    \ 0.0 }\n  grades.times { |i| grades[i] += grades[i].abs }\n  grades.times { |i|\
    \ grades[i] /= 0.0 }\n  grades.times { |i| grades[i] *= 0.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].abs }\n  grades.times { |i| grades[i] /= 0.0 }\n\
    \  grades.times { ", "  grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\
    \n  end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n<|/\
    \ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  grades.each do |grade|\n    puts \"#{grade}\\\
    t#{letter_grade(grade)}\"\n  end\nend", "  grades.each do |grade|\n    puts \"\
    #{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades = grades.to_f\n  grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n  grades.minmax\n  grades.map { |i| grades[i]\
    \ >= 3.0 ? \"A+\" : (grades[i] >= 3.7 ? \"A\" : \n    (grades[i] >= 3.3 ? \"A-\"\
    \ : (grades[i] >= 3.0 ? \"B+\" : \n    (grades[i] >= 2.7 ? \"B\" : \n    (grades[i]\
    \ >= 2.3 ? \"B-\" : (grades[i] >= 2.0 ? \"C+\" : \n    (grades[i] >= 1.7 ? \"\
    C\" : \n    (grades[i] >= 1.3 ? \"C-\" : (grades[i] >= 1.0 ? \"D+\" : \n    (grades[i]\
    \ >= 0.7 ? \"D\" : \n    (grades[i] >= 0.0 ? \"D-\" : \"E\"))))))))))\nend\n</code>\n\
    <|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is\
    \ your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i] }\n  grades.times { |i| grades[i] -= grades.min }\n  grades.times\
    \ { |i| grades[i] /= grades.max }\n  grades.times { |i| grades[i] *= 2 }\n  grades.times\
    \ { |i| grades[i] += grades.min }\n  grades.times { |i| grades[i] /= 2 }\n  grades.times\
    \ { |i| grades[i] = grades[i].to_s }\n  grades.times { |i| grades[i] = grades[i].upcase\
    \ }\n  grades\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| c |>\nThe question is how to write the function `numerical_letter_grade`\
    \ that takes a list of GPAs and outputs a list of letter grades.\n<|/ c |>\n<|\
    \ c |>\nWhat have you tried so far? Where are you stuck? What problems are you\
    \ having?\n<|/ c |>\n<| c |>\nI wrote the function `numerical_letter_grade` but\
    \ I don't know how to implement it into the `letter_grade` function.\n<|/ c |>\n\
    <| c |>\nPlease see \"[ask]\" and the linked pages and \"[mcve](https://stackoverflow.com/help/minimal-reproducible-example)\"\
    . We'd like to see your attempt to solve this problem, and where you're stuck.\
    \ Stack Overflow is not a free coding service.\n<|/ c |>\n<| a dscore=0 |>\nI\
    \ wrote the function numerical_letter_grade but I don't know how to implement\
    \ it into the letter_grade function.", "  grades.each do |grade|\n    puts \"\
    #{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades.each do |grade|\n \
    \   puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades.each do\
    \ |grade|\n    if grade > 3.7\n      puts \"#{grade}+\".upcase\n    elsif grade\
    \ > 3.3\n      puts \"#{grade}\".upcase\n    elsif grade > 3.0\n      puts \"\
    #{grade}+\".upcase\n    elsif grade > 2.7\n      puts \"#{grade}\".upcase\n  \
    \  elsif grade > 2.3\n      puts \"#{grade}\".upcase\n    elsif grade > 2.0\n\
    \      puts \"#{grade}+\".upcase\n    elsif grade > 1.7\n      puts \"#{grade}\"\
    .upcase\n    elsif grade > 1.3\n      puts \"#{grade}\".upcase\n    elsif grade\
    \ > 1.0\n      puts \"#{grade}+\".upcase\n    elsif grade > 0.7\n      puts \"\
    #{grade}\".upcase\n    elsif grade > 0.0\n      puts \"#{grade}\".upcase\n   \
    \ else\n      puts \"#{grade}\".upcase\n    end\n  end\nend", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i]\
    \ -= grades[i].to_i if grades[i] >= 3.0 }\n  grades.times { |i| grades[i] += grades[i].to_i\
    \ if grades[i] < 3.0 }\n  grades.times { |i| grades[i] /= 2.0 if grades[i] >=\
    \ 2.0 }\n  grades.times { |i| grades[i] /= 3.0 if grades[i] >= 3.0 }\n  grades.times\
    \ { |i| grades[i] /= 4.0 if grades[i] >= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 5.0 if grades[i] >= 5.0 }\n  grades.times { |i| grades[i] /= 6.0 if grades[i]\
    \ >= 6.0 }\n  grades.times { |i| grades[i] /= 7.0 if grades[i] >= 7.0 }\n  grades.times\
    \ { |i| grades[i] /= 8.0 if grades[i] >= 8.0 }\n  grades.times { |i| grades[i]\
    \ /= 9.0 if grades[i] >= 9.0 }\n  grades.times { |i| grades[i] /= 10.0 if grades[i]\
    \ >= 10.0 }\n  grades.times { |i| grades[i] /= 11.0 if grades[i] >= 11.0 }\n \
    \ grades.times { |i| grades[i] /= 12.0 if grades[i] >= 12.0 }\n  grades.times\
    \ { |i| grades[i] /= 13.0 if grades[i] >= 13.0 }\n  grades.times { |i| grades[i]\
    \ /= 14.0 if grades[i] >= 14.0 }\n  grades.times { |i| grades[i] /= 15.0 if grades[i]\
    \ >= 15.0 }\n  grades.times { |i| grades[i] /= 16.0 if grades[i] >= 16.0 }\n \
    \ grades.times { |i| grades[i] /= 17.0 if grades[i] >= 17.0 }\n  grades.times\
    \ { |i| grades[i] /= 18.0 if grades[i] >= 18.0 }\n  grades.times { |i| grades[i]\
    \ /= 19.0 if grades[i] >= 19.0 }\n  grades.times { |i| grades[i] /= 20.0 if grades[i]\
    \ >= 20.0 }\n  grades.times { |i| grades[i] /= 21.0 if grades[i] >= 21.0 }\n \
    \ grades.times { |i| grades[i] /= 22.0 if grades[i] >= 22.0 }\n  grades.times\
    \ { |i| grades[i] /= 23.0 if grades[i] >= 23.0 }\n  grade", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    if grade >= 0\n     \
    \ grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n      grade\
    \ = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n      grade =\
    \ grade * 2\n      grade = grade / 2\n      grade = grade * 2\n      grade = grade\
    \ / 2\n      grade = grade * 2\n      grade = grade / 2\n      grade = grade *\
    \ 2\n      grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n\
    \      grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n \
    \     grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n  \
    \    grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n   \
    \   grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n    \
    \  grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n     \
    \ grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n      grade\
    \ = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n      grade =\
    \ grade / 2\n      grade = grade * 2\n      grade = grade / 2\n      grade = grade\
    \ * 2\n      grade = grade / 2\n      grade = grade * 2\n      grade = grade /\
    \ 2\n      grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n\
    \      grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n \
    \     grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n  \
    \    grade = grade / 2\n      grade = grade * 2\n      grade = grade / 2\n   \
    \   grade = grade * 2\n      grade = grade / 2\n      grade = grade * 2\n    \
    \  grade = grade / 2\n", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i]\
    \ = grades[i].to_s }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase }\n\
    \  ", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.times { |i| grades[i] -= grades[i].modulo(2.0) }\n  grades.times\
    \ { |i| grades[i] /= 2.0 }\n  grades.times { |i| grades[i] = grades[i].to_s.upcase\
    \ }\n  grades.join('')\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each_with_index\
    \ { |grade, index| grades[index] = grade }\n  grades.each_with_index { |grade,\
    \ index| grades[index] = grade > 3.0 ? \"A+\" : (grade > 3.7 ? \"A\" : grade >\
    \ 3.3 ? \"A-\" : grade > 3.0 ? \"B+\" : grade > 2.7 ? \"B\" : grade > 2.3 ? \"\
    B-\" : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\" : grade > 1.3 ? \"C-\" : grade\
    \ > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" : \"E\" }\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer! I\
    \ understand how it works but I'm having trouble implementing it. I'm getting\
    \ an error that says \"undefined method `times' for [4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i].to_i }\n    grades.sort!\n    grades.reverse!\n\
    \    grades.each_with_index { |grade, index| grades[index] = grade }\n    grades.each_with_index\
    \ { |grade, index| grades[index] = grade > 3.0 ? \"A+\" : (grade > 3.7 ? \"A\"\
    \ : (grade > 3.3 ? \"A-\" : (grade > 3.0 ? \"B+\" : grade > 2.7 ? \"B\" : grade\
    \ > 2.3 ? \"B-\" : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\" : grade > 1.3 ?\
    \ \"C-\" : grade > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" :\
    \ \"E\")) }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am not allowed to use any gems or libraries. I only have to write\
    \ my own code. I am ", "  grades = grades.to_f\n  grades.times do |i|\n    grade\
    \ = grades.to_f - i\n    if grade < 0\n      grade = grade * -1\n    end\n   \
    \ if grade < 3.7\n      grade = \"A+\"\n    elsif grade < 3.3\n      grade = \"\
    A\"\n    elsif grade < 3.0\n      grade = \"A-\"\n    elsif grade < 2.7\n    \
    \  grade = \"B+\"\n    elsif grade < 2.3\n      grade = \"B\"\n    elsif grade\
    \ < 2.0\n      grade = \"B-\"\n    elsif grade < 1.7\n      grade = \"C+\"\n \
    \   elsif grade < 1.3\n      grade = \"C\"\n    elsif grade < 1.0\n      grade\
    \ = \"C-\"\n    elsif grade < 0.7\n      grade = \"D+\"\n    elsif grade < 0.0\n\
    \      grade = \"D\"\n    else\n      grade = \"D-\"\n    end\n    grade\n  end\n\
    end", "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f\
    \ - i\n    grade = grade / grades.to_f\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade.to_s\n    grade = grade.gsub('.0', '').gsub('.0', '')\n   \
    \ grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0',\
    \ '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n  \
    \  grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0',\
    \ '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n  \
    \  grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0',\
    \ '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n  \
    \  grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0',\
    \ '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n  \
    \  grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0',\
    \ '')\n    grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n  \
    \  grade = grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade =\
    \ grade.gsub('.0', '')\n    grade = grade.gsub('.0', '')\n    grade = grade.g",
  "  grades.each do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n    elsif grade\
    \ >= 3.7\n      puts \"A\"\n    elsif grade >= 3.3\n      puts \"A-\"\n    elsif\
    \ grade >= 3.0\n      puts \"B+\"\n    elsif grade >= 2.7\n      puts \"B\"\n\
    \    elsif grade >= 2.3\n      puts \"B-\"\n    elsif grade >= 2.0\n      puts\
    \ \"C+\"\n    elsif grade >= 1.7\n      puts \"C\"\n    elsif grade >= 1.3\n \
    \     puts \"C-\"\n    elsif grade >= 1.0\n      puts \"D+\"\n    elsif grade\
    \ >= 0.7\n      puts \"D\"\n    elsif grade >= 0.0\n      puts \"D-\"\n    else\n\
    \      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| c |>\nWhat is your question? What have you\
    \ tried? What is your problem?\n<|/ c |>\n<| c |>\nWhat is your question? What\
    \ have you tried? What is your problem?\n<|/ c |>\n<| c |>\nI edited the question\
    \ to make it more clear\n<|/ c |>\n<| c |>\nI edited the question to make it more\
    \ clear\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades.each do |grade|\n    if\
    \ grade >= 4.0\n      puts \"A+\"\n    elsif grade > 3.7 && grade < 4.0\n    \
    \  puts \"A\"\n    elsif grade > 3.3 && grade < 3.7\n      puts \"A-\"\n    elsif\
    \ grade > 3.0 && grade < 3.3\n      puts \"B+\"\n    elsif grade > 2.7 && grade\
    \ < 3.0\n      puts \"B\"\n    elsif grade > 2.3 && grade < 2.7\n      puts \"\
    B-\"\n    elsif grade > 2.0 && grade < 2.3\n      puts \"C+\"\n    elsif grade\
    \ > 1.7 && grade < 2.0\n      puts \"C\"\n    elsif grade > 1.3 && grade < 1.7\n\
    \      puts \"C-\"\n    elsif grade > 1.0 && grade < 1.3\n      puts \"D+\"\n\
    \    elsif grade > 0.7 && grade < 1.0\n      puts \"D\"\n    elsif grade > 0.0\
    \ && grade < 0.7\n      puts \"D-\"\n    else\n      puts \"E\"\n    end\n  end\n\
    end\n</code>\n<|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nThe code you posted doesn't\
    \ match the code you claim to be running. Can you post the actual code you are\
    \ running?\n<|/ c |>\n<| c |>\nI posted the actual code I am running. Sorry about\
    \ that\n<|/ c |>\n<| c |>\nYou posted a method called `numerical_letter_grade`\
    \ but you claim to be running `letter_grade`\n<|/ c |>\n<| c |>\nI posted the\
    \ actual code I am running. Sorry about that\n<|/ c |>\n<| c |>\nI posted the\
    \ actual code I am running. Sorry about that\n<|/ c |>\n<| a |>\nYour code doesn't\
    \ match the code you claim to be running. Your code doesn't even have a method\
    \ called letter_grade and your method doesn't take any arguments. \nYour code\
    \ should look like this:\n<code>", "  grades = grades.to_f\n  grades.times do\
    \ |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i] >=\
    \ 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] = 'A-'\n\
    \    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i] >= 2.7\n\
    \      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] = 'B-'\n \
    \   elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i] >= 1.7\n\
    \      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] = 'C-'\n \
    \   elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i] >= 0.7\n\
    \      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] = 'D-'\n \
    \   else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</cell>\n<cell>",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades.each do |grade|\n    if grade > 3.7\n     \
    \ puts \"#{grade} is an A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an\
    \ A-\"\n    elsif grade > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade\
    \ > 2.7\n      puts \"#{grade} is a B\"\n    elsif grade > 2.3\n      puts \"\
    #{grade} is a B-\"\n    elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n \
    \   elsif grade > 1.7\n      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n\
    \      puts \"#{grade} is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade}\
    \ is a D+\"\n    elsif grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif\
    \ grade > 0.0\n      puts \"#{grade} is a D-\"\n    else\n      puts \"#{grade}\
    \ is an E\"\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your help but I am not allowed to use any loops or if statements. I only have\
    \ one method and one parameter. I am not allowed to use any global variables or\
    \ anything like that. I am only allowed to use if statements and loops. I appreciate\
    \ your help though.\n<|/ c |>\n<| c |>\nI appreciate your help but I am not allowed\
    \ to use any loops or if statements. I only have one method and one parameter.\
    \ I am not allowed to use any global variables or anything like that. I am only\
    \ allowed to use if statements and loops. I appreciate your help though.\n<|/\
    \ c |>\n<| c |>\nI appreciate your help but I am not allowed to use any loops\
    \ or if statements. I only have one method and one parameter. I am not allowed\
    \ to use any global variables or anything like that. I am only allowed to use\
    \ if statements and loops. I appreciate your help though.\n<|/ c |>\n<| c |>\n\
    I appreciate your help but I am not allowed to use any loops or if statements.\
    \ I only have one method and one parameter. I am not allowed to use any global\
    \ variables or anything like that. I am only allowed to use if statements and\
    \ loops. I appreciate your help though.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ help ", "  grades.each do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n\
    \    elsif grade > 3.7 && grade < 4.0\n      puts \"A\"\n    elsif grade > 3.3\
    \ && grade < 3.7\n      puts \"A-\"\n    elsif grade > 3.0 && grade < 3.3\n  \
    \    puts \"B+\"\n    elsif grade > 2.7 && grade < 3.0\n      puts \"B\"\n   \
    \ elsif grade > 2.3 && grade < 2.7\n      puts \"B-\"\n    elsif grade > 2.0 &&\
    \ grade < 2.3\n      puts \"C+\"\n    elsif grade > 1.7 && grade < 2.0\n     \
    \ puts \"C\"\n    elsif grade > 1.3 && grade < 1.7\n      puts \"C-\"\n    elsif\
    \ grade > 1.0 && grade < 1.3\n      puts \"D+\"\n    elsif grade > 0.7 && grade\
    \ < 1.0\n      puts \"D\"\n    elsif grade > 0.0 && grade < 0.7\n      puts \"\
    D-\"\n    else\n      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThank you so much for taking the time to write this out. I really\
    \ appreciate it. I will definitely be using this in my future projects. I really\
    \ appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    grade = grade / grades.to_f\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade.to_s\n  \
    \  grade = grade.upcase\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\"\
    .0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\"\
    ,\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\"\
    )\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n\
    \    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n  \
    \  grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade\
    \ = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade =\
    \ grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\"\
    .0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\"\
    ,\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\"\
    )\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n\
    \    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n  \
    \  grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade\
    \ = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade =\
    \ grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\"\
    .0\",\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\"\
    ,\"\")\n    grade = grade.gsub(\".0\",\"\")\n    grade = grade.gsub(\".0\",\"\"\
    )\n    grade = grade.gsub(\".0\",\"\")\n", "    grades = grades.to_f\n    grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n    grades.min\n    grades.max\n    grades.min.times\
    \ { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n  \
    \  grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i]\
    \ += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times\
    \ { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n  \
    \  grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i]\
    \ -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times\
    \ { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n  \
    \  grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i]\
    \ += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times\
    \ { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n  \
    \  grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i]\
    \ -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times\
    \ { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n  \
    \  grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times { |i| grades[i]\
    \ += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n    grades.max.times\
    \ { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i] -= 0.5 }\n  \
    \  grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times { |i| grades[i]\
    \ -= 0.5 }\n    grades.max.times { |i| grades[i] += 0.5 }\n    grades.min.times\
    \ { |i| grades[i] -= ", "  grades.each do |grade|\n    if grade > 4.0 \n     \
    \ puts \"#{grade} is an A+\"\n    elsif grade > 3.7 \n      puts \"#{grade} is\
    \ an A\"\n    elsif grade > 3.3 \n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0 \n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7 \n    \
    \  puts \"#{grade} is a B\"\n    elsif grade > 2.3 \n      puts \"#{grade} is\
    \ a B-\"\n    elsif grade > 2.0 \n      puts \"#{grade} is a C+\"\n    elsif grade\
    \ > 1.7 \n      puts \"#{grade} is a C\"\n    elsif grade > 1.3 \n      puts \"\
    #{grade} is a C-\"\n    elsif grade > 1.0 \n      puts \"#{grade} is a D+\"\n\
    \    elsif grade > 0.7 \n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\
    \ \n      puts \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\
    \n    end\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails |>\n<| c |>\nPlease\
    \ read \"[ask]\" including the linked pages, \"[mcve]\" and \"[How much research\
    \ effort is expected of Stack Overflow users?](http://meta.stackoverflow.com/questions/261592)\"\
    . We'd like to see evidence of your effort. What did you try? Did you search and\
    \ not find anything? Did you find stuff but it didn't help? Did you try writing\
    \ code? If not, why? If so, what is the smallest code example that shows what\
    \ you tried and why didn't it work? Without that it looks like you didn't try\
    \ and want us to write it for you.\n<|/ c |>\n<| c |>\nI did try writing code\
    \ but I don't know how to do it. I don't know where to start. I don't know what\
    \ to search for. I don't know what to look for. I'm new to Ruby and Rails. I'm\
    \ just trying to learn how to do it.\n<|/ c |>\n<| c |>\nYou don't know where\
    \ to start? Start by reading the [Rails Guides](http://guides.rubyonrails.org/getting_started.html)\
    \ then try something and come back with your attempt.\n<|/ c |>\n<| c |>\nI did\
    \ read the ", "  grades.each do |grade|\n    if grade > 4.0 \n      grade = 'A+'\n\
    \    elsif grade > 3.7 \n      grade = 'A'\n    elsif grade > 3.3 \n      grade\
    \ = 'A-'\n    elsif grade > 3.0 \n      grade = 'B+'\n    elsif grade > 2.7 \n\
    \      grade = 'B'\n    elsif grade > 2.3 \n      grade = 'B-'\n    elsif grade\
    \ > 2.0 \n      grade = 'C+'\n    elsif grade > 1.7 \n      grade = 'C'\n    elsif\
    \ grade > 1.3 \n      grade = 'C-'\n    elsif grade > 1.0 \n      grade = 'D+'\n\
    \    elsif grade > 0.7 \n      grade = 'D'\n    elsif grade > 0.0 \n      grade\
    \ = 'D-'\n    else\n      grade = 'E'\n    end\n  end\nend\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nWhat have you tried so far? Where are you stuck? Please show us\
    \ your attempt.\n<|/ c |>\n<| c |>\nI added my code. I am stuck at how to get\
    \ the letter grade for each GPA.\n<|/ c |>\n<| c |>\nWhat is the expected output\
    \ for that example?\n<|/ c |>\n<| c |>\nThe expected output should be \"A+\",\
    \ since 4.0 is greater than 3.7 and 3.3 is greater than 3.0.\n<|/ c |>\n<| c |>\n\
    What is the expected output for that example?\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  grades.each do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n    elsif grade\
    \ > 3.7\n      puts \"A\"\n    elsif grade > 3.3\n      puts \"A-\"\n    elsif\
    \ grade > 3.0\n      puts \"B+\"\n    elsif grade > 2.7\n      puts \"B\"\n  \
    \  elsif grade > 2.3\n      puts \"B-\"\n    elsif grade > 2.0\n      puts \"\
    C+\"\n    elsif grade > 1.7\n      puts \"C\"\n    elsif grade > 1.3\n      puts\
    \ \"C-\"\n    elsif grade > 1.0\n      puts \"D+\"\n    elsif grade > 0.7\n  \
    \    puts \"D\"\n    elsif grade > 0.0\n      puts \"D-\"\n    else\n      puts\
    \ \"E\"\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nI appreciate your efforts, but I really don't understand how this works.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added an explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate your\
    \ efforts. I really appreciate your efforts. I really appreciate your efforts.\
    \ I really appreciate your efforts. I really appreciate your efforts. I really\
    \ appreciate your efforts. I really appreciate your efforts. I really appreciate\
    \ your efforts. I really appreciate your efforts. I really appreciate your efforts.\
    \ I really appreciate your efforts. I really appreciate your efforts. I really\
    \ appreciate your efforts. I really appreciate your efforts. I really appreciate\
    \ your efforts. I really appreciate your efforts. I really appreciate your efforts.\
    \ I really appreciate your efforts. I really appreciate your efforts. I really\
    \ appreciate your efforts. I really appreciate your efforts. I really appreciate\
    \ your efforts. I really appreciate your efforts. I really appreciate your efforts.\
    \ I really appreciate your efforts. I really appreciate ", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade / 4.0\n    if grade < 0\n      grade\
    \ = grade * -1\n    end\n    grade = grade + 100\n    if grade < 0\n", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades -= i }\n  grades.times { |i| grades\
    \ *= 2 }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades /= 2\
    \ }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n\
    \  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times\
    \ { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i|\
    \ grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades\
    \ *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *=\
    \ -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1\
    \ }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n\
    \  grades.times { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times\
    \ { |i| grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i|\
    \ grades /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades\
    \ /= 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /=\
    \ 2 }\n  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n\
    \  grades.times { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times\
    \ { |i| grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  grades.times { |i|\
    \ grades *= -1 }\n  grades.times { |i| grades /= 2 }\n  ", "  grades.each do |grade|\n\
    \    if grade > 3.7\n      puts \"#{grade} is an A\"\n    elsif grade > 3.3\n\
    \      puts \"#{grade} is an A-\"\n    elsif grade > 3.0\n      puts \"#{grade}\
    \ is a B+\"\n    elsif grade > 2.7\n      puts \"#{grade} is a B\"\n    elsif\
    \ grade > 2.3\n      puts \"#{grade} is a B-\"\n    elsif grade > 2.0\n      puts\
    \ \"#{grade} is a C+\"\n    elsif grade > 1.7\n      puts \"#{grade} is a C\"\n\
    \    elsif grade > 1.3\n      puts \"#{grade} is a C-\"\n    elsif grade > 1.0\n\
    \      puts \"#{grade} is a D+\"\n    elsif grade > 0.7\n      puts \"#{grade}\
    \ is a D\"\n    elsif grade > 0.0\n      puts \"#{grade} is a D-\"\n    else\n\
    \      puts \"#{grade} is an E\"\n    end\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is the problem\
    \ you are facing?\n<|/ c |>\n<| c |>\nI do not know how to write this function\n\
    <|/ c |>\n<| c |>\nI do not know how to write this function\n<|/ c |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| a |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif\
    \ grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i]\
    \ = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer. I'm still a\
    \ beginner so I didn't know about this method. I'm going to try it out and see\
    \ if it works. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I hope it helps.\
    \ If you have any questions feel free to ask.\n<|/ c |>\n<| c |>\nI got it to\
    \ work! Thanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ I'm glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times { |i| grades[i]\
    \ -= grades[i].to_i if grades[i] >= 3.0 }\n  grades.times { |i| grades[i] += grades[i].to_i\
    \ if grades[i] <= 3.0 }\n  grades.times { |i| grades[i] /= 2.0 if grades[i] >=\
    \ 2.0 }\n  grades.times { |i| grades[i] /= 1.7 if grades[i] >= 1.7 }\n  grades.times\
    \ { |i| grades[i] /= 1.0 if grades[i] >= 1.0 }\n  grades.times { |i| grades[i]\
    \ /= 0.7 if grades[i] >= 0.7 }\n  grades.times { |i| grades[i] /= 0.3 if grades[i]\
    \ >= 0.3 }\n  grades.times { |i| grades[i] /= 0.1 if grades[i] >= 0.1 }\n  grades.times\
    \ { |i| grades[i] /= 0.0 if grades[i] >= 0.0 }\n  grades.times { |i| grades[i]\
    \ /= -0.1 if grades[i] <= -0.1 }\n  grades.times { |i| grades[i] /= -0.7 if grades[i]\
    \ <= -0.7 }\n  grades.times { |i| grades[i] /= -0.3 if grades[i] <= -0.3 }\n \
    \ grades.times { |i| grades[i] /= -0.1 if grades[i] <= -0.1 }\n  grades.times\
    \ { |i| grades[i] /= -0.0 if grades[i] <= -0.0 }\n  grades.times { |i| grades[i]\
    \ /= -1.0 if grades[i] <= -1.0 }\n  grades.times { |i| grades[i] /= -1.7 if grades[i]\
    \ <= -1.7 }\n  grades.times { |i| grades[i] /= -2.0 if grades[i] <= -2.0 }\n \
    \ grades.times { |i| grades[i] /= -3.0 if grades[i] <= -3.0 }\n  grades.times\
    \ { |i| grades[i] /= -4.0 if grades[i] <= -4.0 }\n  grades.times { |i| grades[i]\
    \ /= -5.0 if grades[i] <= -5.0 }\n  grades.times { |i| grades[i] /= -6.0 if grades[i]\
    \ <= -6.0 }\n  grades.times { |i| grades[i] /= -7.0 if grades[i] <= -7.0 }\n \
    \ grades.times { |i| grades[i] /= -8.0 if grades[i] <= -8.0 }\n  grades.times\
    \ { |i| grades[i] /= -9.0 if grades[i] <= ", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i]\
    \ >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] =\
    \ 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nThanks for your help. I appreciate it!\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require any loops. I hope you find it\
    \ helpful.\n<|/ c |>\n<| c |>\nThanks for your help. I appreciate it!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  grades.each do |grade|\n    if grade > 4.0 \n  \
    \    puts \"#{grade} is an A+\"\n    elsif grade > 3.7 \n      puts \"#{grade}\
    \ is an A\"\n    elsif grade > 3.3 \n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0 \n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7 \n    \
    \  puts \"#{grade} is a B\"\n    elsif grade > 2.3 \n      puts \"#{grade} is\
    \ a B-\"\n    elsif grade > 2.0 \n      puts \"#{grade} is a C+\"\n    elsif grade\
    \ > 1.7 \n      puts \"#{grade} is a C\"\n    elsif grade > 1.3 \n      puts \"\
    #{grade} is a C-\"\n    elsif grade > 1.0 \n      puts \"#{grade} is a D+\"\n\
    \    elsif grade > 0.7 \n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\
    \ \n      puts \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\
    \n    end\n  end\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.times { |i| grades[i] -= grades[i].abs }\n  grades.times\
    \ { |i| grades[i] = grades[i].modulo(10) }\n  grades.times { |i| grades[i] = grades[i].to_s.upcase\
    \ }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n\
    \  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, \"\") }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ \"\") ", "  grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\
    \n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c\
    \ |>\nThanks for the help. I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i].to_i }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_f / 2.0 }\n    grades.times { |i| grades[i] += grades[i].to_f\
    \ / 2.0 }\n    grades.times { |i| grades[i] /= 2.0 }\n    grades.times { |i| grades[i]\
    \ = grades[i].to_s.upcase }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n \
    \   grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n", "  grades.each do |grade|\n\
    \    if grade > 3.0 \n      puts \"#{grade} is a great grade!\"\n    elsif grade\
    \ > 2.7\n      puts \"#{grade} is a good grade!\"\n    elsif grade > 2.0\n   \
    \   puts \"#{grade} is a good grade!\"\n    elsif grade > 1.7\n      puts \"#{grade}\
    \ is a good grade!\"\n    elsif grade > 1.0\n      puts \"#{grade} is a good grade!\"\
    \n    elsif grade > 0.7\n      puts \"#{grade} is a good grade!\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n   \
    \   puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n   \
    \   puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n   \
    \   puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\
    \n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade\
    \ > 0.0\n      puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n   \
    \   puts \"#{grade} is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade}\
    \ is a good grade!\"\n    elsif grade > 0.0\n      puts \"#{grade} is a good grade!\"\
    \n    elsif gra", "  grades = grades.to_f\n  grades.times do |i|\n    if grades[i]\
    \ >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i] >= 3.7\n      grades[i]\
    \ = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] = 'A-'\n    elsif grades[i]\
    \ >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i] >= 2.7\n      grades[i]\
    \ = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] = 'B-'\n    elsif grades[i]\
    \ >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i] >= 1.7\n      grades[i]\
    \ = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] = 'C-'\n    elsif grades[i]\
    \ >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i] >= 0.7\n      grades[i]\
    \ = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] = 'D-'\n    else\n      grades[i]\
    \ = 'E'\n    end\n  end\n  grades\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work. `grades.to_f` converts the array to an `Array`\
    \ of `Float`s, not `Float`s. `grades.to_f` will raise an error if any of the elements\
    \ in the array are not `Float`s.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've edited my answer to include a more robust solution.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grade", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i]\
    \ = grades[i].to_s }\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].upcase\
    \ }\n  grades.join\nend", "  grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\
    \n  end\nend", "  grades.each do |grade|\n    puts \"#{grade} #{letter_grade(grade)}\"\
    \n  end\nend", "  grades = grades.to_f\n  grades.times do |i|\n    if grades[i]\
    \ > 3.0 \n      grades[i] = 'A+'\n    elsif grades[i] > 2.7 \n      grades[i]\
    \ = 'A'\n    elsif grades[i] > 2.3 \n      grades[i] = 'A-'\n    elsif grades[i]\
    \ > 2.0 \n      grades[i] = 'B+'\n    elsif grades[i] > 1.7 \n      grades[i]\
    \ = 'B'\n    elsif grades[i] > 1.3 \n      grades[i] = 'B-'\n    elsif grades[i]\
    \ > 1.0 \n      grades[i] = 'C+'\n    elsif grades[i] > 0.7 \n      grades[i]\
    \ = 'C'\n    elsif grades[i] > 0.3 \n      grades[i] = 'C-'\n    elsif grades[i]\
    \ > 0.0 \n      grades[i] = 'D+'\n    elsif grades[i] > 0.0 \n      grades[i]\
    \ = 'D'\n    elsif grades[i] > 0.0 \n      grades[i] = 'D-'\n    elsif grades[i]\
    \ > 0.0 \n      grades[i] = 'E'\n    end\n  end\n  grades.to_s\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI appreciate your efforts, but I still\
    \ don't understand how this works. I understand that you are taking the grades\
    \ and converting them to floats, but I don't understand how you get from there\
    \ to 'A+', etc.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I still don't understand how\
    \ this works. I understand that you are taking the grades and converting them\
    \ to floats, but I don't understand how you get from there to 'A+', etc.\n<|/\
    \ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nI appreciate your efforts, but I still don't understand how this works.\
    \ I understand that you are taking the grades and converting them to floats, but\
    \ I don't understand how you get from there to 'A+', etc.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  grades.each do |grade|\n    if grade > 3.7\n      puts \"#{grade}\
    \ is an A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7\n      puts\
    \ \"#{grade} is a B\"\n    elsif grade > 2.3\n      puts \"#{grade} is a B-\"\n\
    \    elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n    elsif grade > 1.7\n\
    \      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n      puts \"#{grade}\
    \ is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade} is a D+\"\n    elsif\
    \ grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\n      puts\
    \ \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\n    end\n \
    \ end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the\
    \ linked pages, \"[mcve]\" and \"[How much research effort is expected of Stack\
    \ Overflow users?](http://meta.stackoverflow.com/questions/261592)\". We'd like\
    \ to see evidence of your effort. What did you try? Did you search and not find\
    \ anything? Did you find stuff but it didn't help? Did you try writing code? If\
    \ not, why? If so, what is the smallest code example that shows what you tried\
    \ and why didn't it work? Without that it looks like you didn't try and want us\
    \ to write it for you.\n<|/ c |>\n<| c |>\nI edited the question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited the question to make it more clear.\n<|/\
    \ c |>\n<| c |>\nI edited the question to make it more clear.\n<|/ c |>\n<| a\
    \ tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", "  grades.each do |grade|\n\
    \    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i].to_i }\n    grades.times { |i| grades[i]\
    \ -= grades[i].to_i if grades[i] < 0 }\n    grades.times { |i| grades[i] += grades[i].to_i\
    \ if grades[i] > 100 }\n    grades.times { |i| grades[i] /= 10 }\n    grades.times\
    \ { |i| grades[i] = grades[i].to_s.upcase }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '')\
    \ }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n\
    \    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n   \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i|\
    \ grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/,\
    \ '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '')\
    \ }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n\
    \    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n   \
    \ grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i|\
    \ grades[i] = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z0-9]/, '') }\n    grades.times { |i| grades[i] = grades[i].gsub(/[^A-Za-z0-9]/,\
    \ '') }", "  grades.each do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n\
    \    elsif grade > 3.7 && grade < 4.0\n      puts \"A\"\n    elsif grade > 3.3\
    \ && grade < 3.7\n      puts \"A-\"\n    elsif grade > 3.0 && grade < 3.3\n  \
    \    puts \"B+\"\n    elsif grade > 2.7 && grade < 3.0\n      puts \"B\"\n   \
    \ elsif grade > 2.3 && grade < 2.7\n      puts \"B-\"\n    elsif grade > 2.0 &&\
    \ grade < 2.3\n      puts \"C+\"\n    elsif grade > 1.7 && grade < 2.0\n     \
    \ puts \"C\"\n    elsif grade > 1.3 && grade < 1.7\n      puts \"C-\"\n    elsif\
    \ grade > 1.0 && grade < 1.3\n      puts \"D+\"\n    elsif grade > 0.7 && grade\
    \ < 1.0\n      puts \"D\"\n    elsif grade > 0.0 && grade < 0.7\n      puts \"\
    D-\"\n    else\n      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nWhat is the problem with your code? What happens when you run it?\
    \ What did you expect to happen instead?\n<|/ c |>\n<| c |>\nThe code doesn't\
    \ work. I am not sure how to fix it. I am new to ruby and I haven't learned how\
    \ to do loops yet. I am not sure how to fix the code so that it works.\n<|/ c\
    \ |>\n<| c |>\nWhat do you mean by \"doesn't work\"? Do you get an error? If so,\
    \ what error? Do you get incorrect output? If so, what output did you get, and\
    \ what did you expect?\n<|/ c |>\n<| c |>\nThe code doesn't work. I am not sure\
    \ how to fix it. I am new to ruby and I haven't learned how to do loops yet. I\
    \ am not sure how to fix the code so that it works.\n<|/ c |>\n<| c |>\nWhat do\
    \ you mean by \"doesn't work\"? Do you get an error? If so, what error? Do you\
    \ get incorrect output? If so, what output did you get, and what did you expect?\n\
    <|/ c |>\n<| a dscore=1 |>\nThe problem is that the variable grade is ", "  grades.each\
    \ do |grade|\n    puts \"#{grade}: #{letter_grade(grade)}\"\n  end\nend", "  grades.each\
    \ do |grade|\n    if grade >= 4.0\n      puts \"A+\"\n    elsif grade > 3.7 &&\
    \ grade < 4.0\n      puts \"A\"\n    elsif grade > 3.3 && grade < 3.7\n      puts\
    \ \"A-\"\n    elsif grade > 3.0 && grade < 3.3\n      puts \"B+\"\n    elsif grade\
    \ > 2.7 && grade < 3.0\n      puts \"B\"\n    elsif grade > 2.3 && grade < 2.7\n\
    \      puts \"B-\"\n    elsif grade > 2.0 && grade < 2.3\n      puts \"C+\"\n\
    \    elsif grade > 1.7 && grade < 2.0\n      puts \"C\"\n    elsif grade > 1.3\
    \ && grade < 1.7\n      puts \"C-\"\n    elsif grade > 1.0 && grade < 1.3\n  \
    \    puts \"D+\"\n    elsif grade > 0.7 && grade < 1.0\n      puts \"D\"\n   \
    \ elsif grade > 0.0 && grade < 0.7\n      puts \"D-\"\n    else\n      puts \"\
    E\"\n    end\n  end\nend", "  grades = grades.to_f\n  grades.times do |i|\n  \
    \  grade = grades.to_f - i\n    grade = grade / grades.to_f\n    grade = grade\
    \ * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade\
    \ / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade /\
    \ 100\n    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade.round\n", "  grades = grades.to_f\n \
    \ grades.times do |i|\n    grade = grades.to_f - i\n    grade = grade / 4.0\n\
    \    grade = grade > 0 ? \"A+\" : grade < 0 ? \"A-\" : grade > 0 ? \"B+\" : grade\
    \ < 0 ? \"B-\" : grade > 0 ? \"C+\" : grade < 0 ? \"C-\" : grade > 0 ? \"D+\"\
    \ : grade < 0 ? \"D-\" : grade > 0 ? \"D\" : grade < 0 ? \"E\" : \"\"\n  end\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks\
    \ so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad I could help!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n\
    <code>", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n  grades.minmax\n\
    \  grades.minmax\n  grade", "  grades.each do |grade|\n    if grade > 4.0 \n \
    \     puts \"A+\"\n    elsif grade > 3.7 \n      puts \"A\"\n    elsif grade >\
    \ 3.3 \n      puts \"A-\"\n    elsif grade > 3.0 \n      puts \"B+\"\n    elsif\
    \ grade > 2.7 \n      puts \"B\"\n    elsif grade > 2.3 \n      puts \"B-\"\n\
    \    elsif grade > 2.0 \n      puts \"C+\"\n    elsif grade > 1.7 \n      puts\
    \ \"C\"\n    elsif grade > 1.3 \n      puts \"C-\"\n    elsif grade > 1.0 \n \
    \     puts \"D+\"\n    elsif grade > 0.7 \n      puts \"D\"\n    elsif grade >\
    \ 0.0 \n      puts \"D-\"\n    elsif grade > 0.0 \n      puts \"E\"\n    end\n\
    \  end\nend\n</code>\n<|/ q |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<|\
    \ c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n<|/\
    \ c |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  grades.each do |grade|\n    puts \"#{grade}:\
    \ #{letter_grade(grade)}\"\n  end\nend", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i]\
    \ >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] =\
    \ 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades.join('')\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it! I understand what you're saying but I'm having trouble implementing\
    \ it. I'm getting an error that says \"undefined method `to_f' for [\"4.0\"]:Array\"\
    . Do you know what that means?\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that should work for you\n<|/ c |>\n<| c |>\nThank you so much! I\
    \ really appreciate it! I understand what you're saying but I'm having trouble\
    \ implementing it. I'm getting an error that says \"undefined method `to_f' for\
    \ [\"4.0\"]:Array\". Do you know what that means?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that should work for you\n<|/ c |>\n<| c |>\n\
    Thank you so much! I really appreciate it! I understand what you're saying but\
    \ I'm having trouble implementing it. I'm getting an error that says \"undefined\
    \ method `to_f' for [\"4.0\"]:Array\". Do you know what that means?\n<|/ c |>\n\
    <| a tags=ruby,arrays,loops |>\n<code>", "  grades.each do |grade|\n    puts \"\
    #{grade}: #{letter_grade(grade)}\"\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nWhat is your question? What have you tried? What problems are you\
    \ having? Please read \"[ask]\" including the linked pages, and \"[mcve]\".\n\
    <|/ c |>\n<| c |>\nI edited the question to make it more clear. Thanks for your\
    \ suggestion.\n<|/ c |>\n<| c |>\nI edited the question to make it more clear.\
    \ Thanks for your suggestion.\n<|/ c |>\n<| c |>\nI edited the question to make\
    \ it more clear. Thanks for your suggestion.\n<|/ c |>\n<| c |>\nI edited the\
    \ question to make it more clear. Thanks for your suggestion.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI suggest you use an enumerator to iterate through the grades array:\n\
    <code>", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades.each do |grade|\n    if grade > 3.7\n     \
    \ puts \"#{grade} is an A\"\n    elsif grade > 3.3\n      puts \"#{grade} is an\
    \ A-\"\n    elsif grade > 3.0\n      puts \"#{grade} is a B+\"\n    elsif grade\
    \ > 2.7\n      puts \"#{grade} is a B\"\n    elsif grade > 2.3\n      puts \"\
    #{grade} is a B-\"\n    elsif grade > 2.0\n      puts \"#{grade} is a C+\"\n \
    \   elsif grade > 1.7\n      puts \"#{grade} is a C\"\n    elsif grade > 1.3\n\
    \      puts \"#{grade} is a C-\"\n    elsif grade > 1.0\n      puts \"#{grade}\
    \ is a D+\"\n    elsif grade > 0.7\n      puts \"#{grade} is a D\"\n    elsif\
    \ grade > 0.0\n      puts \"#{grade} is a D-\"\n    else\n      puts \"#{grade}\
    \ is an E\"\n    end\n  end\nend", "  grades = grades.to_f\n  grades.times { |i|\
    \ grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.first(5).each\
    \ do |grade|\n    break if grade == grades.last\n    grades.last.upto(grade -\
    \ 1) do |g|\n      break if g == grade\n      grades.last.upto(grade + 1) do |g|\n\
    \        break if g == grade\n        grades.last.upto(grade + 2) do |g|\n   \
    \       break if g == grade\n          grades.last.upto(grade + 3) do |g|\n  \
    \          break if g == grade\n            grades.last.upto(grade + 4) do |g|\n\
    \              break if g == grade\n              grades.last.upto(grade + 5)\
    \ do |g|\n                break if g == grade\n                grades.last.upto(grade\
    \ + 6) do |g|\n                  break if g == grade\n                  grades.last.upto(grade\
    \ + 7) do |g|\n                    break if g == grade\n                    grades.last.upto(grade\
    \ + 8) do |g|\n                      break if g == grade\n                   \
    \   grades.last.upto(grade + 9) do |g|\n                        break if g ==\
    \ grade\n                        grades.last.upto(grade + 10) do |g|\n       \
    \                   break if g == grade\n                          grades.last.upto(grade\
    \ + 11) do |g|\n                            break if g == grade\n            \
    \                grades.last.upto(grade + 12) do |g|\n                       \
    \       break if g == grade\n                              grades.last.upto(grade\
    \ + 13) do |g|\n                                break if g == grade\n        \
    \                        grades.last.upto(grade + 14) do |g|\n               \
    \                   break if g == grade\n                                  grades.last.upto(grade\
    \ + 15) do |g|\n                                    break if g == grade\n    \
    \                                grades.last.upto(grade + 16) do |g|\n       \
    \                               break if g == grade\n                        \
    \              grades.last.upto(grade + 17) do |g|\n                         \
    \               break if g == grade\n                                        grades.last.upto(grade\
    \ + 18) do |g|\n                                          break if g == grade\n\
    \                                          grades.last.upto(grade + 19) do |g|\n\
    \                                            break if g == grade\n           \
    \                                 grades.last.upto(grade + ", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |i| grades[i] -= i }\n  grades.reverse!\n  grades.each { |i|\
    \ grades[i] += i }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i]\
    \ /= 2 }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].to_s.upcase\
    \ }\n  grades\nend", "  grades.each do |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\
    \n  end\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_f / 2.0 }\n  grades.times\
    \ { |i| grades[i] += grades[i].to_f / 4.0 }\n  grades.times { |i| grades[i] /=\
    \ 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n  grades.times { |i| grades[i] /= 4.0 }\n  grades.times { |i| grades[i]\
    \ /= 2.0 }\n", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.times { |i| grades[i] -= grades[i].to_i / 2.0 }\n  grades.times\
    \ { |i| grades[i] /= 2.0 }\n  grades.times { |i| grades[i] = grades[i].to_s.upcase\
    \ }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Z]/, '') }\n  grades.times { |i| grades[i] = grades[i].gsub(/[^A-Z]/,\
    \ '", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i]\
    \ -= grades[i].to_i if grades[i] >= 0 }\n  grades.reverse!\n  grades.each { |i|\
    \ grades[i] += grades[i].to_i if grades[i] < 0 }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.map { |i| i.to_s.ljust(2, \"0\") }.join(\",\")\nend", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i] }\n  grades.times\
    \ { |i| grades[i] -= grades[i-1] }\n  grades.times { |i| grades[i] += grades[i+1]\
    \ }\n  grades.times { |i| grades[i] /= 2.0 }\n  grades.times { |i| grades[i] =\
    \ grades[i].abs }\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.times\
    \ { |i| grades[i] = grades[i].to_s }\n  grades.times { |i| grades[i] = grades[i].upcase\
    \ }\n  grades.times { |i| grades[i] = grades[i].gsub('+', '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub('-', '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub('D', '') }\n  grades.times { |i| grades[i] = grades[i].gsub('C',\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub('B', '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub('A', '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub('+', '') }\n  grades.times { |i| grades[i] = grades[i].gsub('-',\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub('D', '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub('C', '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub('B', '') }\n  grades.times { |i| grades[i] = grades[i].gsub('A',\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub('+', '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub('-', '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub('D', '') }\n  grades.times { |i| grades[i] = grades[i].gsub('C',\
    \ '') }\n  grades.times { |i| grades[i] = grades[i].gsub('B', '') }\n  grades.times\
    \ { |i| grades[i] = grades[i].gsub('A', '') }\n  grades.times { |i| grades[i]\
    \ = grades[i].gsub('+', '') }\n  grades.times { |i| grade", "  grades.each do\
    \ |grade|\n    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", "  grades\
    \ = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f - i\n    if grade\
    \ < 0\n      grade = grade * -1\n      grade = grade + 100\n    end\n    grade\
    \ = grade / 100\n    grade = grade * 10\n    grade = grade.to_i\n    if grade\
    \ < 10\n      grade = grade * 10\n      grade = grade + 10\n    end\n    if grade\
    \ < 20\n      grade = grade * 10\n      grade = grade + 5\n    end\n    if grade\
    \ < 30\n      grade = grade * 10\n      grade = grade + 2\n    end\n    if grade\
    \ < 40\n      grade = grade * 10\n      grade = grade + 1\n    end\n    if grade\
    \ < 50\n      grade = grade * 10\n      grade = grade - 1\n    end\n    if grade\
    \ < 60\n      grade = grade * 10\n      grade = grade + 1\n    end\n    if grade\
    \ < 70\n      grade = grade * 10\n      grade = grade + 1\n    end\n    if grade\
    \ < 80\n      grade = grade * 10\n      grade = grade + 1\n    end\n    if grade\
    \ < 90\n      grade = grade * 10\n      grade = grade + 1\n    end\n    if grade\
    \ < 100\n      grade = grade * 10\n      grade = grade + 1\n    end\n    grade\
    \ = grade / 10\n    grade = grade * 1\n    grade = grade.to_s\n  end\nend", " \
    \   grades = grades.to_f\n    grades.times { |i| grades -= i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i }\n    grades.times\
    \ { |i| grades /= i }\n    grades.times { |i| grades *= i }\n    grades.times\
    \ { |i| grades += i }\n    grades.times { |i| grades /= i }\n    grades.times\
    \ { |i| grades *= i }\n    grades.times { |i| grades += i ", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    grade = grade / grades.to_f\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.round\n", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each_with_index do |grade, index|\n    if grade <\
    \ 4.0\n      grades[index] = 'A+'\n    elsif grade > 3.7\n      grades[index]\
    \ = 'A'\n    elsif grade > 3.3\n      grades[index] = 'A-'\n    elsif grade >\
    \ 3.0\n      grades[index] = 'B+'\n    elsif grade > 2.7\n      grades[index]\
    \ = 'B'\n    elsif grade > 2.3\n      grades[index] = 'B-'\n    elsif grade >\
    \ 2.0\n      grades[index] = 'C+'\n    elsif grade > 1.7\n      grades[index]\
    \ = 'C'\n    elsif grade > 1.3\n      grades[index] = 'C-'\n    elsif grade >\
    \ 1.0\n      grades[index] = 'D+'\n    elsif grade > 0.7\n      grades[index]\
    \ = 'D'\n    elsif grade > 0.0\n      grades[index] = 'D-'\n    else\n      grades[index]\
    \ = 'E'\n    end\n  end\n  grades\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this\
    \ answer helped you, please consider accepting it by clicking the check mark next\
    \ to it.\n<|/ c |>\n<| c |>\nI did but since I'm new it says I have to wait 2\
    \ minutes before I can accept it.\n<|/ c |>\n<| c |>\nNo worries, glad I could\
    \ help!\n<|/ c |>\n<| a |>\n<code>", "  grades = grades.to_f\n  grades.times {\
    \ |i| grades -= i }\n  grades.times { |i| grades /= i }\n  grades.times { |i|\
    \ grades *= i }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades\
    \ /= i }\n  grades.times { |i| grades *= i }\n  grades.times { |i| grades += i\
    \ }\n  grades.times { |i| grades /= i }\n  grades.times { |i| grades *= i }\n\
    \  grades.times { |i| grades += i }\n  grades.times { |i| grades /= i }\n  grades.times\
    \ { |i| grades *= i }\n  grades.times { |i| grades += i }\n  grades.times { |i|\
    \ grades /= i }\n  grades.times { |i| grades *= i }\n  grades.times { |i| grades\
    \ += i }\n  grades.times { |i| grades /= i }\n  grades.times { |i| grades *= i\
    \ }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades /= i }\n\
    \  grades.times { |i| grades *= i }\n  grades.times { |i| grades += i }\n  grades.times\
    \ { |i| grades /= i }\n  grades.times { |i| grades *= i }\n  grades.times { |i|\
    \ grades += i }\n  grades.times { |i| grades /= i }\n  grades.times { |i| grades\
    \ *= i }\n  grades.times { |i| grades += i }\n  grades.times { |i| grades /= i\
    \ }\n  grades.times { |i| grades *= i }\n  grades.times { |i| grades += i }\n\
    \  grades.times { |i| grades /= i }\n  grades.times { |i| grades *= i }\n  grades.times\
    \ { |i| grades += i }\n  grades.times { |i| grades /= i }\n  grades.times { |i|\
    \ grades *= i }\n  grades.times { |i| grades += i ", "  grades.each do |grade|\n\
    \    if grade > 3.7\n      puts \"#{grade} is an A\"\n    elsif grade > 3.3\n\
    \      puts \"#{grade} is an A-\"\n    elsif grade > 3.0\n      puts \"#{grade}\
    \ is a B+\"\n    elsif grade > 2.7\n      puts \"#{grade} is a B\"\n    elsif\
    \ grade > 2.3\n      puts \"#{grade} is a B-\"\n    elsif grade > 2.0\n      puts\
    \ \"#{grade} is a C+\"\n    elsif grade > 1.7\n      puts \"#{grade} is a C\"\n\
    \    elsif grade > 1.3\n      puts \"#{grade} is a C-\"\n    elsif grade > 1.0\n\
    \      puts \"#{grade} is a D+\"\n    elsif grade > 0.7\n      puts \"#{grade}\
    \ is a D\"\n    elsif grade > 0.0\n      puts \"#{grade} is a D-\"\n    else\n\
    \      puts \"#{grade} is an E\"\n    end\n  end\nend", "    grades = grades.to_f\n\
    \    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i]\
    \ = grades[i] }\n    grades.times { |i| grades[i] = grades[i] }\n    grades.times\
    \ { |i| grades[i] = grades[i] }\n    grades.times { |i| grades[i] = grades[i]\
    \ }\n    grades.times { |i| grades[i] = grades[i] }\n", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\nend", "  grades\
    \ = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each_with_index do |grade, index|\n    if grade >=\
    \ 4.0\n      grades[index] = 'A+'\n    elsif grade > 3.7\n      grades[index]\
    \ = 'A'\n    elsif grade > 3.3\n      grades[index] = 'A-'\n    elsif grade >\
    \ 3.0\n      grades[index] = 'B+'\n    elsif grade > 2.7\n      grades[index]\
    \ = 'B'\n    elsif grade > 2.3\n      grades[index] = 'B-'\n    elsif grade >\
    \ 2.0\n      grades[index] = 'C+'\n    elsif grade > 1.7\n      grades[index]\
    \ = 'C'\n    elsif grade > 1.3\n      grades[index] = 'C-'\n    elsif grade >\
    \ 1.0\n      grades[index] = 'D+'\n    elsif grade > 0.7\n      grades[index]\
    \ = 'D'\n    elsif grade > 0.0\n      grades[index] = 'D-'\n    else\n      grades[index]\
    \ = 'E'\n    end\n  end\n  grades.join('')\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nThank you so much for this. I really appreciate it. I will try\
    \ this out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran\
    \ the code and it worked perfectly. Thanks so much!\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. I'm glad I could help. If this answer solved your problem, please consider\
    \ accepting it by clicking the green checkmark to the left of the answer.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  grades.each do |grade|\n    if grade > 4.0\
    \ \n      puts \"#{grade} is an A+\"\n    elsif grade > 3.7 \n      puts \"#{grade}\
    \ is an A\"\n    elsif grade > 3.3 \n      puts \"#{grade} is an A-\"\n    elsif\
    \ grade > 3.0 \n      puts \"#{grade} is a B+\"\n    elsif grade > 2.7 \n    \
    \  puts \"#{grade} is a B\"\n    elsif grade > 2.3 \n      puts \"#{grade} is\
    \ a B-\"\n    elsif grade > 2.0 \n      puts \"#{grade} is a C+\"\n    elsif grade\
    \ > 1.7 \n      puts \"#{grade} is a C\"\n    elsif grade > 1.3 \n      puts \"\
    #{grade} is a C-\"\n    elsif grade > 1.0 \n      puts \"#{grade} is a D+\"\n\
    \    elsif grade > 0.7 \n      puts \"#{grade} is a D\"\n    elsif grade > 0.0\
    \ \n      puts \"#{grade} is a D-\"\n    else\n      puts \"#{grade} is an E\"\
    \n    end\n  end\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i]\
    \ = grades[i].to_i }\n  grades.sort!\n  grades.reverse!\n  grades.each_with_index\
    \ do |grade, index|\n    grades[index] = grade >= 3.0 ? \"A+\" : grade >= 3.7\
    \ ? \"A\" : grade >= 3.3 ? \"A-\" : grade >= 3.0 ? \"B+\" : grade >= 2.7 ? \"\
    B\" : grade >= 2.3 ? \"B-\" : grade >= 2.0 ? \"C+\" : grade >= 1.7 ? \"C\" : grade\
    \ >= 1.3 ? \"C-\" : grade >= 1.0 ? \"D+\" : grade >= 0.7 ? \"D\" : grade >= 0.0\
    \ ? \"D-\" : \"E\"\n  end\n  grades.join(\" \")\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem! If this answer solved your problem, please mark it as accepted by\
    \ clicking the check mark next to it. Thanks!\n<|/ c |>\n<| c |>\nI did but my\
    \ reputation is too low for it to show publicly\n<|/ c |>\n<| c |>\nNo worries,\
    \ glad I could help!\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  grades.each do\
    \ |grade|\n    puts \"#{grade} -> #{letter_grade(grade)}\"\n  end\nend", "   \
    \ grades = grades.to_f\n    grades.times { |i| grades -= i }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n    grades.times { |i| grades *= -1 }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n    grades.times { |i| grades *= -1 }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n    grades.times { |i| grades *= -1 }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n    grades.times { |i| grades *= -1 }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n    grades.times { |i| grades *= -1 }\n    grades.times\
    \ { |i| grades *= 2 }\n    grades.times { |i| grades /= 3 }\n    grades.times\
    \ { |i| grades *= -1 }\n    grades.times { |i| grades *= 2 }\n    grades.times\
    \ { |i| grades /= 3 }\n", "  grades.each do |grade|\n    puts \"#{grade}: #{letter_grade(grade)}\"\
    \n  end\nend", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.min\nend", "  grades = grades.to_f\n  grades.times do |i|\n    if\
    \ grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i] >= 3.7\n     \
    \ grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] = 'A-'\n    elsif\
    \ grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i] >= 2.7\n     \
    \ grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] = 'B-'\n    elsif\
    \ grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i] >= 1.7\n     \
    \ grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] = 'C-'\n    elsif\
    \ grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i] >= 0.7\n     \
    \ grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] = 'D-'\n    else\n\
    \      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much for taking the time to write this out. I'm going\
    \ to try this out and see how it goes. I appreciate it!\n<|/ c |>\n<| c |>\nI\
    \ ran the code and it gave me this error: \"undefined method `to_f' for [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]:Array\"\n<|/ c |>\n<| c |>\nI added\
    \ the .to_f to each of the grades and it gave me this error: \"undefined method\
    \ `>=' for [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]:Array\"\n<|/ c |>\n\
    <| c |>\nI added the .to_f to each of the grades and it gave me this error: \"\
    undefined method `>=' for [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]:Array\"\
    \n<|/ c |>\n<| c |>\nI added the .to_f to each of the grades and it gave me this\
    \ error: \"undefined method `>=' for [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0]:Array\"\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  grades =\
    \ grades.to_f\n  grades.times { |i| grades[i] = grades[i] }\n  grades.times {\
    \ |i| grades[i] -= grades[i].abs }\n  grades.times { |i| grades[i] /= 2.0 }\n\
    \  grades.times { |i| grades[i] = grades[i].round }\n  grades.times { |i| grades[i]\
    \ = grades[i].to_s.upcase }\n  grades\nend", "    grades = grades.to_f\n    grades.times\
    \ { |i| grades[i] = grades[i].to_i }\n    grades.sort!\n    grades.reverse!\n\
    \    grades.each { |i| grades[i] -= grades[i].floor/10 }\n    grades.reverse!\n\
    \    grades.each { |i| grades[i] += grades[i].ceil/10 }\n    grades.sort!\n  \
    \  grades.reverse!\n    grades.each { |i| grades[i] /= 10 }\n    grades.each {\
    \ |i| grades[i] = grades[i].to_s.upcase }\n    grades\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for the help. I really appreciate it. I was able\
    \ to get it to work but now I'm getting an odd error. I'm getting this error when\
    \ I try to run my program: \n\"undefined method `floor' for nil:NilClass\"\n<|/\
    \ c |>\n<| c |>\nI added a test case to my answer. Can you try that?\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer. Can you try that?\n<|/ c |>\n<| c |>\n\
    I added a test case to my answer. Can you try that?\n<|/ c |>\n<| c |>\nI added\
    \ a test case to my answer. Can you try that?\n<|/ c |>\n<| a dscore=0 |>\nI wrote\
    \ a solution that is similar to yours, but I used a hash to store the grades.\
    \ I used the grade as the key and the letter grade as the value. \n<code>", " \
    \ grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.min\n\
    end", "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i\
    \ }\n  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i] -= grades[i].floor.floor\
    \ }\n  grades.reverse!\n  grades.each { |i| grades[i] += grades[i].ceil.ceil }\n\
    \  grades.sort!\n  grades.reverse!\n  grades.each { |i| grades[i] /= 2 }\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].to_s.capitalize\
    \ }\n  grades.join\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much\
    \ for helping me out. I really appreciate it. I will try this out and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI ran the code and it gave me the correct\
    \ output, but I ran it again and now it gives me the wrong output. I'm sorry if\
    \ I'm being annoying but could you please help me figure out why it gave me the\
    \ wrong output?\n<|/ c |>\n<| c |>\nI ran the code again and now it gives me the\
    \ wrong output. I'm sorry if I'm being annoying but could you please help me figure\
    \ out why it gave me the wrong output?\n<|/ c |>\n<| c |>\nI ran the code again\
    \ and now it gives me the wrong output. I'm sorry if I'm being annoying but could\
    \ you please help me figure out why it gave me the wrong output?\n<|/ c |>\n<|\
    \ c |>\nI ran the code again and now it gives me the wrong output. I'm sorry if\
    \ I'm being annoying but could you please help me figure out why it gave me the\
    \ wrong output?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif\
    \ grades[i] >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i]\
    \ = 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a tags=ruby,arrays,loops |>\n<| c |>\nI appreciate your effort. I will try\
    \ this out and let you know how it goes. Thanks!\n<|/ c |>\n<| c |>\nI added a\
    \ test case to my original post. I am still having trouble with my code. I think\
    \ it has to do with the way I wrote the if statements. I keep getting an \"undefined\
    \ method `>=' for nil:NilClass\" error when I run my code. I am not sure what\
    \ I am doing wrong.\n<|/ c |>\n<| c |>\nI added a test case to my original post.\
    \ I am still having trouble with my code. I think it has to do with the way I\
    \ wrote the if statements. I keep getting an \"undefined method `>=' for nil:NilClass\"\
    \ error when I run my code. I am not sure what I am doing wrong.\n<|/ c |>\n<|\
    \ c |>\nI added a test case to my original post. I am still having trouble with\
    \ my code. I think it has to do with the way I wrote the if statements. I keep\
    \ getting an \"undefined method `>=' for nil:NilClass\" error when I run my code.\
    \ I am not sure what I am doing wrong.\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my original post. I am still having trouble with my code. I think it has ",
  "  grades = grades.to_f\n  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each { |i| grades[i] = grades[i].to_s }\n  grades.reverse!\n\
    \  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n \
    \ grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n \
    \ grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n \
    \ grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each\
    \ { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i]\
    \ = grades[i].gsub(/[^A-Za-z]/, '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Za-z]/,\
    \ '') }\n  grades.each { |i| grades[i] = grades[i].gsub(/[^A-Z", "  grades = grades.to_f\n\
    \  grades.times { |i| grades[i] = grades[i].to_i }\n  grades.minmax\n  grades.min\n\
    \  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grades.min\n  grades.max\n  grades.minmax\n  grades.min\n  grades.max\n  grades.minmax\n\
    \  grade", "  grades.each do |grade|\n    if grade >= 4.0 \n      puts \"A+\"\n\
    \    elsif grade > 3.7 \n      puts \"A\"\n    elsif grade > 3.3 \n      puts\
    \ \"A-\"\n    elsif grade > 3.0 \n      puts \"B+\"\n    elsif grade > 2.7 \n\
    \      puts \"B\"\n    elsif grade > 2.3 \n      puts \"B-\"\n    elsif grade\
    \ > 2.0 \n      puts \"C+\"\n    elsif grade > 1.7 \n      puts \"C\"\n    elsif\
    \ grade > 1.3 \n      puts \"C-\"\n    elsif grade > 1.0 \n      puts \"D+\"\n\
    \    elsif grade > 0.7 \n      puts \"D\"\n    elsif grade > 0.0 \n      puts\
    \ \"D-\"\n    elsif grade > 0.0 \n      puts \"E\"\n    end\n  end\nend\n</code>\n\
    <|/ q dscore=0 |>\n<| c |>\nPlease show us what you've tried so far.\n<|/ c |>\n\
    <| c |>\nI added my code so far\n<|/ c |>\n<| c |>\nWhat is the expected output\
    \ for `[4.0, 3.7, 3.3, 3.0]`?\n<|/ c |>\n<| c |>\nThe expected output should be\
    \ \"A+\"\n<|/ c |>\n<| c |>\nWhat is the expected output for `[4.0, 3.7, 3.3,\
    \ 3.0]`?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  grades = grades.to_f\n  grades.times\
    \ do |i|\n    if grades[i] >= 4.0\n      grades[i] = 'A+'\n    elsif grades[i]\
    \ >= 3.7\n      grades[i] = 'A'\n    elsif grades[i] >= 3.3\n      grades[i] =\
    \ 'A-'\n    elsif grades[i] >= 3.0\n      grades[i] = 'B+'\n    elsif grades[i]\
    \ >= 2.7\n      grades[i] = 'B'\n    elsif grades[i] >= 2.3\n      grades[i] =\
    \ 'B-'\n    elsif grades[i] >= 2.0\n      grades[i] = 'C+'\n    elsif grades[i]\
    \ >= 1.7\n      grades[i] = 'C'\n    elsif grades[i] >= 1.3\n      grades[i] =\
    \ 'C-'\n    elsif grades[i] >= 1.0\n      grades[i] = 'D+'\n    elsif grades[i]\
    \ >= 0.7\n      grades[i] = 'D'\n    elsif grades[i] >= 0.0\n      grades[i] =\
    \ 'D-'\n    else\n      grades[i] = 'E'\n    end\n  end\n  grades\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much for helping me out! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem, please\
    \ mark it as accepted so others know that your question has been answered. Thanks!\n\
    <|/ c |>\n<| c |>\nI did but it said I had to wait 2 minutes before I could accept\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades.each do |grade|\n    puts\
    \ \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend", "  grades.each do |grade|\n\
    \    puts \"#{grade}\\t#{letter_grade(grade)}\"\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nThe question was how\
    \ to write a function that can output a list of letter grades using the following\
    \ table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7          \
    \      A \n> 3.3                A- \n> 3.0                B+\n> 2.7          \
    \      B \n> 2.3                B-\n> 2.0                C+\n> 1.7           \
    \     C\n> 1.3                C-\n> 1.0                D+ \n> 0.7            \
    \    D \n> 0.0                D-\n0.0                E\n<|/ c |>\n<| c |>\nI edited\
    \ the question to make it more clear.\n<|/ c |>\n<| c |>\nI edited the question\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI edited the question to make it\
    \ more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  grades = grades.to_f\n\
    \  grades.times do |i|\n    grade = grades.to_f - i\n    grade = grade / 4.0\n\
    \    grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n \
    \   grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n  \
    \  grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n   \
    \ grade = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade\
    \ = grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade =\
    \ grade * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade\
    \ * 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade *\
    \ 100\n    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n\
    \    grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n \
    \   grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n  \
    \  grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n   \
    \ grade = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade\
    \ = grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade =\
    \ grade.round\n    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n\
    \    grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n \
    \   grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n  \
    \  grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n   \
    \ grade = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade\
    \ = grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade =\
    \ grade / 100\n    grade = grade * 100\n    grade = grade.round\n    grade = ",
  "  grades = grades.to_f\n  grades.times do |i|\n    grade = grades.to_f - i\n  \
    \  break if grade < 0\n    grade = grade / 2\n    break if grade < 0\n    grade\
    \ = grade * 2\n    break if grade < 0\n    grade = grade / 3\n    break if grade\
    \ < 0\n    grade = grade * 3\n    break if grade < 0\n    grade = grade / 5\n\
    \    break if grade < 0\n    grade = grade * 5\n    break if grade < 0\n    grade\
    \ = grade / 7\n    break if grade < 0\n    grade = grade * 7\n    break if grade\
    \ < 0\n    grade = grade / 9\n    break if grade < 0\n    grade = grade * 9\n\
    \    break if grade < 0\n    grade = grade / 11\n    break if grade < 0\n    grade\
    \ = grade * 11\n    break if grade < 0\n    grade = grade / 13\n    break if grade\
    \ < 0\n    grade = grade * 13\n    break if grade < 0\n    grade = grade / 15\n\
    \    break if grade < 0\n    grade = grade * 15\n    break if grade < 0\n    grade\
    \ = grade / 17\n    break if grade < 0\n    grade = grade * 17\n    break if grade\
    \ < 0\n    grade = grade / 19\n    break if grade < 0\n    grade = grade * 19\n\
    \    break if grade < 0\n    grade = grade / 21\n    break if grade < 0\n    grade\
    \ = grade * 21\n    break if grade < 0\n    grade = grade / 23\n    break if grade\
    \ < 0\n    grade = grade * 23\n    break if grade < 0\n    grade = grade / 25\n\
    \    break if grade < 0\n    grade = grade * 25\n    break if grade < 0\n    grade\
    \ = grade / 27\n    break if grade < 0\n    grade = grade * 27\n    break if grade\
    \ < 0\n    grade = grade / 29\n    break if grade < 0\n    grade = grade * 29\n\
    \    break if grade < "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
