name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level =\
    \ 0\n  paren_stack_max_level = 0\n  paren_stack_max_level_char = ''\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_", "  paren_stack = []\n  paren_stack.push paren_string\n\
    \  paren_stack_string = ''\n  while paren_stack.any?\n    paren_string = paren_stack.pop\n\
    \    paren_stack_string = paren_stack_string + paren_string\n    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.gsub('(', ' ( ')\n   \
    \ paren_string = paren_string.gsub(')', ' ) ')\n    paren_string = paren_string.gsub(',',\
    \ ' , ')\n    paren_string = paren_string.gsub(';', ' ; ')\n    paren_string =\
    \ paren_string.gsub('{', ' { ') # For nested parenthesis inside parenthesis\n\
    \    paren_string = paren_string.gsub('}', ' } ') # For nested parenthesis inside\
    \ parenthesis\n    paren_string = paren_string.gsub('(', ' ( ')\n    paren_string\
    \ = paren_string.gsub(')', ' ) ')\n    paren_string = paren_string.gsub(',', '\
    \ , ')\n    paren_string = paren_string.gsub(';', ' ; ')\n    paren_string = paren_string.gsub('{',\
    \ ' { ') # For nested parenthesis inside parenthesis\n    paren_string = paren_string.gsub('}',\
    \ ' } ') # For nested parenthesis inside parenthesis\n    paren_string = paren_string.gsub('(',\
    \ ' ( ')\n    paren_string = paren_string.gsub(')', ' ) ')\n    paren_string =\
    \ paren_string.gsub(',', ' , ')\n    paren_string = paren_string.gsub(';', ' ;\
    \ ')\n    paren_string = paren_string.gsub('{', ' { ') # For nested parenthesis\
    \ inside parenthesis\n    paren_string = paren_string.gsub('}', ' } ') # For nested\
    \ parenthesis inside parenthesis\n    paren_string = paren_string.gsub('(', '\
    \ ( ')\n    paren_string = paren_string.gsub(')', ' ) ')\n    paren_string = paren_string.gsub(',',\
    \ ' , ')\n    paren_string = paren_string.gsub(';', ' ; ')\n    paren_string =\
    \ paren_string.gsub('{', ' { ') # For nested parenthesis inside parenthesis\n\
    \    paren_string = paren_string.gsub('}', ' } ') # For nested parenthesis inside\
    \ parenthesis\n    paren_string = paren_string.gsub('(', ' ( ')\n    paren_string\
    \ = paren_string.gsub(')', ' ) ')\n    paren_string = paren_string.gsub(',', ' ",
  "  paren_string.scan(/[\\(\\)]+/) do |group|\n    group.scan(/[\\(\\)]+/) do |nested_group|\n\
    \      nested_group.scan(/[\\(\\)]+/) do |nested_nested_group|\n        nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_group|\n              \
    \  nested_nested_nested_nested_nested_group.scan(/[\\(\\)]+/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_group.scan(/[\\(\\)]+/)\
    \ do |nested_nested_nested_nested_nested_nested_group|\n                    nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_group|\n              \
    \        nested_nested_nested_nested_nested_group.scan(/[\\(\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n       \
    \                   nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n       \
    \                     nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n       \
    \                       nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n       \
    \                           nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_group|\n       \
    \                             nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/[\\\
    (\\)]+/) do |nested_nested_", "  paren_string.scan(/[()]/).each do |paren_char|\n\
    \    level = 0\n    paren_string.scan(/[()]/).each do |paren_char|\n      level\
    \ += 1\n      paren_string.scan(/[()]/).each do |paren_char|\n        level +=\
    \ 1\n      end\n    end\n    puts \"#{paren_char} has maximum level of nesting\
    \ #{level}\"\n  end\nend", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_stack << paren_string\n  while paren_stack.count > 0\n    paren_count\
    \ += 1\n    paren_string = paren_stack.pop\n    paren_level = 0\n    paren_string.split(\"\
    \ \").each do |paren_string|\n      if paren_string == \"(\"\n        paren_level\
    \ += 1\n      elsif paren_string == \")\"\n        paren_level -= 1\n      end\n\
    \      if paren_level == 0\n        paren_stack << paren_string\n      end\n \
    \   end\n  end\n  paren_count\nend", "  paren_stack = []\n  paren_count = 0\n\
    \  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/[^()]+/)\n \
    \ paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^",
  "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string = ''\n  paren_stack_string\
    \ = paren_string\n  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\\
    )/, '')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    (/, '(')\n  paren_stack_string.gsub!(/\\)/, ')')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    (/, '(')\n  paren_stack_string.gsub!(/\\)/, ')')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    (/, '(')\n  paren_stack_string.gsub!(/\\)/, ')')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    (/, '(')\n  paren_stack_string.gsub!(/\\)/, ')')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    (/, '(')\n  paren_stack_string.gsub!(/\\)/, ')')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n \
    \ paren_stack_max_level = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_length\
    \ = 0\n  paren_stack_max_level_char = \"\"\n  paren_stack_max_level_char_length\
    \ = 0\n", "  paren_string.split(\" \").map do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]/).map do |char|\n      char.count(\"(\") - char.count(\")\")\n    end.max\n\
    \  end\nend", "  paren_stack = []\n  paren_stack.push paren_string\n  max_level\
    \ = 0\n  while paren_stack.any?\n    paren_string = paren_stack.pop\n    level\
    \ = 0\n    paren_string.each_char {|c|\n      if c == '('\n        level += 1\n\
    \      elsif c == ')'\n        level -= 1\n      elsif level > max_level\n   \
    \     max_level = level\n      end\n    }\n  end\n  max_level\nend", "  paren_string.scan(/[\\\
    (\\)]+|\\([^\\(\\)]+\\)/).map { |x| x.to_i }\nend", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_level_string\
    \ = ''\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_",
  "  paren_stack = []\n  paren_count = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  ", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_count = 0\n  paren_nesting_levels\
    \ = []\n  paren_nesting_levels_index = 0\n  paren_nesting_levels_size = paren_nesting_levels_index\
    \ + 1\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_nesting_levels_size\
    \ < 10 else 10\n  paren_nesting_levels_size = paren_nesting_levels_size if paren_",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_char = paren_char.chop if paren_char.include?('(')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_char = paren_char.chop if paren_char.include?(')')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_char = paren_char.chop if paren_char.include?(')')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_char = paren_char.chop if paren_char.include?(')')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_char = paren_char.chop if paren_char.include?(')')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_char = paren_char.chop if paren_char.include?(')')\n    paren_char\
    \ = paren_char.chop if paren_char.include?(')')\n    paren_char = paren_char.chop\
    \ if paren_char.include?(')')\n    paren_char = paren_char.chop if paren_char.include?(')')\n\
    \    paren_", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter_string = ''\n  paren_stack_level_counter_max\
    \ = 0\n  paren_stack_level_counter_max_string = ''\n  paren_stack_level_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_string = ''\n  paren_stack_level_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_string = ''\n  paren_stack_level_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_string = ''\n  paren_stack_level_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_string = ''\n \
    \ paren_stack_level_counter_max_counter_max_counter_max_counter = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_",
  "  paren_string.scan(/[()]/).each do |paren_char|\n    if paren_char == '('\n  \
    \    parse_nested_parens(paren_string)\n    elsif paren_char == ')'\n      parse_nested_parens(paren_string)\n\
    \    elsif paren_char == ' '\n      parse_nested_parens(paren_string)\n    end\n\
    \  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    if paren_char\
    \ == '('\n      parse_nested_parens(paren_string)\n    elsif paren_char == ')'\n\
    \      parse_nested_parens(paren_string)\n    else\n      paren_string << paren_char\n\
    \    end\n  end\n  paren_string\nend", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n\
    \    paren_char = paren_char.downcase\n    level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n      level += 1\n      paren_char = paren_char.downcase\n\
    \    end\n    puts \"#{paren_char} has maximum level of nesting #{level}\"\n \
    \ end\nend", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level\
    \ = 0\n  paren_stack_string = \"\"\n  paren_stack_paren_count = 0\n  paren_stack_paren_level\
    \ = 0\n  paren_stack_paren_string = \"\"\n  paren_stack_paren_levels = []\n  paren_stack_paren_strings\
    \ = []\n  paren_stack_paren_levels_strings = []\n  paren_stack_paren_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings = []\n  paren_stack_paren_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings = []\n  paren_stack_paren_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings = []\n  paren_stack_paren_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings = []\n\
    \  paren_stack_paren_strings_strings_strings_strings_strings_strings = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_paren_string", "  paren_stack = []\n  paren_stack_size =\
    \ -1\n  paren_stack_level = 0\n  paren_stack_max_level = 0\n  paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_stack_size = 0\n  paren_stack_max_level_paren_stack_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_stack_max_level_paren_stack_size = 0\n \
    \ paren_stack_max_level_paren_stack_max_level_paren_stack_level = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_size\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_size\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_size\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack_max_level_paren_stack\
    \ = []\n  paren_stack_max_level_paren_", "  paren_stack = []\n  paren_level =\
    \ 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting =\
    \ 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting = 0\n  paren_level = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_", "  paren_stack = []\n  paren_stack_size = 0\n\
    \  paren_stack_level = 0\n  paren_stack_max_level = 0\n  paren_stack_max_level_size\
    \ = 0\n  paren_stack_max_level_char = ''\n  paren_stack_max_level_char_size =\
    \ 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_size = 0\n  paren_stack_max_level_char_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_", "  paren_string.scan(/[()]/) do |group|\n    if group.size >\
    \ 0\n      parse_nested_parens(group)\n    else\n      puts group\n    end\n \
    \ end\nend", "  paren_stack = []\n  paren_stack_count = 0\n  paren_stack_max =\
    \ 0\n  paren_stack_max_count = 0\n  paren_stack_max_index = 0\n  paren_stack_max_string\
    \ = \"\"\n  paren_stack_max_string_index = 0\n  paren_stack_max_string_length\
    \ = 0\n  paren_stack_max_string_length_index = 0\n  paren_stack_max_string_length_count\
    \ = 0\n  paren_stack_max_string_length_string = \"\"\n  paren_stack_max_string_length_string_index\
    \ = 0\n  paren_stack_max_string_length_string_count = 0\n  paren_stack_max_string_length_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_max_string_length_string_string_string = \"\"\n  paren_stack_max_string_length_string_string_index\
    \ = 0\n  paren_stack_max_string_length_string_string_count = 0\n  paren_stack_max_string_length_string_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_max_string_length_string_string_string = \"\"\n  paren_stack_max_string_length_string_string_index\
    \ = 0\n  paren_stack_max_string_length_string_string_count = 0\n  paren_stack_max_string_length_string_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_max_string_length_string_string_string = \"\"\n  paren_stack_max_string_length_string_string_index\
    \ = 0\n  paren_stack_max_string_length_string_string_count = 0\n  paren_stack_max_string_length_string_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_max_string_length_string_string_string = \"\"\n  paren_stack_max_string_length_string_string_index\
    \ = 0\n  paren_stack_max_string_length_string_string_count = 0\n  paren_stack_max_string_length_string_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_max_string_length_string_string_string = \"\"\n  paren_stack_max_string_length_string_string_index\
    \ = 0\n  paren_stack_max_string_length_string_string_count = 0\n  paren_stack_max_string_length_string_string_string\
    \ = \"\"\n  paren_stack_max_string_length_string_string_index = 0\n  paren_stack_max_string_length_string_string_count\
    \ = 0\n  paren_stack_", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_level\
    \ = 0\n  paren_stack_array = []\n  paren_stack_array.push([paren_string, 0])\n\
    \  paren_stack_level += 1\n  while paren_stack_size > 0\n    paren_string, paren_stack_size\
    \ = paren_stack_array.pop\n    paren_stack_level += 1\n    paren_stack = paren_stack.map\
    \ { |paren_string, paren_stack_size| parse_nested_parens(paren_string) }\n   \
    \ paren_stack_level -= 1\n    paren_stack_array.push([paren_string, paren_stack_size])\n\
    \  end\n  paren_stack\nend", "  paren_string.scan(/[()]/).each do |paren_char|\n\
    \    if paren_char == '('\n      parse_nested_parens(paren_string)\n    else\n\
    \      parse_nested_parens(paren_string.sub(paren_char, ''))\n    end\n  end\n\
    end", "  paren_string.scan(/[()]/) do |group|\n    group.scan(/[()]/) do |group|\n\
    \      group.scan(/[()]/) do |group|\n        group.scan(/[()]/) do |group|\n\
    \          group.scan(/[()]/) do |group|\n            group.scan(/[()]/) do |group|\n\
    \              group.scan(/[()]/) do |group|\n                group.scan(/[()]/)\
    \ do |group|\n                  group.scan(/[()]/) do |group|\n              \
    \      group.scan(/[()]/) do |group|\n                      group.scan(/[()]/)\
    \ do |group|\n                        group.scan(/[()]/) do |group|\n        \
    \                  group.scan(/[()]/) do |group|\n                           \
    \ group.scan(/[()]/) do |group|\n                              group.scan(/[()]/)\
    \ do |group|\n                                group.scan(/[()]/) do |group|\n\
    \                                  group.scan(/[()]/) do |group|\n           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                  group.scan(/[()]/) do |group|\n                           \
    \             group.scan(/[()]/) do |group|\n                                \
    \          group.scan(/[()]/) do |group|\n                                   \
    \         group.scan(/[()]/) do |group|\n                                    \
    \          group.scan(/[()]/) do |group|\n                                   \
    \             group.scan(/[()]/) do |group|\n                                \
    \                  group.scan(/[()]/) do |group|\n                           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                                  group.scan(/[()]/) do |group|\n           \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_string.scan(/[\\(\\)]+|\\([^\\\
    (\\)]+\\)/).map do |group|\n    group.count('(') - group.count(')')\n  end.reduce(:+)\n\
    end", "  paren_stack = []\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren", "  paren_stack = []\n  paren_stack_size = -1\n\
    \  paren_stack_string = \"\"\n  paren_stack_level = 0\n  paren_stack_level_string\
    \ = \"\"\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n \
    \ paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  ", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/[\\(\\\
    )]/) do |paren|\n    if paren_stack_size < 0\n      paren_stack_size = paren_stack_string.length\n\
    \    end\n    if paren_stack_size < paren.length\n      paren_stack_string = paren_stack_string.slice(0,paren.length)\n\
    \      paren_stack_string.concat(paren)\n    end\n    if paren_stack_size > paren.length\n\
    \      paren_stack_string = paren_stack_string.slice(0,paren_stack_size)\n   \
    \   paren_stack_string.concat(paren)\n    end\n  end\n  return paren_stack_string\n\
    end", "  paren_string.scan(/([^()]+|\\((?1)\\))/).each do |group|\n    group.scan(/([^()]+|\\\
    ((?1)\\))/).each do |group|\n      group.scan(/\\((?1)\\)/).each do |group|\n\
    \        group.scan(/\\((?1)\\)/).each do |group|\n          puts \"#{group}\"\
    \n        end\n      end\n    end\n  end\nend", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_depth = 0\n  paren_stack_string = ''\n  paren_stack_string_size\
    \ = 0\n  paren_stack_level = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_string_size = 0\n  paren_stack_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max = 0\n  paren_stack_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_string_size = 0\n  paren_stack_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max = 0\n  paren_stack_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_string_size = 0\n  paren_stack_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max = 0\n  paren_stack_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_string_size = 0\n\
    \  paren_stack_level_max_level_max_level_max_level_max_level = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level =\
    \ 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n",
  "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level = 0\n  paren_stack_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string = ''\n  paren_stack_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level = 0\n  paren_stack_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string = ''\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_size = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level_max = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_max\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_depth_index\
    \ = 0\n  paren_stack_max_depth_value = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index", "  paren_string.scan(/[()]/) do |group|\n\
    \    group.scan(/[()]/) do |group|\n      group.scan(/[()]/) do |group|\n    \
    \    group.scan(/[()]/) do |group|\n          group.scan(/[()]/) do |group|\n\
    \            group.scan(/[()]/) do |group|\n              group.scan(/[()]/) do\
    \ |group|\n                group.scan(/[()]/) do |group|\n                  group.scan(/[()]/)\
    \ do |group|\n                    group.scan(/[()]/) do |group|\n            \
    \          group.scan(/[()]/) do |group|\n                        group.scan(/[()]/)\
    \ do |group|\n                          group.scan(/[()]/) do |group|\n      \
    \                      group.scan(/[()]/) do |group|\n                       \
    \       group.scan(/[()]/) do |group|\n                                group.scan(/[()]/)\
    \ do |group|\n                                  group.scan(/[()]/) do |group|\n\
    \                                    group.scan(/[()]/) do |group|\n         \
    \                             group.scan(/[()]/) do |group|\n                \
    \                        group.scan(/[()]/) do |group|\n                     \
    \                     group.scan(/[()]/) do |group|\n                        \
    \                    group.scan(/[()]/) do |group|\n                         \
    \                     group.scan(/[()]/) do |group|\n                        \
    \                        group.scan(/[()]/) do |group|\n                     \
    \                             group.scan(/[()]/) do |group|\n                \
    \                                    group.scan(/[()]/) do |group|\n         \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                        group.scan(/[()]/) do\
    \ |group|\n                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_stack = []\n  paren_level =\
    \ 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_depth = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_string_size = 0\n  paren_stack_level = 0\n  paren_stack_level_max\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level = 0\n  paren_stack_level_max_level_max =\
    \ 0\n  paren_stack_level_max_level_max_string = ''\n  paren_stack_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level = 0\n  paren_stack_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_string = ''\n  paren_stack_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level = 0\n  paren_stack_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_string = ''\n  paren_stack_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level =\
    \ 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string_size\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max\
    \ = 0\n  paren_stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string\
    \ = ''\n  paren_", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter_string = ''\n  paren_stack_level_counter_max\
    \ = 0\n  paren_stack_level_counter_max_string = ''\n  paren_stack_level_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_string = ''\n  paren_stack_level_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_string = ''\n  paren_stack_level_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_string = ''\n  paren_stack_level_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_string = ''\n \
    \ paren_stack_level_counter_max_counter_max_counter_max_counter = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_",
  "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_level_max\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_index = 0\n  paren_stack_level_max_index", "  paren_stack\
    \ = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_string\n\
    \  while paren_stack.count > 0\n    paren_count += 1\n    paren_stack.pop\n  \
    \  paren_level += 1\n    paren_string = paren_stack.last\n    paren_stack << paren_string\n\
    \  end\n  paren_level\nend", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_max\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_value = 0\n  paren_stack_max_depth\
    \ = 0\n  paren_stack_max_depth_index = 0\n  paren_stack_max_depth_char = ''\n\
    \  paren_stack_max_depth_char_index = 0\n  paren_stack_max_depth_char_value =\
    \ 0\n  paren_stack_max_depth_char_depth = 0\n  paren_stack_max_depth_char_depth_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char = ''\n  paren_stack_max_depth_char_depth_char_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_value = 0\n  paren_stack_max_depth_char_depth_char_depth\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_index = 0\n  paren_stack_max_depth_char_depth_char_depth_char\
    \ = ''\n  paren_stack_max_depth_char_depth_char_depth_char_index = 0\n  paren_stack_max_depth_char_depth_char_depth_char_value\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char = ''\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_value = 0\n\
    \  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char\
    \ = ''\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_value\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_depth\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_depth_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_depth_char\
    \ = ''\n  paren_stack_max_depth_char_depth_char_depth_char_depth_char_depth_char_depth_char_index\
    \ = 0\n  paren_stack_max_depth_char_depth_char", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_count = 0\n  paren_level =\
    \ 0\n  paren_stack << paren_level\n  paren_stack << paren_count\n  paren_stack\
    \ << paren_string\n  while paren_stack.size > 0\n    paren_level = paren_stack.last\n\
    \    paren_count = paren_stack.last\n    paren_string = paren_stack.last\n   \
    \ paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n    paren_stack.pop\n\
    \    paren_", "  paren_stack = []\n  paren_stack.push paren_string\n  max_level\
    \ = 0\n  while paren_stack.any?\n    paren_string = paren_stack.pop\n    paren_string.scan(/[()]/)\
    \ do |char|\n      if char == '('\n        paren_stack.push paren_string\n   \
    \   elsif char == ')'\n        paren_stack.pop\n      else\n        paren_stack.push\
    \ char\n      end\n    end\n    level = 0\n    paren_string.scan(/[()]/) do |char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n    end\n    if level > max_level\n      max_level = level\n\
    \    end\n  end\n  max_level\nend", "  paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n          paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n            paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n       \
    \         paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n            \
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n               \
    \     paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                \
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n               \
    \         paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n       \
    \                     paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                   \
    \                             paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n           \
    \                                             paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_string.scan(/([^()]+|\\((?1)\\))/) do |group|\n\
    \    group.scan(/([^()]+|\\((?1)\\))/) do |level|\n      level.scan(/\\((?1)\\\
    )/) do |nested_level|\n        nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \          nested_level.scan(/\\((?1)\\)/) do |nested_level|\n            nested_level.scan(/\\\
    ((?1)\\)/) do |nested_level|\n              nested_level.scan(/\\((?1)\\)/) do\
    \ |nested_level|\n                nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                  nested_level.scan(/\\((?1)\\)/) do |nested_level|\n       \
    \             nested_level.scan(/\\((?1)\\)/) do |nested_level|\n            \
    \          nested_level.scan(/\\((?1)\\)/) do |nested_level|\n               \
    \         nested_level.scan(/\\((?1)\\)/) do |nested_level|\n                \
    \          nested_level.scan(/\\((?1)\\)/) do |nested_level|\n               \
    \             nested_level.scan(/\\((?1)\\)/) do |nested_level|\n            \
    \                  nested_level.scan(/\\((?1)\\)/) do |nested_level|\n       \
    \                         nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                  nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                    nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                      nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                        nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                          nested_level.scan(/\\((?1)\\)/) do\
    \ |nested_level|\n                                            nested_level.scan(/\\\
    ((?1)\\)/) do |nested_level|\n                                              nested_level.scan(/\\\
    ((?1)\\)/) do |nested_level|\n                                               \
    \ nested_level.scan(/\\((?1)\\)/) do |nested_level|\n                        \
    \                          nested_level.scan(/\\((?1)\\)/) do |nested_level|\n\
    \                                                    nested_level.scan(/\\((?1)\\\
    )/) do |nested_level|\n                                                      nested_level.scan(/\\\
    ((?1)\\)/) do |nested_level|\n                                               \
    \         nested_level.scan(/\\((?1)\\)/) do |nested_level|\n                \
    \                                          nested_level.scan(/\\((?1)\\)/) do\
    \ |nested_level|\n                                                           \
    \ nested_level.scan(/\\((?1)\\)/) ", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    if paren_char == '('\n      parse_nested_parens(paren_string)\n    elsif\
    \ paren_char == ')'\n      parse_nested_parens(paren_string)\n    else\n     \
    \ puts \"#{paren_char} is not an opening or closing parenthesis.\"\n    end\n\
    \  end\nend", "  paren_string.scan(/[()]/).each do |paren_char|\n    paren_char\
    \ = paren_char.dup\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!", " \
    \ paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_string\n\
    \  while paren_stack.count > 0\n    paren_count += 1\n    paren_stack.pop\n  \
    \  paren_level += 1\n    paren_string = paren_stack.last\n    paren_stack << paren_string\n\
    \  end\n  return paren_level\nend", "  paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \    paren_string.scan(/\\(/).each do |paren_string|\n      parse_nested_parens(paren_string)\n\
    \    end\n    paren_string.scan(/\\)/).each do |paren_string|\n      parse_nested_parens(paren_string)\n\
    \    end\n  end\nend", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren_level>\\d+)\\\
    )\\s*\\)\\s*\\)/) do |match|\n    levels = match[:paren_level].to_i\n    paren_level\
    \ = 0\n    paren_levels << levels\n    paren_levels << paren_level\n    paren_levels\
    \ << paren_level\n  end\n  paren_levels\nend", "  paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n          paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n            paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        \
    \        paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n              \
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                    \
    \  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                    \
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                  \
    \        paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n              \
    \              paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        \
    \                      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \ paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                     \
    \                           paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \         paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n             \
    \                                           paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_string.scan(/[()]/).map do |char|\n    char\
    \ == '(' ? 1 : -1\n  end.reduce(:+)\nend", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n \
    \ paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level\
    \ = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n \
    \ paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack\
    \ << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n\
    \  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count\
    \ += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n\
    \  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level\
    \ = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n \
    \ paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack\
    \ << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n\
    \  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count\
    \ += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n\
    \  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level\
    \ = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n \
    \ paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack\
    \ << paren_level\n  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n\
    \  paren_count += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count\
    \ += 1\n  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n\
    \  paren_level = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level\
    \ = 0\n  paren_stack << paren_level\n  paren_count += 1\n  paren_level = 0\n \
    \ paren_stack << paren_level\n  paren_count += 1\n  ", "  paren_string.scan(/[\\\
    (\\)]/).each do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/).each\
    \ do |paren|\n      level += 1\n    end\n    puts \"#{level} level of nesting\
    \ of parentheses detected for #{paren}\"\n  end\nend", "  paren_stack = []\n \
    \ paren_stack.push paren_string\n  max_level = 0\n  while paren_stack.any?\n \
    \   paren_string = paren_stack.pop\n    level = 0\n    paren_string.each_char.with_index\
    \ do |char, i|\n      if char == '('\n        level += 1\n      elsif char ==\
    \ ')'\n        level -= 1\n      end\n      if level > max_level\n        max_level\
    \ = level\n      end\n    end\n  end\n  max_level\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    level = 0\n    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n      level += 1\n      paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n        level += 1\n      end\n    end\n    level\n  end\nend",
  "  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n      paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n        paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n           \
    \ paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                  paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                            paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                   \
    \                             paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n           \
    \                                             paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = -1\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = -1\n  paren_nesting_level_stack = []\n  paren_",
  "  paren_string.split(\" \").map do |paren_string|\n    paren_string.scan(/[()]/).map\
    \ do |char|\n      char.count(\"(\") - char.count(\")\")\n    end.max\n  end\n\
    end", "  paren_stack = []\n  paren_count = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n", "  paren_string.scan(/[\\(\\)]/).each do |paren|\n    level = 0\n  \
    \  paren_string.scan(/[\\(\\)]/).each do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/).each do |paren|\n        level += 1\n      end\n    end\n    puts \"#{level}\
    \ levels of nesting for the paren #{paren}\"\n  end\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nI like your solution, but I feel like it would be more efficient\
    \ to just count the parentheses instead of looping through them all and counting\
    \ them.\n<|/ c |>\n<| c |>\nYes, you are right. I just wanted to show how it can\
    \ be done with regex. :)\n<|/ c |>\n<| c |>\nI like your solution, but I feel\
    \ like it would be more efficient to just count the parentheses instead of looping\
    \ through them all and counting them.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I feel like it would be more efficient to just count the parentheses instead\
    \ of looping through them all and counting them.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I feel like it would be more efficient to just count the parentheses\
    \ instead of looping through them all and counting them.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\nI like your solution, but I feel like it would be more efficient to just\
    \ count the parentheses instead of looping through them all and counting them.",
  "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string = ''\n  paren_stack_string\
    \ = paren_string\n  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\\
    )/, '')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index2 = 0\n  paren_nesting_level_max_index3\
    \ = 0\n  paren_nesting_level_max_index4 = 0\n  paren_nesting_level_max_index5\
    \ = 0\n  paren_nesting_level_max_index6 = 0\n  paren_nesting_level_max_index7\
    \ = 0\n  paren_nesting_level_max_index8 = 0\n  paren_nesting_level_max_index9\
    \ = 0\n  paren_nesting_level_max_index10 = 0\n  paren_nesting_level_max_index11\
    \ = 0\n  paren_nesting_level_max_index12 = 0\n  paren_nesting_level_max_index13\
    \ = 0\n  paren_nesting_level_max_index14 = 0\n  paren_nesting_level_max_index15\
    \ = 0\n  paren_nesting_level_max_index16 = 0\n  paren_nesting_level_max_index17\
    \ = 0\n  paren_nesting_level_max_index18 = 0\n  paren_nesting_level_max_index19\
    \ = 0\n  paren_nesting_level_max_index20 = 0\n  paren_nesting_level_max_index21\
    \ = 0\n  paren_nesting_level_max_index22 = 0\n  paren_nesting_level_max_index23\
    \ = 0\n  paren_nesting_level_max_index24 = 0\n  paren_nesting_level_max_index25\
    \ = 0\n  paren_nesting_level_max_index26 = 0\n  paren_nesting_level_max_index27\
    \ = 0\n  paren_nesting_level_max_index28 = 0\n  paren_nesting_level_max_index29\
    \ = 0\n  paren_nesting_level_max_index30 = 0\n  paren_nesting_level_max_index31\
    \ = 0\n  paren_nesting_level_max_index32 = 0\n  paren_nesting_level_max_index33\
    \ = 0\n  paren_nesting_level_max_index34 = 0\n  paren_nesting_level_max_index35\
    \ = 0\n  paren_nesting_level_max_index36 = 0\n  paren_nesting_level_max_index37\
    \ = 0\n  paren_nesting_level_max_index38 = 0\n  paren_nesting_level_max_index39\
    \ = 0\n  paren_nesting_level_max_index40 = 0\n  paren_nesting_level_max_index41\
    \ = 0\n  paren_nesting_level_max_index42 = 0\n  paren_nesting_level_max_index43\
    \ = 0\n  paren_nest", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level_string\
    \ = ''\n  paren_stack_strings = []\n  paren_stack_level_strings = []\n  paren_stack_string\
    \ = ''\n  paren_stack_level_string = ''\n  paren_stack_strings = []\n  paren_stack_level_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level_string\
    \ = ''\n  paren_stack_strings = []\n  paren_stack_level_strings = []\n  paren_stack_string\
    \ = ''\n  paren_stack_level_string = ''\n  paren_stack_strings = []\n  paren_stack_level_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level_string\
    \ = ''\n  paren_stack_strings = []\n  paren_stack_level_strings = []\n  paren_stack_string\
    \ = ''\n  paren_stack_level_string = ''\n  paren_stack_strings = []\n  paren_stack_level_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level_string\
    \ = ''\n  paren_stack_strings = []\n  paren_stack_level_strings = []\n  paren_stack_string\
    \ = ''\n  paren_stack_level_string = ''\n  paren_stack_strings = []\n  paren_stack_level_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level_string\
    \ = ''\n  paren_stack_strings = []\n  paren_stack_level_strings = []\n  paren_stack_string\
    \ = ''\n  paren_stack_level_string = ''\n  paren_stack_strings = []\n  paren_stack_level_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_strings\
    \ = []\n  paren_stack_level_strings = []\n  paren_stack_string = ''\n  paren_stack_level",
  "  paren_string.scan(/[()]/) do |group|\n    group.scan(/[()]/) do |group|\n   \
    \   group.scan(/[()]/) do |group|\n        group.scan(/[()]/) do |group|\n   \
    \       group.scan(/[()]/) do |group|\n            group.scan(/[()]/) do |group|\n\
    \              group.scan(/[()]/) do |group|\n                group.scan(/[()]/)\
    \ do |group|\n                  group.scan(/[()]/) do |group|\n              \
    \      group.scan(/[()]/) do |group|\n                      group.scan(/[()]/)\
    \ do |group|\n                        group.scan(/[()]/) do |group|\n        \
    \                  group.scan(/[()]/) do |group|\n                           \
    \ group.scan(/[()]/) do |group|\n                              group.scan(/[()]/)\
    \ do |group|\n                                group.scan(/[()]/) do |group|\n\
    \                                  group.scan(/[()]/) do |group|\n           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                  group.scan(/[()]/) do |group|\n                           \
    \             group.scan(/[()]/) do |group|\n                                \
    \          group.scan(/[()]/) do |group|\n                                   \
    \         group.scan(/[()]/) do |group|\n                                    \
    \          group.scan(/[()]/) do |group|\n                                   \
    \             group.scan(/[()]/) do |group|\n                                \
    \                  group.scan(/[()]/) do |group|\n                           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                                  group.scan(/[()]/) do |group|\n           \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_stack = []\n  paren_count =\
    \ 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_level_string\
    \ = ''\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_count = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_count = 0\n\
    \  paren_stack_level_max_string = ''\n  paren_", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_level_max\
    \ = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string = ''\n\
    \  paren_stack_level_max_string_len = 0\n  paren_stack_level_max_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string = ''\n  paren_stack_level_max_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_index = 0\n  paren_stack_level_max_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len = 0\n  paren_stack_level_max_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string = ''\n\
    \  paren_stack_level_max_string_len_string_len_string_len_string_len = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len",
  "  paren_string.scan(/[()]/) do |group|\n    group.scan(/[()]/) do |group|\n   \
    \   group.scan(/[()]/) do |group|\n        group.scan(/[()]/) do |group|\n   \
    \       group.scan(/[()]/) do |group|\n            group.scan(/[()]/) do |group|\n\
    \              group.scan(/[()]/) do |group|\n                group.scan(/[()]/)\
    \ do |group|\n                  group.scan(/[()]/) do |group|\n              \
    \      group.scan(/[()]/) do |group|\n                      group.scan(/[()]/)\
    \ do |group|\n                        group.scan(/[()]/) do |group|\n        \
    \                  group.scan(/[()]/) do |group|\n                           \
    \ group.scan(/[()]/) do |group|\n                              group.scan(/[()]/)\
    \ do |group|\n                                group.scan(/[()]/) do |group|\n\
    \                                  group.scan(/[()]/) do |group|\n           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                  group.scan(/[()]/) do |group|\n                           \
    \             group.scan(/[()]/) do |group|\n                                \
    \          group.scan(/[()]/) do |group|\n                                   \
    \         group.scan(/[()]/) do |group|\n                                    \
    \          group.scan(/[()]/) do |group|\n                                   \
    \             group.scan(/[()]/) do |group|\n                                \
    \                  group.scan(/[()]/) do |group|\n                           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                                  group.scan(/[()]/) do |group|\n           \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_string.scan(/[()]/).each do\
    \ |paren_char|\n    paren_char = paren_char.downcase\n    level = 0\n    paren_string.scan(/[()]/).each\
    \ do |paren_char|\n      level += 1\n      paren_string.scan(/[()]/).each do |paren_char|\n\
    \        level += 1\n      end\n    end\n    puts \"#{paren_char} has maximum\
    \ level of nesting #{level}\"\n  end\nend", "  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 4\n  paren_nesting_level_max_index = paren_nesting_level_max - 1\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n", "  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n    paren_string.scan(/[()]/).each do |paren_string|\n  \
    \    paren_string.scan(/[()]/).each do |paren_string|\n        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n          paren_string.scan(/[()]/).each do |paren_string|\n\
    \            paren_string.scan(/[()]/).each do |paren_string|\n              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                paren_string.scan(/[()]/).each do |paren_string|\n\
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).each do |paren_string|\n                        \
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                                              ", "  paren_stack\
    \ = []\n  paren_stack.push paren_string\n  max_level = 0\n  while paren_stack.any?\n\
    \    paren_string = paren_stack.pop\n    level = 0\n    paren_string.each_char\
    \ {|c|\n      if c == '('\n        level += 1\n      elsif c == ')'\n        level\
    \ -= 1\n      elsif level > max_level\n        max_level = level\n      end\n\
    \    }\n  end\n  max_level\nend", "  paren_stack = []\n  paren_stack_size = 0\n\
    \  paren_stack_max = 0\n  paren_stack_max_index = 0\n  paren_stack_max_depth =\
    \ 0\n  paren_stack_max_depth_index = 0\n  paren_stack_max_depth_value = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index", "  paren_string.scan(/[()]/).each\
    \ do |paren|\n    levels = paren_string.scan(paren).size\n    puts \"Maximum levels\
    \ of nesting are #{levels}\"\n  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n\
    <| c |>\nThis doesn't work for nested parentheses such as `((()))`, which has\
    \ three levels of nesting.\n<|/ c |>\n<| c |>\nI updated my answer to include\
    \ a solution for nested parentheses.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_level = paren_char.count('(') - paren_char.count(')')\n    if paren_level\
    \ > max_paren_level\n      max_paren_level = paren_level\n    end\n  end\n  max_paren_level\n\
    end", "  paren_stack = []\n  paren_count = 0\n  paren_stack_string = ''\n  paren_stack_string\
    \ = paren_string\n  paren_stack_string.scan(/[\\(\\)]/) do |char|\n    if char\
    \ == '('\n      paren_count += 1\n    elsif char == ')'\n      paren_count -=\
    \ 1\n    elsif paren_count == 0\n      paren_stack.push(char)\n    end\n  end\n\
    \  paren_stack_string\nend", "  paren_stack = []\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren", "  paren_string.scan(/[^()]+/).map\
    \ { |s| s.gsub(/[\\(\\)]/, '').length }.max\nend", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count\
    \ = 0\n  paren_nesting_paren_count = 0\n  paren_nesting_paren_level = 0\n  paren_nesting_paren_nesting\
    \ = 0\n  paren_nesting_paren_nesting_level = 0\n  paren_nesting_paren_nesting_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_count = 0\n  paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting = 0\n  paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_count = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_level = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0\n \
    \ paren_nesting_paren_nesting_paren_nesting_paren_nesting_count = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level =\
    \ 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting =\
    \ 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_count\
    \ = 0\n  paren_nesting_paren_nest", "  paren_stack = []\n  paren_count = 0\n \
    \ paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  ", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_stack << paren_string\n  while paren_stack.count\
    \ > 0\n    paren_string =\n      paren_stack.pop.strip\n    if paren_string ==\
    \ '('\n      paren_count += 1\n      paren_level += 1\n    elsif paren_string\
    \ == ')'\n      paren_count -= 1\n      paren_level -= 1\n      break if paren_count\
    \ < 0\n    end\n    paren_stack << paren_string\n  end\n  return paren_level\n\
    end", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string = ''\n\
    \  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  ", "  paren_stack = []\n  paren_stack_size\
    \ = 0\n  paren_stack_max = 0\n  paren_stack_max_index = 0\n  paren_stack_max_size\
    \ = 0\n  paren_stack_max_string = \"\"\n  paren_stack_max_string_size = 0\n  paren_stack_max_string_index\
    \ = 0\n  paren_stack_max_string_char = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_size = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  paren_stack_max_string_char_index\
    \ = 0\n  paren_stack_max_string_char_index = 0\n  ", "  paren_string.scan(/[()]/).each\
    \ do |group|\n    group.scan(/[()]/).each do |group|\n      group.scan(/[()]/).each\
    \ do |group|\n        group.scan(/[()]/).each do |group|\n          group.scan(/[()]/).each\
    \ do |group|\n            group.scan(/[()]/).each do |group|\n              group.scan(/[()]/).each\
    \ do |group|\n                group.scan(/[()]/).each do |group|\n           \
    \       group.scan(/[()]/).each do |group|\n                    group.scan(/[()]/).each\
    \ do |group|\n                      group.scan(/[()]/).each do |group|\n     \
    \                   group.scan(/[()]/).each do |group|\n                     \
    \     group.scan(/[()]/).each do |group|\n                            group.scan(/[()]/).each\
    \ do |group|\n                              group.scan(/[()]/).each do |group|\n\
    \                                group.scan(/[()]/).each do |group|\n        \
    \                          group.scan(/[()]/).each do |group|\n              \
    \                      group.scan(/[()]/).each do |group|\n                  \
    \                    group.scan(/[()]/).each do |group|\n                    \
    \                    group.scan(/[()]/).each do |group|\n                    \
    \                      group.scan(/[()]/).each do |group|\n                  \
    \                          group.scan(/[()]/).each do |group|\n              \
    \                                group.scan(/[()]/).each do |group|\n        \
    \                                        group.scan(/[()]/).each do |group|\n\
    \                                                  group.scan(/[()]/).each do\
    \ |group|\n                                                    group.scan(/[()]/).each\
    \ do |group|\n                                                      group.scan(/[()]/).each\
    \ do |group|\n                                                        group.scan(/[()]/).each\
    \ do |group|\n                                                          group.scan(/[()]/).each\
    \ do |group|\n                                                            group.scan(/[()]/).each\
    \ do |group|\n                                                              group.scan(/[()]/).each\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/).each do |group|\n                                       \
    \                           group.scan(/[()]/).each do |group|\n             \
    \                                                       group.scan(/[()]/).each\
    \ do |group|\n                                                               \
    \       group.scan(/[()]/).each do |group|\n                                 \
    \                                       group.scan(/[()]/).each do |group|\n \
    \                                                                         group.",
  "  paren_string.scan(/[()]/).each do |paren_group|\n    paren_group.scan(/[()]/).each\
    \ do |paren_group2|\n      puts \"#{paren_group} #{paren_group2}\"\n    end\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like your solution,\
    \ however it fails for `((()))` which has three levels of nesting.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for any number of nested parentheses.\n\
    <|/ c |>\n<| c |>\nI like your solution, however it fails for `((()))` which has\
    \ three levels of nesting.\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ any number of nested parentheses.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a recursive\
    \ solution that works with any number of nested parentheses:\n<code>", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack[0] = paren_nesting_level\n  paren_nesting_level_stack.each\
    \ do |level|\n    level += 1\n    paren_nesting_level_stack.push(level)\n    paren_nesting_level\
    \ = level\n    paren_stack.each do |paren|\n      paren_nesting_level_stack.each\
    \ do |level|\n        level += 1\n        paren_nesting_level_stack.push(level)\n\
    \        paren_nesting_level = level\n      end\n    end\n  end\n  paren_nesting_level_stack.pop\n\
    \  paren_nesting_level_stack.each do |level|\n    level += 1\n    paren_nesting_level_stack.push(level)\n\
    \    paren_nesting_level = level\n    paren_stack.each do |paren|\n      paren_nesting_level_stack.each\
    \ do |level|\n        level += 1\n        paren_nesting_level_stack.push(level)\n\
    \        paren_nesting_level = level\n      end\n    end\n  end\n  paren_nesting_level_stack.pop\n\
    \  paren_nesting_level_stack.each do |level|\n    level += 1\n    paren_nesting_level_stack.push(level)\n\
    \    paren_nesting_level = level\n    paren_stack.each do |paren|\n      paren_nesting_level_stack.each\
    \ do |level|\n        level += 1\n        paren_nesting_level_stack.push(level)\n\
    \        paren_nesting_level = level\n      end\n    end\n  end\n  paren_nesting_level_stack.pop\n\
    \  paren_nesting_level_stack.each do |level|\n    level += 1\n    paren_nesting_level_stack.push(level)\n\
    \    paren_nesting_level = level\n    paren_stack.each do |paren|\n      paren_nesting_level_stack.each\
    \ do |level|\n        level += 1\n        paren_nesting_level_stack.push(level)\n\
    \        paren_nesting_level = level\n      end\n    end\n  end\n  paren_nesting_level_stack.pop\n\
    \  paren_nesting_level_stack.each do |level|\n    level += 1\n    paren_nesting_level_stack.push(level)\n\
    \    paren_nesting_level = level\n    paren_stack.each do |paren|\n      paren_nesting_level_stack.each\
    \ do |level|\n        level += 1\n        paren_nesting_level_stack.push(level)\n\
    \        paren_nesting_level = level\n      end\n    end\n  end\n  paren_nesting_level_",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.first\
    \ && group.last\n      parse_nested_parens(group.last)\n    else\n      puts group.first\n\
    \    end\n  end\nend", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_max\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_index = 0\n\
    \  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_index2 = 0\n\
    \  paren_stack_level_max_string_index2 = 0\n  paren_stack_level_max_index3 = 0\n\
    \  paren_stack_level_max_string_index3 = 0\n  paren_stack_level_max_index4 = 0\n\
    \  paren_stack_level_max_string_index4 = 0\n  paren_stack_level_max_index5 = 0\n\
    \  paren_stack_level_max_string_index5 = 0\n  paren_stack_level_max_index6 = 0\n\
    \  paren_stack_level_max_string_index6 = 0\n  paren_stack_level_max_index7 = 0\n\
    \  paren_stack_level_max_string_index7 = 0\n  paren_stack_level_max_index8 = 0\n\
    \  paren_stack_level_max_string_index8 = 0\n  paren_stack_level_max_index9 = 0\n\
    \  paren_stack_level_max_string_index9 = 0\n  paren_stack_level_max_index10 =\
    \ 0\n  paren_stack_level_max_string_index10 = 0\n  paren_stack_level_max_index11\
    \ = 0\n  paren_stack_level_max_string_index11 = 0\n  paren_stack_level_max_index12\
    \ = 0\n  paren_stack_level_max_string_index12 = 0\n  paren_stack_level_max_index13\
    \ = 0\n  paren_stack_level_max_string_index13 = 0\n  paren_stack_level_max_index14\
    \ = 0\n  paren_stack_level_max_string_index14 = 0\n  paren_stack_level_max_index15\
    \ = 0\n  paren_stack_level_max_string_index15 = 0\n  paren_stack_level_max_index16\
    \ = 0\n  paren_stack_level_max_string_index16 = 0\n  paren_stack_level_max_index17\
    \ = 0\n  paren_stack_level_max_string_index17 = 0\n  paren_stack_level_max_index18\
    \ = 0\n  paren_stack_level_max_string_index18 = 0\n  paren_stack_level_max_index19\
    \ = 0\n  paren_stack_level_max_string_index19 = 0\n  paren_stack_level_max_index20\
    \ = 0\n  paren_stack_level_max_string_index20 = 0\n  paren_stack_level_max_index21\
    \ = 0\n  paren_stack_level_max_string_index21 = 0\n  paren_stack_level_max_index22\
    \ = 0\n  paren_stack_level_max_string_index22 = 0\n", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)", " \
    \ paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.gsub!(/\\s+/,\
    \ ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '(')\n  paren_stack_string.gsub!(/\\\
    ]/, ')')\n  paren_stack_string.gsub!(/\\{/, '(')\n  paren_stack_string.gsub!(/\\\
    }/, ')')\n  paren_stack_string.gsub!(/\\{/, '(')\n  paren_stack_string.gsub!(/\\\
    }/, ')')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '(')\n  paren_stack_string.gsub!(/\\\
    ]/, ')')\n  paren_stack_string.gsub!(/\\{/, '(')\n  paren_stack_string.gsub!(/\\\
    }/, ')')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '(')\n  paren_stack_string.gsub!(/\\\
    ]/, ')')\n  paren_stack_string.gsub!(/\\{/, '(')\n  paren_stack_string.gsub!(/\\\
    }/, ')')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '(')\n  paren_stack_string.gsub!(/\\\
    ]/, ')')\n  paren_stack_string.gsub!(/\\{/, '(')\n  paren_stack_string.gsub!(/\\\
    }/, ')')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '(')\n  paren_stack_string.gsub!(/\\\
    ]/, ')')\n  paren_", "  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n        paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n         \
    \     paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                      paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                        paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/).each do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                   \
    \                             paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n           \
    \                                             paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_stack = []\n  paren_count = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/[\\(\\\
    )]/) do |char|\n    if char == '('\n      paren_count += 1\n      paren_stack\
    \ << paren_count\n      paren_stack_string << char\n    elsif char == ')'\n  \
    \    paren_count -= 1\n      paren_stack.pop if paren_stack.size > 0\n      paren_stack_string\
    \ << char\n    end\n  end\n  paren_stack_string\nend", "  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n    paren_string.scan(/[()]/).each do |paren_string|\n  \
    \    paren_string.scan(/[()]/).each do |paren_string|\n        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n          paren_string.scan(/[()]/).each do |paren_string|\n\
    \            paren_string.scan(/[()]/).each do |paren_string|\n              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                paren_string.scan(/[()]/).each do |paren_string|\n\
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).each do |paren_string|\n                        \
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                                              ", "  paren_string.split(\"\
    \ \").inject(0) do |max_level, paren_group|\n    level = 0\n    paren_group.split(\"\
    (\").each do |paren_level|\n      level += 1\n      max_level = level if paren_level\
    \ == paren_level\n    end\n    max_level\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_string|\n    paren_string.gsub(/\\(/, \"(\").gsub(/\\)/, \"\
    )\").gsub(/\\{/, \"{\").gsub(/\\}/, \"}\")\n  end\nend", "  paren_string.scan(/[()]/)\
    \ do |group|\n    group.scan(/[()]/) do |group|\n      group.scan(/[()]/) do |group|\n\
    \        group.scan(/[()]/) do |group|\n          group.scan(/[()]/) do |group|\n\
    \            group.scan(/[()]/) do |group|\n              group.scan(/[()]/) do\
    \ |group|\n                group.scan(/[()]/) do |group|\n                  group.scan(/[()]/)\
    \ do |group|\n                    group.scan(/[()]/) do |group|\n            \
    \          group.scan(/[()]/) do |group|\n                        group.scan(/[()]/)\
    \ do |group|\n                          group.scan(/[()]/) do |group|\n      \
    \                      group.scan(/[()]/) do |group|\n                       \
    \       group.scan(/[()]/) do |group|\n                                group.scan(/[()]/)\
    \ do |group|\n                                  group.scan(/[()]/) do |group|\n\
    \                                    group.scan(/[()]/) do |group|\n         \
    \                             group.scan(/[()]/) do |group|\n                \
    \                        group.scan(/[()]/) do |group|\n                     \
    \                     group.scan(/[()]/) do |group|\n                        \
    \                    group.scan(/[()]/) do |group|\n                         \
    \                     group.scan(/[()]/) do |group|\n                        \
    \                        group.scan(/[()]/) do |group|\n                     \
    \                             group.scan(/[()]/) do |group|\n                \
    \                                    group.scan(/[()]/) do |group|\n         \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                        group.scan(/[()]/) do\
    \ |group|\n                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_stack = []\n  paren_count =\
    \ 0\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  ", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_max = 0\n  paren_stack_max_index = 0\n  paren_stack_max_depth\
    \ = 0\n  paren_stack_max_depth_index = 0\n  paren_stack_max_depth_value = 0\n\
    \  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_char = ''\n\
    \  paren_stack_max_depth_char_index = 0\n  paren_stack_max_depth_char_value =\
    \ 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  paren_stack_max_depth_char_value_index = 0\n  paren_stack_max_depth_char_value_index\
    \ = 0\n  ", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack\
    \ << paren_string\n  while paren_stack.count > 0\n    paren_count += 1\n    paren_string\
    \ = paren_stack.pop\n    if paren_string == \"(\"\n      paren_level += 1\n  \
    \  elsif paren_string == \")\"\n      paren_level -= 1\n    end\n    paren_stack\
    \ << paren_string\n  end\n  return paren_count\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n          nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n            nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n              nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                  nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n                    nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                            nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                              nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                  nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                    nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_stack = []\n  paren_level = 0\n  paren_nesting =\
    \ 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index2 = 0\n  paren_nesting_level_max_index3\
    \ = 0\n  paren_nesting_level_max_index4 = 0\n  paren_nesting_level_max_index5\
    \ = 0\n  paren_nesting_level_max_index6 = 0\n  paren_nesting_level_max_index7\
    \ = 0\n  paren_nesting_level_max_index8 = 0\n  paren_nesting_level_max_index9\
    \ = 0\n  paren_nesting_level_max_index10 = 0\n  paren_nesting_level_max_index11\
    \ = 0\n  paren_nesting_level_max_index12 = 0\n  paren_nesting_level_max_index13\
    \ = 0\n  paren_nesting_level_max_index14 = 0\n  paren_nesting_level_max_index15\
    \ = 0\n  paren_nesting_level_max_index16 = 0\n  paren_nesting_level_max_index17\
    \ = 0\n  paren_nesting_level_max_index18 = 0\n  paren_nesting_level_max_index19\
    \ = 0\n  paren_nesting_level_max_index20 = 0\n  paren_nesting_level_max_index21\
    \ = 0\n  paren_nesting_level_max_index22 = 0\n  paren_nesting_level_max_index23\
    \ = 0\n  paren_nesting_level_max_index24 = 0\n  paren_nesting_level_max_index25\
    \ = 0\n  paren_nesting_level_max_index26 = 0\n  paren_nesting_level_max_index27\
    \ = 0\n  paren_nesting_level_max_index28 = 0\n  paren_nesting_level_max_index29\
    \ = 0\n  paren_nesting_level_max_index30 = 0\n  paren_nesting_level_max_index31\
    \ = 0\n  paren_nesting_level_max_index32 = 0\n  paren_nesting_level_max_index33\
    \ = 0\n  paren_nesting_level_max_index34 = 0\n  paren_nesting_level_max_index35\
    \ = 0\n  paren_nesting_level_max_index36 = 0\n  paren_nesting_level_max_index37\
    \ = 0\n  paren_nesting_level_max_index38 = 0\n  paren_nesting_level_max_index39\
    \ = 0\n  paren_nesting_level_max_index40 = 0\n  paren_nesting_level_max_index41\
    \ = 0\n  paren_nesting_level_max_index42 = 0\n  paren_nesting_level_max_index43\
    \ = 0\n  paren_nest", "  paren_string.scan(/[()]/).each do |paren_char|\n    if\
    \ paren_char == '('\n      parse_nested_parens(paren_string)\n    else\n     \
    \ break\n    end\n  end\n  paren_string.scan(/[()]/).count\nend", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_stack_string = \"\"\n  paren_stack_string =\
    \ paren_string\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack.push(0)\n \
    \ paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n\
    \  paren_stack.push(paren_stack_string)\n  paren_stack.push(paren_stack_string)\n",
  "  paren_stack = []\n  paren_count = 0\n  paren_stack_string = ''\n  paren_stack_string\
    \ = paren_string\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_", "  paren_string.scan(/[\\(\\)]/).each do |paren_char|\n\
    \    paren_char = paren_char.strip\n    if paren_char.empty?\n      return\n \
    \   end\n    paren_char.scan(/[\\(\\)]/).each do |paren_char|\n      paren_char\
    \ = paren_char.strip\n      if paren_char.empty?\n        return\n      end\n\
    \      paren_char.scan(/[\\(\\)]/).each do |paren_char|\n        paren_char =\
    \ paren_char.strip\n        if paren_char.empty?\n          return\n        end\n\
    \        paren_char.scan(/[\\(\\)]/).each do |paren_char|\n          paren_char\
    \ = paren_char.strip\n          if paren_char.empty?\n            return\n   \
    \       end\n          paren_char.scan(/[\\(\\)]/).each do |paren_char|\n    \
    \        paren_char = paren_char.strip\n            if paren_char.empty?\n   \
    \           return\n            end\n            paren_char.scan(/[\\(\\)]/).each\
    \ do |paren_char|\n              paren_char = paren_char.strip\n             \
    \ if paren_char.empty?\n                return\n              end\n          \
    \    paren_char.scan(/[\\(\\)]/).each do |paren_char|\n                paren_char\
    \ = paren_char.strip\n                if paren_char.empty?\n                 \
    \ return\n                end\n                paren_char.scan(/[\\(\\)]/).each\
    \ do |paren_char|\n                  paren_char = paren_char.strip\n         \
    \         if paren_char.empty?\n                    return\n                 \
    \ end\n                  paren_char.scan(/[\\(\\)]/).each do |paren_char|\n  \
    \                  paren_char = paren_char.strip\n                    if paren_char.empty?\n\
    \                      return\n                    end\n                    paren_char.scan(/[\\\
    (\\)]/).each do |paren_char|\n                      paren_char = paren_char.strip\n\
    \                      if paren_char.empty?\n                        return\n\
    \                      end\n                      paren_char.scan(/[\\(\\)]/).each\
    \ do |paren_char|\n                        paren_char = paren_char.strip\n   \
    \                     if paren_char.empty?\n                          return\n\
    \                        end\n                        paren_char.scan(/[\\(\\\
    )]/).each do |paren_char|\n                          paren_char = paren_char.strip\n\
    \                          if ", "  paren_stack = []\n  paren_stack_size = 0\n\
    \  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_max_level =\
    \ 0\n  paren_stack_max_level_string = ''\n  paren_stack_max_level_level = 0\n\
    \  paren_stack_max_level_max_level = 0\n  paren_stack_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level_level = 0\n  paren_stack_max_level_max_level_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level_level = 0\n  paren_stack_max_level_max_level_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level_level = 0\n  paren_stack_max_level_max_level_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n  paren_stack_max_level_max_level_level_level = 0\n  paren_stack_max_level_max_level_level_string\
    \ = ''\n", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack\
    \ << paren_string\n  while paren_stack.count > 0\n    paren_string =\n      paren_stack.pop.dup\n\
    \    paren_count += 1\n    paren_level = 0\n    paren_string.scan(/[()]/) do |char|\n\
    \      if char == '('\n        paren_level += 1\n      elsif char == ')'\n   \
    \     paren_level -= 1\n      end\n      paren_stack << char if paren_level ==\
    \ 0\n    end\n  end\n  paren_count\nend", "  paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n \
    \     nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n          nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n            nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n              nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                  nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n                    nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                            nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                              nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                  nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                    nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/[()]/)\
    \ do |char|\n    if char == '('\n      paren_stack_string.scan(/[()]/) do |char|\n\
    \        if char == '('\n          paren_stack_size += 1\n        else\n     \
    \     paren_stack_size -= 1\n        end\n      end\n      paren_stack << paren_stack_size\n\
    \    end\n  end\n  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n\
    \      paren_stack_size += 1\n    else\n      paren_stack_size -= 1\n    end\n\
    \  end\n  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n    \
    \  paren_stack_size += 1\n    else\n      paren_stack_size -= 1\n    end\n  end\n\
    \  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n      paren_stack_size\
    \ += 1\n    else\n      paren_stack_size -= 1\n    end\n  end\n  paren_stack_string.scan(/[()]/)\
    \ do |char|\n    if char == '('\n      paren_stack_size += 1\n    else\n     \
    \ paren_stack_size -= 1\n    end\n  end\n  paren_stack_string.scan(/[()]/) do\
    \ |char|\n    if char == '('\n      paren_stack_size += 1\n    else\n      paren_stack_size\
    \ -= 1\n    end\n  end\n  paren_stack_string.scan(/[()]/) do |char|\n    if char\
    \ == '('\n      paren_stack_size += 1\n    else\n      paren_stack_size -= 1\n\
    \    end\n  end\n  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n\
    \      paren_stack_size += 1\n    else\n      paren_stack_size -= 1\n    end\n\
    \  end\n  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n    \
    \  paren_stack_size += 1\n    else\n      paren_stack_size -= 1\n    end\n  end\n\
    \  paren_stack_string.scan(/[()]/) do |char|\n    if char == '('\n      paren_stack_size\
    \ += 1\n    else\n      paren_stack_size -= 1\n    end\n  end\n  paren_stack_string.scan(/[()]/)\
    \ do |char|\n    if char == '('\n      paren_stack_", "  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n    paren_string.scan(/[()]/).each do |paren_string|\n  \
    \    paren_string.scan(/[()]/).each do |paren_string|\n        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n          paren_string.scan(/[()]/).each do |paren_string|\n\
    \            paren_string.scan(/[()]/).each do |paren_string|\n              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                paren_string.scan(/[()]/).each do |paren_string|\n\
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                    \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \            paren_string.scan(/[()]/).each do |paren_string|\n              \
    \                  paren_string.scan(/[()]/).each do |paren_string|\n        \
    \                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).each do |paren_string|\n                        \
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                                              ", "  paren_stack\
    \ = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_string\n\
    \  while paren_stack.any?\n    paren_string = paren_stack.shift\n    if paren_string\
    \ == \"(\"\n      paren_count += 1\n    elsif paren_string == \")\"\n      paren_count\
    \ -= 1\n    elsif paren_count == 0\n      paren_level += 1\n    end\n    paren_stack\
    \ << paren_string\n  end\n  paren_level\nend", "  paren_string.scan(/[\\(\\)]/).each\
    \ do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/).each do |paren|\n\
    \      level += 1\n      paren_string.scan(/[\\(\\)]/).each do |paren|\n     \
    \   level += 1\n        paren_string.scan(/[\\(\\)]/).each do |paren|\n      \
    \    level += 1\n        end\n      end\n    end\n  end\nend", "  paren_string.scan(/[()]/)\
    \ do |group|\n    if group.size > 0\n      parse_nested_parens(group)\n    end\n\
    \  end\nend", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_paren_level = 0\n  paren_stack_paren_string\
    \ = ''\n  paren_stack_paren_level_count = 0\n  paren_stack_paren_string_count\
    \ = 0\n  paren_stack_paren_level_count_max = 0\n  paren_stack_paren_string_count_max\
    \ = 0\n  paren_stack_paren_level_count_min = 0\n  paren_stack_paren_string_count_min\
    \ = 0\n  paren_stack_string_count = 0\n  paren_stack_paren_level_count = 0\n \
    \ paren_stack_paren_string_count = 0\n  paren_stack_paren_level_count_max = 0\n\
    \  paren_stack_paren_string_count_max = 0\n  paren_stack_paren_level_count_min\
    \ = 0\n  paren_stack_paren_string_count_min = 0\n  paren_stack_string_count =\
    \ 0\n  paren_stack_paren_level_count = 0\n  paren_stack_paren_string_count = 0\n\
    \  paren_stack_paren_level_count_max = 0\n  paren_stack_paren_string_count_max\
    \ = 0\n  paren_stack_paren_level_count_min = 0\n  paren_stack_paren_string_count_min\
    \ = 0\n  paren_stack_string_count = 0\n  paren_stack_paren_level_count = 0\n \
    \ paren_stack_paren_string_count = 0\n  paren_stack_paren_level_count_max = 0\n\
    \  paren_stack_paren_string_count_max = 0\n  paren_stack_paren_level_count_min\
    \ = 0\n  paren_stack_paren_string_count_min = 0\n  paren_stack_string_count =\
    \ 0\n  paren_stack_paren_level_count = 0\n  paren_stack_paren_string_count = 0\n\
    \  paren_stack_paren_level_count_max = 0\n  paren_stack_paren_string_count_max\
    \ = 0\n  paren_stack_paren_level_count_min = 0\n  paren_stack_paren_string_count_min\
    \ = 0\n  paren_stack_string_count = 0\n  paren_stack_paren_level_count = 0\n \
    \ paren_stack_paren_string_count = 0\n  paren_stack_paren_level_count_max = 0\n\
    \  paren_stack_paren_string_count_max = 0\n  paren_stack_paren_level_count_min\
    \ = 0\n  paren_stack_paren_string_count_min = 0\n  paren_stack_string_count =\
    \ 0\n  paren_stack_paren_level_count = 0\n  paren_stack_paren_string_count = 0\n\
    \  paren_stack_paren_level_count_max = 0\n  paren_stack_paren_string_count_max\
    \ = 0\n  paren_stack_paren_level_count_min = 0\n  paren_", "  paren_string.scan(/[()]/).each\
    \ do |paren|\n    level = 0\n    paren.scan(/[()]/).each do |paren|\n      level\
    \ += 1\n    end\n    return level\n  end\n  return 0\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |s| s.gsub(/\\(/, '').gsub(/\\)/, '').gsub(/\\)/, '') }\nend", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_char = ''\n  paren_stack_max_level_char_count =\
    \ 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_", "  paren_string.scan(/[()]/).each do |paren_char|\n\
    \    paren_char = paren_char.chr.downcase\n    paren_level = paren_char.count('(')\
    \ - paren_char.count(')')\n    paren_level = 0 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= 1 if paren_level < 0\n    paren_level\
    \ += 1 if paren_level > 0\n    paren_level -= ", "  paren_string.scan(/[\\(\\\
    )]+/) do |group|\n    group.scan(/[\\(\\)]+/) do |nested_group|\n      parse_nested_parens(nested_group)\n\
    \    end\n  end\nend", "  paren_string.scan(/([^()]+|(\\((?>[^()]+|(?1))*\\)))/)\
    \ do |group|\n    group.each do |g|\n      g.gsub!(/\\(/, '(')\n      g.gsub!(/\\\
    )/, ')')\n    end\n  end\nend", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_string = ''\n  paren_stack_level", "  paren_stack = []\n\
    \  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n\
    \  paren_stack_level_string = ''\n  paren_stack_level_max = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_string_size = 0\n  paren_stack_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max = 0\n  paren_stack_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_size = 0\n  paren_stack_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max = 0\n  paren_stack_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.dup\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)\n\
    \    paren_char.slice!(0)\n    paren_char.slice!(0)\n    paren_char.slice!(0)",
  "  paren_string.scan(/[()]/) do |paren|\n    level = 0\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n      paren_string.scan(/[()]/) do |paren|\n \
    \       level += 1\n        paren_string.scan(/[()]/) do |paren|\n          level\
    \ += 1\n        end\n      end\n    end\n    puts \"#{level} levels of nesting\"\
    \n  end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_max_level = 0\n  paren_stack_max_level_string\
    \ = ''\n  paren_stack_max_level_level = 0\n  paren_stack_max_level_max_level =\
    \ 0\n  paren_stack_max_level_max_level_string = ''\n  paren_stack_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level = 0\n  paren_stack_max_level_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_max_level_level = 0\n  paren_stack_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_string = ''\n  paren_stack_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level = 0\n \
    \ paren_stack_max_level_max_level_max_level_max_level_max_level_string = ''\n\
    \  paren_stack_max_level_max_level_max_level_max_level_max_level_level = 0\n \
    \ paren_stack_max_level_max_level_max_level_max_level_max_level_max_level = 0\n\
    \  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = ''\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_", "  paren_stack = []\n  paren_stack_size = -1\n\
    \  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_level_string\
    \ = ''\n  paren_stack_level_counter = 0\n  paren_stack_level_counter_string =\
    \ ''\n  paren_stack_level_counter_max = 0\n  paren_stack_level_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter = 0\n  paren_stack_level_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max = 0\n  paren_stack_level_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter = 0\n  paren_stack_level_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max = 0\n  paren_stack_level_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter = 0\n\
    \  paren_stack_level_counter_max_counter_max_counter_max_counter_string = ''\n\
    \  paren_stack_level_counter_max_counter_max_counter_max_counter_max = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = ''\n  paren_stack_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_",
  "  paren_string.scan(/[\\(\\)]/).each do |paren_char|\n    paren_level = paren_string.scan(/[\\\
    (\\)]/).count\n    paren_string.gsub!(paren_char, paren_char * paren_level)\n\
    \  end\n  paren_string\nend", "  paren_stack = []\n  paren_stack_size = -1\n \
    \ paren_stack_level = -1\n  paren_stack_max_level = -1\n  paren_stack_max_level_size\
    \ = 0\n  paren_stack_max_level_char = ''\n  paren_stack_max_level_char_level =\
    \ 0\n  paren_stack_max_level_char_level_size = 0\n  paren_stack_max_level_char_level_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_size\
    \ = 0\n  paren_stack_max_level_char_size = 0\n  paren_stack_", "  paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n          paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n            paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n       \
    \         paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n            \
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n               \
    \     paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                \
    \      paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n               \
    \         paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n       \
    \                     paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \  paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n                   \
    \                             paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).each do |paren_string|\n                                            \
    \          paren_string.scan(/[\\(\\)]+/).each do |paren_string|\n           \
    \                                             paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n\
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n  \
    \        paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[\\(\\\
    )]/).each do |group|\n    group.scan(/[\\(\\)]/).each do |group|\n      puts \"\
    #{group}\"\n    end\n  end\nend", "  paren_stack = []\n  paren_stack_count = 0\n\
    \  paren_stack_max_count = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_count = 0\n  paren_stack_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_count = 0\n  paren_stack_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth = 0\n  paren_stack_max_depth_max_depth_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_count = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_count = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = 0\n \
    \ paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_count = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_count\
    \ = 0\n  paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_",
  "  paren_string.scan(/[^()]+/).each do |paren_string|\n    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n      paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \        paren_string.scan(/[()]/).each do |paren_string|\n          paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n            paren_string.scan(/[()]/).each do |paren_string|\n\
    \              paren_string.scan(/[^()]+/).each do |paren_string|\n          \
    \      paren_string.scan(/[()]/).each do |paren_string|\n                  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                      paren_string.scan(/[^()]+/).each do |paren_string|\n  \
    \                      paren_string.scan(/[()]/).each do |paren_string|\n    \
    \                      paren_string.scan(/[^()]+/).each do |paren_string|\n  \
    \                          paren_string.scan(/[()]/).each do |paren_string|\n\
    \                              paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \                                paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                  paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                      paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/).each do\
    \ |paren_string|\n                                            paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                              paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/).each do |paren_string|\n                      \
    \                                      paren_string.", "  paren_string.scan(/[\\\
    (\\)]/) do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    puts \"#{level} level of nesting of parentheses\
    \ detected.\"\n  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  paren_stack\
    \ = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_count if\
    \ paren_count > 0\n  paren_stack << paren_level if paren_level > 0\n  paren_stack.each\
    \ do |paren_count|\n    paren_level += 1 if paren_count > 1\n    paren_stack.each\
    \ do |paren_level|\n      paren_count -= 1 if paren_level > 1\n      break if\
    \ paren_count == 0\n    end\n  end\n  paren_level\nend", "  paren_stack = []\n\
    \  paren_stack_size = 0\n  paren_stack_max_size = 0\n  paren_stack_max_depth =\
    \ 0\n  paren_stack_max_depth_size = 0\n  paren_stack_max_depth_level = 0\n  paren_stack_max_depth_level_size\
    \ = 0\n  paren_stack_max_depth_level_num = 0\n  paren_stack_max_depth_level_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num = 0\n  paren_stack_max_depth_level_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num = 0\n\
    \  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_size = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_size = 0\n\
    \  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_num = 0\n \
    \ paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_size = 0\n \
    \ paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_num_num = 0\n\
    \  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_num_size =\
    \ 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_num_num_num_num_num_num_size\
    \ = 0\n  paren_stack_max_depth_level_num_num_num_num_", "  paren_stack = []\n\
    \  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n\
    \  paren_stack_last_char = ''\n  paren_stack_last_char_count = 0\n  paren_stack_last_char_level\
    \ = 0\n  paren_stack_last_char_level_count = 0\n  paren_stack_last_char_level_count_max\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_level_count_max_index = 0\n  paren_stack_last_char_level_count_max_index\
    \ = 0\n  paren_stack_last_char_", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_stack_string = \"\"\n  paren_stack_level = 0\n  paren_stack_strings\
    \ = []\n  paren_stack_levels = []\n  paren_stack_strings.push paren_string\n \
    \ paren_stack_levels.push paren_level\n  paren_stack_strings.each do |paren_string|\n\
    \    if paren_stack.empty?\n      paren_stack_string = paren_string\n      paren_stack_level\
    \ = paren_level\n    else\n      paren_stack_string = paren_stack_string.sub(paren_string,\
    \ \"\")\n      paren_stack_level = paren_stack_level + 1\n    end\n    paren_stack_strings.push\
    \ paren_stack_string\n    paren_stack_levels.push paren_stack_level\n    if paren_stack_level\
    \ > paren_level\n      paren_stack_strings.push paren_string\n      paren_stack_levels.push\
    \ paren_level\n    end\n  end\n  paren_stack_strings.each do |paren_string|\n\
    \    if paren_stack.empty?\n      paren_stack_string = paren_string\n      paren_stack_level\
    \ = paren_level\n    else\n      paren_stack_string = paren_stack_string.sub(paren_string,\
    \ \"\")\n      paren_stack_level = paren_stack_level + 1\n    end\n    paren_stack_strings.push\
    \ paren_stack_string\n    paren_stack_levels.push paren_stack_level\n  end\n \
    \ paren_stack_strings.reverse!\n  paren_stack_levels.reverse!\n  paren_stack_strings.each\
    \ do |paren_string|\n    if paren_stack.empty?\n      paren_stack_string = paren_string\n\
    \      paren_stack_level = paren_level\n    else\n      paren_stack_string = paren_stack_string.sub(paren_string,\
    \ \"\")\n      paren_stack_level = paren_stack_level + 1\n    end\n    paren_stack_strings.push\
    \ paren_stack_string\n    paren_stack_levels.push paren_stack_level\n  end\n \
    \ paren_stack_strings.reverse!\n  paren_stack_levels.reverse!\n  paren_stack_strings.each\
    \ do |paren_string|\n    if paren_stack.empty?\n      paren_stack_string = paren_string\n\
    \      paren_stack_level = paren_level\n    else\n      paren_stack_string = paren_stack_string.sub(paren_string,\
    \ \"\")\n      paren_stack_level = paren_stack_level + 1\n    end\n    paren_stack_strings.push\
    \ paren_stack_string\n    paren_stack_levels.push paren_stack_level\n  end\n \
    \ paren_stack_string", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_string_size = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index2 = 0\n  paren_stack_level_max_string_index3\
    \ = 0\n  paren_stack_level_max_string_index4 = 0\n  paren_stack_level_max_string_index5\
    \ = 0\n  paren_stack_level_max_string_index6 = 0\n  paren_stack_level_max_string_index7\
    \ = 0\n  paren_stack_level_max_string_index8 = 0\n  paren_stack_level_max_string_index9\
    \ = 0\n  paren_stack_level_max_string_index10 = 0\n  paren_stack_level_max_string_index11\
    \ = 0\n  paren_stack_level_max_string_index12 = 0\n  paren_stack_level_max_string_index13\
    \ = 0\n  paren_stack_level_max_string_index14 = 0\n  paren_stack_level_max_string_index15\
    \ = 0\n  paren_stack_level_max_string_index16 = 0\n  paren_stack_level_max_string_index17\
    \ = 0\n  paren_stack_level_max_string_index18 = 0\n  paren_stack_level_max_string_index19\
    \ = 0\n  paren_stack_level_max_string_index20 = 0\n  paren_stack_level_max_string_index21\
    \ = 0\n  paren_stack_level_max_string_index22 = 0\n  paren_stack_level_max_string_index23\
    \ = 0\n  paren_stack_level_max_string_index24 = 0\n  paren_stack_level_max_string_index25\
    \ = 0\n  paren_stack_level_max_string_index26 = 0\n  paren_stack_level_max_string_index27\
    \ = 0\n  paren_stack_level_max_string_index28 = 0\n  paren_stack_level_max_string_index29\
    \ = 0\n  paren_stack_level_max_string_index30 = 0\n  paren_stack_level_max_string_index31\
    \ = 0\n  paren_stack_level_max_string_index32 = 0\n  paren_stack_level_max_string_index33\
    \ = 0\n  paren_stack_level_max_string_index34 = 0\n  paren_stack_level_max_string_index35\
    \ = 0\n  paren_stack_level_max_string_index36 = 0\n  paren_stack_level_max_string_index37\
    \ = 0\n  paren_stack_level_max_string_index38 = 0\n  paren_stack_level_max_string_index39\
    \ = 0\n  paren_stack_level_max_string_index40 = 0\n  paren_stack_level_max_string_index41\
    \ = 0\n  paren_stack_level_max_string_index", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.gsub!(/\\\
    s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '[')\n  paren_stack_string.gsub!(/\\\
    ]/, ']')\n  paren_stack_string.gsub!(/\\{/, '{')\n  paren_stack_string.gsub!(/\\\
    }/, '}')\n  paren_stack_string.gsub!(/\\{/, '{')\n  paren_stack_string.gsub!(/\\\
    }/, '}')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '[')\n  paren_stack_string.gsub!(/\\\
    ]/, ']')\n  paren_stack_string.gsub!(/\\{/, '{')\n  paren_stack_string.gsub!(/\\\
    }/, '}')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '[')\n  paren_stack_string.gsub!(/\\\
    ]/, ']')\n  paren_stack_string.gsub!(/\\{/, '{')\n  paren_stack_string.gsub!(/\\\
    }/, '}')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '[')\n  paren_stack_string.gsub!(/\\\
    ]/, ']')\n  paren_stack_string.gsub!(/\\{/, '{')\n  paren_stack_string.gsub!(/\\\
    }/, '}')\n  paren_stack_string.gsub!(/\\(/, '(')\n  paren_stack_string.gsub!(/\\\
    )/, ')')\n  paren_stack_string.gsub!(/\\[/, '[')\n  paren_stack_string.gsub!(/\\\
    ]/, ']')\n  paren_stack_string.gsub", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/[\\(\\)]/, '').length }.max\nend", "  paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n    level = 0\n    paren_string.scan(/[\\(\\)]+/).each do\
    \ |paren_string|\n      level += 1\n      paren_string.scan(/[\\(\\)]+/).each\
    \ do |paren_string|\n        level += 1\n      end\n    end\n    puts \"#{paren_string}\
    \ has maximum level of nesting #{level}\"\n  end\nend", "  paren_stack = []\n\
    \  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_max_level = 0\n\
    \  paren_stack_max_level_size = 0\n  paren_stack_max_level_paren_count = 0\n \
    \ paren_stack_max_level_paren_count_size = 0\n  paren_stack_max_level_paren_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_count_size = 0\n\
    \  paren_stack_max_level_paren_count_count_count_count_count_count_count = 0\n\
    \  paren_stack_max_level_paren_count_count_count_count_count_size = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_count_size = 0\n\
    \  paren_stack_max_level_paren_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_count_size = 0\n\
    \  paren_stack_max_level_paren_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_stack_max_level_paren_count_count_count_count_count_count_size\
    \ = 0\n  paren_stack_", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_stack << paren_string\n  while paren_stack.count > 0\n    paren_count\
    \ += 1\n    paren_stack.pop\n    paren_level -= 1\n    paren_string = paren_stack.last\n\
    \    paren_stack << paren_string\n  end\n  return paren_count\nend", "  paren_stack\
    \ = []\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count =\
    \ 0\n  paren_nesting_paren_level = 0\n  paren_nesting_paren_count = 0\n  paren_nesting_paren_level_count\
    \ = 0\n  paren_nesting_paren_level_count_count = 0\n  paren_nesting_paren_level_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count = 0\n  paren_nesting_paren_level_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count = 0\n \
    \ paren_nesting_paren_level_count_count_count_count_count_count_count = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  paren_nesting_paren_level_count_count_count_count_count_", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_size = 0\n  paren_stack_max_level_char = ''\n \
    \ paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_index = 0\n\
    \  paren_stack_max_level_char_indexes = []\n  paren_stack_max_level_char_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_",
  "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_depth = 0\n  paren_stack_max_depth\
    \ = 0\n  paren_stack_max_depth_size = 0\n  paren_stack_max_depth_index = 0\n \
    \ paren_stack_max_depth_index2 = 0\n  paren_stack_max_depth_index3 = 0\n  paren_stack_max_depth_index4\
    \ = 0\n  paren_stack_max_depth_index5 = 0\n  paren_stack_max_depth_index6 = 0\n\
    \  paren_stack_max_depth_index7 = 0\n  paren_stack_max_depth_index8 = 0\n  paren_stack_max_depth_index9\
    \ = 0\n  paren_stack_max_depth_index10 = 0\n  paren_stack_max_depth_index11 =\
    \ 0\n  paren_stack_max_depth_index12 = 0\n  paren_stack_max_depth_index13 = 0\n\
    \  paren_stack_max_depth_index14 = 0\n  paren_stack_max_depth_index15 = 0\n  paren_stack_max_depth_index16\
    \ = 0\n  paren_stack_max_depth_index17 = 0\n  paren_stack_max_depth_index18 =\
    \ 0\n  paren_stack_max_depth_index19 = 0\n  paren_stack_max_depth_index20 = 0\n\
    \  paren_stack_max_depth_index21 = 0\n  paren_stack_max_depth_index22 = 0\n  paren_stack_max_depth_index23\
    \ = 0\n  paren_stack_max_depth_index24 = 0\n  paren_stack_max_depth_index25 =\
    \ 0\n  paren_stack_max_depth_index26 = 0\n  paren_stack_max_depth_index27 = 0\n\
    \  paren_stack_max_depth_index28 = 0\n  paren_stack_max_depth_index29 = 0\n  paren_stack_max_depth_index30\
    \ = 0\n  paren_stack_max_depth_index31 = 0\n  paren_stack_max_depth_index32 =\
    \ 0\n  paren_stack_max_depth_index33 = 0\n  paren_stack_max_depth_index34 = 0\n\
    \  paren_stack_max_depth_index35 = 0\n  paren_stack_max_depth_index36 = 0\n  paren_stack_max_depth_index37\
    \ = 0\n  paren_stack_max_depth_index38 = 0\n  paren_stack_max_depth_index39 =\
    \ 0\n  paren_stack_max_depth_index40 = 0\n  paren_stack_max_depth_index41 = 0\n\
    \  paren_stack_max_depth_index42 = 0\n  paren_stack_max_depth_index43 = 0\n  paren_stack_max_depth_index44\
    \ = 0\n  paren_stack_max_depth_index45 = 0\n  paren_stack_max_depth_index46 =\
    \ 0\n  paren_stack_max_depth_index47 = 0\n  paren_stack_max_depth", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_max = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_depth_index = 0\n  paren_stack_max_depth_value\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index\
    \ = 0\n  paren_stack_max_depth_value_index = 0\n  paren_stack_max_depth_value_index",
  "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    if paren_char == '('\n   \
    \   parse_nested_parens(paren_string)\n    elsif paren_char == ')'\n      parse_nested_parens(paren_string)\n\
    \    else\n      puts paren_char\n    end\n  end\nend", "  paren_string.scan(/[()]/).each\
    \ do |paren|\n    level = 0\n    paren_string.scan(/[()]/).each do |paren|\n \
    \     level += 1\n    end\n    puts \"Level of nesting #{level} for #{paren}\"\
    \ if level > 0\n  end\nend", "  paren_string.scan(/[()]/) do |group|\n    group.scan(/[()]/)\
    \ do |group|\n      group.scan(/[()]/) do |group|\n        group.scan(/[()]/)\
    \ do |group|\n          group.scan(/[()]/) do |group|\n            group.scan(/[()]/)\
    \ do |group|\n              group.scan(/[()]/) do |group|\n                group.scan(/[()]/)\
    \ do |group|\n                  group.scan(/[()]/) do |group|\n              \
    \      group.scan(/[()]/) do |group|\n                      group.scan(/[()]/)\
    \ do |group|\n                        group.scan(/[()]/) do |group|\n        \
    \                  group.scan(/[()]/) do |group|\n                           \
    \ group.scan(/[()]/) do |group|\n                              group.scan(/[()]/)\
    \ do |group|\n                                group.scan(/[()]/) do |group|\n\
    \                                  group.scan(/[()]/) do |group|\n           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                  group.scan(/[()]/) do |group|\n                           \
    \             group.scan(/[()]/) do |group|\n                                \
    \          group.scan(/[()]/) do |group|\n                                   \
    \         group.scan(/[()]/) do |group|\n                                    \
    \          group.scan(/[()]/) do |group|\n                                   \
    \             group.scan(/[()]/) do |group|\n                                \
    \                  group.scan(/[()]/) do |group|\n                           \
    \                         group.scan(/[()]/) do |group|\n                    \
    \                                  group.scan(/[()]/) do |group|\n           \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                          group.scan(/[()]/)\
    \ do |group|\n                                                            group.scan(/[()]/)\
    \ do |group|\n                                                              group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \ group.scan(/[()]/) do |group|\n                                            \
    \                      group.scan(/[()]/) do |group|\n                       \
    \                                             group.scan(/[()]/) do |group|\n\
    \                                                                      group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \         group.scan(/[()]/) do |group|\n                                    \
    \                                      group.scan(/[()]/) do |group|\n       \
    \                                                                     group.scan(/[()]/)\
    \ do |group|\n                                                               \
    \               group.scan(/[()]/) do |", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.strip!\n\
    \  paren_stack_string.gsub!(/\\s+/, ' ')\n  paren_stack_string.gsub!(/\\(/, '')\n\
    \  paren_stack_string.gsub!(/\\)/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/, '')\n\
    \  paren_stack_string.gsub!(/\\(/, '')\n  paren_stack_string.gsub!(/\\)/", " \
    \ paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level = -1\n  paren_stack_max_level\
    \ = -1\n  paren_stack_max_level_char = ''\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_level_char_index = 0\n  paren_stack_max_level_char_count\
    \ = 0\n  paren_stack_max_", "  paren_string.scan(/[()]/).each do |paren|\n   \
    \ level = 0\n    paren.scan(/[()]/).each do |c|\n      level += 1\n      break\
    \ if c == ')'\n    end\n    puts \"#{level} level of nesting at #{paren}\"\n \
    \ end\nend", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_string = paren_string\n  paren_stack_string.gsub!(/\\s+/,\
    \ ' ')\n  paren_stack_string.scan(/[^()]+/) do |paren_string|\n    if paren_stack_size\
    \ > 0\n      paren_stack_string << paren_string\n      paren_stack_size += 1\n\
    \    else\n      paren_stack_string << paren_string\n    end\n  end\n  paren_stack_string.scan(/[()]/)\
    \ do |paren_string|\n    if paren_stack_size > 0\n      paren_stack_string <<\
    \ paren_string\n      paren_stack_size -= 1\n    else\n      paren_stack_string\
    \ << paren_string\n    end\n  end\n  paren_stack_string\nend", "  paren_stack\
    \ = []\n  paren_count = 0\n  paren_groups = []\n  paren_group = []\n  paren_group_size\
    \ = 0\n  paren_group_level = 0\n  paren_group_level_max = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n \
    \ paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size\
    \ = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n \
    \ paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n \
    \ paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size\
    \ = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n \
    \ paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n \
    \ paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size\
    \ = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n \
    \ paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n \
    \ paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size\
    \ = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n \
    \ paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n \
    \ paren_group_level_max_size = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size\
    \ = 0\n  paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n \
    \ paren_group_level_max_index = 0\n  paren_group_level_max_size = 0\n  paren_group_level_max_index\
    \ = 0\n  paren_group_level_max_size = 0", "  paren_stack = []\n  paren_stack_size\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.gsub!(/[()]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_stack_string.gsub!(/[)]/,\
    \ '')\n  paren_stack_string.gsub!(/[)]/, '')\n  paren_", "  paren_stack = []\n\
    \  paren_count = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_level_max\
    \ = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_index\
    \ = 0\n", "  paren_string.scan(/[\\(\\)]+|\\([^\\(\\)]+\\)/).map do |group|\n\
    \    group.count('(') - group.count(')')\n  end.reduce(:+)\nend", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_string = ''\n  paren_stack_string\
    \ = paren_string\n  paren_stack_string.scan(/[()]/) do |char|\n    if paren_stack_size\
    \ == 0\n      paren_stack_string = paren_stack_string + char\n    else\n     \
    \ paren_stack_string = paren_stack_string + char\n      paren_stack_string.scan(/[()]/)\
    \ do |char|\n        if paren_stack_size == 0\n          paren_stack_string =\
    \ paren_stack_string + char\n        else\n          paren_stack_string = paren_stack_string\
    \ + char\n          paren_stack_string.scan(/[()]/) do |char|\n            if\
    \ paren_stack_size == 0\n              paren_stack_string = paren_stack_string\
    \ + char\n            else\n              paren_stack_string = paren_stack_string\
    \ + char\n              paren_stack_string.scan(/[()]/) do |char|\n          \
    \      if paren_stack_size == 0\n                  paren_stack_string = paren_stack_string\
    \ + char\n                else\n                  paren_stack_string = paren_stack_string\
    \ + char\n                  paren_stack_string.scan(/[()]/) do |char|\n      \
    \              if paren_stack_size == 0\n                      paren_stack_string\
    \ = paren_stack_string + char\n                    else\n                    \
    \  paren_stack_string = paren_stack_string + char\n                      paren_stack_string.scan(/[()]/)\
    \ do |char|\n                        if paren_stack_size == 0\n              \
    \            paren_stack_string = paren_stack_string + char\n                \
    \        else\n                          paren_stack_string = paren_stack_string\
    \ + char\n                          paren_stack_string.scan(/[()]/) do |char|\n\
    \                            if paren_stack_size == 0\n                      \
    \        paren_stack_string = paren_stack_string + char\n                    \
    \        else\n                              paren_stack_string = paren_stack_string\
    \ + char\n                              paren_stack_string.scan(/[()]/) do |char|\n\
    \                                if paren_stack_size == 0\n                  \
    \                paren_stack_string = paren_stack_string + char\n            \
    \                    else\n                                  paren_stack_string\
    \ = paren_stack_string + char\n                                  paren_stack_string.scan(/[()]/)\
    \ do |char|\n                                    if paren_stack_size == 0\n  \
    \                                    paren_stack_string = paren_stack_string +\
    \ char\n                                    else\n                           \
    \           paren_stack_string = paren_stack_string + char\n                 \
    \                     paren_stack_string.scan", "  paren_string.scan(/[^()]+/).each\
    \ do |paren_string|\n    level = 0\n    paren_string.scan(/[()]/).each do |char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n    end\n    return level\n  end\n  return 0\nend", "  paren_string.scan(/[\\\
    (\\)]/).each do |paren|\n    level = 0\n    paren_string.scan(paren).each do |c|\n\
    \      level += 1\n      paren_string.scan(c).each do |c|\n        level += 1\n\
    \      end\n    end\n    puts \"Maximum level of nesting is: #{level}\"\n  end\n\
    end", "  paren_string.scan(/[\\(\\)]/).each do |paren|\n    level = 0\n    paren_string.scan(/[\\\
    (\\)]/).each do |c|\n      level += 1\n      if c == paren\n        level -= 1\n\
    \        break\n      end\n    end\n    puts \"#{level} levels of nesting at #{paren_string.index(paren)}\"\
    \n  end\nend", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack\
    \ << paren_string\n  while paren_stack.any?\n    paren_string = paren_stack.pop\n\
    \    if paren_string == '('\n      paren_count += 1\n      paren_level += 1\n\
    \    elsif paren_string == ')'\n      paren_count -= 1\n      paren_level -= 1\n\
    \      break if paren_count == 0\n    end\n    paren_stack << paren_string\n \
    \ end\n  paren_level\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    level = 0\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      level\
    \ += 1\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        level\
    \ += 1\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          level\
    \ += 1\n        end\n      end\n    end\n  end\nend", "  paren_string.scan(/[(\\\
    [][^()]+[\\]]/).each do |group|\n    group.scan(/[()]/).each do |char|\n     \
    \ puts char if char != '('\n    end\n  end\nend", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/[^()]+/)\n \
    \ paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(",
  "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level = 0\n  paren_stack_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string = ''\n  paren_stack_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level = 0\n  paren_stack_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string = ''\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_size = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level_max = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n \
    \ paren_stack << paren_level\n  paren_stack << paren_count\n  paren_stack << paren_string\n\
    \  paren_stack.each do |level|\n    if level > 0\n      paren_level -= 1\n   \
    \ end\n    if level < paren_level\n      paren_count += 1\n    end\n  end\n  return\
    \ paren_count\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  ", "  paren_string.scan(/[\\(\\)]/).each\
    \ do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/).each do |c|\n \
    \     level += 1\n      paren_string.scan(/[\\(\\)]/).each do |c|\n        level\
    \ += 1\n      end\n    end\n    puts \"#{level} level of nesting at #{paren_string.index}\"\
    \n  end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_stack = []\n  paren_count = 0\n  paren_groups = paren_string.split(\"\
    \ \")\n  paren_groups.each do |paren_group|\n    if paren_group == \"(\"\n   \
    \   paren_stack.push(paren_count)\n      paren_count += 1\n    elsif paren_group\
    \ == \")\"\n      paren_stack.pop\n      paren_count -= 1\n    end\n  end\n  paren_stack\n\
    end", "  paren_string.scan(/[()]/).each do |paren|\n    level = 1\n    paren_string.scan(/[()]/).each\
    \ do |paren|\n      level += 1\n    end\n    puts \"Level of nesting #{level}\
    \ for #{paren} is #{level}\"\n  end\nend", "  paren_stack = []\n  paren_stack.push\
    \ paren_string\n  paren_stack.each do |paren_string|\n    if paren_stack.size\
    \ == 0\n      break\n    end\n    paren_string.split(\" \").each do |paren_string|\n\
    \      if paren_stack.size == 0\n        break\n      end\n      paren_stack.push\
    \ paren_string\n    end\n  end\n  paren_stack.pop\nend", "  paren_stack = []\n\
    \  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n\
    \  paren_stack_string.scan(/[^()]+/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.", "  paren_stack = []\n\
    \  paren_stack_size = -1\n  paren_stack_string = ''\n  paren_stack_level = 0\n\
    \  paren_stack_level_max = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = ''\n  paren_stack_level_max_string_len = 0\n  paren_stack_level_max_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string = ''\n  paren_stack_level_max_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_index = 0\n  paren_stack_level_max_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len = 0\n  paren_stack_level_max_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string = ''\n\
    \  paren_stack_level_max_string_len_string_len_string_len_string_len = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string\
    \ = ''\n  paren_stack_level_max_string_len_string_len_string_len_string_len_string_len_string_len_string_len_string_len_index\
    \ = 0\n  paren_stack_level_max_string_len_string_len_string_len", "  paren_stack\
    \ = []\n  paren_stack_size = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level = 0\n  paren_stack_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string = ''\n  paren_stack_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level = 0\n  paren_stack_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string = ''\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_size = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level = 0\n \
    \ paren_stack_level_max_string_level_max_string_level_max_string_level_max = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = ''\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level\
    \ = 0\n  paren_stack_max_level = 0\n  paren_stack_max_level_size = 0\n  paren_stack_max_level_char\
    \ = ''\n  paren_stack_max_level_char_size = 0\n  paren_stack_max_level_char_index\
    \ = 0\n  paren_stack_max_level_char_indexes = []\n  paren_stack_max_level_char_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes = []\n  paren_stack_max_level_char_indexes_indexes_indexes_size\
    \ = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_index = 0\n  paren_stack_max_level_char_indexes_indexes_indexes_indexes\
    \ = []\n  paren_stack_max_level_char_indexes_indexes_index", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_count = 0\n  paren_level =\
    \ 0\n  paren_stack << paren_string\n  while paren_stack.count > 0\n    paren_string\
    \ = paren_stack.pop\n    if paren_string == \"(\"\n      paren_count += 1\n  \
    \  elsif paren_string == \")\"\n      paren_count -= 1\n      paren_level -= 1\n\
    \    elsif paren_string == \" \"\n      paren_level = 0\n    end\n    paren_stack\
    \ << paren_string\n  end\n  return paren_count\nend", "  paren_string.scan(/([^()]+|(?<open>\\\
    ()|(?<-open>\\)))+(?(open)(?!))/) do |group|\n    puts \"#{group.first} has #{group.count}\
    \ levels of nesting\" if group.count > 1\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_string|\n    paren_string.scan(/[()]/).map do |paren_string|\n\
    \      paren_string.scan(/[()]/).map do |paren_string|\n        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n          paren_string.scan(/[()]/).map do |paren_string|\n\
    \            paren_string.scan(/[()]/).map do |paren_string|\n              paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                paren_string.scan(/[()]/).map do |paren_string|\n\
    \                  paren_string.scan(/[()]/).map do |paren_string|\n         \
    \           paren_string.scan(/[()]/).map do |paren_string|\n                \
    \      paren_string.scan(/[()]/).map do |paren_string|\n                     \
    \   paren_string.scan(/[()]/).map do |paren_string|\n                        \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                         \
    \   paren_string.scan(/[()]/).map do |paren_string|\n                        \
    \      paren_string.scan(/[()]/).map do |paren_string|\n                     \
    \           paren_string.scan(/[()]/).map do |paren_string|\n                \
    \                  paren_string.scan(/[()]/).map do |paren_string|\n         \
    \                           paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                         \
    \                                   paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                                              paren_string.scan(",
  "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_string\n\
    \  while paren_stack.count > 0\n    paren_count += 1\n    paren_string = paren_stack.pop\n\
    \    if paren_string == \"(\"\n      paren_level += 1\n    elsif paren_string\
    \ == \")\"\n      paren_level -= 1\n      paren_stack << paren_string\n    end\n\
    \  end\n  return paren_count\nend", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\\
    (/, '').gsub(/\\)/, '') }\nend", "  paren_string.scan(/[^()]+/).each do |paren_string|\n\
    \    paren_string.scan(/[()]/).each do |paren_string|\n      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n        paren_string.scan(/[()]/).each do |paren_string|\n\
    \          paren_string.scan(/[()]/).each do |paren_string|\n            paren_string.scan(/[()]/).each\
    \ do |paren_string|\n              paren_string.scan(/[()]/).each do |paren_string|\n\
    \                paren_string.scan(/[()]/).each do |paren_string|\n          \
    \        paren_string.scan(/[()]/).each do |paren_string|\n                  \
    \  paren_string.scan(/[()]/).each do |paren_string|\n                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                        paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                          paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                            paren_string.scan(/[()]/).each do\
    \ |paren_string|\n                              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                  paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                          paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                            paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                              paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).each do |paren_string|\n                        \
    \                                    paren_string.scan(/[()]/).each do |paren_string|\n\
    \                                                              ", "  paren_stack\
    \ = []\n  paren_count = 0\n  paren_level = 0\n  paren_stack << paren_string\n\
    \  while paren_stack.any?\n    paren_string =\n      paren_stack.find { |x| x.empty?\
    \ || x == '(' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x ==\
    \ ')' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x == '[' }\n\
    \    paren_string ||= paren_stack.find { |x| x.empty? || x == ']' }\n    paren_string\
    \ ||= paren_stack.find { |x| x.empty? || x == '{' }\n    paren_string ||= paren_stack.find\
    \ { |x| x.empty? || x == '}' }\n    paren_string ||= paren_stack.find { |x| x.empty?\
    \ || x == '<' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x ==\
    \ '>' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x == '=' }\n\
    \    paren_string ||= paren_stack.find { |x| x.empty? || x == '!' }\n    paren_string\
    \ ||= paren_stack.find { |x| x.empty? || x == '&' }\n    paren_string ||= paren_stack.find\
    \ { |x| x.empty? || x == '|' }\n    paren_string ||= paren_stack.find { |x| x.empty?\
    \ || x == '?' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x ==\
    \ '.' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x == '+' }\n\
    \    paren_string ||= paren_stack.find { |x| x.empty? || x == '-' }\n    paren_string\
    \ ||= paren_stack.find { |x| x.empty? || x == '*' }\n    paren_string ||= paren_stack.find\
    \ { |x| x.empty? || x == '/' }\n    paren_string ||= paren_stack.find { |x| x.empty?\
    \ || x == '%' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x ==\
    \ '^' }\n    paren_string ||= paren_stack.find { |x| x.empty? || x == '", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = ''\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_index\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size",
  "  paren_stack = []\n  paren_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_string = ''\n  paren_stack_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_level = 0\n  paren_stack_string\
    \ = ''\n  paren_", "  paren_string.scan(/[()]/).each do |paren|\n    paren_string.scan(/[()]/).each\
    \ do |paren|\n      paren_string.scan(/[()]/).each do |paren|\n        paren_string.scan(/[()]/).each\
    \ do |paren|\n          paren_string.scan(/[()]/).each do |paren|\n          \
    \  paren_string.scan(/[()]/).each do |paren|\n              paren_string.scan(/[()]/).each\
    \ do |paren|\n                paren_string.scan(/[()]/).each do |paren|\n    \
    \              paren_string.scan(/[()]/).each do |paren|\n                   \
    \ paren_string.scan(/[()]/).each do |paren|\n                      paren_string.scan(/[()]/).each\
    \ do |paren|\n                        paren_string.scan(/[()]/).each do |paren|\n\
    \                          paren_string.scan(/[()]/).each do |paren|\n       \
    \                     paren_string.scan(/[()]/).each do |paren|\n            \
    \                  paren_string.scan(/[()]/).each do |paren|\n               \
    \                 paren_string.scan(/[()]/).each do |paren|\n                \
    \                  paren_string.scan(/[()]/).each do |paren|\n               \
    \                     paren_string.scan(/[()]/).each do |paren|\n            \
    \                          paren_string.scan(/[()]/).each do |paren|\n       \
    \                                 paren_string.scan(/[()]/).each do |paren|\n\
    \                                          paren_string.scan(/[()]/).each do |paren|\n\
    \                                            paren_string.scan(/[()]/).each do\
    \ |paren|\n                                              paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                  paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                    paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                      paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                        paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                          paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                            paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                              paren_string.scan(/[()]/).each\
    \ do |paren|\n                                                               \
    \ paren_string.scan(/[()]/).each do |paren|\n"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
