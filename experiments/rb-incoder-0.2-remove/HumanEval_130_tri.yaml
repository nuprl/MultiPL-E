name: HumanEval_130_tri
language: rb
prompt: "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n# the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n\
  # tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n\
  # tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative\
  \ integer number n, you have to a return a list of the \n# first n + 1 numbers of\
  \ the Tribonacci sequence.\n# Examples:\ndef tri(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n\
  \    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n\
  \    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2,\
  \ 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n\
  \    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n   \
  \ assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n\
  \  end\nend\n"
completions: ["  result = []\n  result[0] = n\n  result[1] = 1 + n / 2\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  result\nend", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\nend",
  "  tri_seq = []\n  if n == 0\n    tri_seq << 0\n  elsif n == 1\n    tri_seq << 1\n\
    \  elsif n % 2 == 0\n    tri_seq << tri(n - 1) + tri(n - 2)\n  else\n    tri_seq\
    \ << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n  tri_seq\nend", "  result =\
    \ []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1], result[0]\
    \ + result[1] + result[2]] if n.odd?\n  result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = result[0] + result[1]\n  result[2] = result[0] + result[1]\
    \ + result[2]\n  result[3] = result[0] + result[1] + result[2] + result[3]\n \
    \ result[4] = result[0] + result[1] + result[2] + result[3] + result[4]\n  result[5]\
    \ = result[0] + result[1] + result[2] + result[3] + result[4] + result[5]\n  result[6]\
    \ = result[0] + result[1] + result[2] + result[3] + result[4] + result[5] + result[6]\n\
    \  result[7] = result[0] + result[1] + result[2] + result[3] + result[4] + result[5]\
    \ + result[6] + result[7]\n  result[8] = result[0] + result[1] + result[2] + result[3]\
    \ + result[4] + result[5] + result[6] + result[7] + result[8]\n  result[9] = result[0]\
    \ + result[1] + result[2] + result[3] + result[4] + result[5] + result[6] + result[7]\
    \ + result[8] + result[9]\n  result[10] = result[0] + result[1] + result[2] +\
    \ result[3] + result[4] + result[5] + result[6] + result[7] + result[8] + result[9]\
    \ + result[10]\n  result[11] = result[0] + result[1] + result[2] + result[3] +\
    \ result[4] + result[5] + result[6] + result[7] + result[8] + result[9] + result[10]\
    \ + result[11]\n  result[12] = result[0] + result[1] + result[2] + result[3] +\
    \ result[4] + result[5] + result[6] + result[7] + result[8] + result[9] + result[10]\
    \ + result[11] + result[12]\n  result[13] = result[0] + result[1] + result[2]\
    \ + result[3] + result[4] + result[5] + result[6] + result[7] + result[8] + result[9]\
    \ + result[10] + result[11] + result[12] + result[13]\n  result[14] = result[0]\
    \ + result[1] + result[2] + result[3] + result[4] + result[5] + result[6] + result[7]\
    \ + result[8] + result[9] + result[10] + result[11] + result[12] + result[13]\
    \ + result[14]\n  result[15] = result[0] + result[1] + result[2] + result[3] +\
    \ result[4] + result[5] + result[6] + result[7] + result[8] + result[9] + result[10]\
    \ + result[11] + result[12] + result[13] + result[14] + result[15]\n  result[16]\
    \ = result[0] + result[1] + result[2] + result[3] + result[4] + result[5] + result[6]\
    \ + result[7] + result[8] + result[9] + result[10] + result[11] + result[12] +\
    \ result[", "  result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n\
    \  result[2] = result[1] + result[2]\n  result[3] = result[2] + result[3]\n  result[4]\
    \ = result[3] + result[4]\n  result[5] = result[4] + result[5]\n  result[6] =\
    \ result[5] + result[6]\n  result[7] = result[6] + result[7]\n  result[8] = result[7]\
    \ + result[8]\n  result[9] = result[8] + result[9]\n  result[10] = result[9] +\
    \ result[10]\n  result[11] = result[10] + result[11]\n  result[12] = result[11]\
    \ + result[12]\n  result[13] = result[12] + result[13]\n  result[14] = result[13]\
    \ + result[14]\n  result[15] = result[14] + result[15]\n  result[16] = result[15]\
    \ + result[16]\n  result[17] = result[16] + result[17]\n  result[18] = result[17]\
    \ + result[18]\n  result[19] = result[18] + result[19]\n  result[20] = result[19]\
    \ + result[20]\n  result[21] = result[20] + result[21]\n  result[22] = result[21]\
    \ + result[22]\n  result[23] = result[22] + result[23]\n  result[24] = result[23]\
    \ + result[24]\n  result[25] = result[24] + result[25]\n  result[26] = result[25]\
    \ + result[26]\n  result[27] = result[26] + result[27]\n  result[28] = result[27]\
    \ + result[28]\n  result[29] = result[28] + result[29]\n  result[30] = result[29]\
    \ + result[30]\n  result[31] = result[30] + result[31]\n  result[32] = result[31]\
    \ + result[32]\n  result[33] = result[32] + result[33]\n  result[34] = result[33]\
    \ + result[34]\n  result[35] = result[34] + result[35]\n  result[36] = result[35]\
    \ + result[36]\n  result[37] = result[36] + result[37]\n  result[38] = result[37]\
    \ + result[38]\n  result[39] = result[38] + result[39]\n  result[40] = result[39]\
    \ + result[40]\n  result[41] = result[40] + result[41]\n  result[42] = result[41]\
    \ + result[42]\n  result[43] = result[42] + result[43]\n  result[44] = result[43]\
    \ + result[44]\n  result[45] = result[44] + ", "  tri_array = []\n  tri_array[0]\
    \ = 3\n  tri_array[1] = 1 + n / 2\n  tri_array[2] = tri_array[1] + tri_array[0]\n\
    \  tri_array[3] = tri_array[2] + tri_array[1]\n  tri_array[4] = tri_array[3] +\
    \ tri_array[2]\n  tri_array[5] = tri_array[4] + tri_array[3]\n  tri_array[6] =\
    \ tri_array[5] + tri_array[4]\n  tri_array[7] = tri_array[6] + tri_array[5]\n\
    \  tri_array[8] = tri_array[7] + tri_array[6]\n  tri_array[9] = tri_array[8] +\
    \ tri_array[7]\n  tri_array[10] = tri_array[9] + tri_array[8]\n  tri_array[11]\
    \ = tri_array[10] + tri_array[9]\n  tri_array[12] = tri_array[11] + tri_array[10]\n\
    \  tri_array[13] = tri_array[12] + tri_array[11]\n  tri_array[14] = tri_array[13]\
    \ + tri_array[12]\n  tri_array[15] = tri_array[14] + tri_array[13]\n  tri_array[16]\
    \ = tri_array[15] + tri_array[14]\n  tri_array[17] = tri_array[16] + tri_array[15]\n\
    \  tri_array[18] = tri_array[17] + tri_array[16]\n  tri_array[19] = tri_array[18]\
    \ + tri_array[17]\n  tri_array[20] = tri_array[19] + tri_array[18]\n  tri_array[21]\
    \ = tri_array[20] + tri_array[19]\n  tri_array[22] = tri_array[21] + tri_array[20]\n\
    \  tri_array[23] = tri_array[22] + tri_array[21]\n  tri_array[24] = tri_array[23]\
    \ + tri_array[22]\n  tri_array[25] = tri_array[24] + tri_array[23]\n  tri_array[26]\
    \ = tri_array[25] + tri_array[24]\n  tri_array[27] = tri_array[26] + tri_array[25]\n\
    \  tri_array[28] = tri_array[27] + tri_array[26]\n  tri_array[29] = tri_array[28]\
    \ + tri_array[27]\n  tri_array[30] = tri_array[29] + tri_array[28]\n  tri_array[31]\
    \ = tri", "  result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n\
    \  result[2] = result[1] + result[2]\n  result[3] = result[2] + result[3]\n  return\
    \ result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n\
    \ - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  tri_seq = []\n  tri_seq\
    \ << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n\
    \  tri_seq\nend", "  result = []\n  result[0] = n\n  if n % 2 == 0\n    result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    result[1] = tri(n - 1) +\
    \ tri(n - 2)\n  end\n  result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 + n / 2\n  tri_seq << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  tri_seq\n\
    end", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1],result[2]\
    \ + result[3]] if n.odd?\n  result\nend", "  result = []\n  result = [3,1] if\
    \ n.even? \n  result = [result[0] + result[1],result[2] + result[3]] if n.odd?\n\
    \  result\nend", "  result = []\n  result[0] = tri(1) + tri(2)\n  result[1] =\
    \ tri(2) + tri(1)\n  result[2] = tri(1) + tri(2) + tri(1) + tri(2)\n  result[n]\
    \ = tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n  return result\nend", "  result\
    \ = []\n  result = [3,1] if n%2 == 0\n  result = [result[0] + result[1],result[0]+result[2]]\
    \ if n%2 == 1\n  result\nend", "  result = []\n  result = [3,1] if n.even? \n\
    \  result = [result[0] + result[1],result[2] + result[0]] if n.odd?\n  result\n\
    end", "  result = []\n  result[0] = tri_helper(n, 0, 1)\n  result[1] = tri_helper(n,\
    \ 2, 3)\n  result[2] = tri_helper(n, 4, 7)\n  result[3] = tri_helper(n, 5, 10)\n\
    \  result[4] = tri_helper(n, 6, 13)\n  result[5] = tri_helper(n, 7, 17)\n  result[6]\
    \ = tri_helper(n, 8, 21)\n  result[7] = tri_helper(n, 9, 25)\n  result[8] = tri_helper(n,\
    \ 10, 28)\n  result[9] = tri_helper(n, 11, 31)\n  result[10] = tri_helper(n, 12,\
    \ 34)\n  result[11] = tri_helper(n, 13, 37)\n  result[12] = tri_helper(n, 14,\
    \ 40)\n  result[13] = tri_helper(n, 15, 43)\n  result[14] = tri_helper(n, 16,\
    \ 47)\n  result[15] = tri_helper(n, 17, 50)\n  result[16] = tri_helper(n, 18,\
    \ 53)\n  result[17] = tri_helper(n, 19, 56)\n  result[18] = tri_helper(n, 20,\
    \ 59)\n  result[19] = tri_helper(n, 21, 62)\n  result[20] = tri_helper(n, 22,\
    \ 65)\n  result[21] = tri_helper(n, 23, 68)\n  result[22] = tri_helper(n, 24,\
    \ 71)\n  result[23] = tri_helper(n, 25, 74)\n  result[24] = tri_helper(n, 26,\
    \ 77)\n  result[25] = tri_helper(n, 27, 80)\n  result[26] = tri_helper(n, 28,\
    \ 83)\n  result[27] = tri_helper(n, 29, 86)\n  result[28] = tri_helper(n, 30,\
    \ 89)\n  result[29] = tri_helper(n, 31, 92)\n  result[30] = tri_helper(n, 32,\
    \ 95)\n  result[31] = tri_helper(n, 33, 98)\n  result[32] = tri_helper(n, 34,\
    \ 101)\n  result[33] = tri_helper(n, 35, 104)\n  result[34] = tri_helper(n, 36,\
    \ 107)\n  result[35] = tri_helper(n, 37, 110)\n  result[36] = tri_helper(n, 38,\
    \ 113)\n  result[37] = tri_helper(n, 39, 116)\n  result[38] = tri_helper(n, 40,\
    \ 119)\n  result[39] = tri_helper(n, 41, 122)\n  result[40] = tri_helper(n, 42,\
    \ 125)\n  result[41] = tri_", "  result = []\n  result = [3,1] if n.even? \n \
    \ result = [result[0] + result[1], result[1]+result[2]] if n.odd?\n  result\n\
    end", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 2) + tri(n + 1)\n  result[3] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[5]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 5) + tri(n - 4)\
    \ + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 6) + tri(n - 5) + tri(n - 4)\
    \ + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[6] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 7) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n - 3)\
    \ + tri(n - 2) + tri(n + 1)\n  result[7] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 7) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 8", "  result = []\n  result[0] = n\n  result[1] = 1\
    \ + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result\
    \ = [3,1] if n.even? \n  result = [result[0] + result[1],result[2] + result[3]]\
    \ if n.odd?\n  result\nend\n</cell>\n<code language=julia-1.0>", "  result = []\n\
    \  result[0] = tri(1)\n  result[1] = tri(2)\n  result[2] = tri(3) + tri(1)\n \
    \ result[3] = tri(3) + tri(2) + tri(1)\n  result[4] = tri(3) + tri(2) + tri(1)\
    \ + tri(4)\n  result[5] = tri(3) + tri(2) + tri(1) + tri(4) + tri(1)\n  result[6]\
    \ = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1)\n  result[7] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3)\n  result[8] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(1)\n  result[9]\
    \ = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\n\
    \  result[10] = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) +\
    \ tri(2) + tri(1) + tri(4)\n  result[11] = tri(3) + tri(2) + tri(1) + tri(4) +\
    \ tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4) + tri(1)\n  result[12] =\
    \ tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\
    \ + tri(4) + tri(2) + tri(1)\n  result[13] = tri(3) + tri(2) + tri(1) + tri(4)\
    \ + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3)\n\
    \  result[14] = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) +\
    \ tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(1)\n  result[15] =\
    \ tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\
    \ + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\n  result[16] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4)\
    \ + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4)\n  result[17] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(", "  result = []\n\
    \  result = [3,1] if n.even? \n  result = [result[0] + result[1] + result[2],\n\
    \            result[0] - result[1] - result[2]]\n  result\nend", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2)\n  result[3] = tri(n - 1)\n  result[4] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3)\n  result[7] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3) + tri(n + 4)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5)\n  result[9] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5)\
    \ + tri(n + 6)\n  result[10] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7)\n  result[11]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8)\n  result[12] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9)\n  result[13] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\n  result[14]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\
    \ + tri(n + 11)\n  result[15] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3) + tri(n + 4) + tri", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end", "  result = []\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result.push(tri_sum)\n  tri_sum += tri_sum\n  tri_sum += tri_",
  "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  result[n] = result[n-1] + result[n-2] + result[n-3] + result[n-4]\n\
    \  return result\nend", "  result = []\n  result = [3,1] if n.even?\n  result\
    \ = [result[0] + result[1],result[2] + result[3]] if n.odd?\n  result\nend", " \
    \ tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend\n</cell>\n<code language=julia-1.0>",
  "  tri_seq = [3]\n  while tri_seq.length < n + 1 do\n    tri_seq.push(tri_seq[tri_seq.length\
    \ - 1] + tri_seq[tri_seq.length - 2] + tri_seq[tri_seq.length + 1])\n  end\n \
    \ tri_seq\nend", "  result = []\n  result = [3,1] if n.even?\n  result = [1,n]\
    \ if n.odd?\n  result.concat(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  return result\n\
    end", "  result = []\n  result[0] = n\n  result[1] = 1 + n / 2\n  result[2] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  return result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 + n / 2\n  tri_seq << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  tri_seq\n\
    end", "  result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n \
    \ result[2] = result[1] + result[2]\n  result[3] = result[2] + result[3]\n  return\
    \ result\nend", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0]\
    \ + result[1], result[0] + result[1] + result[2]] if n.odd?\n  result\nend", " \
    \ result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n  result[3] = tri(n - 1) + tri(n\
    \ + 1)\n  result[4] = tri(n - 1)\n  result[5] = tri(n + 1)\n  result[6] = tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2) + tri(n + 2)\n  result[7] = tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2) + tri(n + 2) + tri(n + 3)\n  result[8] = tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2) + tri(n + 2) + tri(n + 3) + tri(n + 4)\n  result[9] = tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5)\n  result[10] = tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n + 2) + tri(n\
    \ + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[11] = tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n\
    \ + 6) + tri(n + 7)\n  result[12] = tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8)\n  result[13] = tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n + 2) + tri(n\
    \ + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n\
    \ + 9)\n  result[14] = tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n + 2) + tri(n\
    \ + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n\
    \ + 9) + tri(n + 10)\n  result[15] = tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8) + tri(n + 9) + tri(n + 10) + tri(n + 11)\n  result[16] = tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2) + tri(n + 2) + tri(n + 3) + tri", "  result = []\n  result\
    \ = [3,1] if n.even? \n  result = [result[0] + result[1],result[2] + result[1]]\
    \ if n.odd?\n  result\nend", "  result = []\n  result[0] = tri(1)\n  result[1]\
    \ = tri(2) + tri(1)\n  result[2] = tri(3) + tri(2) + tri(1)\n  result[n] = tri(n-1)\
    \ + tri(n-2) + tri(n+1)\n  return result\nend", "  result = []\n  tri_1 = 1\n\
    \  tri_2 = 1\n  tri_3 = 1\n  tri_4 = n\n  while tri_4 > 0 do\n    tri_3 = tri_1\
    \ + tri_2\n    tri_2 = tri_1\n    tri_1 = tri_3\n    tri_4 = tri_4 - 1\n    result\
    \ << tri_3\n  end\n  result\nend", "  result = []\n  result[0] = tri_1(2)\n  result[1]\
    \ = tri_1(3)\n  result[2] = tri_1(4)\n  result[3] = tri_1(5)\n  result[4] = tri_1(6)\n\
    \  result[5] = tri_1(7)\n  result[6] = tri_1(8)\n  result[7] = tri_1(9)\n  result[8]\
    \ = tri_1(10)\n  result[9] = tri_1(11)\n  result[10] = tri_1(12)\n  result[11]\
    \ = tri_1(13)\n  result[12] = tri_1(14)\n  result[13] = tri_1(15)\n  result[14]\
    \ = tri_1(16)\n  result[15] = tri_1(17)\n  result[16] = tri_1(18)\n  result[17]\
    \ = tri_1(19)\n  result[18] = tri_1(20)\n  result[19] = tri_1(21)\n  result[20]\
    \ = tri_1(22)\n  result[21] = tri_1(23)\n  result[22] = tri_1(24)\n  result[23]\
    \ = tri_1(25)\n  result[24] = tri_1(26)\n  result[25] = tri_1(27)\n  result[26]\
    \ = tri_1(28)\n  result[27] = tri_1(29)\n  result[28] = tri_1(30)\n  result[29]\
    \ = tri_1(31)\n  result[30] = tri_1(32)\n  result[31] = tri_1(33)\n  result[32]\
    \ = tri_1(34)\n  result[33] = tri_1(35)\n  result[34] = tri_1(36)\n  result[35]\
    \ = tri_1(37)\n  result[36] = tri_1(38)\n  result[37] = tri_1(39)\n  result[38]\
    \ = tri_1(40)\n  result[39] = tri_1(41)\n  result[40] = tri_1(42)\n  result[41]\
    \ = tri_1(43)\n  result[42] = tri_1(44)\n  result[43] = tri_1(45)\n  result[44]\
    \ = tri_1(46)\n  result[45] = tri_1(47)\n  result[46] = tri_1(48)\n  result[47]\
    \ = tri_1(49)\n  result[48] = tri_1(50)\n  result[49] = tri_1(51)\n  result[50]\
    \ = tri_1(52)\n  result[51] = tri_1(53)\n  result[52] = tri_1(54)\n  result[53]\
    \ = tri_1(55)", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq\
    \ << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  tri_seq\nend", "  tri_seq = []\n\
    \  tri_seq << 3 if n.even?\n  tri_seq << 1 + n.divmod(2).first + n.divmod(2).last\n\
    \  tri_seq << tri_seq[-1] + tri_seq[-2] - tri_seq[-3]\n  tri_seq\nend", "  result\
    \ = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1] + result[2],\n\
    \            result[0] + result[2] + result[1],\n            result[1] + result[2]\
    \ + result[0]] \n  result\nend", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n\
    \  result[3] = tri(n - 1)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[6]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result[7]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\n\
    \  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\
    \ + tri(n + 4) + tri(n + 5)\n  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[10]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7)\n  result[11] = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n\
    \ + 6) + tri(n + 7) + tri(n + 8)\n  result[12] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9)\n  result[13] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\n  result[14] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n\
    \ + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10) + tri(n + 11)\n  result[15]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri", "  result = []\n  tri_1 = 1\n  tri_2 = 1\n  tri_3 = 1\n  tri_4 = 2\n\
    \  tri_5 = tri_1 + tri_2\n  tri_6 = tri_3 + tri_4\n  tri_7 = tri_5 + tri_6\n \
    \ tri_8 = tri_7 + tri_8\n  tri_9 = tri_8 + tri_9\n  tri_10 = tri_9 + tri_10\n\
    \  tri_11 = tri_10 + tri_11\n  tri_12 = tri_11 + tri_12\n  tri_13 = tri_12 + tri_13\n\
    \  tri_14 = tri_13 + tri_14\n  tri_15 = tri_14 + tri_15\n  tri_16 = tri_15 + tri_16\n\
    \  tri_17 = tri_16 + tri_17\n  tri_18 = tri_17 + tri_18\n  tri_19 = tri_18 + tri_19\n\
    \  tri_20 = tri_19 + tri_20\n  tri_21 = tri_20 + tri_21\n  tri_22 = tri_21 + tri_22\n\
    \  tri_23 = tri_22 + tri_23\n  tri_24 = tri_23 + tri_24\n  tri_25 = tri_24 + tri_25\n\
    \  tri_26 = tri_25 + tri_26\n  tri_27 = tri_26 + tri_27\n  tri_28 = tri_27 + tri_28\n\
    \  tri_29 = tri_28 + tri_29\n  tri_30 = tri_29 + tri_30\n  tri_31 = tri_30 + tri_31\n\
    \  tri_32 = tri_31 + tri_32\n  tri_33 = tri_32 + tri_33\n  tri_34 = tri_33 + tri_34\n\
    \  tri_35 = tri_34 + tri_35\n  tri_36 = tri_35 + tri_36\n  tri_37 = tri_36 + tri_37\n\
    \  tri_38 = tri_37 + tri_38\n  tri_39 = tri_38 + tri_39\n  tri_40 = tri_39 + tri_40\n\
    \  tri_41 = tri_40 + tri_41\n  tri_42 = tri_41 + tri_42\n  tri_43 = tri_42 + tri_",
  "  result = []\n  result[0] = n\n  if n % 2 == 0\n    result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  else\n    result[1] = tri(n - 1) + tri(n - 2)\n  end\n\
    \  result\nend\nputs tri(10)", "  result = []\n  result[0] = n\n  result[1] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7)\
    \ + tri(n - 8)\n  result[3] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9)\
    \ + tri(n - 10)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n -\
    \ 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12)\n  result[5] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n\
    \ - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n\
    \ - 13) + tri(n - 14)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) +\
    \ tri(n - 15)\n  result[7] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9)\
    \ + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) + tri(n\
    \ - 15) + tri(n - 16)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) +\
    \ tri(n - 15) + tri(n - 16) + ", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  return result\nend",
  "  result = []\n  result[0] = n\n  result[1] = 1 + n / 2\n  result[2] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  tri_seq = [3,1]\n  n.times do |i|\n    tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] \n  end\n  tri_seq\nend", "  result = []\n  result = [3,1] if\
    \ n.even? \n  result = [result[0] + result[1] + result[2],\n            result[0]\
    \ - result[1] - result[2]]\n  result\nend", "  result = []\n  result[0] = n\n\
    \  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1)\
    \ + tri(n - 2)\n  result[3] = tri(n - 1)\n  return result\nend", "  result = []\n\
    \  result = [3,1] if n.even? \n  result = [result[0] + result[1],result[2] + result[0]]\
    \ if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n \
    \ return result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n -\
    \ 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result\n\
    end", "  result = []\n  result[0] = tri_helper(n,1,3,[])\n  result[1] = tri_helper(n,2,3,result[0])\n\
    \  result[2] = tri_helper(n,3,3,result[1])\n  result[3] = tri_helper(n,4,3,result[2])\n\
    \  result[4] = tri_helper(n,5,3,result[3])\n  result[5] = tri_helper(n,6,3,result[4])\n\
    \  result[6] = tri_helper(n,7,3,result[5])\n  result[7] = tri_helper(n,8,3,result[6])\n\
    \  result[8] = tri_helper(n,9,3,result[7])\n  result[9] = tri_helper(n,10,3,result[8])\n\
    \  result[10] = tri_helper(n,11,3,result[9])\n  result[11] = tri_helper(n,12,3,result[10])\n\
    \  result[12] = tri_helper(n,13,3,result[11])\n  result[13] = tri_helper(n,14,3,result[12])\n\
    \  result[14] = tri_helper(n,15,3,result[13])\n  result[15] = tri_helper(n,16,3,result[14])\n\
    \  result[16] = tri_helper(n,17,3,result[15])\n  result[17] = tri_helper(n,18,3,result[16])\n\
    \  result[18] = tri_helper(n,19,3,result[17])\n  result[19] = tri_helper(n,20,3,result[18])\n\
    \  result[20] = tri_helper(n,21,3,result[19])\n  result[21] = tri_helper(n,22,3,result[20])\n\
    \  result[22] = tri_helper(n,23,3,result[21])\n  result[23] = tri_helper(n,24,3,result[22])\n\
    \  result[24] = tri_helper(n,25,3,result[23])\n  result[25] = tri_helper(n,26,3,result[24])\n\
    \  result[26] = tri_helper(n,27,3,result[25])\n  result[27] = tri_helper(n,28,3,result[26])\n\
    \  result[28] = tri_helper(n,29,3,result[27])\n  result[29] = tri_helper(n,30,3,result[28])\n\
    \  result[30] = tri_helper(n,31,3,result[29])\n  result[31] = tri_helper(n,32,3,result[30])\n\
    \  result[32] = tri_helper(n,33,3,result[31])\n  result[33] = tri_", "  result\
    \ = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  result\nend", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n\
    \  result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  return result\nend", " \
    \ result = []\n  result = [3,1] if n==1 \n  result = [result[0]+result[1],result[0]+result[2]]\
    \ if n%2==0 \n  result = [result[0]+result[1],result[0]+result[2]] if n%2==1 \n\
    \  result\nend", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0]\
    \ + result[1],result[2] + result[3]] if n.odd?\n  result\nend", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result[n-2] + result[n-1] + result[n-2] + result[n-1] + result[n-2]\
    \ + result[n-1] + result", "  result = []\n  tri_seq = [3,1]\n  while tri_seq.length\
    \ < n\n    tri_seq << tri_seq[-1] + tri_seq[-2] # add last two elements\n  end\n\
    \  result << tri_seq[n]\n  result.push(*tri_seq[0...n-1]) # add first n elements\n\
    \  result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n  result[3] = tri(n\
    \ - 1) + tri(n + 1)\n  result[4] = tri(n - 1)\n  result[5] = tri(n + 1)\n  result[6]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[7] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result[8] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\n  result[9]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5)\n  result[10] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[11] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7)\n  result[12] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8)\n  result[13] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8) + tri(n + 9)\n  result[14] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8) + tri(n + 9) + tri(n + 10)\n  result[15] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10) + tri(n + 11)\n  result[16] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri",
  "  result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n  result[2]\
    \ = result[0] + result[1] + result[2]\n  result[3] = result[0] + result[1] + result[2]\
    \ + result[3]\n  result[4] = result[0] + result[1] + result[2] + result[3] + result[4]\n\
    \  result[5] = result[0] + result[1] + result[2] + result[3] + result[4] + result[5]\n\
    \  result[6] = result[0] + result[1] + result[2] + result[3] + result[4] + result[5]\
    \ + result[6]\n  result[7] = result[0] + result[1] + result[2] + result[3] + result[4]\
    \ + result[5] + result[6] + result[7]\n  result[8] = result[0] + result[1] + result[2]\
    \ + result[3] + result[4] + result[5] + result[6] + result[7] + result[8]\n  result[9]\
    \ = result[0] + result[1] + result[2] + result[3] + result[4] + result[5] + result[6]\
    \ + result[7] + result[8] + result[9]\n  result[10] = result[0] + result[1] +\
    \ result[2] + result[3] + result[4] + result[5] + result[6] + result[7] + result[8]\
    \ + result[9] + result[10]\n  result[11] = result[0] + result[1] + result[2] +\
    \ result[3] + result[4] + result[5] + result[6] + result[7] + result[8] + result[9]\
    \ + result[10] + result[11]\n  result[12] = result[0] + result[1] + result[2]\
    \ + result[3] + result[4] + result[5] + result[6] + result[7] + result[8] + result[9]\
    \ + result[10] + result[11] + result[12]\n  result[13] = result[0] + result[1]\
    \ + result[2] + result[3] + result[4] + result[5] + result[6] + result[7] + result[8]\
    \ + result[9] + result[10] + result[11] + result[12] + result[13]\n  result[14]\
    \ = result[0] + result[1] + result[2] + result[3] + result[4] + result[5] + result[6]\
    \ + result[7] + result[8] + result[9] + result[10] + result[11] + result[12] +\
    \ result[13] + result[14]\n  result[15] = result[0] + result[1] + result[2] +\
    \ result[3] + result[4] + result[5] + result[6] + result[7] + result[8] + result[9]\
    \ + result[10] + result[11] + result[12] + result[13] + result[14] + result[15]\n\
    \  result[16] = result[0] + result[1] + result[2] + result[3] + result[4] + result[5]\
    \ + result[6] + result[7] + result[8] + result[9] + result[10] + result[11] +\
    \ result[12] + result[", "  tri_seq = [3,1]\n  n.times do |i|\n    tri_seq <<\
    \ tri_seq[-1] + tri_seq[-2] # Tribonacci sequence is symmetric\n  end\n  tri_seq\n\
    end", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] \n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end", "  tri_seq = [3,1]\n  n.times do |i|\n    tri_seq << tri_seq[-1] + tri_seq[-2]\
    \ + tri_seq[-3]\n  end\n  tri_seq\nend", "  result = []\n  result = [3,1] if n.even?\n\
    \  result = [result[0] + result[1],result[2] + result[0]] if n.odd?\n  result\n\
    end", "  result = []\n  result[0] = n\n  if n % 2 == 0\n    result[1] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  else\n    result[1] = tri(n - 1) + tri(n -\
    \ 2)\n  end\n  result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 +\
    \ n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + (tri_seq[-1] + tri_seq[-2])\n\
    \  tri_seq\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq\
    \ << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend", "  result = []\n\
    \  result = [3,1] if n.even?\n  result = [result[0] + result[1],result[2] + result[1]]\
    \ if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1] = result[0]\
    \ + result[1]\n  result[2] = result[1] + result[2]\n  result[3] = result[2] +\
    \ result[3]\n  result[4] = result[3] + result[4]\n  result[5] = result[4] + result[5]\n\
    \  result[6] = result[5] + result[6]\n  result[7] = result[6] + result[7]\n  result[8]\
    \ = result[7] + result[8]\n  result[9] = result[8] + result[9]\n  result[10] =\
    \ result[9] + result[10]\n  result[11] = result[10] + result[11]\n  result[12]\
    \ = result[11] + result[12]\n  result[13] = result[12] + result[13]\n  result[14]\
    \ = result[13] + result[14]\n  result[15] = result[14] + result[15]\n  result[16]\
    \ = result[15] + result[16]\n  result[17] = result[16] + result[17]\n  result[18]\
    \ = result[17] + result[18]\n  result[19] = result[18] + result[19]\n  result[20]\
    \ = result[19] + result[20]\n  result[21] = result[20] + result[21]\n  result[22]\
    \ = result[21] + result[22]\n  result[23] = result[22] + result[23]\n  result[24]\
    \ = result[23] + result[24]\n  result[25] = result[24] + result[25]\n  result[26]\
    \ = result[25] + result[26]\n  result[27] = result[26] + result[27]\n  result[28]\
    \ = result[27] + result[28]\n  result[29] = result[28] + result[29]\n  result[30]\
    \ = result[29] + result[30]\n  result[31] = result[30] + result[31]\n  result[32]\
    \ = result[31] + result[32]\n  result[33] = result[32] + result[33]\n  result[34]\
    \ = result[33] + result[34]\n  result[35] = result[34] + result[35]\n  result[36]\
    \ = result[35] + result[36]\n  result[37] = result[36] + result[37]\n  result[38]\
    \ = result[37] + result[38]\n  result[39] = result[38] + result[39]\n  result[40]\
    \ = result[39] + result[40]\n  result[41] = result[40] + result[41]\n  result[42]\
    \ = result[41] + result[22]\n  result[43] = result[42] + result[43]\n  result[44]\
    \ = result[43] + result[44]\n  result[45] = result[44] + result[45]\n  result[46]\
    \ = result[45] + result[46]\n  ", "  tri_seq = []\n  tri_seq << 3\n  tri_seq <<\
    \ 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\nend",
  "  result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n  result[2]\
    \ = result[1] + result[2]\n  result[3] = result[2] + result[3]\n  result[4] =\
    \ result[3] + result[4]\n  result[5] = result[4] + result[5]\n  result[6] = result[5]\
    \ + result[6]\n  result[7] = result[6] + result[7]\n  result[8] = result[7] +\
    \ result[8]\n  result[9] = result[8] + result[9]\n  result[10] = result[9] + result[10]\n\
    \  result[11] = result[10] + result[11]\n  result[12] = result[11] + result[12]\n\
    \  result[13] = result[12] + result[13]\n  result[14] = result[13] + result[14]\n\
    \  result[15] = result[14] + result[15]\n  result[16] = result[15] + result[16]\n\
    \  result[17] = result[16] + result[17]\n  result[18] = result[17] + result[18]\n\
    \  result[19] = result[18] + result[19]\n  result[20] = result[19] + result[20]\n\
    \  result[21] = result[20] + result[21]\n  result[22] = result[21] + result[22]\n\
    \  result[23] = result[22] + result[23]\n  result[24] = result[23] + result[24]\n\
    \  result[25] = result[24] + result[25]\n  result[26] = result[25] + result[26]\n\
    \  result[27] = result[26] + result[27]\n  result[28] = result[27] + result[28]\n\
    \  result[29] = result[28] + result[29]\n  result[30] = result[29] + result[30]\n\
    \  result[31] = result[30] + result[31]\n  result[32] = result[31] + result[32]\n\
    \  result[33] = result[32] + result[33]\n  result[34] = result[33] + result[34]\n\
    \  result[35] = result[34] + result[35]\n  result[36] = result[35] + result[36]\n\
    \  result[37] = result[36] + result[37]\n  result[38] = result[37] + result[38]\n\
    \  result[39] = result[38] + result[39]\n  result[40] = result[39] + result[40]\n\
    \  result[41] = result[40] + result[41]\n  result[42] = result[41] + result[42]\n\
    \  result[43] = result[42] + result[43]\n  result[44] = result[43] + result[44]\n\
    \  result[45] = result[44] + result[45]\n  result[46] = result[45] + result[46]\n\
    \  ", "  tri_array = []\n  tri_array[0] = 3\n  tri_array[1] = 1 + n / 2\n  if\
    \ n % 2 == 0\n    tri_array[2] = tri_array[1] + tri_array[0]\n  else\n    tri_array[2]\
    \ = tri_array[1] + tri_array[0] + tri_array[0]\n  end\n  tri_array[n] = tri_array[n-1]\
    \ + tri_array[n-2] + tri_array[n+1]\n  return tri_array\nend", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2)\n  result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  return result\nend", "  result = []\n  result[0] = n\n  if n % 2 == 0\n   \
    \ result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    result[1] = tri(n\
    \ - 1) + tri(n - 2)\n  end\n  result\nend", "  result = []\n  result = [3,1] if\
    \ n.even?\n  result = [result[0] + result[1],result[2] + result[3]] if n.odd?\n\
    \  result\nend", "  result = []\n  result[0] = n\n  result[1] = 1 + n / 2\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  return result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n  result[3] = tri(n - 1)\
    \ + tri(n + 1)\n  result[4] = tri(n - 1)\n  result[5] = tri(n + 1)\n  result[6]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[7] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result[8] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\n  result[9]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5)\n  result[10] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[11] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7)\n  result[12] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8)\n  result[13] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8) + tri(n + 9)\n  result[14] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n\
    \ + 8) + tri(n + 9) + tri(n + 10)\n  result[15] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10) + tri(n + 11)\n  result[16] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri",
  "  result = []\n  result[0] = tri(1) + tri(2)\n  result[1] = tri(3) + tri(4)\n \
    \ result[2] = tri(5) + tri(6)\n  result[n] = result[n-1] + result[n-2] + result[n-3]\n\
    \  return result\nend", "  result = []\n  result = [3,1] if n.even?\n  result\
    \ = [result[0] + result[1] + result[2], result[1]] if n.odd?\n  result\nend",
  "  result = []\n  result[0] = n\n  result[1] = 1 + n / 2\n  result[2] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n+1]\n  return result\nend", "  result\
    \ = []\n  result[0] = tri(1)\n  result[1] = tri(2)\n  result[2] = tri(3) + tri(1)\n\
    \  result[3] = tri(3) + tri(2) + tri(1)\n  result[4] = tri(3) + tri(2) + tri(1)\
    \ + tri(4)\n  result[5] = tri(3) + tri(2) + tri(1) + tri(4) + tri(1)\n  result[6]\
    \ = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1)\n  result[7] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3)\n  result[8] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(1)\n  result[9]\
    \ = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\n\
    \  result[10] = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) +\
    \ tri(2) + tri(1) + tri(4)\n  result[11] = tri(3) + tri(2) + tri(1) + tri(4) +\
    \ tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4) + tri(1)\n  result[12] =\
    \ tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\
    \ + tri(4) + tri(2) + tri(1)\n  result[13] = tri(3) + tri(2) + tri(1) + tri(4)\
    \ + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3)\n\
    \  result[14] = tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) +\
    \ tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(1)\n  result[15] =\
    \ tri(3) + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\
    \ + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1)\n  result[16] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4)\
    \ + tri(2) + tri(1) + tri(3) + tri(2) + tri(1) + tri(4)\n  result[17] = tri(3)\
    \ + tri(2) + tri(1) + tri(4) + tri(2) + tri(1) + tri(3) + tri(", "  tri_seq =\
    \ []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  tri_seq\nend", "  result = []\n  result = [3,1] if n.even?\
    \ \n  result = [result[0] + result[1] + result[2],\n            result[0] - result[1]\
    \ - result[2]]\n  result\nend", "  result = []\n  result[0] = n\n  result[1] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 2) + tri(n - 1)\
    \ + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return\
    \ result\nend\n</cell>\n<code language=julia-1.0>", "  tri_seq = [3,1]\n  n.times\
    \ do |i|\n    tri_seq << tri_seq[-1] + tri_seq[-2] \n  end\n  tri_seq\nend", " \
    \ result = []\n  result[0] = n\n  result[1] = result[0] + result[1]\n  result[2]\
    \ = result[1] + result[2]\n  result[3] = result[2] + result[3]\n  return result\n\
    end", "  result = []\n  result[0] = tri_1(3)\n  result[1] = tri_2(3)\n  result[2]\
    \ = tri_3(3)\n  result[3] = tri_4(3)\n  result[4] = tri_5(3)\n  result[5] = tri_6(3)\n\
    \  result[6] = tri_7(3)\n  result[7] = tri_8(3)\n  result[8] = tri_9(3)\n  result[9]\
    \ = tri_10(3)\n  result[10] = tri_11(3)\n  result[11] = tri_12(3)\n  result[12]\
    \ = tri_13(3)\n  result[13] = tri_14(3)\n  result[14] = tri_15(3)\n  result[15]\
    \ = tri_16(3)\n  result[16] = tri_17(3)\n  result[17] = tri_18(3)\n  result[18]\
    \ = tri_19(3)\n  result[19] = tri_20(3)\n  result[20] = tri_21(3)\n  result[21]\
    \ = tri_22(3)\n  result[22] = tri_23(3)\n  result[23] = tri_24(3)\n  result[24]\
    \ = tri_25(3)\n  result[25] = tri_26(3)\n  result[26] = tri_27(3)\n  result[27]\
    \ = tri_28(3)\n  result[28] = tri_29(3)\n  result[29] = tri_30(3)\n  result[30]\
    \ = tri_31(3)\n  result[31] = tri_32(3)\n  result[32] = tri_33(3)\n  result[33]\
    \ = tri_34(3)\n  result[34] = tri_35(3)\n  result[35] = tri_36(3)\n  result[36]\
    \ = tri_37(3)\n  result[37] = tri_38(3)\n  result[38] = tri_39(3)\n  result[39]\
    \ = tri_40(3)\n  result[40] = tri_41(3)\n  result[41] = tri_42(3)\n  result[42]\
    \ = tri_43(3)\n  result[43] = tri_44(3)\n  result[44] = tri_45(3)\n  result[45]\
    \ = tri_46(3)\n  result[46] = tri_47(3)\n  result[47] = tri_48(3)\n  result[48]\
    \ = tri_49(3)\n  result[49] = tri_50(3)\n  result[50] = tri_51(3)\n  result[51]\
    \ = tri_52(3)\n  result[52] = tri_53(3)\n  result[53] = tri_54(3)\n  result[54]\
    \ = tri_55(3)\n  result[55] = tri_56(3)\n  result[56] = tri_57(3)\n", "  tri_seq\
    \ = []\n  tri_seq << 3\n  tri_seq << 1 if n % 2 == 0\n  tri_seq << 1 + n / 2 if\
    \ n % 2 == 1\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end\n</cell>\n<code language=julia-1.0>", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  tri_seq = [3,1]\n  n.times\
    \ do |i|\n    tri_seq << tri_seq[-1] + tri_seq[-2] \n  end\n  tri_seq\nend", " \
    \ tri_seq = [1,3,5]\n  n.times { tri_seq.push(tri_seq.pop + tri_seq.pop) }\n \
    \ tri_seq\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq\
    \ << tri_seq[-1] + tri_seq[-2] + (n + 1) / 2\n  tri_seq\nend", "  result = []\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  result = []\n  result[0] = n\n  result[1] = 1 + n /\
    \ 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n \
    \ return result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n\
    \  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend", "  result\
    \ = []\n  result = [3,1] if n.even?\n  result = [result[0] + result[1],result[2]\
    \ + result[0]] if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n\
    \  result[n] = result[n-1] + result[n-2]\n  result\nend", "  tri_seq = []\n  tri_seq\
    \ << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n\
    \  tri_seq\nend", "  result = []\n  tri_n = tri(n-1)\n  tri_n.each do |i|\n  \
    \  result << i\n  end\n  result\nend", "  result = []\n  result = [3,1] if n.even?\
    \ \n  result = [result[0] + result[1],result[2] + result[3]] if n.odd?\n  result\n\
    end", "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend", "  result = []\n  result[0] =\
    \ n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  result[n] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6)\n  result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[3] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n\
    \ - 3) + tri(n - 2) + tri(n + 1)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n\
    \ + 1)\n  result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 6) + tri(n\
    \ - 5) + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[6] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 5) + tri(n - 4) + tri(n\
    \ - 3) + tri(n - 2) + tri(n + 1) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n\
    \ - 3) + tri(n - 2) + tri(n + 1) + tri(n - 7) + tri(n - 6) + tri(n - 5) + tri(n\
    \ - 4) + tri(n - 3) + tri(n - 2) + tri(n + 1)\n  result[7] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n\
    \ - 3) + tri(n - 2) + tri(n + 1) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n - 3) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 7) + tri(n - 6) + tri(n - 5) + tri(n - 4) + tri(n\
    \ - 3) + tri(n - 2) + tri(n + 1) + tri(n - 8", "  result = []\n  result = [3,1]\
    \ if n==0\n  result = [1,1] if n==1\n  result = [1,1] if n==2\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3 == 3\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3 == 3\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3 == 3\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3 == 3\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3 == 3\n  result = [1,1]\
    \ if n%3 == 0\n  result = [1,1] if n%3 == 1\n  result = [1,1] if n%3 == 2\n  result\
    \ = [1,1] if n%3 == 3\n  result = [1,1] if n%3 == 0\n  result = [1,1] if n%3 ==\
    \ 1\n  result = [1,1] if n%3 == 2\n  result = [1,1] if n%3", "  tri_seq = []\n\
    \  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2]\
    \ + tri_seq[-3]\n  tri_seq\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq <<\
    \ 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\n\
    end\n</cell>\n<cell>", "  result = []\n  result[0] = n\n  result[1] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  result[n] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\n  result\nend\n</cell>\n\
    <code language=julia-1.0>", "  result = []\n  result = [3,1] if n.even? \n  result\
    \ = [result[0] + result[1],result[0] + result[1] + result[2]] if n.odd?\n  result\n\
    end", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\
    \  return result\nend", "  result = []\n  result = [3,1] if n%2 == 0\n  result\
    \ = [result[0] + result[1],result[2] + result[3]]\n  result\nend", "  result =\
    \ []\n  result[0] = n\n  if n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  else\n    result[1] = tri(n - 1) + tri(n - 2)\n  end\n  result\n\
    end", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1]\
    \ + result[2], result[0]] if n.odd?\n  result\nend", "  result = []\n  result\
    \ = [3,1] if n.even? \n  result = [result[0] + result[1],result[2] + result[0]]\
    \ if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n+1]\n  return result\nend", "  result\
    \ = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  result\nend", "  result = []\n  result[0] =  3\n  result[1]\
    \ = 1 + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n+1]\n  return result\nend", "  tri_seq\
    \ = []\n  if n == 1\n    tri_seq << 3\n  elsif n % 2 == 0\n    tri_seq << 1 +\
    \ n / 2\n  else\n    tri_seq << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    \  tri_seq\nend", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0]\
    \ + result[1], result[0] + result[1] + result[2]] if n.odd?\n  result\nend", " \
    \ result = []\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n",
  "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  result[2] = tri(n - 2) + tri(n - 1) + tri(n + 1)\n  result[n] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n \
    \ return result\nend", "  tri_seq = []\n  if n == 0\n    tri_seq << 0\n  elsif\
    \ n == 1\n    tri_seq << 1\n  elsif n % 2 == 0\n    tri_seq << tri(n - 1) + tri(n\
    \ - 2)\n  else\n    tri_seq << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n \
    \ tri_seq\nend", "  tri_array = []\n  tri_array[0] =  3\n  tri_array[1] = 1 +\
    \ n / 2\n  if n % 2 == 0\n    tri_array[2] = tri_array[1] + tri_array[0]\n  else\n\
    \    tri_array[2] = tri_array[1] + tri_array[0]\n    tri_array[3] = tri_array[2]\
    \ + tri_array[1]\n  end\n  return tri_array\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  result[3] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7)\n  result[5] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n\
    \ - 7) + tri(n - 8)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9)\n  result[7] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10) + tri(n - 11)\n  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12)\n  result[10] = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\
    \ + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n -\
    \ 12) + tri(n - 13)\n  result[11] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + ", " \
    \ result = []\n  result = [3,1] if n.even?\n  result = [result[0] + result[1],result[2]\
    \ + result[1]] if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  result = []\n  result[0] =  3\n  result[1] = 1 + n\
    \ / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ = n\n  if n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    result[1] = tri(n - 1) + tri(n - 2)\n  end\n  result\nend", "  result\
    \ = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[2] = tri(n - 2) + tri(n - 1) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend\n</cell>\n<code language=julia-1.5>",
  "  result = []\n  result = [3,1] if n%2 == 0\n  result = [result[0] + result[1],result[1]+result[2]]\
    \ if n%2 == 1\n  result\nend", "  result = []\n  result[0] = n\n  result[1] =\
    \ tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\nend",
  "  tri_seq = []\n  tri_seq << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] \n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-1]\n  tri_seq\n\
    end", "  tri_seq = []\n  tri_seq << 3 if n.even?\n  tri_seq << 1 + n / 2 if n.odd?\n\
    \  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend\n</cell>\n\
    <code language=julia-1.0>", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n+1]\n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  result = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1],result[2]\
    \ + result[0]] if n.odd?\n  result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 + n / 2\n  tri_seq << tri(n - 1) + tri(n - 2) + tri(n + 1)\n  tri_seq\n\
    end", "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n\
    \  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  tri_seq = [3,1]\n  n.times do |i|\n    tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] + tri_seq[-3]\n  end\n  tri_seq\nend", "  result = []\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n", "  result = []\n  tri_1 = 1\n  tri_2\
    \ = 1\n  tri_3 = 1\n  tri_4 = 2\n  tri_5 = tri_1 + tri_2\n  tri_6 = tri_3 + tri_4\n\
    \  tri_7 = tri_5 + tri_6\n  tri_8 = tri_7 + tri_8\n  tri_9 = tri_8 + tri_9\n \
    \ tri_10 = tri_9 + tri_10\n  tri_11 = tri_10 + tri_11\n  tri_12 = tri_11 + tri_12\n\
    \  tri_13 = tri_12 + tri_13\n  tri_14 = tri_13 + tri_14\n  tri_15 = tri_14 + tri_15\n\
    \  tri_16 = tri_15 + tri_16\n  tri_17 = tri_16 + tri_17\n  tri_18 = tri_17 + tri_18\n\
    \  tri_19 = tri_18 + tri_19\n  tri_20 = tri_19 + tri_20\n  tri_21 = tri_20 + tri_21\n\
    \  tri_22 = tri_21 + tri_22\n  tri_23 = tri_22 + tri_23\n  tri_24 = tri_23 + tri_24\n\
    \  tri_25 = tri_24 + tri_25\n  tri_26 = tri_25 + tri_26\n  tri_27 = tri_26 + tri_27\n\
    \  tri_28 = tri_27 + tri_28\n  tri_29 = tri_28 + tri_29\n  tri_30 = tri_29 + tri_30\n\
    \  tri_31 = tri_30 + tri_31\n  tri_32 = tri_31 + tri_32\n  tri_33 = tri_32 + tri_33\n\
    \  tri_34 = tri_33 + tri_34\n  tri_35 = tri_34 + tri_35\n  tri_36 = tri_35 + tri_36\n\
    \  tri_37 = tri_36 + tri_37\n  tri_38 = tri_37 + tri_38\n  tri_39 = tri_38 + tri_39\n\
    \  tri_40 = tri_39 + tri_40\n  tri_41 = tri_40 + tri_41\n  tri_42 = tri_41 + tri_42\n\
    \  tri_43 = tri_42 + tri_", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  result[n] = result[n-1] + result[n-2] + result[n-3]\
    \ + result[n-4]\n  return result\nend", "  result = []\n  result[0] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2]\
    \ = tri(n - 1)\n  result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result\n\
    end\nputs tri(10)", "  result = []\n  result[0] =  3\n  result[1] = 1 + n / 2\n\
    \  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ =  3\n  result[1] = 1 + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\n\
    end", "  result = []\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum =\
    \ 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result\
    \ << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum =\
    \ 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result\
    \ << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n  tri_sum = 0\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result << tri_sum\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri",
  "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  return result\nend", "  result = []\n  result[0] = n\n  if\
    \ n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n \
    \   result[1] = tri(n - 1) + tri(n - 2)\n  end\n  result\nend", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ = n\n  if n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    result[1] = tri(n - 1) + tri(n - 2)\n  end\n  result\nend", "  result\
    \ = []\n  result[0] = tri_1(2)\n  result[1] = tri_1(3)\n  result[2] = tri_1(4)\n\
    \  result[3] = tri_1(5)\n  result[4] = tri_1(6)\n  result[5] = tri_1(7)\n  result[6]\
    \ = tri_1(8)\n  result[7] = tri_1(9)\n  result[8] = tri_1(10)\n  result[9] = tri_1(11)\n\
    \  result[10] = tri_1(12)\n  result[11] = tri_1(13)\n  result[12] = tri_1(14)\n\
    \  result[13] = tri_1(15)\n  result[14] = tri_1(16)\n  result[15] = tri_1(17)\n\
    \  result[16] = tri_1(18)\n  result[17] = tri_1(19)\n  result[18] = tri_1(20)\n\
    \  result[19] = tri_1(21)\n  result[20] = tri_1(22)\n  result[21] = tri_1(23)\n\
    \  result[22] = tri_1(24)\n  result[23] = tri_1(25)\n  result[24] = tri_1(26)\n\
    \  result[25] = tri_1(27)\n  result[26] = tri_1(28)\n  result[27] = tri_1(29)\n\
    \  result[28] = tri_1(30)\n  result[29] = tri_1(31)\n  result[30] = tri_1(32)\n\
    \  result[31] = tri_1(33)\n  result[32] = tri_1(34)\n  result[33] = tri_1(35)\n\
    \  result[34] = tri_1(36)\n  result[35] = tri_1(37)\n  result[36] = tri_1(38)\n\
    \  result[37] = tri_1(39)\n  result[38] = tri_1(40)\n  result[39] = tri_1(41)\n\
    \  result[40] = tri_1(42)\n  result[41] = tri_1(43)\n  result[42] = tri_1(44)\n\
    \  result[43] = tri_1(45)\n  result[44] = tri_1(46)\n  result[45] = tri_1(47)\n\
    \  result[46] = tri_1(48)\n  result[47] = tri_1(49)\n  result[48] = tri_1(50)\n\
    \  result[49] = tri_1(51)\n  result[50] = tri_", "  result = []\n  result[0] =\
    \ n\n  if n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    result[1] = tri(n - 1) + tri(n - 2)\n  end\n  result\nend", "  result\
    \ = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1], result[0]\
    \ + result[1] + result[2]] if n.odd?\n  result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = 1 + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\n\
    end", "  tri_seq = [1,3,5]\n  tri_seq.each do |i|\n    if i.even?\n      tri_seq\
    \ << tri(i - 1) + tri(i - 2) + tri(i + 1)\n    end\n  end\n  tri_seq\nend", " \
    \ tri_seq = []\n  tri_seq << 3 if n.even?\n  tri_seq << 1 + n / 2 if n.odd?\n\
    \  tri_seq << tri_seq[-1] + tri_seq[-2] if n.odd?\n  tri_seq\nend", "  tri_seq\
    \ = []\n  tri_seq << 3\n  tri_seq << 1 if n.even?\n  tri_seq << tri_seq[-1] +\
    \ tri_seq[-2] if n.odd?\n  tri_seq\nend", "  result = []\n  result[0] =  3\n \
    \ result[1] = 1 + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\nend",
  "  result = []\n  result = [3,1][n%2 == 0] + [n/2][n%2 == 1] + [n/3][n%2 == 2]\n\
    \  return result\nend", "  result = []\n  result[0] =  3\n  result[1] = 1 + n\
    \ / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1]\
    \ + result[n-2] + result[n+1]\n  return result\nend", "  result = []\n  result[0]\
    \ = n\n  result[1] = 1 + n / 2\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n  return result\n\
    end", "  result = []\n  result[0] = tri_helper(n,1)\n  result[1] = tri_helper(n,2)\n\
    \  result[2] = tri_helper(n,3)\n  result[3] = tri_helper(n,4)\n  result[4] = tri_helper(n,5)\n\
    \  result[5] = tri_helper(n,6)\n  result[6] = tri_helper(n,7)\n  result[7] = tri_helper(n,8)\n\
    \  result[8] = tri_helper(n,9)\n  result[9] = tri_helper(n,10)\n  result[10] =\
    \ tri_helper(n,11)\n  result[11] = tri_helper(n,12)\n  result[12] = tri_helper(n,13)\n\
    \  result[13] = tri_helper(n,14)\n  result[14] = tri_helper(n,15)\n  result[15]\
    \ = tri_helper(n,16)\n  result[16] = tri_helper(n,17)\n  result[17] = tri_helper(n,18)\n\
    \  result[18] = tri_helper(n,19)\n  result[19] = tri_helper(n,20)\n  result[20]\
    \ = tri_helper(n,21)\n  result[21] = tri_helper(n,22)\n  result[22] = tri_helper(n,23)\n\
    \  result[23] = tri_helper(n,24)\n  result[24] = tri_helper(n,25)\n  result[25]\
    \ = tri_helper(n,26)\n  result[26] = tri_helper(n,27)\n  result[27] = tri_helper(n,28)\n\
    \  result[28] = tri_helper(n,29)\n  result[29] = tri_helper(n,30)\n  result[30]\
    \ = tri_helper(n,31)\n  result[31] = tri_helper(n,32)\n  result[32] = tri_helper(n,33)\n\
    \  result[33] = tri_helper(n,34)\n  result[34] = tri_helper(n,35)\n  result[35]\
    \ = tri_helper(n,36)\n  result[36] = tri_helper(n,37)\n  result[37] = tri_helper(n,38)\n\
    \  result[38] = tri_helper(n,39)\n  result[39] = tri_helper(n,40)\n  result[40]\
    \ = tri_helper(n,41)\n  result[41] = tri_helper(n,42)\n  result[42] = tri_helper(n,",
  "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  return\
    \ result\nend", "  result = []\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum\
    \ += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n\
    \  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum = 0\n  tri_sum += tri_sum\n\
    \  tri_sum += tri_sum\n  tri_sum += tri_sum\n  result.push(tri_sum)\n  tri_sum\
    \ = 0\n  tri_sum += tri_sum\n", "  result = []\n  result = [3,1] if n%2 == 0\n\
    \  result = [result[0] + result[1],result[0]+result[1]+result[2]] if n%2 == 1\n\
    \  result\nend", "  result = []\n  result[0] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n+1]\n  return result\nend", "  result\
    \ = []\n  tri_number = 1\n  tri_number_2 = 1\n  tri_number_3 = 1\n  while tri_number\
    \ <= n\n    tri_number = tri_number_2 + tri_number_3\n    tri_number_2 = tri_number_3\n\
    \    tri_number_3 = tri_number\n    result << tri_number\n  end\n  result\nend",
  "  result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9)\n  result[3]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5)\
    \ + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n -\
    \ 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) + tri(n - 15)\n  result[4] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n\
    \ - 12) + tri(n - 13) + tri(n - 14) + tri(n - 15) + tri(n - 16) + tri(n - 17)\
    \ + tri(n - 18) + tri(n - 19) + tri(n - 20) + tri(n - 21)\n  result[5] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n\
    \ - 12) + tri(n - 13) + tri(n - 14) + tri(n - 15) + tri(n - 16) + tri(n - 17)\
    \ + tri(n - 18) + tri(n - 19) + tri(n - 20) + tri(n - 21) + tri(n - 22) + tri(n\
    \ - 23) + tri(n - 24) + tri(n - 25)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) +\
    \ tri(n - 14) + tri(n - 15) + tri(n - 16) + tri(n - 17) + tri(n - 18) + tri(n\
    \ - 19) + tri(n - 20) + tri(n - 21) + tri(n - 22) + tri(n - 23) + ", "  result\
    \ = []\n  result[0] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[1] = tri(n\
    \ - 1) + tri(n - 2)\n  result[2] = tri(n - 1)\n  result[n] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  return result\nend", "  tri_seq = []\n  tri_seq << 3\n\
    \  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + (n & 1 ? tri_seq[-3]\
    \ : 0)\n  tri_seq\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  result[3] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\n  result[4] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6) + tri(n - 7) + tri(n - 8)\n  result[5] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12)\n  result[7] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n\
    \ - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n\
    \ - 12) + tri(n - 13) + tri(n - 14)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) +\
    \ tri(n - 14) + tri(n - 15)\n  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\
    \ + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n\
    \ - 14) + tri(n - 15) + tri(n - 16)\n  result[10] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4) + ", "  tri_seq = []\n  tri_seq << 3\n\
    \  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + (n + 1) / 2\n\
    \  tri_seq\nend\n</cell>\n<code language=julia-1.0>", "  tri_seq = []\n  tri_seq\
    \ << 3\n  tri_seq << 1 + n / 2\n  tri_seq << tri_seq[-1] + tri_seq[-2] + tri_seq[-3]\n\
    \  tri_seq\nend", "  result = []\n  result[0] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] = tri(n - 1)\n  result[n]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result\nend", "  result = []\n  result\
    \ = [3,1] if n%2 == 0\n  result = [result[0] + result[1],result[0] + result[1]\
    \ + result[2]] if n%2 == 1\n  result\nend", "  result = []\n  result[0] = n\n\
    \  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 2)\
    \ + tri(n - 1) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2] + result[n+1]\n\
    \  return result\nend", "  result = []\n  result = [3,1] if n.even? \n  result\
    \ = [result[0] + result[1],result[2] + result[3]] if n.odd?\n  result\nend", " \
    \ tri_seq = [3,1]\n  n.times do |i|\n    tri_seq << tri_seq[-1] + tri_seq[-2]\
    \ \n  end\n  tri_seq\nend\n</cell>\n<cell>", "  result = []\n  result[0] = n\n\
    \  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1)\
    \ + tri(n - 2)\n  result[3] = tri(n - 1) + tri(n + 1)\n  result[4] = tri(n - 1)\n\
    \  result[5] = tri(n + 1)\n  result[6] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n  result[7] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3) + tri(n + 4)\n  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5)\n  result[10] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6)\n  result[11] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7)\n  result[12]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8)\n  result[13] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9)\n  result[14] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n\
    \ + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\n  result[15]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\
    \ + tri(n + 11)\n  result[16] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3) + tri", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  result[2] = tri(n - 1) + tri(n - 2)\n  result[3]\
    \ = tri(n - 1) + tri(n + 1)\n  result[4] = tri(n - 1)\n  result[5] = tri(n + 1)\n\
    \  result[6] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[7]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result[8]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\n\
    \  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\
    \ + tri(n + 4) + tri(n + 5)\n  result[10] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[11]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4)\
    \ + tri(n + 5) + tri(n + 6) + tri(n + 7)\n  result[12] = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n\
    \ + 6) + tri(n + 7) + tri(n + 8)\n  result[13] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9)\n  result[14] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n\
    \ + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\n  result[15] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n\
    \ + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10) + tri(n + 11)\n  result[16]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri", " \
    \ result = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  result[n]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result\n\
    end", "  result = []\n  result = [3,1] if n.even? \n  result = [result[0] + result[1],result[2]\
    \ + result[0]] if n.odd?\n  result\nend", "  tri_seq = []\n  tri_seq << 3\n  tri_seq\
    \ << 1 if n % 2 == 0\n  tri_seq << 1 + n / 2 if n % 2 == 1\n  tri_seq << tri_seq[-1]\
    \ + tri_seq[-2] + tri_seq[-3]\n  tri_seq\nend", "  result = []\n  result[0] =\
    \ n\n  result[1] = result[0] + result[1]\n  result[2] = result[1] + result[2]\n\
    \  result[3] = result[2] + result[3]\n  return result\nend", "  result = []\n\
    \  result = [3,1] if n.even?\n  result = [result[0] + result[1],result[2] + result[0]]\
    \ if n.odd?\n  result\nend", "  result = []\n  result[0] = n\n  result[1] = tri(n\
    \ - 1) + tri(n - 2)\n  result[2] = tri(n - 1) + tri(n - 2) + tri(n - 3)\n  result[n]\
    \ = result[n-1] + result[n-2] + result[n-3]\n  return result\nend", "  result\
    \ = []\n  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2)\n  result[2] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[n] = result[n-1] + result[n-2]\
    \ + result[n+1]\n  return result\nend", "  result = []\n  result[0] = n\n  if\
    \ n % 2 == 0\n    result[1] = tri(n - 1) + tri(n - 2)\n  else\n    result[1] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n  result\nend", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\n\
    \  result[3] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 4)\n  result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4) + tri(n - 3)\n  result[6]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n - 1)\n  result[7] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 4)\n  result[8] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n + 1) + tri(n - 4)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 4) + tri(n - 3)\n  result[9]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n - 3) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 4) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(", "  result = []\n\
    \  result[0] = n\n  result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  result[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2) + tri(n + 3)\n  result[3] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3) + tri(n + 4)\n  result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n + 2) + tri(n + 3)\
    \ + tri(n + 4) + tri(n + 5)\n  result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n + 2) + tri(n + 3)\
    \ + tri(n + 4) + tri(n + 5) + tri(n + 6)\n  result[6] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7)\n  result[7]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5) + tri(n + 6)\
    \ + tri(n + 7) + tri(n + 8)\n  result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n + 2) + tri(n + 3)\
    \ + tri(n + 4) + tri(n + 5) + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9)\n\
    \  result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2)\
    \ + tri(n - 1) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4) + tri(n + 5)\
    \ + tri(n + 6) + tri(n + 7) + tri(n + 8) + tri(n + 9) + tri(n + 10)\n  result[10]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 2) + tri(n - 1)\
    \ + tri"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
