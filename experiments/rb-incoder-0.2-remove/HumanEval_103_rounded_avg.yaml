name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  if n < m\n    return -1\n  sum = 0\n  for i in 0...m\n    sum +=\
    \ i\n  return sum / m\nend", "  avg = ((n+m)/2)\n  avg = avg.round\n  avg = bin(avg)\n\
    \  avg = avg.lstrip(\"0\")\n  avg = avg.rstrip(\"0\")\n  return avg\nend", " \
    \ avg = 0.0\n  for i in (n..m)\n    avg += i\n  end\n  avg /= (n - m + 1)\n  return\
    \ avg.round\nend", "  avg = 0.0\n  for i in n.upto(m) do\n    avg += i\n  end\n\
    \  avg /= m\n  avg = avg.round\n  avg = bin(avg)\n  return avg if avg > m and\
    \ avg < n\n  return -1\nend", "  avg = ((n+m)/2)\n  avg = avg.round\n  avg = bin(avg)\n\
    \  avg = avg.to_i\n  if avg > m\n    return -1\n  else\n    return avg\nend",
  "  if n < m\n    return -1\n  sum = 0\n  for i in (n..m)\n    sum += i\n  return\
    \ sum / m\nend", "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n\
    \    binary.push((n / avg).to_s(2))\n    n += 1\n  end\n  binary.push((m / avg).to_s(2))\n\
    \  binary.reverse!\n  binary.join\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ / Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = ((n + m) / 2).round\n\
    \  if avg > m\n    -1\n  else\n    avg\n  end\nend\n</cell>\n<cell>\nrounded_avg(5,10)\n\
    </cell>\n<cell>\nrounded_avg(5,5)\n</cell>\n<cell>\nrounded_avg(5,0)\n</cell>\n\
    <cell>\nrounded_avg(5,1)\n</cell>\n<cell>\nrounded_avg(5,2)\n</cell>\n<cell>\n\
    rounded_avg(5,3)\n</cell>\n<cell>\nrounded_avg(5,4)\n</cell>\n<cell>\nrounded_avg(5,5)\n\
    </cell>\n<cell>\nrounded_avg(5,6)\n</cell>\n<cell>\nrounded_avg(5,7)\n</cell>\n\
    <cell>\nrounded_avg(5,8)\n</cell>\n<cell>\nrounded_avg(5,9)\n</cell>\n<cell>\n\
    rounded_avg(5,10)\n</cell>\n<cell>\nrounded_avg(5,11)\n</cell>\n<cell>\nrounded_avg(5,12)\n\
    </cell>\n<cell>\nrounded_avg(5,13)\n</cell>\n<cell>\nrounded_avg(5,14)\n</cell>\n\
    <cell>\nrounded_avg(5,15)\n</cell>\n<cell>\nrounded_avg(5,16)\n</cell>\n<cell>\n\
    rounded_avg(5,17)\n</cell>\n<cell>\nrounded_avg(5,18)\n</cell>\n<cell>\nrounded_avg(5,19)\n\
    </cell>\n<cell>\nrounded_avg(5,20)\n</cell>\n<cell>\nrounded_avg(5,21)\n</cell>\n\
    <cell>\nrounded_avg(5,22)\n</cell>\n<cell>\nrounded_avg(5,23)\n</cell>\n<cell>\n\
    rounded_avg(5,24)\n</cell>\n<cell>\nrounded_avg(5,25)\n</cell>\n<cell>\nrounded_avg(5,26)\n\
    </cell>\n<cell>\nrounded_avg(5,27)\n</cell>\n<cell>\nrounded_avg(5,28)\n</cell>\n\
    <cell>\nrounded_avg(5,29", "  avg = ((n+m)/2)\n  rounded_avg = Math.ceil(avg)\n\
    \  binary = bin(rounded_avg)\n  binary = binary.reverse\n  binary = binary.gsub(/../,\
    \ '0')\n  binary = binary.gsub(/../, '1')\n  return binary\nend", "  avg = n/m\n\
    \  avg = avg * 100\n  avg = avg.round\n  avg = bin(avg)\n  avg = avg.ljust(8,\
    \ '0')\n  avg = avg.reverse\n  return avg\nend", "  avg = ((n+m)/2).round\n  bin\
    \ = bin(avg)\n  bin = bin.chop\n  bin = bin.to_i\n  return bin\nend", "  avg =\
    \ 0.0\n  for i in (n..m)\n    avg += i\n  end\n  avg /= (n - m + 1)\n  return\
    \ avg.round\nend", "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n\
    \    binary.push(avg)\n    n += 1\n  end\n  binary.push(avg)\n  binary.map! {|i|\
    \ i.to_s(2)}\n  binary.join\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  if n < m\n    return -1\n  \n  sum = 0\n  for i in (n..m)\n\
    \    sum += i\n  end\n  \n  avg = sum / 2\n  \n  binary = []\n  for i in (n..m)\n\
    \    binary.push( i.to_s(2) )\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index do |i|\n    binary[i]\
    \ = binary[i].to_i(2).to_s(2)\n  end\n  \n  binary.each_index ", "  avg = 0.0\n\
    \  for i in 0...m\n    avg += n\n  end\n  avg /= m\n  avg.round\nend", "  avg\
    \ = n/m\n  avg = Math.ceil(avg)\n  avg = Math.trunc(avg)\n  avg = avg * Math.pow(2,32)\n\
    \  return avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,", "  avg\
    \ = 0.0\n  for i in 0...m\n    avg += i\n  end\n  avg /= m\n  avg = round(avg)\n\
    \  if avg > n\n    avg = -1\n  end\n  return avg\nend", "  avg = n/m\n  avg =\
    \ Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  return avg\nend",
  "  avg = ((n + m) / 2).round\n  bin = bin(avg).to_i\n  return -1 if bin == 0\n \
    \ bin\nend", "  avg = ((n + m) / 2).round\n  binary = bin(avg).split('b')[1]\n\
    \  binary = binary.reverse\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n  binary.reverse!\n\
    \  binary.reverse!\n  binary.reverse", "  avg = n/m + n/m\n  avg = Math.ceil(avg)\n\
    \  avg = Math.trunc(avg)\n  avg = bin(avg)\n  return avg\nend\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n  return avg\nend", "  avg = ((n\
    \ + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n  bin = bin.to_i\n  return\
    \ bin\nend", "  avg = ((n..m).sum.to_f / m).round\n  bin = bin(avg)\n  bin.slice!('0')\
    \ unless bin.start_with?('1')\n  bin\nend", "  avg = ((n..m).sum.to_f / m).round\n\
    \  bin = bin(avg)\n  bin.slice!('0').to_i\n  return bin\nend", "  avg = n/m\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg / Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = 0.0\n\
    \  for i in (n..m)\n    avg += i\n  end\n  avg /= (n..m)\n  avg.round\nend", " \
    \ if n <= m\n    return -1\n  avg = ((n + m) / 2)\n  binary = []\n  while n <=\
    \ m\n    binary.push(n % 10)\n    n /= 10\n  end\n  binary.push(avg)\n  binary.join('')\n\
    end", "  avg = ((n+m)/2).round\n  bin = bin(avg)\n  if bin.include?(\"1\") &&\
    \ bin.include?(\"0\")\n    return -1\n  else\n    return avg\n  end\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,0)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,1)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,2)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,3)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,4)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,6)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,7)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,8)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,9)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,11)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,12)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,13)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,14)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,15)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,16)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,17)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,18)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,19)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,21)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,22)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,23)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,24)\n</cell>",
  "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n  bin = bin.to_i\n\
    \  return bin\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin.slice!('.')\n\
    \  bin.slice!('0')\n  bin\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg =\
    \ avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n \
    \ avg = Math.ceil(avg)\n  return avg\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  return avg\nend",
  "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  return avg\nend", "  avg = 0.0\n  for i in 0...m\n    avg += n\n  end\n  avg\
    \ /= m\n  return avg.round\nend", "  avg = ((n+m)/2)\n  avg = avg.round\n  avg\
    \ = bin(avg)\n  avg = avg.lstrip(\"0\")\n  return avg\nend", "  if n > m\n   \
    \ return -1\n  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum / n\nend",
  "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n  avg = Math.floor avg\n  avg = Math.pow(2,avg)\n\
    \  return avg\nend", "  avg = ((n + m) / 2).round\n  if avg > m\n    -1\n  else\n\
    \    avg\n  end\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin =\
    \ bin.chop\n  bin = bin.sub(/0b/, '')\n  bin = bin.to_i\n  return bin if bin >=\
    \ n || bin < m \n  return -1\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  return avg\nend", "  avg =\
    \ n/m\n  avg = Math.ceil(avg)\n  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = ", "  if n < m\n    return -1\n  \n  avg = ((n + m) / 2)\n  \n  return\
    \ bin(round(avg))\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANTISSA)\n\
    \  avg = Math.floor avg\n  avg = Math.pow(2,Float::MANTISSA)\n  avg = Math.pow(avg,2)\n\
    \  return avg\nend", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n  avg = Math.floor\
    \ avg\n  avg = Math.pow(2,avg)\n  return avg\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ / Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = ((n+m)/2)\n\
    \  avg = avg.round\n  avg = bin(avg)\n  avg = avg.reverse\n  avg = avg.gsub(/../,\
    \ \"\")\n  return avg\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n\
    \  bin = bin.chop\n  bin = bin.to_i\n  return bin\nend", "  avg = ((n + m) / 2).round\n\
    \  if avg > m\n    -1\n  else\n    avg\n  end\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float::MANTISSA)\n  avg = Math.floor avg\n  return avg\n\
    end", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  return avg\nend", "  avg = ((n + m) / 2).round\n  bin\
    \ = bin(avg).to_s\n  bin.slice!('0')\n  bin\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float::MANTISSA)\n  return avg\nend", "  \n  # Write\
    \ your code here\n  \nend\n</cell>\n<cell>", "  if n < m\n    return -1\n  sum\
    \ = 0\n  for i in (n..m)\n    sum += i\n  avg = sum / m\n  return avg\nend", " \
    \ avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"",
  "  avg = 0.0\n  for i in (n..m)\n    avg += i\n  end\n  avg /= (n - m + 1)\n  return\
    \ avg.round\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * 2\n  avg\
    \ = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n  return avg\nend",
  "  avg = ((n+m)/2).round\n  bin = sprintf(\"%b\", avg)\n  bin.slice!('0')\n  bin\n\
    end", "  avg = ((n + m) / 2).round\n  bin = sprintf(\"%b\", avg)\n  \n  if bin\
    \ == \"0\"\n    return -1\n  else\n    return bin\n  end\nend", "  avg = 0.0\n\
    \  while n <= m\n    avg += n\n    n += 1\n  avg /= m\n  avg.round\n  avg.to_s(2)\n\
    end\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div\
    \ id=\"footer-text\">\nLast updated 2016-03-26 19:31:11 UTC\n</div>\n</div>\n\
    </body>\n</html>\n<|/ file ext=.html |>\n<| c |>\nI added the code you suggested\
    \ but now it says \"undefined method `round' for nil:NilClass\" on the line where\
    \ I wrote avg.round\n<|/ c |>\n<| c |>\nI added the code you suggested but now\
    \ it says \"undefined method `round' for nil:NilClass\" on the line where I wrote\
    \ avg.round\n<|/ c |>\n<| c |>\nI added the code you suggested but now it says\
    \ \"undefined method `round' for nil:NilClass\" on the line where I wrote avg.round\n\
    <|/ c |>\n<| c |>\nI added the code you suggested but now it says \"undefined\
    \ method `round' for nil:NilClass\" on the line where I wrote avg.round\n<|/ c\
    \ |>\n<| c |>\nI added the code you suggested but now it says \"undefined method\
    \ `round' for nil:NilClass\" on the line where I wrote avg.round\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "  avg = ((n + m) / 2).round\n  binary = []\n  while\
    \ n <= m\n    binary.push((n / avg).to_s(2))\n    n += 1\n  end\n  binary.push((m\
    \ / avg).to_s(2))\n  binary.reverse!\n  binary.join\nend", "  if n == m\n    return\
    \ n\n  else\n    return ((n+m)/2)\n  end\nend", "  avg = ((n+m)/2)\n  bin = bin(avg)\n\
    \  bin = bin.lstrip(\"0b\")\n  bin = bin.rstrip(\"0\")\n  bin = bin.to_i\n  return\
    \ bin\nend", "  \nend", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n  avg = Math.floor\
    \ avg\n  return avg\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin\
    \ = bin.chop\n  bin = bin.upcase\n  bin = bin.ljust(n, \"0\")\n  return bin\n\
    end", "  if n < m\n    return -1\n  avg = ((n+m)/2)\n  bin = bin(avg)\n  bin =\
    \ bin.lstrip(\"0b\")\n  bin = bin.rstrip(\"0\").to_i\n  return bin\nend", "  avg\
    \ = ((n..m).to_f / 2).round\n  bin = sprintf(\"%b\", avg)\n  bin.slice!(0..1)\n\
    \  bin\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg / Math.pow(2,Float.log(avg,2))\n  return\
    \ avg\nend", "  if n < m\n    return -1\n  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  avg = sum / n\n  binary = []\n  for i in 0..m\n    binary.push(avg)\n\
    \    avg += 1\n  end\n  binary.push(avg)\n  binary.reduce(:+)\nend\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 6)\n</cell>\n<cell>\n\
    rounded_avg(7, 7)\n</cell>\n<cell>\nrounded_avg(7, 8)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 9)\n</cell>\n<cell>\nrounded_avg(7, 10)\n</cell>\n<cell>\nrounded_avg(7, 11)\n\
    </cell>\n<cell>\nrounded_avg(7, 12)\n</cell>\n<cell>\nrounded_avg(7, 13)\n</cell>\n\
    <cell>\nrounded_avg(7, 14)\n</cell>\n<cell>\nrounded_avg(7, 15)\n</cell>\n<cell>\n\
    rounded_avg(7, 16)\n</cell>\n<cell>\nrounded_avg(7, 17)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 18)\n</cell>\n<cell>\nrounded_avg(7, 19)\n</cell>\n<cell>\nrounded_avg(7, 20)\n\
    </cell>\n<cell>\nrounded_avg(7, 21)\n</cell>\n<cell>\nrounded_avg(7, 22)\n</cell>\n\
    <cell>\nrounded_avg(7, 23)\n</cell>\n<cell>\nrounded_avg(7, 24)\n</cell>\n<cell>\n\
    rounded_avg(7, 25)\n</cell>\n<cell>\nrounded_avg(7, 26)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 27)\n</cell>\n<cell>\nrounded_avg(7, 28)\n</cell>\n<cell>\nrounded_avg(7, 29)\n\
    </cell>\n<cell>\nrounded_avg(7, 30)\n</cell>\n<cell>\nrounded_avg(7, 31)\n</cell>\n\
    <cell>\nrounded_avg(7, 32)\n</cell>\n<cell>\nrounded_avg(7, 33)", "  avg = ((n\
    \ + m) / 2).round\n  if avg > m\n    -1\n  else\n    avg\n  end\nend", "  avg\
    \ = ((n..m).to_f / 2).round\n  bin = sprintf(\"%b\", avg)\n  bin.slice!(0..-1)\n\
    \  bin\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.strip\n\
    \  if bin.start_with?('1')\n    return -1\n  else\n    return avg\n  end\nend\n\
    rounded_avg(6, 8)", "  avg = n/m\n  avg = avg * 10\n  avg = avg / 10\n  avg =\
    \ round(avg)\n  avg = bin(avg)\n  avg = avg.lstrip(\"0\")\n  avg = avg.rstrip(\"\
    0\")\n  avg = avg.lstrip(\"1\")\n  avg = avg.rstrip(\"1\")\n  return avg\nend",
  "  avg = n/m + n/m\n  avg = Math.ceil(avg)\n  avg = Math.trunc(avg)\n  return avg\n\
    end", "  avg = 0.0\n  for i in 0...m\n    avg += i\n  end\n  avg /= m\n  return\
    \ avg.round\nend", "  avg = n/m + n/m\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n", "  avg = ((n + m) / 2).round\n\
    \  if avg > m\n    -1\n  else\n    avg\n  end\nend", "  avg = 0.0\n  for i in\
    \ 0...m\n    avg += n\n  end\n  avg /= m\n  return avg.round\nend", "  avg = ((n+m)/2).round\n\
    \  bin = bin(avg).to_i\n  if bin == 0\n    bin = -1\n  else\n    bin\n  end\n\
    end", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n  bin\
    \ = bin.to_i\n  return bin\nend", "  if n == m\n    return n\n  \n  avg = ((n\
    \ + m) / 2)\n  \n  if avg < n\n    return -1\n  \n  binary = \"\"\n  \n  while\
    \ avg > 0\n    binary = binary + \"1\"\n    avg = avg - 1\n  end\n  \n  while\
    \ avg < 0\n    binary = binary + \"0\"\n    avg = avg + 1\n  end\n  \n  return\
    \ binary\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  if bin.start_with?('1')\n\
    \    return bin.to_i\n  else\n    return -1\n  end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,0)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,1)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,2)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,3)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,4)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,6)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,7)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,8)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,9)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,11)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,12)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,13)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,14)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,15)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,16)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,17)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,18)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,19)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,21)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,22)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,23)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,24)\n</cell>\n<code language=julia-1.0>",
  "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n  bin = bin.to_i\n\
    \  return bin\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * 2\n \
    \ avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n  avg = avg *\
    \ 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n  avg =\
    \ avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n \
    \ avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n\
    \  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = ", "  avg = ((n+m)/2).round\n\
    \  binary = bin(avg)\n  binary = binary.chr.to_i\n  if n == m\n    return -1\n\
    \  else\n    return binary\n  end\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = n/m\n\
    \  avg = Math.ceil(avg)\n  avg = avg * 2\n  avg = Math.ceil(avg)\n  avg = avg\
    \ / 2\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.", "  avg = ((n+m)/2).round\n  if avg > m\n    -1\n  else\n    avg\n\
    \  end\nend", "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n  \
    \  binary.push((n & m).to_s(2))\n    n += 1\n    m -= 1\n  end\n  binary.reverse\n\
    \  binary.join\nend\nrounded_avg(7, 3)", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n  return avg\nend", "  avg = ((n\
    \ + m) / 2).round\n  bin = bin(avg)\n  bin.slice!('0').to_i\n  return bin\nend",
  "  avg = ((n+m)/2)\n  avg = avg.round\n  avg = bin(avg)\n  avg = avg.lstrip(\"0\"\
    )\n  avg = avg.rstrip(\"0\")\n  return avg\nend", "  avg = ((n+m)/2).round\n \
    \ if avg > m\n    -1\n  else\n    avg\n  end\nend\n</cell>\n<cell>\nrounded_avg(5,6)\n\
    </cell>\n<cell>\nrounded_avg(5,7)\n</cell>\n<cell>\nrounded_avg(5,8)\n</cell>\n\
    <cell>\nrounded_avg(5,9)\n</cell>\n<cell>\nrounded_avg(5,10)\n</cell>\n<cell>\n\
    rounded_avg(5,11)\n</cell>\n<cell>\nrounded_avg(5,12)\n</cell>\n<cell>\nrounded_avg(5,13)\n\
    </cell>\n<cell>\nrounded_avg(5,14)\n</cell>\n<cell>\nrounded_avg(5,15)\n</cell>\n\
    <cell>\nrounded_avg(5,16)\n</cell>\n<cell>\nrounded_avg(5,17)\n</cell>\n<cell>\n\
    rounded_avg(5,18)\n</cell>\n<cell>\nrounded_avg(5,19)\n</cell>\n<cell>\nrounded_avg(5,20)\n\
    </cell>\n<cell>\nrounded_avg(5,21)\n</cell>\n<cell>\nrounded_avg(5,22)\n</cell>\n\
    <cell>\nrounded_avg(5,23)\n</cell>\n<cell>\nrounded_avg(5,24)\n</cell>\n<cell>\n\
    rounded_avg(5,25)\n</cell>\n<cell>\nrounded_avg(5,26)\n</cell>\n<cell>\nrounded_avg(5,27)\n\
    </cell>\n<cell>\nrounded_avg(5,28)\n</cell>\n<cell>\nrounded_avg(5,29)\n</cell>\n\
    <cell>\nrounded_avg(5,30)\n</cell>\n<cell>\nrounded_avg(5,31)\n</cell>\n<cell>\n\
    rounded_avg(5,32)\n</cell>\n<cell>\nrounded_avg(5,33)\n</cell>\n<cell>\nrounded_avg(5,34)\n\
    </cell>\n<cell>\nrounded_avg(5,35)\n</cell>\n<cell>\nrounded_avg(5,36)\n</cell>\n\
    <cell>", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.strip\n \
    \ bin = bin.ljust(8, '0')\n  return bin\nend", "  avg = ((n + m) / 2).floor\n\
    \  if avg > m\n    -1\n  else\n    avg\n  end\nend", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  bin = bin(avg)\n  bin.slice!(0..-2) if bin.size > 2\n  bin\nend",
  "  if n < m\n    return -1\n  sum = 0\n  for i in (n..m)\n    sum += i\n  return\
    \ sum / m\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = Math.trunc(avg)\n\
    \  return avg\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  return avg\nend", "  avg = ((n+m)/2).round\n  if avg > m\n    avg = -1\n  end\n\
    \  return avg\nend", "  avg = 0.0\n  for i in 0...m\n    avg += n\n  end\n  avg\
    \ /= m\n  avg = round(avg)\n  bin = bin(avg)\n  if bin == 0\n    return -1\n \
    \ else\n    return bin\n  end\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg /\
    \ Math.pow(2,Float.log(avg,2))\n  return avg\nend", "  avg = 0.0\n  for i in n.upto(m)\
    \ do\n    avg += i\n  end\n  avg /= m\n  avg.round\nend", "  avg = n/m\n  avg\
    \ = round(avg)\n  avg = bin(avg)\n  avg = avg.lstrip(\"0b\")\n  avg = avg.rstrip(\"\
    0\")\n  return avg\nend", "  avg = 0.0\n  for i in (n..m)\n    avg += i\n  end\n\
    \  avg /= (n..m)\n  avg = avg.round\n  avg = bin(avg)\n  return avg \nend", " \
    \ avg = 0.0\n  for i in 0...m\n    avg += n\n  end\n  avg /= m\n  avg = round(avg)\n\
    \  if avg > m\n    avg = -1\n  end\n  return avg\nend", "  avg = n/m\n  avg =\
    \ Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  return avg\nend",
  "  if n < m\n    return -1\n  \n  avg = ((n+m)/2)\n  binary = []\n  \n  while n\
    \ <= m\n    binary.push(avg)\n    n += 1\n  end\n  \n  binary.push(avg)\n  \n\
    \  binary.reduce(:+)\nend", "  \nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n\
    \  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\"", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.trunc(avg)\n  return avg\nend", "  avg = 0.0\n  for i in (n..m)\n\
    \    avg += i\n  end\n  avg /= (n..m)\n  avg = round(avg)\n  if avg > m\n    -1\n\
    \  else\n    avg\n  end\nend", "  avg = ((n + m) / 2).round\n  if avg > m\n  \
    \  return -1\n  else\n    return avg\nend", "  avg = ((n+m)/2)\n  avg = avg.round\n\
    \  avg = bin(avg)\n  avg = avg.to_i\n  if avg > m\n    avg = -1\n  end\n  return\
    \ avg\nend", "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n   \
    \ binary.push(avg)\n    n += 1\n  end\n  binary.push(-1)\n  return binary.join\n\
    end", "  avg = ((n+m)/2)\n  rounded_avg = round(avg)\n  binary = bin(rounded_avg)\n\
    \  binary = binary[2:]\n  binary = binary.zfill(8)\n  return binary\nend", " \
    \ avg = 0.0\n  for i in (n..m)\n    avg += i\n  end\n  avg /= (n..m)\n  return\
    \ avg.round\nend", "  avg = ((n+m)/2)\n  avg = avg.round\n  avg = bin(avg)\n \
    \ avg = avg.to_i(2).to_s(10)\n  avg = avg.to_i(2).to_s(10)\n  return avg\nend",
  "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * 2\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = ", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n\
    \  bin = bin.strip\n  bin = bin.ljust(8, '0')\n  bin = bin.to_i\n  return bin\n\
    end", "  if n == m\n    return n\n  \n  avg = ((n + m) / 2)\n  \n  if avg < n\n\
    \    return -1\n  \n  binary = []\n  \n  while avg > 0\n    binary.push(avg %\
    \ 2)\n    avg /= 2\n  end\n  \n  binary.reverse!\n  \n  return binary.join\nend",
  "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n\
    \  return avg\nend", "  avg = ((n+m)/2).round\n  bin = bin(avg)\n  bin = bin.chop\n\
    \  bin = bin.to_i\n  return bin\nend", "  \n  # Write your code here\n  \nend",
  "  avg = ((n+m)/2).round\n  bin = bin(avg)\n  bin = bin.lstrip(\"0\")\n  if bin.length\
    \ < 2\n    return -1\n  end\n  return bin\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,30)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,31)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,32)\n</", "  avg = n/m + n/m\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.trunc(avg)\n  return avg\nend", "  avg = ((n+m)/2).round\n\
    \  binary = bin(avg).to_s(2)\n  if binary.length < m\n    return -1\n  else\n\
    \    return binary\n  end\nend", "  avg = n/m\n  avg = round(avg)\n  avg = bin(avg)\n\
    \  avg = avg.lstrip(\"0b\")\n  avg = avg.rstrip(\"0\")\n  return avg\nend", " \
    \ avg = ((n + m) / 2).round\n  if avg > m\n    -1\n  else\n    avg\n  end\nend",
  "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n    binary.push n.to_s(2)\n\
    \    n += 1\n  end\n  binary.push m.to_s(2)\n  binary.push avg.to_s(2)\n  binary.join\n\
    end\nrounded_avg(7, 5)", "  if n >= m\n    return -1\n  else\n    avg = ((n +\
    \ m) / 2)\n    binary = []\n    i = 0\n    while i < m\n      binary.push((n /\
    \ m).to_s(2))\n      n = n\n      i += 1\n    binary.push((m / m).to_s(2))\n \
    \   binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n\
    \    binary.push((avg / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((avg\
    \ / m).to_s(2))\n    binary.push((avg / m).to_s(2))\n    binary.push((", "  avg\
    \ = ((n + m) / 2).round\n  if avg > m\n    -1\n  else\n    avg\n  end\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,26)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,27)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,28)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,29)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,30)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,31)\n</", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float::MANTISSA)\n  return avg\nend", "  avg = ((n+m)/2).round\n\
    \  if avg > m\n    avg = -1\n  else\n    avg = bin(avg)\n  end\n  return avg\n\
    end", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg / Math.pow(2,Float.log(avg,2))\n  return\
    \ avg\nend", "  avg = ((n+m)/2).round\n  bin = bin(avg)\n  bin = bin.lstrip(\"\
    0b\")\n  bin = bin.rstrip(\"0\")\n  return bin\nend", "  avg = ((n+m)/2).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n%2).to_s)\n    n += 1\n  end\n\
    \  binary.push((m%2).to_s)\n  binary.join\nend", "  avg = ((n+m)/2)\n  bin = bin(avg)\n\
    \  bin = bin.lstrip(\"0b\")\n  bin = bin.rstrip(\"0\")\n  bin = bin.to_i(2).to_s(2)\n\
    \  return bin\nend", "  avg = ((n + m) / 2).round\n  binary = []\n  for i in 0...m\n\
    \    binary.push((avg - i).to_s(2))\n  end\n  if n >= m\n    binary.push(\"-1\"\
    )\n  end\n  binary.join\nend\nrounded_avg(6, 8)", "  avg = n/m\n  avg = round(avg)\n\
    \  avg = bin(avg)\n  avg = avg.lstrip(\"0b\")\n  avg = avg.rstrip(\"0\")\n  return\
    \ avg\nend", "  avg = 0.0\n  for i in n.upto(m) do\n    avg += i\n  end\n  avg\
    \ /= m\n  return avg.round\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell",
  "  avg = ((n + m) / 2).floor\n  if avg > m\n    -1\n  else\n    avg\n  end\nend\n\
    </pre>\n</div>\n</div>", "  if n > m\n    return -1\n  sum = 0\n  for i in 0...n\n\
    \    sum += i\n  return sum / m\nend", "  avg = 0.0\n  for i in 0...m\n    avg\
    \ += n\n  end\n  avg /= m\n  return avg.round\nend", "  avg = ((n+m)/2)\n  avg\
    \ = avg.round\n  avg = bin(avg)\n  avg = avg.gsub(\"0\",\"0\")\n  avg = avg.gsub(\"\
    1\",\"1\")\n  avg = avg.gsub(\"1\",\"0\")\n  return avg\nend", "  \nend", "  avg\
    \ = ((n + m) / 2).round\n  if avg > m\n    -1\n  else\n    avg\n  end\nend", " \
    \ avg = ((n..m).sum.to_f / m).round\n  bin = sprintf(\"%b\", avg)\n  bin.scan(/../).join.to_i\n\
    end", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n  bin\
    \ = bin.chomp\n  bin = bin.to_i\n  return bin\nend", "  avg = n/m + n/m\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.trunc(avg)\n  return avg\nend", "  avg = 0.0\n\
    \  while n <= m\n    avg += n\n    n += 1\n  avg /= m\n  avg = avg.round\n  avg\
    \ = bin(avg)\n  avg = avg.gsub(\"0b\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"\
    0\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n\
    \  avg = avg.gsub(\"1\", \"\")\n  avg = avg.reverse\n  avg = avg.gsub(\"1\", \"\
    \")\n  avg = avg.reverse\n  avg = ", "  avg = ((n..m).sum.to_f / m.to_f).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.reverse!\n  binary.join\nend", "  avg = ((n+m)/2).round\n  bin = bin(avg)\n\
    \  bin = bin.lstrip(\"0\")\n  bin = bin.rstrip(\"0\")\n  bin = bin.to_i\n  return\
    \ bin\nend", "  avg = ((n + m) / 2).round\n  bin = bin(avg)\n  bin = bin.chop\n\
    \  bin = bin.chomp\n  bin = bin.to_i\n  return bin\nend", "  avg = ((n+m)/2)\n\
    \  rounded_avg = avg * 2\n  rounded_avg = rounded_avg.to_i\n  if rounded_avg >\
    \ m\n    return -1\n  else\n    return rounded_avg\nend", "  avg = ((n+m)/2)\n\
    \  rounded_avg = ((avg*10).to_i).to_s(2)\n  rounded_avg.to_i\nend\n</cell>\n<cell>\n\
    rounded_avg(5,5)\n</cell>\n<cell>\nrounded_avg(5,6)\n</cell>\n<cell>\nrounded_avg(5,7)\n\
    </cell>\n<cell>\nrounded_avg(5,8)\n</cell>\n<cell>\nrounded_avg(5,9)\n</cell>\n\
    <cell>\nrounded_avg(5,10)\n</cell>\n<cell>\nrounded_avg(5,11)\n</cell>\n<cell>\n\
    rounded_avg(5,12)\n</cell>\n<cell>\nrounded_avg(5,13)\n</cell>\n<cell>\nrounded_avg(5,14)\n\
    </cell>\n<cell>\nrounded_avg(5,15)\n</cell>\n<cell>\nrounded_avg(5,16)\n</cell>\n\
    <cell>\nrounded_avg(5,17)\n</cell>\n<cell>\nrounded_avg(5,18)\n</cell>\n<cell>\n\
    rounded_avg(5,19)\n</cell>\n<cell>\nrounded_avg(5,20)\n</cell>\n<cell>\nrounded_avg(5,21)\n\
    </cell>\n<cell>\nrounded_avg(5,22)\n</cell>\n<cell>\nrounded_avg(5,23)\n</cell>\n\
    <cell>\nrounded_avg(5,24)\n</cell>\n<cell>\nrounded_avg(5,25)\n</cell>\n<cell>\n\
    rounded_avg(5,26)\n</cell>\n<cell>\nrounded_avg(5,27)\n</cell>\n<cell>\nrounded_avg(5,28)\n\
    </cell>\n<cell>\nrounded_avg(5,29)\n</cell>\n<cell>\nrounded_avg(5,30)\n</cell>\n\
    <cell>\nrounded_avg(5,31)\n</cell>\n<cell>\nrounded_avg(5,32)\n</cell>\n<cell>\n\
    rounded_avg(5,33)\n</cell>\n<cell>\nrounded_avg(5,34)\n</cell>\n<cell>\nrounded_avg(5,35)\n",
  "  avg = ((n+m)/2)\n  rounded_avg = round(avg)\n  binary = bin(rounded_avg)\n  binary\
    \ = binary.ljust(32, \"0\")\n  binary = binary.reverse\n  \n  if n == m\n    return\
    \ -1\n  else\n    return binary\n  end\nend", "  \n  # Write your code here\n\
    \  \nend", "  avg = ((n+m)/2).round\n  if avg > m\n    avg = -1\n  else\n    avg\
    \ = avg.to_s(2)\n  end\n  return avg\nend", "  avg = ((n..m).sum.to_f / m).round\n\
    \  bin = bin(avg)\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\"\
    )\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n  bin.slice!(\"\
    .\")\n  bin.slice!(\".\")\n  bin.slice!(\".\")\n", "  avg = 0.0\n  for i in (n..m)\n\
    \    avg += i\n  end\n  avg /= (n..m)\n  return avg.round\nend", "  avg = ((n+m)/2)\n\
    \  rounded_avg = Math.ceil(avg)\n  binary = Math.bin(rounded_avg)\n  return binary\n\
    end", "  avg = ((n..m).sum.to_f / m.to_f).round\n  \n  if avg < 0\n    return\
    \ -1\n  else\n    return avg\n  end\nend", "  avg = 0.0\n  for i in n.upto(m)\
    \ do\n    avg += i\n  end\n  avg /= m\n  avg = round(avg)\n  if avg > m\n    -1\n\
    \  else\n    avg\n  end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</", "  if n < m\n    return -1\n  \n  avg = ((n+m)/2)\n  \n\
    \  binary = []\n  \n  while n <= m\n    binary.push(avg)\n    n += 1\n  end\n\
    \  \n  binary.push(avg)\n  \n  return binary.join.to_i\nend", "  avg = ((n + m)\
    \ / 2).round\n  bin = bin(avg)\n  bin.slice!('.')\n  bin\nend", "  avg = n/m +\
    \ n/m\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n\
    \  return avg\nend", "  avg = 0.0\n  for i in n.upto(m) do\n    avg += i\n  end\n\
    \  avg /= m\n  return avg\nend", "  if n >= m\n    return -1\n  \n  avg = ((n\
    \ + m) / 2)\n  \n  return \"0b\" + bin(avg).zfill(8)\nend", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push((n & m).to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse!\n  binary.join\nend\nrounded_avg(6, 8)",
  "  avg = ((n + m) / 2).round\n  binary = []\n  while n <= m\n    binary.push (n.to_s(2))\n\
    \    n += 1\n  end\n  binary.push (m.to_s(2))\n  binary.push (avg.to_s(2))\n \
    \ binary.join\nend\nrounded_avg(5,6)", "  avg = ((n + m) / 2).round\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = bin.downcase\n  bin = bin.upcase\n  return\
    \ bin\nend", "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg", "  avg = ((n + m) / 2).round\n  bin\
    \ = bin(avg)\n  bin.slice!(\".\")\n  return bin\nend", "  avg = ((n + m) / 2).round\n\
    \  binary = []\n  for i in 0...m\n    binary.push((n / avg).to_s(2))\n  end\n\
    \  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m\
    \ / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n\
    \  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n\
    \ / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n\
    \  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m\
    \ / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n\
    \  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n\
    \ / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n\
    \  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m\
    \ / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n\
    \  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n\
    \ / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n\
    \  binary.push((m / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m\
    \ / avg).to_s(2))\n  binary.push((n / avg).to_s(2))\n  binary.push((m / avg).to_s(2))\n\
    \  binary.push((n / avg).to_s(2))\n  binary.push((m / avg", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  bin = sprintf(\"%b\", avg)\n  bin.slice!(0...-1)\n  bin\nend",
  "  avg = ((n+m)/2)\n  avg = Math.ceil(avg)\n  avg = Math.trunc(avg)\n  return avg\n\
    end", "  if n < m\n    return -1\n  sum = 0\n  for i in 0...n\n    sum += i\n\
    \  avg = sum / m\n  return round(avg)\nend", "  avg = ((n..m).sum.to_f / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n    n +=\
    \ 1\n  end\n  binary.each do |i|\n    i = i.to_i\n    binary = i\n  end\n  binary.to_s\n\
    end", "  avg = ((n + m) / 2).round\n  if avg > m\n    -1\n  else\n    avg\n  end\n\
    end", "  avg = 0.0\n  for i in (n..m)\n    avg += i\n  end\n  avg /= (n..m)\n\
    \  avg.round\nend", "  avg = ((n + m) / 2).floor\n  bin = bin(avg).to_i\n  \n\
    \  if bin == 0\n    bin = -1\n  end\n  \n  return bin\nend", "  if n >= m\n  \
    \  return -1\n  else\n    sum = 0\n    i = 0\n    while i < n\n      sum += i\n\
    \      i += 1\n    sum = (sum / n).round\n    sum.to_s(2)\n  end\nend\n</cell>\n\
    <cell>\nrounded_avg(5,10)\n</cell>\n<cell>\nrounded_avg(5,5)\n</cell>\n<cell>\n\
    rounded_avg(5,0)\n</cell>\n<cell>\nrounded_avg(5,-1)\n</cell>\n<cell>\nrounded_avg(5,-2)\n\
    </cell>\n<cell>\nrounded_avg(5,-3)\n</cell>\n<cell>\nrounded_avg(5,-4)\n</cell>\n\
    <cell>\nrounded_avg(5,-5)\n</cell>\n<cell>\nrounded_avg(5,-6)\n</cell>\n<cell>\n\
    rounded_avg(5,-7)\n</cell>\n<cell>\nrounded_avg(5,-8)\n</cell>\n<cell>\nrounded_avg(5,-9)\n\
    </cell>\n<cell>\nrounded_avg(5,-10)\n</cell>\n<cell>\nrounded_avg(5,-11)\n</cell>\n\
    <cell>\nrounded_avg(5,-12)\n</cell>\n<cell>\nrounded_avg(5,-13)\n</cell>\n<cell>\n\
    rounded_avg(5,-14)\n</cell>\n<cell>\nrounded_avg(5,-15)\n</cell>\n<cell>\nrounded_avg(5,-16)\n\
    </cell>\n<cell>\nrounded_avg(5,-17)\n</cell>\n<cell>\nrounded_avg(5,-18)\n</cell>\n\
    <cell>\nrounded_avg(5,-19)\n</cell>\n<cell>\nrounded_avg(5,-20)\n</cell>\n<cell>\n\
    rounded_avg(5,-21)\n</cell>\n<cell>\nrounded_avg(5,-22)\n</cell>\n<cell>\nrounded_avg(5,-23)\n\
    </cell>\n<cell>\nrounded_avg(5,-24)\n</cell>\n<cell>\nrounded_avg(5,-25)\n</cell>\n\
    <cell>\nrounded_avg(5,-26)\n</cell", "  avg = ((n+m)/2)\n  binary = []\n  while\
    \ n <= m\n    binary.push(avg)\n    n += 1\n  end\n  binary.push(avg)\n  binary.reduce(:+)\n\
    end", "  avg = n/m + n/m\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n", "  avg = 0.0\n  for i in 0...m\n    avg += n\n  end\n\
    \  avg /= m\n  avg = round(avg)\n  if avg > m\n    return -1\n  else\n    return\
    \ avg\n  end\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n", "  avg = 0.0\n  for i in (n..m).to_a\n    avg +=\
    \ i\n  end\n  avg /= (n..m).to_a.size\n  avg.round(2)\nend", "  avg = ((n+m)/2)\n\
    \  avg = avg.round\n  avg = bin(avg)\n  avg = avg.to_i\n  if avg > m\n    return\
    \ -1\n  else\n    return avg\nend\n</cell>\n<cell>", "  avg = ((n..m).sum.to_f\
    \ / m.to_f).round\n  binary = []\n  while n <= m\n    binary.push(n % 2)\n   \
    \ n += 1\n  end\n  binary.push(avg)\n  binary.join\nend", "  avg = ((n+m)/2).round\n\
    \  if avg > m\n    avg = -1\n  else\n    avg = avg.to_s(2)\n  end\n  return avg\n\
    end", "  avg = ((n..m).sum.to_f / m).round\n  bin = sprintf(\"%b\", avg)\n  bin.slice!(0..-1)\n\
    \  return bin\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * 2\n \
    \ avg = Math.ceil(avg)\n  avg = avg / 2\n  avg = Math.ceil(avg)\n  return avg\n\
    end", "  avg = ((n + m) / 2).round\n  binary = bin(avg)\n  binary = binary.chop\n\
    \  binary = binary.reverse\n  binary = binary.to_i\n  return binary == 1 ? avg.to_s\
    \ : -1\nend\n</cell>\n<cell>\nrounded_avg(5,10)\n</cell>\n<cell>\nrounded_avg(5,5)\n\
    </cell>\n<cell>\nrounded_avg(5,0)\n</cell>\n<cell>\nrounded_avg(5,-1)\n</cell>\n\
    <cell>\nrounded_avg(5,-5)\n</cell>\n<cell>\nrounded_avg(5,-10)\n</cell>\n<cell>\n\
    rounded_avg(5,-20)\n</cell>\n<cell>\nrounded_avg(5,-30)\n</cell>\n<cell>\nrounded_avg(5,-100)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000)\n</cell>\n<cell>\nrounded_avg(5,-10000)\n\
    </cell>\n<cell>\nrounded_avg(5,-100000)\n</cell>\n<cell>\nrounded_avg(5,-1000000)\n\
    </cell>\n<cell>\nrounded_avg(5,-100000000)\n</cell>\n<cell>\nrounded_avg(5,-10000000000)\n\
    </cell>\n<cell>\nrounded_avg(5,-100000000000)\n</cell>\n<cell>\nrounded_avg(5,-1000000000000)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000000000001)\n</cell>\n<cell>\nrounded_avg(5,-1000000000002)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000000000003)\n</cell>\n<cell>\nrounded_avg(5,-1000000000004)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000000000005)\n</cell>\n<cell>\nrounded_avg(5,-1000000000006)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000000000007)\n</cell>\n<cell>\nrounded_avg(5,-1000000000008)\n\
    </cell>\n<cell>\nrounded_avg(5,-1000000000009)\n</cell>\n<cell>\nrounded_avg(5,-1000000000010)\n\
    </cell>\n<", "  avg = ((n..m).to_f / 2).round\n  bin = sprintf(\"%b\", avg)\n\
    \  bin.slice!(0..bin.length-1)\n  bin\nend", "  avg = ((n + m) / 2).round\n  bin\
    \ = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin\
    \ = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n\
    \  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n\
    \  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n\
    \  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n\
    \  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n\
    \  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n\
    \  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n\
    \  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n\
    \  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"\
    %b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n\
    \  bin = sprintf(\"%b\", avg)\n  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n\
    \  bin = bin.chop\n  bin = sprintf(\"%b\", avg)\n  bin = bin.ch", "  \n  avg =\
    \ ((n + m) / 2).round\n  \n  if avg > m\n    avg = -1\n  \n  return avg\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
