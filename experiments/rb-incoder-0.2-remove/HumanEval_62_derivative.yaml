name: HumanEval_62_derivative
language: rb
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\ndef derivative(xs)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n\
  \    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3,\
  \ 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2,\
  \ 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3,\
  \ 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n"
completions: ["  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs = [x, xs[0] +\
    \ x]\n  end\n  xs[0]\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n \
    \   xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reduce(:*)\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  x = xs[0]\n  d = 1\n  for i\
    \ in 1..(xs.length - 1)\n    d = d * xs[i]\n  end\n  return d\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs << x * x\n  end\n  xs.reverse\nend",
  "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  deriv = 0\n  for i in\
    \ 0...xs.length\n    deriv = deriv + xs[i] * i\n  end\n  return deriv\nend", " \
    \ x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n\
    \  xs.unshift(1)\n  xs.reverse\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in\
    \ 2..(xs.length - 1)\n    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n \
    \ y = xs[1]\n  d = 0\n  d += y\n  d *= x\n  d *= x\n  d *= x\n  return d\nend",
  "  xs.inject(0) do |sum, term|\n    sum + term\n  end\nend", "  xs.inject(0) do\
    \ |sum, x|\n    sum + x * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(0) do |sum, term|\n    sum + term\n  end\nend",
  "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 1..length(xs)\n    d += xs[i] *\
    \ y\n    y = y * x\n  end\n  return d\nend", "  x = xs[0]\n  y = xs[1]\n  d =\
    \ 0.0\n  for i in 0...xs.length\n    d += xs[i] * y\n    y = y * x\n  end\n  return\
    \ d\nend", "  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x\
    \ = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs\
    \ = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n \
    \ xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n\
    \  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  xs = xs[1..-1]\n  x = xs[0]\n  ",
  "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length - 1\n    d += xs[i]\
    \ * y\n    y *= x\n  end\n  return d\nend", "  xs.inject(0) do |sum, term|\n \
    \   sum + term * term\n  end\nend", "  x = 1\n  for i in 0...xs.length\n    x\
    \ += xs[i]\n  end\n  x\nend", "  x = xs[0]\n  d = 1\n  for i in 1..(xs.length\
    \ - 1)\n    d = d * x\n  end\n  return d\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum * term\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in\
    \ 1..length(xs)\n    d += xs[i] * y\n    y = y * x\n  end\n  return d\nend", " \
    \ deriv = Array.new(xs.length)\n  deriv[0] = xs[1]\n  deriv[1] = xs[2]\n  deriv[2]\
    \ = xs[3]\n  deriv[3] = xs[4]\n  deriv[4] = xs[5]\n  deriv[5] = xs[6]\n  deriv[6]\
    \ = xs[7]\n  deriv[7] = xs[8]\n  deriv[8] = xs[9]\n  deriv[9] = xs[10]\n  deriv[10]\
    \ = xs[11]\n  deriv[11] = xs[12]\n  deriv[12] = xs[13]\n  deriv[13] = xs[14]\n\
    \  deriv[14] = xs[15]\n  deriv[15] = xs[16]\n  deriv[16] = xs[17]\n  deriv[17]\
    \ = xs[18]\n  deriv[18] = xs[19]\n  deriv[19] = xs[20]\n  deriv[20] = xs[21]\n\
    \  deriv[21] = xs[22]\n  deriv[22] = xs[23]\n  deriv[23] = xs[24]\n  deriv[24]\
    \ = xs[25]\n  deriv[25] = xs[26]\n  deriv[26] = xs[27]\n  deriv[27] = xs[28]\n\
    \  deriv[28] = xs[29]\n  deriv[29] = xs[30]\n  deriv[30] = xs[31]\n  deriv[31]\
    \ = xs[32]\n  deriv[32] = xs[33]\n  deriv[33] = xs[34]\n  deriv[34] = xs[35]\n\
    \  deriv[35] = xs[36]\n  deriv[36] = xs[37]\n  deriv[37] = xs[38]\n  deriv[38]\
    \ = xs[39]\n  deriv[39] = xs[40]\n  deriv[40] = xs[41]\n  deriv[41] = xs[42]\n\
    \  deriv[42] = xs[43]\n  deriv[43] = xs[44]\n  deriv[44] = xs[45]\n  deriv[45]\
    \ = xs[46]\n  deriv[46] = xs[47]\n  deriv[47] = xs[48]\n  deriv[48] = xs[49]\n\
    \  deriv[49] = xs[50]\n  deriv[50] = xs[51]\n  deriv[51] = xs[52]\n  deriv[52]\
    \ = xs[53]\n  deriv[53] = xs[54]\n  ", "  xs.inject(0) do |acc, x|\n    acc *\
    \ x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length - 1)\n\
    \    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.inject(:*)\nend",
  "  xs.inject(0) do |sum, term|\n    sum + term\n  end\nend", "  x = xs[0]\n  y =\
    \ xs[1]\n  d = 0.0\n  for i in 1..length(xs)\n    d += xs[i] * y\n    y = y *\
    \ x\n  end\n  return d\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n\
    \  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x\
    \ * x)\n  end\n  xs.unshift(1)\n  xs.inject(:*)\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n\
    \    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reverse\nend", "  xs.inject(0)\
    \ do |sum, term|\n    sum + term * term\n  end\nend", "  x = xs[0]\n  y = xs[1]\n\
    \  d = 0.0\n  for i in 0...xs.length\n    d += xs[i] * y\n    y = y * x\n  end\n\
    \  return d\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for i in 0..(xs.length\
    \ - 1)\n    d += xs[i] * y\n    y = y * x\n  end\n  return d\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(0) do |sum, term|\n    sum + term * term\n  end\n\
    end", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  d += y\n  d *= x\n  for i in 2..(xs.length\
    \ - 1)\n    d += xs[i]\n    d *= x\n  end\n  return d\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:*).reduce(:*)\nend",
  "  xs.inject(0) do |sum, term|\n    sum + term\n  end\nend", "  x = xs[0]\n  y =\
    \ xs[1]\n  d = 0.0\n  for i in 2..(xs.length - 1)\n    d += xs[i] * y\n    y =\
    \ y * x\n  end\n  return d\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n \
    \ end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n\
    \  xs.reverse\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", " \
    \ xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n\
    \  xs.each do |x|\n    xs = [x * xs[0]]\n  end\n  x\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.reverse\n\
    end", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n\
    \  end\n  xs.unshift(1)\n  xs.reverse\nend", "  x = xs[0]\n  y = xs[1]\n  xs =\
    \ xs[2..-1]\n  xs.inject(0) do |acc, x|\n    acc * x + y\n  end\nend", "  xs.each_with_index\
    \ do |x, i|\n    xs[i] = xs[i+1] - x\n  end\n  xs.last\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reduce(:*)\nend",
  "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.each_with_index\
    \ do |x, i|\n    xs[i] = xs[i+1]\n  end\n  xs.last\nend", "  x = xs[0]\n  d =\
    \ 0.0\n  for i in 1..length(xs)\n    d = d * x\n    x = xs[i]\n  end\n  d\nend",
  "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs = [x * xs[0]]\n  end\n  return\
    \ x\nend", "  x = xs[0]\n  y = 0\n  for i in 1..xs.length\n    y = y * xs[i] +\
    \ xs[i-1]\n  end\n  y\nend", "  x = xs[1]\n  xs = [xs[0]]\n  xs.each do |x|\n\
    \    xs << x * x\n  end\n  xs.reverse\nend", "  x = xs[0]\n  ys = [x]\n  for i\
    \ in 1..(xs.length - 1)\n    ys << ys[i] + x * xs[i]\n  end\n  return ys\nend",
  "  x = xs[0]\n  ys = [x]\n  for i in 1..length(xs)\n    ys << ys[-1] * x + xs[i]\n\
    \  end\n  ys\nend", "  deriv = 0\n  for i in 0...xs.length\n    deriv += xs[i]\n\
    \  end\n  deriv\nend", "  x = xs[0]\n  y = 0\n  for i in 1..(xs.length - 1)\n\
    \    y = y * x + xs[i]\n  end\n  return y\nend", "  x = 1\n  for i in 0...xs.length\n\
    \    x += xs[i]\n  end\n  x\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for\
    \ i in 0...xs.length - 1\n    d += xs[i] * y\n    y *= x\n  end\n  return d\n\
    end", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n\
    \  end\n  xs.unshift(1)\n  xs.reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n  \
    \  xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reverse\nend", "  x = xs[0]\n\
    \  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\n    d += xs[i] * y\n    y *=\
    \ x\n  end\n  return d\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..length(xs)\n\
    \    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reverse\nend", " \
    \ x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n\
    \  xs.unshift(1)\n  xs.reverse\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n\
    \  y = xs[1]\n  d = 0.0\n  for i in 2..(xs.length - 1)\n    d = d * x + xs[i]\n\
    \  end\n  return d\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend",
  "  deriv = xs[0]\n  for i in 1..(xs.length - 1)\n    deriv += xs[i] * x\n  end\n\
    \  deriv\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs << x *\
    \ x\n  end\n  x\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for i in 0...xs.length\n\
    \    d = d * xs[i]\n  end\n  return d\nend", "  x = xs[0]\n  d = 1\n  for i in\
    \ 1..(xs.length - 1)\n    d = d * x\n  end\n  return d\nend", "  x = xs[0]\n \
    \ y = xs[1]\n  d = 0\n  d += y\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *=\
    \ x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d\
    \ *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n\
    \  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d +=\
    \ x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d\
    \ += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n\
    \  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *=\
    \ x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d\
    \ *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n\
    \  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d +=\
    \ x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d\
    \ += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n\
    \  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *= x\n  d += x\n  d *=\
    \ x\n  d += x\n  d *= ", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length\
    \ - 1)\n    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n  y = xs[1]\n  d\
    \ = 0.0\n  for i in 0...(xs.length - 1)\n    d += xs[i] * y\n    y = y * x\n \
    \ end\n  return d\nend", "  x = xs[0]\n  xs = xs[1..-1]\n  xs.inject(0) { |result,\
    \ x| result + x * x }\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n\
    \    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reverse\nend", "  x = xs[0]\n\
    \  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\n    d += xs[i] * y\n    y =\
    \ y * x\n  end\n  return d\nend", "  deriv = 0\n  for i in 0...xs.length\n   \
    \ deriv += xs[i]\n  end\n  deriv\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n\
    \  for i in 0...(xs.length - 1)\n    d += xs[i] * y\n    y *= x\n  end\n  return\
    \ d\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  d += y\n  d *= x\n  for i in\
    \ 2..length(xs)\n    d *= x\n    d += xs[i]\n  end\n  return d\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n\
    \  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n\
    \  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n\
    \  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n\
    \  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n\
    \  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n\
    \  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n\
    \  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n\
    \  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n\
    \  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n\
    \  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n\
    \  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n\
    \  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n\
    \  xs.unshift(-0)\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n\
    \  xs.unshift(1)\n  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n\
    \  xs.unshift(0)\n  xs.unshift(-1)\n  xs.unshift(-0)\n  xs.unshift(1)\n  xs.",
  "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  x = 1\n  for i in 0...xs.length\n    x += 1\n\
    \    x -= xs[i]\n  end\n  x\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 1..length(xs)\n\
    \    d = d * x + xs[i]\n  end\n  return d\nend", "  x = xs[0]\n  y = 0\n  for\
    \ i in 1..(xs.length - 1)\n    y += xs[i]\n  end\n  return y\nend", "  deriv =\
    \ 0\n  for i in 0...xs.length\n    deriv = deriv + xs[i]\n  end\n  deriv\nend",
  "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0..(xs.length - 1)\n    d += xs[i]\
    \ * y\n    y *= x\n  end\n  return d\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  deriv = xs[1]\n  for i in 2..(xs.length - 1)\n    deriv\
    \ = deriv * xs[i]\n  end\n  return deriv\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend",
  "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length - 1)\n    xs << xs[i] * x\n\
    \  end\n  xs\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length - 1)\n\
    \    xs << xs[i] * x\n  end\n  xs\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  d += y\n  d *= x\n\
    \  for i in 2..(xs.length - 1)\n    d += xs[i]\n    d *= x\n  end\n  return d\n\
    end", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for i in 2..(xs.length - 1)\n    d\
    \ = d * x\n    d = d + xs[i]\n  end\n  return d\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length\
    \ - 1)\n    xs << xs[i] * x\n  end\n  xs\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\n\
    \    d += xs[i] * y\n    y *= x\n  end\n  return d\nend", "  deriv = 0\n  for\
    \ i in 0...xs.length\n    deriv = deriv + xs[i]\n  end\n  deriv\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n\
    \  for i in xs[2..-1]\n    d = d * x + i\n  end\n  [y, d]\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs << x * x\n  end\n  x\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n\
    \  xs.reverse\nend", "  deriv = Array.new(xs.length)\n  deriv[0] = xs[1]\n  deriv[1]\
    \ = xs[2]\n  deriv[2] = xs[3]\n  deriv[3] = xs[4]\n  deriv[4] = xs[5]\n  deriv[5]\
    \ = xs[6]\n  deriv[6] = xs[7]\n  deriv[7] = xs[8]\n  deriv[8] = xs[9]\n  deriv[9]\
    \ = xs[10]\n  deriv[10] = xs[11]\n  deriv[11] = xs[12]\n  deriv[12] = xs[13]\n\
    \  deriv[13] = xs[14]\n  deriv[14] = xs[15]\n  deriv[15] = xs[16]\n  deriv[16]\
    \ = xs[17]\n  deriv[17] = xs[18]\n  deriv[18] = xs[19]\n  deriv[19] = xs[20]\n\
    \  deriv[20] = xs[21]\n  deriv[21] = xs[22]\n  deriv[22] = xs[23]\n  deriv[23]\
    \ = xs[24]\n  deriv[24] = xs[25]\n  deriv[25] = xs[26]\n  deriv[26] = xs[27]\n\
    \  deriv[27] = xs[28]\n  deriv[28] = xs[29]\n  deriv[29] = xs[30]\n  deriv[30]\
    \ = xs[31]\n  deriv[31] = xs[32]\n  deriv[32] = xs[33]\n  deriv[33] = xs[34]\n\
    \  deriv[34] = xs[35]\n  deriv[35] = xs[36]\n  deriv[36] = xs[37]\n  deriv[37]\
    \ = xs[38]\n  deriv[38] = xs[39]\n  deriv[39] = xs[40]\n  deriv[40] = xs[41]\n\
    \  deriv[41] = xs[42]\n  deriv[42] = xs[43]\n  deriv[43] = xs[44]\n  deriv[44]\
    \ = xs[45]\n  deriv[45] = xs[46]\n  deriv[46] = xs[47]\n  deriv[47] = xs[48]\n\
    \  deriv[48] = xs[49]\n  deriv[49] = xs[50]\n  deriv[50] = xs[51]\n  deriv[51]\
    \ = xs[52]\n  deriv[52] = xs[53]\n  deriv[53] = xs[54]\n  ", "  x = xs[0]\n  y\
    \ = xs[1]\n  d = 0.0\n  for i in 1..length(xs)\n    d += xs[i] * y\n    y *= x\n\
    \  end\n  return d\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n   \
    \ xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.reduce(:*)\n\
    end", "  xs.each_with_index do |x, i|\n    xs[i] = xs[i] - xs[i] * x\n  end\n\
    \  xs.reduce(:*)\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs\
    \ << x * x\n  end\n  x\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..(xs.length\
    \ - 1)\n    xs << xs[i] * x\n  end\n  xs\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  xs.each_with_index do |x, i|\n    xs[i] = xs[i]\
    \ - xs[i-1]\n  end\n  xs.reduce(:*)\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.unshift(0)\n  xs.reduce(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  ys\
    \ = Array.new(xs.length)\n  ys[0] = 1\n  ys[1] = x\n  ys[2] = x * x\n  ys.each_index\
    \ do |i|\n    ys[i+1] = ys[i] * x\n  end\n  return ys\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum * term\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..length(xs)\n\
    \    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i\
    \ in 2..length(xs)\n    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n  y\
    \ = xs[1]\n  d = 0.0\n  for i in 0...(xs.length - 1)\n    d += xs[i] * y\n   \
    \ y = y * x\n  end\n  return d\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.reverse\n  xs.inject(:+) do |sum, term|\n    sum * term\n\
    \  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n   \
    \   acc * x + y\n    end\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.inject(:*)\nend",
  "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs << x * x\n  end\n  x\nend",
  "  deriv = Array.new(xs.length)\n  deriv[0] = xs[1]\n  deriv[1] = xs[2]\n  deriv[2]\
    \ = xs[3]\n  deriv[3] = xs[4]\n  deriv[4] = xs[5]\n  deriv[5] = xs[6]\n  deriv[6]\
    \ = xs[7]\n  deriv[7] = xs[8]\n  deriv[8] = xs[9]\n  deriv[9] = xs[10]\n  deriv[10]\
    \ = xs[11]\n  deriv[11] = xs[12]\n  deriv[12] = xs[13]\n  deriv[13] = xs[14]\n\
    \  deriv[14] = xs[15]\n  deriv[15] = xs[16]\n  deriv[16] = xs[17]\n  deriv[17]\
    \ = xs[18]\n  deriv[18] = xs[19]\n  deriv[19] = xs[20]\n  deriv[20] = xs[21]\n\
    \  deriv[21] = xs[22]\n  deriv[22] = xs[23]\n  deriv[23] = xs[24]\n  deriv[24]\
    \ = xs[25]\n  deriv[25] = xs[26]\n  deriv[26] = xs[27]\n  deriv[27] = xs[28]\n\
    \  deriv[28] = xs[29]\n  deriv[29] = xs[30]\n  deriv[30] = xs[31]\n  deriv[31]\
    \ = xs[32]\n  deriv[32] = xs[33]\n  deriv[33] = xs[34]\n  deriv[34] = xs[35]\n\
    \  deriv[35] = xs[36]\n  deriv[36] = xs[37]\n  deriv[37] = xs[38]\n  deriv[38]\
    \ = xs[39]\n  deriv[39] = xs[40]\n  deriv[40] = xs[41]\n  deriv[41] = xs[42]\n\
    \  deriv[42] = xs[43]\n  deriv[43] = xs[44]\n  deriv[44] = xs[45]\n  deriv[45]\
    \ = xs[46]\n  deriv[46] = xs[47]\n  deriv[47] = xs[48]\n  deriv[48] = xs[49]\n\
    \  deriv[49] = xs[50]\n  deriv[50] = xs[51]\n  deriv[51] = xs[52]\n  deriv[52]\
    \ = xs[53]\n  deriv[53] = xs[54]\n  ", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n\
    \  for i in 0...xs.length - 1\n    d += xs[i] * y\n    y *= x\n  end\n  return\
    \ d\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 1..length(xs)\n  \
    \  d = d + xs[i] * y\n    y = y * x\n  end\n  return d\nend", "  xs.reverse!\n\
    \  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |sum, term|\n    sum\
    \ + term * term\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..length(xs)\n\
    \    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[1]\n  xs = [xs[0]]\n  for i\
    \ in 2..length(xs)\n    xs << xs[i] * x\n  end\n  xs\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for\
    \ i in 0...xs.length\n    d = d * x + xs[i]\n  end\n  return d\nend", "  deriv\
    \ = Array.new(xs.length)\n  deriv[0] = 0.0\n  deriv[1] = xs[1]\n  for i in 2..xs.length\n\
    \    deriv[i] = deriv[i-1] * xs[i]\n  end\n  return deriv\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n\
    \  xs.reduce(:*)\nend", "  x = 1\n  for i in 0...xs.length\n    x += xs[i]\n \
    \ end\n  x\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\n\
    \    d += xs[i] * y\n    y *= x\n  end\n  return d\nend", "  x = xs[0]\n  y =\
    \ xs[1]\n  d = 0.0\n  for i in 0...xs.length\n    d += xs[i] * y\n    y *= x\n\
    \  end\n  return d\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for i in 2..length(xs)\n\
    \    d = d * x + xs[i]\n  end\n  return d\nend", "  x = xs[0]\n  y = xs[1]\n \
    \ d = 0\n  for i in xs[2..-1]\n    d = d * x + i\n  end\n  return d\nend", " \
    \ xs.reverse!\n  xs.inject(0) {|sum, el| sum + el * el}\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n\
    \  xs.inject(:*)\nend", "  xs.reverse\n  xs.inject(:+) do |sum, term|\n    sum\
    \ * term\n  end\nend", "  x = xs[0]\n  y = 0\n  for i in 1..xs.length\n    y =\
    \ y * xs[i] + xs[i-1]\n  end\n  return y\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum * term\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each do |x|\n\
    \    xs = [x, xs[1]]\n  end\n  x\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reduce(:*)\nend",
  "  xs.inject(:+) do |sum, x|\n    sum * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n\
    \  d = 0\n  d += y\n  d *= x\n  for i in 2..(xs.length - 1)\n    d += xs[i]\n\
    \    d *= x\n  end\n  return d\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs << x * x\n  end\n  x\nend", "  xs.each_with_index do |x, i|\n\
    \    xs[i] = xs[i] - xs[i-1]\n  end\n  xs.reduce(:*)\nend", "  x = xs[0]\n  y\
    \ = 0\n  for i in 1..length(xs)\n    y += xs[i]\n  end\n  return y\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\
    \ - 1\n    d += xs[i] * y\n    y = y * x\n  end\n  return d\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.each_with_index do |x, i|\n   \
    \ xs[i] = xs[i] - xs[i-1]\n  end\n  xs.inject(:*)\nend", "  x = xs[0]\n  xs =\
    \ [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n \
    \ xs.reverse\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend",
  "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  for i in\
    \ 2..(xs.length - 1)\n    d += xs[i] * y\n    y = y * x\n  end\n  return d\nend",
  "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in xs[2..-1]\n    d += i * x\n  end\n\
    \  [y, d]\nend", "  x = xs[1]\n  xs = [xs[0]]\n  xs.each do |x|\n    xs << x *\
    \ x\n  end\n  xs.reverse\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\n\
    end", "  x = 1\n  for i in xs\n    x += 1\n    x -= 1\n  end\n  x\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  x = xs[0]\n  xs = [xs[1]]\n  xs.each\
    \ do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n  xs.reduce(:*)\nend",
  "  x = xs[0]\n  xs = [xs[1]]\n  for i in 2..length(xs)\n    xs << xs[i] * x\n  end\n\
    \  xs\nend", "  x = 1\n  for i in xs\n    x *= i\n  end\n  x\nend", "  xs.reverse!\n\
    \  xs.inject(0) do |sum, term|\n    sum + term * term\n  end\nend", "  x = xs[0]\n\
    \  xs = [xs[1]]\n  xs.each do |x|\n    xs.unshift(x * x)\n  end\n  xs.unshift(1)\n\
    \  xs.reduce(:*)\nend", "  x = xs[0]\n  y = xs[1]\n  d = 0\n  d += y\n  d *= x\n\
    \  for i in 2..(xs.length - 1)\n    d += xs[i]\n    d *= x\n  end\n  return d\n\
    end", "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend", "  x = xs[0]\n\
    \  y = xs[1]\n  d = 0\n  d += x\n  d *= y\n  for i in 2..(xs.length - 1)\n   \
    \ d *= xs[i]\n  end\n  return d\nend", "  xs.inject(0) do |acc, x|\n    acc *\
    \ x\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend",
  "  x = xs[0]\n  y = xs[1]\n  d = 0.0\n  for i in 0...xs.length\n    d += xs[i] *\
    \ y\n    y = y * x\n  end\n  return d\nend", "  x = xs[0]\n  xs = [xs[1]]\n  for\
    \ i in 2..(xs.length - 1)\n    xs << xs[i] * x\n  end\n  xs\nend", "  x = xs[0]\n\
    \  y = xs[1]\n  xs = [xs[1]]\n  xs.each do |x|\n    xs = [x * y, xs]\n  end\n\
    \  xs[0]\nend", "  xs.inject(0) do |sum, term|\n    sum + term\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
