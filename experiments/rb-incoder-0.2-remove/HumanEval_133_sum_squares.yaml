name: HumanEval_133_sum_squares
language: rb
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0,\
  \ 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84,\
  \ candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4,\
  \ 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230,\
  \ candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0,\
  \ 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086,\
  \ candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n\
  \    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0,\
  \ 1.0, 0.0]))\n  end\nend\n"
completions: ["  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n \
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)**2\n  end\n\
    \  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)**2\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n \
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |num|\n    sum += num ** 2\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\n  end\n  sum\nend",
  "  lst.map!(&:round)\n  lst.inject(0) {|sum, el| sum + el**2 }\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", " \
    \ lst.map{|x| x.round}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| ", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.ceil}\n  lst.inject(0){|sum, el| sum + el**2}\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\n`lst.inject(0) { |sum, el| sum + el**2\
    \ }` is more concise and efficient than `lst.map!{|x| x.ceil}.inject(0){|sum,\
    \ el| sum + el**2}`\n<|/ c |>\n<| c |>\n`lst.inject(0) { |sum, el| sum + el**2\
    \ }` doesn't round the elements to `ceil` but rather truncates them. `lst.inject(0)\
    \ { |sum, el| sum + el**2 }.round(2)` would round the elements to `ceil`.\n<|/\
    \ c |>\n<| c |>\n`lst.inject(0) { |sum, el| sum + el**2 }.round(2)` would round\
    \ the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)` would\
    \ round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the elements to `ceil`. `lst.inject(0) { |sum, el| sum + el**2 }.round(2)`\
    \ would round the ", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) **\
    \ 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n\
    \  end\n  return sum\nend", "  lst.map{|x| x.ceil}.inject(:+)\nend", "  lst.each\
    \ do |x|\n    x.round(Ceiling(x))\n  end\n  lst.inject(:+)\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n  \
    \  sum += x.to_i\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ Math.ceil(x) ** 2\n  end\n  return sum\nend", "  lst.map!{|x| x.ceil}\n  lst.inject(0){|sum,\
    \ el| sum + el**2}\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your use\
    \ of inject and map to solve this problem. I'm going to have to remember that\
    \ one.\n<|/ c |>\n<| c |>\nI like your use of inject and map to solve this problem.\
    \ I'm going to have to remember that one.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  return sum\nend", " \
    \ lst.map!{|x| x.ceil}\n  lst.inject(0, :+).to_s\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't require the use of Math.ceil.\n<|/ c\
    \ |>\n<| c |>\nI added a more efficient solution that doesn't require the use\
    \ of Math.ceil.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  sum = 0\n  lst.each do\
    \ |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n\
    \  lst.map!{|x| x.round}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x)**2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  return sum\nend", "  lst.map!{|x|\
    \ x.round}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n  \
    \  sum += x.to_i\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum +=\
    \ Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  lst.map!{|x| x.ceil}\n\
    \  lst.inject(0, :+)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`lst.map!{|x|\
    \ x.ceil}` can be replaced with `lst.map{|x| x.ceil}`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that. I've updated my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)**2\n  end\n  sum\n\
    end", "  lst.each do |x|\n    x.round(Ceiling).to_i ** 2\n  end\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x)\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  sum\nend", "  lst.map{|x|\
    \ x.round}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| ",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  lst.map!{|x| x.round}\n  lst.map!{|x| x.to_i}\n  lst.map!{|x| x*x}\n  lst.inject(:+)\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like the inject idea,\
    \ but this doesn't work if the list is empty. You'll get `NoMethodError: undefined\
    \ method 'inject' for nil:NilClass`\n<|/ c |>\n<| c |>\nYes, you're right. I've\
    \ edited the answer to handle empty lists.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question of how to\
    \ round the numbers to the nearest integer.\n<|/ c |>\n<| c |>\nI thought he wanted\
    \ to round the numbers to the nearest integer. He didn't say anything about rounding\
    \ up or down.\n<|/ c |>\n<| c |>\nHe said \"round each element in the list to\
    \ the upper int(Ceiling) first.\"\n<|/ c |>\n<| c |>\nYes, I see that now. My\
    \ mistake.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x)\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n\
    \  lst.inject(0){|sum, el| sum + el**2}\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.ceil}\n \
    \ lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  lst.map!{|x| x.round}\n  lst.inject{|sum, item|\
    \ sum + item**2}\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n\
    \  return sum\nend", "  lst.map!{|x| x.ceil}\n  lst.inject(0){|sum, el| sum +\
    \ el ** 2}\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += Math.ceil(x)**2\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |num|\n    sum += num ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend",
  "  lst.map!{|x| x.round}\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n  \
    \  sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  lst.map{|x| x.round}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x|\
    \ x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n\
    \  lst.map{|x| x.ceil}\n  lst.map{|x| x.ceil}\n  lst.map{|x| ", "  sum = 0\n \
    \ lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |num|\n    sum += num ** 2\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |num|\n    sum += num ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  return sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)**2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return\
    \ sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for the answer.\
    \ I am not allowed to use any gems. I am just trying to understand how it works.\n\
    <|/ c |>\n<| c |>\nI added a solution without gems.\n<|/ c |>\n<| c |>\nThanks\
    \ for the answer. I am not allowed to use any gems. I am just trying to understand\
    \ how it works.\n<|/ c |>\n<| c |>\nI added a solution without gems.\n<|/ c |>\n\
    <| c |>\nThanks for the answer. I am not allowed to use any gems. I am just trying\
    \ to understand how it works.\n<|/ c |>\n<| a |>\n<code>", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x.to_i\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  lst.map{|x| x.round}\n\
    \  lst.map{|x| x*x}\n  lst.inject{|sum,x| sum + x}\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x.to_i ** 2\n  end\n  sum\nend", "  lst.map{|x| x.ceil}.inject(:+).sqrt\n\
    end\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0,\
    \ 6.0, 8.0, 10.0])\n</cell>\n<cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n\
    <cell>\nsum_squares([4.0, 6.0, 8.0, 10.0])\n</cell>\n<cell>\n", "  sum = 0\n \
    \ lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum = 0\n \
    \ lst.each do |x|\n    sum += x.to_i\n  end\n  return sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  return sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x.to_i ** 2\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += x.to_i\n  end\n  return sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x.to_i ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += Math.ceil(x)\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n \
    \   sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x.to_i\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x * x\n  end\n  sum\nend", "  lst.map { |x| x.ceil }\n  lst.inject\
    \ { |sum, num| sum + num ** 2 }\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n  \
    \  sum += Math.ceil(x) ** 2\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work. `Math.ceil` returns a float, and `**` doesn't\
    \ work on floats.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  lst.each do |x|\n\
    \    sum += x.to_i\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum\
    \ += x * x\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  return sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x)\
    \ ** 2\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n`Math.ceil` rounds\
    \ down, not up. `Math.ceil` rounds to the nearest integer, not to the nearest\
    \ greater integer.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\n\
    end", "  lst.map!{|x| x.ceil}\n  lst.inject(0, :+)\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  return sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x)\n  end\n  sum\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each do |x|\n    sum += Math.ceil(x) ** 2\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each do |x|\n    sum += x * x\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
