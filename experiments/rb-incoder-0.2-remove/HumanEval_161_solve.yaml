name: HumanEval_161_solve
language: rb
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["  s.downcase!\n  s.split(\"\").each do |x|\n    x.upcase! if x.match(/[a-z]/i)\n\
    \  end\n  s.split(\"\").join\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend", "  s.chars.reverse_each.with_index.reduce(:+)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # write\
    \ your code in Ruby\n    \n    return s\nend", "  s.downcase!\n  s.gsub(/[^a-z]/,'').downcase!\n\
    \  s.reverse!\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s\nend\n</cell>\n<cell>", "    \n    # write your code in Ruby\n\
    \    \n    return s\nend", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |x| x.upcase\
    \ }\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend",
  "    \n    # Write your code here\n    \n    return s\n</cell>\n<cell>", "  s.downcase!\n\
    \  s.split(\"\").each do |char|\n    char.upcase! if char.downcase == char\n \
    \ end\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n \
    \ s.reverse!\n  s\nend", "  s.downcase!\n  s.split(\"\").each do |c|\n    if c.upcase\
    \ == c\n      s.gsub!(c,c.downcase)\n    elsif c.downcase == c\n      s.gsub!(c,c.upcase)\n\
    \    end\n  end\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<cell>", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\n\
    end", "  s = s.downcase\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\n\
    \  s\nend", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }\n  s\nend", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\n\
    end\n</cell>\n<cell>\nsolve(\"Hello World\")\n</cell>\n<cell>\nsolve(\"Hello World!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '') \n  s.reverse!\n  s\nend",
  "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend", "    \n    # write your code\
    \ in Ruby\n    \nend", "  s.downcase!\n  s.gsub(/[a-z]/){|c| c.upcase }\nend\n\
    </cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<cell>\nsolve('hello')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\n", "  s.downcase!\n  s.split(\"\").each do |x|\n    if x.isalpha?\n\
    \      x.upcase!\n    else\n      x\n    end\n  end\n  s.downcase!\nend", "  s.chars.each\
    \ do |c|\n    next if c.nil?\n    next if c.upcase == c\n    next if c.downcase\
    \ == c\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase\n    next if c.upcase\
    \ == c.downcase.upcase.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase ", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "  s.chars.reverse!\n\
    \  s.chars.empty? ? s.chars.reverse! : s\nend", "  s.split('').map { |x| x.upcase\
    \ if x.isalpha? }.join('')\nend\n</cell>\n<cell>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |x| x.upcase\
    \ }\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |s| s.upcase\
    \ }\nend\n</cell>\n<cell>", "  s.chars.reverse.join if s.chars.any? else s.reverse\n\
    end", "    \n    # write your code in Ruby\n    \nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s\nend", "  s = s.downcase\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i) { |s| s.upcase }\n  s\nend\n</cell>\n\
    <cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=ruby,string |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<cell>\nsolve(\"hello\")\n</cell>\n<cell>\nsolve(\"Hello World\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!\")\n</cell>\n<cell>\nsolve(\"Hello World!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i,\
    \ '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i,\
    \ '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i,\
    \ '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '')\n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s.gsub!(/[^A-Z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n\
    \  s.g", "  s.downcase!\n  s.split('').each do |c|\n    if c.isalpha\n      c.upcase!\n\
    \    else\n      c.downcase!\n    end\n  end\n  s\nend\n</cell>\n<cell>", "  s\
    \ = s.downcase\n  s.gsub!(/[^a-z]/,'')\n  s.gsub!(/[a-z]/){|s| s.upcase}\n  s\n\
    end", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nI like your solution, but I wonder why you\
    \ used `gsub!` instead of `gsub`? I thought `gsub!` was a mutating method and\
    \ `gsub` was a non-mutating method. Can you explain why you used `gsub!` instead\
    \ of `gsub`?\n<|/ c |>\n<| c |>\n`gsub!` mutates the string in place. `gsub` returns\
    \ a new string and does not mutate the string in place. `gsub!` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns nil.\n<|/ c |>\n<| c |>\nThanks for the explanation. I think I understand\
    \ now.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[a-z]/){|s| s.upcase}\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s\nend\n</cell>\n<cell>\nsolve('Hello\
    \ World')\n</cell>\n<cell>\nsolve('Hello World!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello\
    \ World!!!')\n</cell>\n<cell>\nsolve('Hello ", "  s.chars.each do |c|\n    if\
    \ c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse!\n\
    \  s\nend\n</cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.5>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[A-Z]/i, ''.downcase)\n  s\nend\n</cell>\n<cell>", "  s.chars.each\
    \ do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif\
    \ c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse.join\n\
    end", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a tags=ruby,string |>\n<code>", "  s.downcase!\n  s.reverse!\n  s.upcase!\n\
    \  s\nend\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |c| c.upcase\
    \ }\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s\nend",
  "  s.split('').map{|c| c.upcase == c ? c.downcase : c}.join\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s.downcase!\n  s.reverse!\n\
    \  s.upcase!\n  s\nend", "  s.split('').map{|c| c.downcase == c ? c.upcase : c.downcase}.join\n\
    end", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n\
    <code language=julia-1.4>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    end\n</cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s.gsub!(/[a-z]/i, '') \n  s.reverse!\n  return s\nend", "  s.chars.each do\
    \ |c|\n    next if c.nil? || c.empty?\n    next if c.upcase == c\n    next if\
    \ c.downcase == c\n    next if c.upcase == c.downcase\n  end\n  s.chars.reverse.join\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\n`s.chars.reverse.join` can be\
    \ written as `s.reverse`\n<|/ c |>\n<| c |>\nYes, but that would reverse the string\
    \ twice, which is unnecessary.\n<|/ c |>\n<| c |>\nYes, but that would reverse\
    \ the string twice, which is unnecessary.\n<|/ c |>\n<| c |>\nYes, but that would\
    \ reverse the string twice, which is unnecessary.\n<|/ c |>\n<| c |>\nYes, but\
    \ that would reverse the string twice, which is unnecessary.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |s| s.upcase }\nend", " \
    \ s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s.downcase!\n  s.gsub(/[a-z]/){|c|\
    \ c.upcase }\nend\n</cell>\n<code language=julia-1.5>", "  s.downcase!\n  s.gsub(/[a-z]/)\
    \ { |x| x.upcase }\nend\n</cell>\n<cell>", "  s.downcase!\n  s.reverse!\n  s.upcase!\n\
    \  return s\nend", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |c| c.upcase }\nend\n\
    </cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<code language=julia-1.3>", "  s.downcase!\n  s.gsub(/[a-z]/){|c|\
    \ c.upcase }\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s.gsub!(/[a-z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/,'')\n\
    \  s.gsub!(/[a-z]/){|s| s.upcase}\n  s\nend", "  s.split('').map { |x| x.upcase\
    \ }.join('')\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s.gsub!(/[a-z]/i, '')\n  s\nend", "  s.split('').map { |c| c.upcase == c ?\
    \ c.downcase : c }.join\nend", "  s.chars.each do |c|\n    next if c.nil? || c.empty?\n\
    \    next if c.upcase == c\n    next if c.downcase == c\n    next if c.upcase\
    \ == c.downcase\n  end\n  s.chars.reverse!\nend", "    \nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.0>",
  "  s.downcase!\n  s.gsub(/[^a-z]/i) { |s| s.upcase }\nend\n</cell>\n<cell>", " \
    \ s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s.downcase!\n\
    \  s.gsub(/[^a-z]/i) { |c| c.upcase }\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.0>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s.downcase!\n\
    \  s.reverse!\n  s.upcase!\n  return s\nend", "  s.chars.each do |c|\n    if c.upcase\
    \ == c\n      s.gsub!(c,c.downcase)\n    elsif c.downcase == c\n      s.gsub!(c,c.upcase)\n\
    \    end\n  end\n  s\nend", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n\
    </cell>\n<code language=julia-1.5>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s.downcase!\n  s.gsub(/[a-z]/)\
    \ { |x| x.upcase }\nend\n</cell>\n<cell>", "  s.downcase!\n  s.reverse!\n  s.upcase!\n\
    \  s\nend", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n</cell>\n<cell>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \nend", "  s.chars.each\
    \ do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase, c).gsub(c.downcase,\
    \ c.upcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.downcase).gsub(c.upcase,\
    \ c.downcase)\n    end\n  end\n  s.reverse!\n  s\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub(/[^a-z]/i)\
    \ { |x| x.upcase }\nend\n</cell>\n<cell>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[a-z]/i, '') \n  s.g", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=ruby |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    end\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/,'')\n  s.reverse!\n\
    end\n</cell>\n<cell>", "  s.split('').map { |x| x.upcase }.join('')\nend\n</cell>\n\
    <code language=julia-1.0>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '') \n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z",
  "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i) { |s| s.upcase\
    \ }\n  s\nend\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(\"Hello World!\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"Hello World?\")\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World!\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"Hello World?\")\n</cell>\n<code\
    \ language=julia-1.", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<code language=julia-1.0>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s\nend\n</cell>\n<code language=julia-1.3>",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    # Write your code here\n    \n    return s\n</cell>\n<cell>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>\nsolve('Hello World')\n</cell>\n\
    <cell>\nsolve('Hello World!')\n</cell>\n<cell>\nsolve('Hello World!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>\nsolve('Hello World!!!')\n</cell>\n\
    <cell>\nsolve('Hello World!!!')\n</cell>\n<cell>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\n\
    end", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n</cell>\n<code language=julia-1.0>",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\nend\n</pre>\n<p>\n<strong>Time\
    \ Complexity:</strong> O(n)\n</p>\n<p>\n<strong>Example:</strong>\n</p>\n<pre>\n\
    s = 'AaBbCcDdEeFf'\ns.downcase!\ns.gsub!(/[^a-z]/i, '')\ns.reverse!\nputs s",
  "  s.downcase!\n  s.gsub(/[^a-z]/i) { |c| c.upcase }\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s\nend\n</cell>\n<cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s.downcase!\n  s.reverse!\n\
    \  s.upcase!\n  s\nend\n</cell>\n<cell>\nsolve(\"hello\")\n</cell>\n<cell>\nsolve(\"\
    HELLO\")\n</cell>\n<cell>\nsolve(\"hELLO\")\n</cell>\n<cell>\nsolve(\"hEllO\"\
    )\n</cell>\n<cell>\nsolve(\"hELLO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n\
    <cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\n\
    solve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"\
    hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\"\
    )\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n\
    <cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\n\
    solve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"\
    hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\"\
    )\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n\
    <cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\n\
    solve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"\
    hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\")\n</cell>\n<cell>\nsolve(\"hEllO\"\
    )\n</", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend",
  "  s.downcase!\n  s.split(//).each do |x|\n    x.upcase! if x.match?(/[a-z]/)\n\
    \  end\n  s.downcase!\nend\n</code>\n<|/ a tags=ruby |>\n<| a |>\n<code>", " \
    \ s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\nend\n</cell>\n<code language=julia-0.6>",
  "  s = s.downcase\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s\nend\n</pre>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2016-03-24 17:16:42 CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for your answer. Can you please explain me the code you wrote\
    \ in the last line?\n<|/ c |>\n<| c |>\nThe last line is just to convert the string\
    \ into lower case and remove any non-letter characters. I added the explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nThanks a lot. Can you please explain me the\
    \ code you wrote in the last line?\n<|/ c |>\n<| c |>\nThe last line is just to\
    \ convert the string into lower case and remove any non-letter characters. I added\
    \ the explanation to the answer.\n<|/ c |>\n<| c |>\nThanks a lot. Can you please\
    \ explain me the code you wrote in the last line?\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  s.chars.reverse_each.with_index.reduce(:+)\nend\n</cell>\n<cell>\n\
    solve(\"AaBbCcDd\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<cell>\n\
    solve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n\
    </cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\"\
    )\n</cell>\n<cell>\nsolve(\"AaBbCcDdEeFfGgHhIj\")\n", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\nend\n</cell>\n<cell>\nsolve('hello')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO WORLD')\n</cell>\n\
    <cell>\nsolve('hELLO WORLD')\n</cell>\n<cell>\nsolve('hELLO ", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.0>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |s| s.upcase\
    \ }\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n\
    </cell>\n<cell>", "    \n    return s\n    \nprint(solve(\"hello\"))\nprint(solve(\"\
    HELLO\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"\
    ))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\n\
    print(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"\
    hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"\
    ))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\n\
    print(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"\
    heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"\
    ))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\n\
    print(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"\
    hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"\
    ))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\n\
    print(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"\
    hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"\
    ))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\n\
    print(solve(\"heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"\
    heLLO\"))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"\
    ))\nprint(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\n\
    print(solve(\"hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"\
    hello\"))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"\
    ))\nprint(solve(\"hELLO\"))\nprint(solve(\"heLLO\"))\nprint(solve(\"hello\"))\n\
    print(solve(\"hELLO\"))\n", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n\
    </cell>\n<cell>\nsolve('hello')\n</cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hello')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('HellO')\n", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n</cell>\n\
    <cell>\nsolve(\"Hello World\")\n</cell>\n<cell>\nsolve(\"Hello World!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.5>",
  "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"HELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"HellO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n",
  "    \n    return s\n    \n    ", "  s.chars.each do |c|\n    if c.upcase == c\n\
    \      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase == c\n      s =\
    \ s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse!\n  s\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,string |>\n<code>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThis doesn't work if there are multiple consecutive uppercase letters.\n\
    <|/ c |>\n<| c |>\nI believe that `gsub!` will replace all occurrences of `[^a-z]`\
    \ with the block parameter. So, if there are multiple consecutive uppercase letters,\
    \ they will be replaced with a single uppercase letter. `gsub!` will then replace\
    \ that single uppercase letter with the block parameter, which will then be upcased.\n\
    <|/ c |>\n<| c |>\nYes, but `gsub!` will replace all occurrences of `[^a-z]` with\
    \ the block parameter. So, if there are multiple consecutive uppercase letters,\
    \ they will be replaced with a single uppercase letter. `gsub!` will then replace\
    \ that single uppercase letter with the block parameter, which will then be upcased.\n\
    <|/ c |>\n<| c |>\nYes, but `gsub!` will replace all occurrences of `[^a-z]` with\
    \ the block parameter. So, if there are multiple consecutive uppercase letters,\
    \ they will be replaced with a single uppercase letter. `gsub!` will then replace\
    \ that single uppercase letter with the block parameter, which will then be upcased.\n\
    <|/ c |>\n<| c |>\nYes, but `gsub!` will replace all occurrences of `[^a-z]` with\
    \ the block parameter. So, if there are multiple consecutive uppercase letters,\
    \ they will be replaced with a single uppercase letter. `gsub!` will then replace\
    \ that single uppercase letter with the block parameter, which will then be upcased.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s\nend", "  s = s.downcase\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, '')\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '')\n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>", "  s.chars.each do |c|\n    if\
    \ c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\n`s.chars.each { |c| s.gsub!(c,c.upcase) }`\
    \ would do the same thing without having to use gsub!.\n<|/ c |>\n<| c |>\n`s.chars.each\
    \ { |c| s.gsub!(c,c.upcase) }` would do the same thing without having to use gsub!.\n\
    <|/ c |>\n<| c |>\n`s.chars.each { |c| s.gsub!(c,c.upcase) }` would do the same\
    \ thing without having to use gsub!.\n<|/ c |>\n<| c |>\n`s.chars.each { |c| s.gsub!(c,c.upcase)\
    \ }` would do the same thing without having to use gsub!.\n<|/ c |>\n<| c |>\n\
    `s.chars.each { |c| s.gsub!(c,c.upcase) }` would do the same thing without having\
    \ to use gsub!.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI\
    \ believe this answer is the most elegant and simplest to understand. Thanks!\n\
    <|/ c |>\n<| c |>\nI believe this answer is the most elegant and simplest to understand.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI believe this answer is the most elegant and simplest\
    \ to understand. Thanks!\n<|/ c |>\n<| a |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s.reverse!\n  s\nend", "  s =\
    \ s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, '') \n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[A-Z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i,\
    \ '')\n  s.gsub!(/[^A-Za-z]/i, '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/i,\
    \ '')\n  s.gsub!(/[A-Za-z]/i, '')\n  s.gsub!(/[^A-Za-z]/", "  s.downcase!\n  s.gsub(/[^a-z]/i)\
    \ { |s| s.upcase }\nend\n</cell>\n<code language=conda-env-Anaconda3-py>", " \
    \ s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"Hello World\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"HELLO WORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"hELLO wORLD\")\n</cell>\n<code language=julia-1.5>\nsolve(\"hELLO wORLD\"\
    )\n</cell>\n<code language=julia-1.5>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '') \n  return s\nend", "    \nend",
  "    \n    return s.chars.reverse.join if s.chars.any? else s.reverse\nend", " \
    \ s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n  s.reverse!\n\
    \  s\nend\n</cell>\n<cell>\nsolve('hello')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n\
    </cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n\
    </cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\n\
    solve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\nsolve('hELLO')\n\
    </cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n</cell>\n<cell>\n\
    solve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell", "  s.downcase!\n  s.reverse!\n  s.upcase!\n  s\nend\n</pre>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2016-04-20 13:46:42 +02:00\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ q\
    \ tags=ruby,ruby-on-rails |>\n<| c |>\nPlease read \"[mcve]\". Your code is not\
    \ minimal, complete, or verifiable. For example, `def solve(s)` does not define\
    \ `s`. `def solve(s)` does not call `s`. `def solve(s)` does not define `s`. `def\
    \ solve(s)` does not define `s`. `def solve(s)` does not define `s`. `def solve(s)`\
    \ does not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does\
    \ not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not\
    \ define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define\
    \ `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define `s`.\
    \ `def solve(s)` does not define `s`. `def solve(s)` does not define `s`. `def\
    \ solve(s)` does not define `s`. `def solve(s)` does not define `s`. `def solve(s)`\
    \ does not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does\
    \ not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not\
    \ define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define\
    \ `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define `s`.\
    \ `def solve(s)` does not define `s`. `def solve(s)` does not define `s`. `def\
    \ solve(s)` does not define `s`. `def solve(s)` does not define `s`. `def solve(s)`\
    \ does not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does\
    \ not define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not\
    \ define `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define\
    \ `s`. `def solve(s)` does not define `s`. `def solve(s)` does not define `s`.\
    \ `def solve(s)` does not define `s`. `", "  s.chars.each do |c|\n    if c.upcase\
    \ == c\n      s = s.gsub(c.upcase, c).gsub(c.downcase, c.upcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.downcase).gsub(c.upcase, c.downcase)\n\
    \    end\n  end\n  s.chars.reverse.join\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.0>", "  s.downcase!\n\
    \  s.split(//).each do |x|\n    if x.is_a? String\n      x.upcase!\n    else\n\
    \      x\n    end\n  end\n  s.upcase!\nend", "  s.chars.each do |c|\n    if c.upcase\
    \ == c\n      s = s.gsub(c.upcase, c).downcase\n    elsif c.downcase == c\n  \
    \    s = s.gsub(c.downcase, c).upcase\n    end\n  end\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "    \n    # write your code\
    \ in Ruby\n    \nend", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |x| x.upcase }\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[A-Z]/i, ''.downcase)\n \
    \ s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\nend\n</cell>\n\
    <cell>", "  s.chars.each do |c|\n    next if c.nil?\n    next if c.upcase == c\n\
    \    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next if\
    \ c.upcase == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase\n    next if c.upcase == c.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase\n    next if c.upcase\
    \ == c.downcase.upcase.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.",
  "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<cell>\n\
    solve(\"Hello World\")\n</cell>\n<cell>\nsolve(\"Hello World!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>", "  s.downcase!\n  s.reverse!\n  s.upcase!\n \
    \ s\nend", "    \nend", "  s.chars.each do |c|\n    if c.upcase == c\n      s\
    \ = s.gsub(c.upcase, c).downcase\n    elsif c.downcase == c\n      s = s.gsub(c.downcase,\
    \ c).upcase\n    end\n  end\n  s\nend", "  s.downcase!\n  s.gsub(/[a-z]/){|c|\
    \ c.upcase }\nend\n</cell>\n<cell>", "  s.downcase!\n  s.split(\"\").each do |i|\n\
    \    i.upcase! if i.is_a? String\n  end\n  s\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThe `downcase!` method modifies the string in place, so you don't\
    \ need to assign it to a variable. Also, `split` returns an array, so you don't\
    \ need to call `each` on it.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks.\n\
    <|/ c |>\n<| a |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.reverse!\n  s\nend\n</cell>\n<cell>\nsolve(\"Hello World\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!\")\n</cell>\n<cell>\nsolve(\"Hello World!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"\
    Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\n\
    solve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n\
    <cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n\
    </cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello World!!!\"\
    )\n</cell>\n<cell>\nsolve(\"Hello World!!!\")\n</cell>\n<cell>\nsolve(\"Hello\
    \ World!!!\")\n</cell>\n<cell>\nsolve(\"", "  s.chars.each do |c|\n    if c.upcase\
    \ == c\n      s = s.gsub(c.upcase, c).gsub(c.downcase, c.upcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.downcase).gsub(c.upcase, c.downcase)\n\
    \    end\n  end\n  s.chars.reverse.join\nend\n</code>\n<|/ a tags=ruby |>\n<|\
    \ a dscore=0 |>\n<code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '') \n  s.reverse!\nend", "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ '').downcase\nend\n</cell>\n<cell>\nsolve('hello')\n</cell>\n<cell>\nsolve('HELLO')\n\
    </cell>\n<cell>\nsolve('hELLO')\n</cell>\n<cell>\nsolve('HellO')\n</cell>\n<cell>\n\
    solve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n\
    </cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\n\
    solve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n\
    </cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\n\
    solve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n\
    </cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\n\
    solve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n\
    </cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\n\
    solve('hEllO')\n</cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n\
    </cell>\n<cell>\nsolve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>\n<cell>\n\
    solve('HEllO')\n</cell>\n<cell>\nsolve('hEllO')\n</cell>", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s\nend", "    \nend\n</cell>\n<cell>",
  "  s = s.downcase\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend", "  s = s.downcase\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</cell>\n<code language=julia-1.0>",
  "  s.downcase!\n  s.split('').each do |c|\n    if c.isalpha\n      c.upcase!\n \
    \   else\n      c = c.upcase\n    end\n  end\n  s\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2016-04-20\
    \ 13:46:42 +02:00\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer! I appreciate it. I tried your solution and it\
    \ didn't work. I don't know why, but when I tried it again it worked. Maybe I\
    \ made a mistake somewhere else in the code. Thanks again!\n<|/ c |>\n<| c |>\n\
    I tested it again and it worked. Maybe I made a mistake somewhere else in the\
    \ code. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
