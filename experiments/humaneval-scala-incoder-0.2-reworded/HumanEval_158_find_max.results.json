{
  "language": "scala",
  "name": "HumanEval_158_find_max",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsIndex = words.indexOf(max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0u3o_jdf.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u3o_jdf.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u3o_jdf.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u3o_jdf.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u3o_jdf.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote tha",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordString = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n        val maxWordStringLength = maxWordString.distinct.length\n        val maxWordStringIndex = words.indexOf(maxWordString)\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp316kqhth.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordStringIndex\u001b[0m = words.indexOf(maxWordString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordStringIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordStringIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp316kqhth.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordStringLength\u001b[0m = maxWordString.distinct.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp316kqhth.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordStringIndex\u001b[0m = words.indexOf(maxWordString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordStringIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordStringIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp316kqhth.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordStringLength\u001b[0m = maxWordString.distinct.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp316kqhth.scala:26:12 ---------",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.charAt(0))\n        val maxWordWithMaxCharsFirstCharCount = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n        if (maxWordWithMaxCharsFirstCharCount == 1) {\n            maxWordWithMaxCharsFirstChar\n        } else {\n            val maxWordWithMaxCharsFirstCharCountInOrder = maxWordWithMaxCharsFirst.sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n            if (maxWordWithMaxCharsFirstCharCountInOrder == 1) {\n                maxWordWithMaxCharsFirstChar\n            } else {\n                val maxWordWithMaxCharsFirstCharCountInOrderInOrder = maxWordWithMaxCharsFirst.sortWith(_ < _).sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n                if (maxWordWithMaxCharsFirstCharCountInOrderInOrder == 1) {\n                    maxWordWithMaxCharsFirstChar\n                } else {\n                    val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrder = maxWordWithMaxCharsFirst.sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n                    if (maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrder == 1) {\n                        maxWordWithMaxCharsFirstChar\n                    } else {\n                        val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrder = maxWordWithMaxCharsFirst.sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).count(_ == maxWordWithMaxCharsFirstChar)\n                        if (maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrder == 1) {\n                            maxWordWithMaxCharsFirstChar\n                        } else {\n                            val maxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrderInOrder = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8hukkinx.scala:57:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8hukkinx.scala:20:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstChar\u001b[0m = maxWordWithMaxCharsFirst.map(_.charAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value charAt is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hukkinx.scala:41:103 -----------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                            \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharCountInOrderInOrderInOrderInOrderInOrder\u001b[0m = maxWordWithMax\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: maxWordWithMax\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hukkinx.scala:56:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp8hukkinx.scala:43:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798520
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n        })\n        val maxKey = maxChars.maxBy(_._2)\n        val maxValue = maxChars(maxKey)\n        words.find(word => word.toSet.size == maxValue)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxyjk5v9l.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxyjk5v9l.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxyjk5v9l.scala:28:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toSet.size == maxValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798518
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength - 1\n        val maxWordWithMaxCharsString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6j2_zuqt.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6j2_zuqt.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6j2_zuqt.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsStringLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6j2_zuqt.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsStringLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6j2_zuqt.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsString",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                unique.getOrElse(c, 0) + 1\n            })\n        })\n        unique.foreach(c => {\n            val count = unique.get(c)\n            if (count > maxWord.getOrElse(c, 0))\n                maxWord.put(c, count)\n        })\n        maxWord.keys.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgoopxso.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgoopxso.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798515
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfebfk1c_.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfebfk1c_.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798516
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).head\n        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last.last.last.last.last.last.last.last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5987elh9.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5987elh9.scala:21:169 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m) == maxCount).sortBy(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m)).last.last.last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value last is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5987elh9.scala:22:181 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m) == maxCount).sortBy(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m)).last.last.last.last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value last is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5987elh9.scala:23:193 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m) == maxCount).sortBy(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m)).last.last.last.last.last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798521
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length > _.length)\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsWithFirstCharInLexicographicalOrder = maxWordWithMaxCharsWithFirstChar.sortWith(_.compareTo(_) < 0)\n        maxWordWithMaxCharsWithFirstCharInLexicographicalOrder.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp405wjxfu.scala:21:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        maxWordWithMaxCharsWithFirstCharInLexicographicalOrder.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Char\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798518
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(x => x.toCharArray).groupBy(x => x).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChars = counts.filter(x => x._2 == maxCount).keys.toList\n        val maxCharsCount = counts.filter(x => x._2 == maxCount).values.toList\n        val maxCharsIndex = maxCharsCount.indexOf(maxCharsCount.max)\n        val maxCharsIndex = maxCharsIndex.map(x => maxCharsIndex.indexOf(x)).max\n        val maxChar = maxChars(maxCharsIndex)\n        val maxCharCount = maxCharsCount(maxCharsIndex)\n        val maxCharIndex = maxCharsIndex.indexOf(maxChar)\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        val maxCharIndex = maxCharIndex.map(x => maxCharIndex.indexOf(x)).max\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpguh0b_ow.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsIndex\u001b[0m = maxCharsIndex.map(\u001b[36mx\u001b[0m => maxCharsIndex.indexOf(x)).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpguh0b_ow.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharIndex\u001b[0m = maxCharIndex.map(\u001b[36mx\u001b[0m => maxCharIndex.indexOf(x)).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpguh0b_ow.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharIndex\u001b[0m = maxCharIndex.map(\u001b[36mx\u001b[0m => maxCharIndex.indexOf(x)).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpguh0b_ow.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharIndex\u001b[0m = maxCharIndex.map(\u001b[36mx\u001b[0m => maxCharIndex.indexOf(x)).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659798521
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word => {\n            word.foreach(c => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount = unique.count(_ == c)\n                maxWord = c\n            }\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqsgievt9.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798515
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size == maxCount).sortBy(x => x.toSet).head\n        unique.contains(maxWord) ? maxWord : findMax(words.filter(x => !x.toSet.contains(maxWord)))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpavcmf9j8.scala:18:52 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxWord) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(x => !x.toSet.contains(maxWord)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '(' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpavcmf9j8.scala:17:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mx\u001b[0m => x.toSet.size == maxCount).sortBy(\u001b[36mx\u001b[0m => x.toSet).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Set[B]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: Char\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mSet[B]\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Set[B]]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Set[B]].\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpavcmf9j8.scala:18:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxWord) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(x => !x.toSet.contains(maxWord)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value ? is not a member of Boolean\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798521
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.head\n        val maxWordWithMaxChars = maxWords.filter(_.length == maxChars).head\n        val maxWordWithMaxCharsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmplr9ppckn.scala:20:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWords\u001b[0m = maxWords.filter(_.length == maxChars && words.contains(_)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmplr9ppckn.scala:21:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordsAndMaxWords\u001b[0m = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmplr9ppckn.scala:22:83 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords\u001b[0m = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmplr9ppckn.scala:23:94 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\u001b[0m = maxWords.filter(_.length == maxChars && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_) && words.contains(_)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += (c, 1)\n            })\n        })\n        uniqueChars.toList.sortWith((a, b) => a._2 > b._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfc3nzkpd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfc3nzkpd.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798515
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val maxUnique = unique.max\n        val maxIndex = unique.indexOfMax\n        words(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgk10tby6.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxIndex\u001b[0m = unique.indexOfMax\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value indexOfMax is not a member of Set[Char]\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798518
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChar = counts.values.max\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n        if (maxCount == maxChar) {\n            words.filter(w => w.toCharArray.forall(c => c == maxChar))\n        } else {\n            words.filter(w => w.toCharArray.forall(c => c == maxChar)).sortWith(_.toCharArray.forall(c => c == maxChar))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpli_hi7xj.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (maxCount == maxChar) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types (Char, Int) and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli_hi7xj.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            words.filter(\u001b[36mw\u001b[0m => w.toCharArray.forall(\u001b[36mc\u001b[0m => c == maxChar))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpli_hi7xj.scala:23:80 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            words.filter(\u001b[36mw\u001b[0m => w.toCharArray.forall(\u001b[36mc\u001b[0m => c == maxChar)).sortWith(_.toCharArray.forall(\u001b[36mc\u001b[0m => c == maxChar))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChar = counts.mapValues(_.max).max\n        val maxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxChar)\n        val maxWordWithMaxCount = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w < maxWord)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar && w < maxWord)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar && w < maxWord && w < maxWordWithMaxCount)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar && w < maxWord && w < maxWordWithMaxCount && w < maxWordWithMaxCountWithMaxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar && w < maxWord && w < maxWordWithMaxCount && w < maxWordWithMaxCountWithMaxChar && w < maxWordWithMaxCountWithMaxCharWithMaxWord)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.map(_.toInt).max == maxCount && w.toCharArray.map(_.toInt).max == maxChar && w < maxWord && w < maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp33t3_0xj.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp33t3_0xj.scala:18:49 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = counts.mapValues(_.max).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: (Char, Int => Int)\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.Tuple2[\u001b[35mT1\u001b[0m, \u001b[35mT2\u001b[0m](scala.math.Ordering.Char, \n\u001b[31m   |\u001b[0m      scala.math.Ordering.ordered[\u001b[35mT2\u001b[0m](\n\u001b[31m   |\u001b[0m        /* missing */summon[scala.math.Ordering.AsComparable[T2]]\n\u001b[31m   |\u001b[0m      )\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[T2].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp33t3_0xj.scala:20:52 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCount\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.map(_.toInt).max == maxCount && w < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Int and (Char, Int) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33t3_0xj.scala:20:102 -------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCount\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.map(_.toInt).max == maxCount && w < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1659798524
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val unique = chars.distinct\n        val maxCount = unique.count(_ == chars.max)\n        val maxChar = unique.max\n        val maxCharIndex = chars.indexOf(maxChar)\n        val maxCharIndex = if (maxCharIndex == -1) words.length - 1 else maxCharIndex\n        val maxWord = words(maxCharIndex)\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == -1) words.length - 1 else maxWordIndex\n        if (maxCount > words.length) maxWord\n        else words(maxWordIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsqwr50ze.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharIndex\u001b[0m = \u001b[33mif\u001b[0m (maxCharIndex == -\u001b[31m1\u001b[0m) words.length - \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m maxCharIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsqwr50ze.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == -\u001b[31m1\u001b[0m) words.length - \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798516
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.foldLeft(Map[String, Int]())((map, word) => {\n            val count = map.getOrElse(word, 0) + 1\n            map += (word -> count)\n            if (count > map.getOrElse(word, 0))\n                map\n            else\n                map + (word -> 1)\n        })\n        val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n        val maxWord = words.filter(w => w == maxKey).head\n        if (maxValue == maxCount.values.max)\n            maxWord\n        else\n            words.filter(w => w == maxKey).sortBy(w => w.length).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg9qkhcw7.scala:33)\n\tat Problem.main(tmpg9qkhcw7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798521
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n        if (maxWordCount == 1) maxWord\n        else findMax(words.filter(word => word.distinct.length == maxWordCount))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\tat Problem$.findMax(tmpmy2bjo7a.scala:16)\n\tat Problem$.main(tmpmy2bjo7a.scala:24)\n\tat Problem.main(tmpmy2bjo7a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798521
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount = words.map(x => x.distinct).flatten.toSet.max\n        val maxWord = words.filter(x => unique.contains(x)).sortBy(x => x.length).last\n        val maxWordLength = maxWord.length\n        val maxWordLength = maxWordLength + maxWord.takeWhile(x => unique.contains(x)).last.length\n        if (maxWordLength > maxCount) {\n            maxWord\n        } else {\n            words.filter(x => unique.contains(x)).sortBy(x => x.length).last\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo4ssrbud.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordLength\u001b[0m = maxWordLength + maxWord.takeWhile(\u001b[36mx\u001b[0m => unique.contains(x)).last.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4ssrbud.scala:17:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).sortBy(\u001b[36mx\u001b[0m => x.length).last\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (x : String)\n\u001b[31m   |\u001b[0m                                                  Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4ssrbud.scala:23:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).sortBy(\u001b[36mx\u001b[0m => x.length).last\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    (x : String)\n\u001b[31m   |\u001b[0m                                              Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798520
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpykoit12c.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of ",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirst = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrder = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverse = words.filter(_.length == maxUniqueChars).reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrder = words.filter(_.length == maxUniqueChars).reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrder = words.filter(_.length == maxUniqueChars).reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverse = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrder = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrder = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrderInReverse = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse.reverse\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInReverseInLexicographicalOrderInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrderInReverseInLexicographicalOrder = words.filter(_.length == maxUniqueChars).reverse.reverse.reverse.reverse.reverse.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ppscc4f.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798527
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word => {\n            val count = unique.count(_ == word)\n            if (count > maxCount) {\n                maxCount = count\n                maxWord = word\n            }\n            unique += word\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo9hpg1xg.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpo9hpg1xg.scala:21:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                maxCount = count\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpo9hpg1xg.scala:22:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798523
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars = maxChars + (c -> count)\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => word.toSet.size == uniqueChars.size)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3atv8lnn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3atv8lnn.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atv8lnn.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toSet.size == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798528
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c)) {\n                    uniqueChars -= c\n                } else {\n                    if (maxChars.contains(c)) {\n                        maxChars -= c\n                    } else {\n                        if (maxWord.contains(word)) {\n                            maxWord -= word\n                        } else {\n                            maxWord += word\n                        }\n                    }\n                }\n            })\n        })\n        if (maxWord.size == 1) {\n            maxWord.head\n        } else {\n            val maxWords = maxWord.toList\n            val maxWordIndex = maxWords.indexOf(maxWords.max)\n            maxWords(maxWordIndex)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaa5kv7pc.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaa5kv7pc.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaa5kv7pc.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798525
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char, String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) = uniqueChars(c) + 1\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars(c)\n            if (count > maxChars(c)) {\n                maxChars(c) = count\n                maxWord(c) = \"\"\n            }\n        })\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp54woicbt.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp54woicbt.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp54woicbt.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798525
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordWithCountWithMax = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last\n        val maxWordWithCountWithMaxWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp82lz255t.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp82lz255t.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMaxWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last.sortBy(_.length).last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithCountWithMaxWithMaxWithMaxWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithCountWithMaxWithMaxWithMaxWithMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp82lz255t.scala:20:111 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp82lz255t.scala:20:118 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).sortBy(_.length).last.sortBy(_.length).last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject",
      "stdout": "",
      "timestamp": 1659798532
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars).min\n        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars).max\n        val maxWordWithMinUniqueChars = words.filter(_.length == uniqueChars.min).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n        val maxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0b732s0n.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp0b732s0n.scala:20:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxUniqueCharsAndMinUniqueChars\u001b[0m = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp0b732s0n.scala:21:87 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueChars\u001b[0m = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp0b732s0n.scala:22:104 --------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxUniqueCharsAndMinUniqueCharsAndMaxUniqueCharsAndMaxUniqueChars\u001b[0m = words.filter(_.length == maxUniqueChars && _.length == uniqueChars.min && _.length == uniqueChars.max && _.length == uniqueChars.max).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp0b732s0n.scala:23:12",
      "stdout": "",
      "timestamp": 1659798529
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += (char -> (uniqueChars(char) + 1))\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqw8ps9sq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798526
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWords = words.filter(_.length == maxChars).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n        val maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzqdsu4_2.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqdsu4_2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = maxWordIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqdsu4_2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWords\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWords is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWords\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqdsu4_2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = maxWords.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqdsu4_2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = words.indexOf(maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /t",
      "stdout": "",
      "timestamp": 1659798529
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += (char -> (uniqueChars(char) + 1))\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqw8ps9sq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798526
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => word.toString.contains(maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ug67pyy.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ug67pyy.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ug67pyy.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toString.contains(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798529
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.distinct.size == maxChars)\n        val maxWordString = maxWord.mkString(\"\")\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n        val maxWordLength = maxWordString.length\n        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString = words.filter(w => w.toCharArray.distinct.size == maxChars)(maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkal74q3v.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkal74q3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkal74q3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordLength\u001b[0m = maxWordString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkal74q3v.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = words.indexOf(maxWordString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkal74q3v.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.distinct.size == maxChars)(maxWordIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31",
      "stdout": "",
      "timestamp": 1659798531
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n        words.find(word => word.count(_ == maxCharsSortedFirst) == uniqueChars.count(_ == maxCharsSortedFirst))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjceqif7.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjceqif7.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqjceqif7.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.count(_ == maxCharsSortedFirst) == uniqueChars.count(_ == maxCharsSortedFirst))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798530
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxWord = maxWord.filterNot(_ == word)\n            })\n        })\n        val maxCharsCount = maxChars.size\n        val maxWordCount = maxWord.size\n        if (maxCharsCount > maxWordCount) {\n            maxWord.head\n        } else {\n            maxChars.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkusn0x1z.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkusn0x1z.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkusn0x1z.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpkusn0x1z.scala:30:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                maxWord = maxWord.filterNot(_ == word)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798527
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count, word) => count + word.distinct().length)\n        val maxWord = words.filter(word => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpwtxq_vmi.scala:15:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = words.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36mcount\u001b[0m, \u001b[36mword\u001b[0m) => count + word.distinct().length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwtxq_vmi.scala:16:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.distinct().length == maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798527
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.HashSet[String]()\n        val maxCount = 0\n        words.foreach(word => {\n            val count = unique.count(_ == word)\n            if (count > maxCount) {\n                maxCount = count\n            }\n            unique += word\n        })\n        if (maxCount == 0) {\n            \"\"\n        } else {\n            words.sortWith((word1, word2) => unique.count(_ == word1) < unique.count(_ == word2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx1bcxa0d.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx1bcxa0d.scala:20:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = count\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1bcxa0d.scala:27:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            words.sortWith((\u001b[36mword1\u001b[0m, \u001b[36mword2\u001b[0m) => unique.count(_ == word1) < unique.count(_ == word2))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798530
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b) > 0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.charAt(0)\n        val maxWordWithMaxCharsFirstCharCount = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n        if (maxWordWithMaxCharsFirstCharCount == 1) {\n            maxWordWithMaxCharsFirstChar\n        } else {\n            maxWordWithMaxCharsFirstChar\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2m6g9c5v.scala:23:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            maxWordWithMaxCharsFirstChar\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (maxWordWithMaxCharsFirstChar : Char)\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2m6g9c5v.scala:25:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            maxWordWithMaxCharsFirstChar\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (maxWordWithMaxCharsFirstChar : Char)\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798531
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValue.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(1, maxCharsSortedFirstKeyValueString.length)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.substring(0, maxCharsSortedFirstKeyValueString.length - 1)\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpule_lgon.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirstKeyValueString.substring(\u001b[31m1\u001b[0m, maxCharsSortedFirstKeyValueString.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpule_lgon.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirstKeyValueString.substring(\u001b[31m0\u001b[0m, maxCharsSortedFirstKeyValueString.length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpule_lgon.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirstKeyValueString.substring(\u001b[31m0\u001b[0m, maxCharsSortedFirstKeyValueString.length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same grou",
      "stdout": "",
      "timestamp": 1659798531
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9cu1vazx.scala:20:75 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstChars\u001b[0m = maxWordWithMaxCharsFirst.map(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9cu1vazx.scala:24:60 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\u001b[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9cu1vazx.scala:25:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\u001b[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9cu1vazx.scala:27:73 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax\u001b[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cycl",
      "stdout": "",
      "timestamp": 1659798532
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).min\n        val maxWordWithMaxChars = words.filter(_.length == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirst.charAt(0)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst.charAt(0)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.charAt(0)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversedFirst = maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnz10dc2c.scala:23:130 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed\u001b[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value reverse is not a member of Char\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz10dc2c.scala:26:93 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed\u001b[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz10dc2c.scala:27:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst\u001b[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz10dc2c.scala:28:102 --------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxC",
      "stdout": "",
      "timestamp": 1659798532
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_) < 0).head && words.toList.sortWith(_.compareTo(_) < 0).head == words.toList.sortWith(_.compareTo(_\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprn_8cdo8.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprn_8cdo8.scala:18:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprn_8cdo8.scala:19:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirst\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head == words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprn_8cdo8.scala:20:64 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head == words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head && words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head == words.toList.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m).head)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798532
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordChars = maxWord.distinct\n        if (maxWordIndex == 0) maxWord\n        else words.take(maxWordIndex).mkString(\"\") + maxWordChars.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3erbj44w.scala:24)\n\tat Problem.main(tmp3erbj44w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798534
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.toCharArray.forall(uniqueChars.contains))\n        val maxWord = maxWords.min\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.map(_.toCharArray).flatten.distinct\n        val maxWordCharCount = maxWordChars.max\n        val maxWordCharCountLength = maxWordCharCount.length\n        val maxWordCharCountUnique = maxWordCharCount.distinct\n        val maxWordCharCountUniqueLength = maxWordCharCountUnique.length\n        val maxWordCharCountUniqueUnique = maxWordCharCountUnique.distinct\n        val maxWordCharCountUniqueUniqueLength = maxWordCharCountUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUnique = maxWordCharCountUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueLength = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n        val maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = maxWordCharCountUniqueUniqueUniqueUniqueUnique\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpam_ules0.scala:21:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordChars\u001b[0m = maxWord.map(_.toCharArray).flatten.distinct\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpam_ules0.scala:30:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountUniqueUniqueUniqueUnique\u001b[0m = maxWordCharCountUniqueUniqueUniqueUnique.distinct\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m     Recursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountUniqueUniqueUniqueUnique\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpam_ules0.scala:32:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountUniqueUniqueUniqueUniqueUnique\u001b[0m = maxWordCharCountUniqueUniqueUniqueUniqueUnique.distinct\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountUniqueUniqueUniqueUniqueUnique\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpam_ules0.scala:38:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique\u001b[0m = maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: maxWordCharCountUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-ex",
      "stdout": "",
      "timestamp": 1659798534
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char => {\n            maxChars += char -> uniqueChars.count(_ == char)\n        })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppad_6ca5.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppad_6ca5.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798532
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.keys.max\n        val maxValue = maxChars(maxKey)\n        words.find(word => word.toString.count(_ == maxKey) == maxValue)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph21h56xe.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph21h56xe.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph21h56xe.scala:28:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toString.count(_ == maxKey) == maxValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798536
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars += c -> 0\n            })\n        })\n        uniqueChars.maxBy(maxChars)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscc3m1gn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscc3m1gn.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798533
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => b._2 > a._2)\n        val maxCharsSortedKey = maxCharsSorted.head._1\n        val maxCharsSortedValue = maxCharsSorted.head._2\n        words.find(word => word.toString.contains(maxCharsSortedKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppo6tskx_.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppo6tskx_.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppo6tskx_.scala:29:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toString.contains(maxCharsSortedKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798537
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst = words.filter(w => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstInLex = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstInLexFirst = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLex = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirst = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLex = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLex = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirst = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirstInLex = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirst)\n        val maxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirstInLexFirst = words.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4d8pd168.scala:29:102 --------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLexFirstInLexFirstInLexFirstInLexFirstInLexFirst\u001b[0m = words.filter(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d8pd168.scala:18:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d8pd168.scala:19:85 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirst\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w > maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d8pd168.scala:20:90 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLex\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ",
      "stdout": "",
      "timestamp": 1659798541
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp10zlkcin.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp10zlkcin.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp10zlkcin.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKeyValueString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKeyValueString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp10zlkcin.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKeyValueString\u001b[0m = maxCharsSortedFirst._1 -> maxCharsSortedFir",
      "stdout": "",
      "timestamp": 1659798537
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWord = maxWordWithMaxCharsSortedByFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars = maxWordWithMaxCharsSortedByFirstCharReversedFirstWord.filter(_.length == maxChars)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWord = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWord.filter(_.length == maxChars)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkrvrg46d.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkrvrg46d.scala:18:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkrvrg46d.scala:22:143 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars\u001b[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstWord.filter(_.length == maxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkrvrg46d.scala:23:172 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar\u001b[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxChars.sortBy(_.charAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value charAt is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkrvrg46d.scala:23:182 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstWordWithMaxCharsSortedByFirstChar\u001b[0m = maxWordWithMaxCharsSort",
      "stdout": "",
      "timestamp": 1659798540
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.toSet).reduce(_|)\n        val max = unique.max\n        val index = words.indexWhere(x => x.toSet == max)\n        words(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpwrh2wed9.scala:15:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = words.map(\u001b[36mx\u001b[0m => x.toSet).reduce(_|)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwrh2wed9.scala:17:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = words.indexWhere(\u001b[36mx\u001b[0m => x.toSet == max)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     Values of types Set[Char] and Char cannot be compared with == or !=\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798539
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp70hdewnj.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798537
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += (c -> 1)\n            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar)).get\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcvuzpstm.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798537
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChars = counts.filter(x => x._2 == maxCount).keys\n        val maxCharsCount = maxChars.map(_.toInt)\n        val maxCharsIndex = maxCharsCount.indexOf(maxCharsCount.max)\n        val maxCharsString = maxChars(maxCharsIndex)\n        val maxCharsIndex = words.indexOf(maxCharsString)\n        words(maxCharsIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd9l72sh3.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsIndex\u001b[0m = words.indexOf(maxCharsString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd9l72sh3.scala:18:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = counts.filter(\u001b[36mx\u001b[0m => x._2 == maxCount).keys\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Int and (Char, Int) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd9l72sh3.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsIndex\u001b[0m = maxCharsCount.indexOf(maxCharsCount.max)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value indexOf is not a member of Iterable[Int]\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpd9l72sh3.scala:21:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsString\u001b[0m = maxChars(maxCharsIndex)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mvalue\u001b[0m \u001b[35mmaxChars\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798541
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashMap[Int, String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            val count = maxWord.getOrElse(0, 0) + uniqueChars.count(_ == c)\n            maxWord.update(0, count)\n        })\n        maxWord.maxBy(_._1)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp66dv53et.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp66dv53et.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashMap[\u001b[35mInt\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798537
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(w => w.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w < maxWord)\n        if (maxWordWithMaxChars.isEmpty) maxWord\n        else maxWordWithMaxChars.min\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp533wsyeu.scala:31)\n\tat Problem.main(tmp533wsyeu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1 // count of unique chars\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => word.toString.contains(maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjn2hnk2i.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjn2hnk2i.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjn2hnk2i.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toString.contains(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798541
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1 \n            maxChars += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value < _.value)\n        val maxCharsSortedKey = maxCharsSorted.last._1\n        val maxCharsSortedValue = maxCharsSorted.last._2\n        words.find(word => word.contains(maxCharsSortedKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa20hb2au.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa20hb2au.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa20hb2au.scala:29:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.contains(maxCharsSortedKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798542
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLex = maxWordWithMaxChars.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLex = maxWordWithMaxCharsFirstInLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLex = maxWordWithMaxCharsFirstInLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex.sortWith((a, b) => a.compareTo(b) < 0).head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprus3h6ix.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLexLexLexLexLex\u001b[0m = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a.compareTo(b) < \u001b[31m0\u001b[0m).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsFirstInLexLexLexLexLex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstInLexLexLexLexLex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprus3h6ix.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLexLexLexLexLex\u001b[0m = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith((\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a.compareTo(b) < \u001b[31m0\u001b[0m).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsFirstInLexLexLexLexLex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstInLexLexLexLexLex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprus3h6ix.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLex\u001b[0m = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith((\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a.compareTo(b) < \u001b[31m0\u001b[0m).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsFirstInLexLexLexLexLexLex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstInLexLexLexLexLexLe",
      "stdout": "",
      "timestamp": 1659798545
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) += 1\n            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2ibwtwz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2ibwtwz.scala:22:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.count(_ == maxChar) == uniqueChars(maxChar))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.map(_.length).max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n        val maxWordWithUniqueChars = words.filter(_.length == maxWordLength).map(_.toSet).reduce(_|_)\n        val maxWordWithUniqueCharsLength = maxWordWithUniqueChars.length\n        val maxWordWithUniqueCharsFirst = words.filter(_.length == maxWordWithUniqueCharsLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstLength = maxWordWithUniqueCharsFirst.length\n        val maxWordWithUniqueCharsFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n        val maxWordWithUniqueCharsFirstFirstFirstFirst\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp00k79dnb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp00k79dnb.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst\u001b[0m = words.filter(_.length == maxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstLength).sortBy(_.toSet).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithUniqueCharsFirstFirstFirstFirstFirstFirstFirstFirst\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp00k79dnb.scala:19:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithUniqueCharsLength\u001b[0m = maxWordWithUniqueChars.length\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value length is not a member of Set[Char]\n\u001b[31m\u001b[31m-- Error: /tmp/tmp00k79dnb.scala:20:112 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithUniqueCharsFirst\u001b[0m = words.filter(_.length == maxWordWithUniqueCharsLength).sortBy(_.toSet).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Set[B]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: Char\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mSet[B]\u001b[0m](\n\u001b[31m   ",
      "stdout": "",
      "timestamp": 1659798547
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount = counts.max\n        val maxChars = counts.filter(c => c._2 == maxCount).keys.toList\n        val maxChar = maxChars.head\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n        val maxWordString = maxWord.mkString(\"\")\n        val maxWordLength = maxWordString.length\n        if (maxWordLength > maxChars.length)\n            maxWordString\n        else\n            words.filter(w => w.toCharArray.forall(c => c == maxChar)).sortWith(_.toString.compareTo(maxWordString)).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9suwdui7.scala:18:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = counts.filter(\u001b[36mc\u001b[0m => c._2 == maxCount).keys.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Int and (Char, Int) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp9suwdui7.scala:26:80 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            words.filter(\u001b[36mw\u001b[0m => w.toCharArray.forall(\u001b[36mc\u001b[0m => c == maxChar)).sortWith(_.toString.compareTo(maxWordString)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)\n        words.find(word => word.count(_ == maxChar)).getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8om_177e.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8om_177e.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8om_177e.scala:27:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.count(_ == maxChar)).getOrElse(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Int\n\u001b[31m   |\u001b[0m                           Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count, word) => count + word.count(\"a\"))\n        val maxWord = words.filter(word => word.count(\"a\") == maxCount).minBy(_.length)\n        words.filter(word => word.count(\"a\") == maxCount).minBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz4jp4d2v.scala:15:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = words.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36mcount\u001b[0m, \u001b[36mword\u001b[0m) => count + word.count(\u001b[31m\"a\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (\u001b[32m\"a\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                               Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz4jp4d2v.scala:16:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(\u001b[31m\"a\"\u001b[0m) == maxCount).minBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (\u001b[32m\"a\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                               Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz4jp4d2v.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.filter(\u001b[36mword\u001b[0m => word.count(\u001b[31m\"a\"\u001b[0m) == maxCount).minBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (\u001b[32m\"a\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                        Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798544
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).head\n        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last.sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last.sortBy(word => word.count).\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphprc5sx8.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphprc5sx8.scala:18:112 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m) == maxCount).sortBy(\u001b[36mword\u001b[0m => word.count).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for ((Char => Boolean) => Int)..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35m((Char => Boolean) => Int)\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[(Char => Boolean) => Int]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[(Char => Boolean) => Int].\n\u001b[31m\u001b[31m-- Error: /tmp/tmphprc5sx8.scala:19:124 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m) == maxCount).sortBy(\u001b[36mword\u001b[0m => word.count).last\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for ((Char => Boolean) => Int)..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35m((Char => Boolean) => Int)\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[(Char => Boolean) => Int]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[(Char => Boolean) => Int].\n\u001b[31m\u001b[31m-- Error: /tmp/tmphprc5sx8.scala:20:136 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33m",
      "stdout": "",
      "timestamp": 1659798547
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars = maxChars + (c -> count)\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => word.toSet.size == word.toSet.size).map(word => word.toSet.contains(maxKey)).getOrElse(false)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdoymy1c0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdoymy1c0.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoymy1c0.scala:27:113 -------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toSet.size == word.toSet.size).map(\u001b[36mword\u001b[0m => word.toSet.contains(maxKey)).getOrElse(\u001b[31mfalse\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Boolean\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798546
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => a._2 > b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n        val maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex = words.indexOf(maxCharsSortedLast)\n        if (maxCharsSortedFirstIndex < maxCharsSortedLastIndex) {\n            maxCharsSortedFirst\n        } else {\n            maxCharsSortedLast\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl6kk8rpx.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl6kk8rpx.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.StringBuilder()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            maxWord.append(c)\n        })\n        maxWord.toString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4o8f3z2c.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4o8f3z2c.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.StringBuilder()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798543
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprze3xvel.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprze3xvel.scala:19:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprze3xvel.scala:21:64 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprze3xvel.scala:23:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars && _.toSet.head == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprze3xvel.scala:25:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.",
      "stdout": "",
      "timestamp": 1659798547
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a, b) => b._2 - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpanl1py3d.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpanl1py3d.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798545
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                chars += (c -> (chars(c) += 1))\n            })\n        })\n        val maxKey = chars.maxBy(_._2)._1\n        words.find(word => word.toSet.size == word.toSet.size).sortBy(word => word.toSet.indexOf(maxKey)).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxaw55xs3.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mchars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxaw55xs3.scala:22:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toSet.size == word.toSet.size).sortBy(\u001b[36mword\u001b[0m => word.toSet.indexOf(maxKey)).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value sortBy is not a member of Option[String]\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798549
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.toSet).reduce(_|)\n        val max = unique.max\n        val index = unique.indexOf(max)\n        words(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpy5sqcbf9.scala:15:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = words.map(\u001b[36mx\u001b[0m => x.toSet).reduce(_|)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy5sqcbf9.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = unique.indexOf(max)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value indexOf is not a member of Set[Char]\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798549
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n                }\n            })\n        })\n        val maxCount = uniqueChars.values.max\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpybwt5jnz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798546
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.map(_.charAt(0))\n        val maxWordWithMaxCharsWithFirstCharIndex = words.indexOf(maxWordWithMaxCharsWithFirstChar)\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.compareTo(0)\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n        val maxWordWithMaxCharsWithFirstCharIndex = maxWordWithMaxCharsWithFirstCharIndex.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3hj58rtf.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsWithFirstCharIndex\u001b[0m = maxWordWithMaxCharsWithFirstCharIndex.compareTo(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsWithFirstCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsWithFirstCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3hj58rtf.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsWithFirstChar\u001b[0m = maxWordWithMaxCharsWithFirstChar.mkString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsWithFirstChar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsWithFirstChar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3hj58rtf.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsWithFirstCharIndex\u001b[0m = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsWithFirstCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsWithFirstCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3hj58rtf.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsWithFirstCharIndex\u001b[0m = maxWordWithMaxCharsWithFirstCharIndex.mkString\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1659798551
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n        val maxWordWithMaxChars = words.filter(_.length == maxWordLength).sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxChars.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordLength)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.substring(0, maxWordWithMaxCharsLength.length - 1)\n        val maxWordWithMaxChar\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzw0x98i5.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzw0x98i5.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.substring(\u001b[31m0\u001b[0m, maxWordLength)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzw0x98i5.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.substring(\u001b[31m0\u001b[0m, maxWordWithMaxCharsLength.length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzw0x98i5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.substring(\u001b[31m0\u001b[0m, maxWordWithMaxCharsLength.length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- ",
      "stdout": "",
      "timestamp": 1659798551
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n        unique.contains(maxCount) ? maxWord : findMax(words.filter(_.length != maxCount))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4w24jpbf.scala:18:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxCount) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(_.length != maxCount))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '(' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4w24jpbf.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxCount) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(_.length != maxCount))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value ? is not a member of Boolean\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798551
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.toCharArray\n        val maxWordUniqueChars = uniqueChars.filter(_.toCharArray.contains(maxWordChars)).max\n        val maxWordMaxChars = maxWordUniqueChars.toCharArray\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxChars)\n        val maxWordMaxCharsLength = maxWordMaxChars.length\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex = words.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy7dql7iw.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy7dql7iw.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordMaxCharsIndex\u001b[0m = words.indexOf(maxWordMaxCharsIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy7dql7iw.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordMaxCharsLength\u001b[0m = maxWordMaxCharsIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy7dql7iw.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordMaxCharsIndex\u001b[0m = words.indexOf(maxWordMaxCharsIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy7dql7iw.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordMaxCharsLength\u001b[0m = maxWordMaxCharsIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordMaxCharsLength is already defined as \u001b[33mvalue\u001b",
      "stdout": "",
      "timestamp": 1659798553
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.Array[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            val index = uniqueChars.indexOf(c)\n            if (index > 0) {\n                val wordWithMaxChar = uniqueChars.take(index).mkString(\"\")\n                if (maxWord.contains(wordWithMaxChar)) {\n                    maxWord(maxWord.indexOf(wordWithMaxChar)) = wordWithMaxChar\n                } else {\n                    maxWord(maxWord.length) = wordWithMaxChar\n                }\n            }\n        })\n        maxWord.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ob5cr5t.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ob5cr5t.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.Array[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798549
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten\n        val count = unique.map(x => x.length).max\n        unique.find(x => x.length == count).getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmzm0y9y.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = unique.map(\u001b[36mx\u001b[0m => x.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmplmzm0y9y.scala:16:49 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = unique.map(\u001b[36mx\u001b[0m => x.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mDeprecatedDoubleOrdering\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmzm0y9y.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        unique.find(\u001b[36mx\u001b[0m => x.length == count).getOrElse(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Char\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798554
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c)).getOrElse(0)\n            })\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => b._2 > a._2)\n        val maxCharsSortedWithMax = maxCharsSorted.takeWhile(_._2 > 1).map(_._1)\n        val maxCharsSortedWithMaxLength = maxCharsSortedWithMax.length\n        val maxCharsSortedWithMaxLength = maxCharsSortedWithMaxLength.max(uniqueChars.length)\n        val maxCharsSortedWithMaxLength = maxCharsSortedWithMaxLength.getOrElse(0)\n        val maxCharsSortedWithMax = maxCharsSortedWithMax.take(maxCharsSortedWithMaxLength)\n        val maxCharsSortedWithMax = maxCharsSortedWithMax.sortWith((a, b) => a.compareTo(b))\n        val maxCharsSortedWithMax = maxCharsSortedWithMax.head\n        maxCharsSortedWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp46z_oz4u.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedWithMaxLength\u001b[0m = maxCharsSortedWithMaxLength.max(uniqueChars.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedWithMaxLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedWithMaxLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp46z_oz4u.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedWithMaxLength\u001b[0m = maxCharsSortedWithMaxLength.getOrElse(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedWithMaxLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedWithMaxLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp46z_oz4u.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedWithMax\u001b[0m = maxCharsSortedWithMax.take(maxCharsSortedWithMaxLength)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedWithMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp46z_oz4u.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedWithMax\u001b[0m = maxCharsSortedWithMax.sortWith((\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a.compareTo(b))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[",
      "stdout": "",
      "timestamp": 1659798551
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n        val maxChars = chars.max\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 1)\n        if (maxWord.isEmpty) \"\"\n        else maxWord.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgr0z28rf.scala:22)\n\tat Problem.main(tmpgr0z28rf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798557
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirstWithMaxCharsFirst && _ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirstWithMaxCharsFirst && _ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkyz6dez3.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkyz6dez3.scala:19:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkyz6dez3.scala:21:64 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirst)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkyz6dez3.scala:23:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _ == maxWordWithMaxCharsFirstWithMaxChars && _ == maxWordWithMaxCharsFirst)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkyz6dez3.scala:25:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsF",
      "stdout": "",
      "timestamp": 1659798554
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordInLex = maxWords.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLex = maxWordInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLex = maxWordInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLex = maxWordInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex = maxWordInLexInLexInLexInLexInLexInLexInLexInLexInLex.sortWith((x, y) => x.compareTo(y))\n        val maxWordInLexInLexInLexInLexInLexInLexIn\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ugoxkkz.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ugoxkkz.scala:19:66 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordInLex\u001b[0m = maxWords.sortWith((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x.compareTo(y))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Int\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ugoxkkz.scala:20:75 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordInLexInLex\u001b[0m = maxWordInLex.sortWith((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x.compareTo(y))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Int\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ugoxkkz.scala:21:85 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordInLexInLexInLex\u001b[0m = maxWordInLexInLex.sortWith((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x.compareTo(y))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Int\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ugoxkkz.scala:22:95 --------------------\u001b[0m\u001b[0m\n\u001b",
      "stdout": "",
      "timestamp": 1659798556
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.distinct.length == maxUniqueChars)\n        val maxWordString = maxWord.mkString(\"\")\n        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n        val maxWordString = maxWordString.mkString(\"\")\n        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount = maxWordCharsCount.length\n        val maxWordCharsIndex = maxWordCharsCount.zipWithIndex.maxBy(_._1)._1\n        val maxWordCharsIndex = maxWordCharsIndex + 1\n        val maxWordString = maxWord.map(w => w.charAt(maxWordCharsIndex))\n        val maxWordString = maxWordString.mkString(\"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuade7hu.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsCount\u001b[0m = maxWordCharsCount.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuade7hu.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuade7hu.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWord.map(\u001b[36mw\u001b[0m => w.charAt(maxWordCharsIndex))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuade7hu.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuade7hu.scala:27:12 ---------------------------\u001b[0m\u001b[0",
      "stdout": "",
      "timestamp": 1659798556
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrder = maxWordWithMaxUniqueChars.sortBy(_.toLowerCase compareTo _.toLowerCase)\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirst = maxWordWithMaxUniqueCharsSortedByLexicographicalOrder.head\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLast = maxWordWithMaxUniqueCharsSortedByLexicographicalOrder.last\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar = maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirst.charAt(0)\n        val maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar = maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLast.charAt(0)\n        if (maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar > maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar) {\n            maxWordWithMaxUniqueCharsSortedByLexicographicalOrderFirstChar\n        } else {\n            maxWordWithMaxUniqueCharsSortedByLexicographicalOrderLastChar\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpw3sidgn6.scala:19:101 --------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxUniqueCharsSortedByLexicographicalOrder\u001b[0m = maxWordWithMaxUniqueChars.sortBy(_.toLowerCase compareTo _.toLowerCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw3sidgn6.scala:19:139 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxUniqueCharsSortedByLexicographicalOrder\u001b[0m = maxWordWithMaxUniqueChars.sortBy(_.toLowerCase compareTo _.toLowerCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mChar\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mLong\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35msortBy\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798553
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuonum2g6.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuonum2g6.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798553
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars += c\n            })\n        })\n        val maxCharsCount = maxChars.size\n        val uniqueCharsCount = uniqueChars.size\n        if (maxCharsCount > uniqueCharsCount) {\n            words.sortWith(_.compareTo(_) > 0)(0)\n        } else {\n            words.sortWith(_.compareTo(_) < 0)(0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcp052u22.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcp052u22.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798553
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(x => x.toCharArray.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(x => x.toCharArray.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordChars = maxWord.toCharArray\n        val maxWordCharsIndex = maxWordIndex.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n        val maxWordCharsIndex = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjk1q_ouw.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjk1q_ouw.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjk1q_ouw.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjk1q_ouw.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex.zipWithIndex.sortWith(_.first < _.second).last._1.toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798557
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n        val maxWordCharsLength = maxWordCharsIndex\n        if (maxWordCharsLength > maxWordLength) {\n            maxWord\n        } else {\n            val maxWordIndex = words.indexOf(maxWord)\n            val maxWordLength = maxWord.length\n            val maxWordChars = maxWord.distinct\n            val maxWordCharsIndex = words.indexOf(maxWordChars)\n            val maxWordCharsLength = maxWordChars.length\n            val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n            val maxWordCharsLength = maxWordCharsIndex\n            if (maxWordCharsLength > maxWordLength) {\n                maxWord\n            } else {\n                val maxWordIndex = words.indexOf(maxWord)\n                val maxWordLength = maxWord.length\n                val maxWordChars = maxWord.distinct\n                val maxWordCharsIndex = words.indexOf(maxWordChars)\n                val maxWordCharsLength = maxWordChars.length\n                val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n                val maxWordCharsLength = maxWordCharsIndex\n                if (maxWordCharsLength > maxWordLength) {\n                    maxWord\n                } else {\n                    val maxWordIndex = words.indexOf(maxWord)\n                    val maxWordLength = maxWord.length\n                    val maxWordChars = maxWord.distinct\n                    val maxWordCharsIndex = words.indexOf(maxWordChars)\n                    val maxWordCharsLength = maxWordChars.length\n                    val maxWordCharsIndex = words.indexOf(maxWordCharsIndex)\n                    val maxWordCharsLength = maxWordCharsIndex\n                    if (maxWordCharsLength > maxWordLength) {\n                        maxWord\n                    } else {\n                        val maxWordIndex = words.indexOf(maxWord)\n                        val maxWordLength = maxWord.length\n                        val maxWordChars = maxWord.distinct\n                        val maxWordCharsIndex = words.indexOf(maxWordChars)\n                        val maxWordCharsLength = maxWordChar\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5lgu2bcr.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5lgu2bcr.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordCharsIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5lgu2bcr.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsLength\u001b[0m = maxWordCharsIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5lgu2bcr.scala:33:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordCharsIndex)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5lgu2bcr.scala:34:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsLength\u001b[0m = maxWordCharsIndex\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloa",
      "stdout": "",
      "timestamp": 1659798557
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct).map(_.size).groupBy(_).mapValues(_.size)\n        val maxCount = counts.max\n        val maxKey = counts.keys.toList.sortBy(_._1).head\n        val maxValue = counts(maxKey)\n        val maxWord = words.filter(word => word.distinct.size == maxValue)\n        val maxWordWithMaxCount = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey))\n        val maxWordWithMaxCountWithMaxKey = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValue = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKey = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValue = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKey = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKeyWithMaxValue = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue) && word.distinct.contains(maxKey) && word.distinct.contains(maxValue))\n        val maxWordWithMaxCountWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKeyWithMaxValueWithMaxKey = words.filter(word => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distin\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpynlfpke7.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpynlfpke7.scala:15:74 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcounts\u001b[0m = words.map(\u001b[36mword\u001b[0m => word.distinct).map(_.size).groupBy(_).mapValues(_.size)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m_$2 => \n\u001b[31m   |\u001b[0m  words.map(word => word.distinct).map(_$1 => _$1.size).groupBy(_$2).mapValues(\n\u001b[31m   |\u001b[0m    _$3 => _$3.size\n\u001b[31m   |\u001b[0m  ).\n\u001b[31m\u001b[31m-- Error: /tmp/tmpynlfpke7.scala:19:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.distinct.size == maxValue)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and scala.collection.MapView[Nothing, Int] cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpynlfpke7.scala:20:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCount\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.distinct.size == maxValue && word.distinct.contains(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and scala.collection.MapView[Nothing, Int] cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpynlfpke7.scala:21:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCountWithMaxKey\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.distinct.size == maxValue && word.distinct.contains(maxKey) && word.distinct.contains(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m         ",
      "stdout": "",
      "timestamp": 1659798559
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoe7g80wk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798555
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct).map(word => word -> word.size)\n        val maxCount = counts.max\n        val maxWord = counts.find(_._2 == maxCount).get._1\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words(maxWordIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpig5awalc.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpig5awalc.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpig5awalc.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words(maxWordIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpig5awalc.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions",
      "stdout": "",
      "timestamp": 1659798559
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toMap\n        val maxCount = counts.values.max\n        val maxWord = counts.keys.filter(_.count(_ == maxCount)).max\n        val maxWords = counts.keys.filter(_.count(_ == maxCount)).sortBy(_.length)\n        val maxWord = maxWords.head\n        val maxWordCount = maxWords.map(_.count(_ == maxCount)).sum\n        if (maxWordCount == maxCount) {\n            maxWord\n        } else {\n            findMax(maxWords)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcx05of6r.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = maxWords.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcx05of6r.scala:15:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcounts\u001b[0m = words.map(\u001b[36mword\u001b[0m => word.count(_ == \u001b[31m'a'\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Cannot prove that Int <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                        where:    K is a type variable\n\u001b[31m   |\u001b[0m                                                  V is a type variable\n\u001b[31m   |\u001b[0m                                        .\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798560
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) += 1\n            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word => uniqueChars(word._1)._1 == uniqueChars(maxChar)._1)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvaic23b5.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvaic23b5.scala:22:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => uniqueChars(word._1)._1 == uniqueChars(maxChar)._1)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798560
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n        val maxWordWithMaxCount = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar))\n        val maxWordWithMaxCountWithMaxCharWithMaxWord = words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount).length == 1)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount).length == 1 && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount).length == 1).length == 1)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount).length == 1 && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && words.filter(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.contains(maxChar) && w.toCharArray.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiyxzhfft.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiyxzhfft.scala:16:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcounts\u001b[0m = chars.groupBy(identity).mapValues(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value length is not a member of Set[Char]\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiyxzhfft.scala:17:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = counts.max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances of type Ordering[B] found for parameter ord of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m.\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.Tuple2[\u001b[35mT1\u001b[0m, \u001b[35mT2\u001b[0m](scala.math.Ordering.Char, \n\u001b[31m   |\u001b[0m      /* ambiguous: both \u001b[33mobject\u001b[0m \u001b[35mBigInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[T2] */\n\u001b[31m   |\u001b[0m        summon[Ordering[T2]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut both \u001b[33mobject\u001b[0m \u001b[35mBigInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[T2].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiyxzhfft.scala:18:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = counts.maxBy(_._2)._1\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mBigInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter cmp of \u001b[33mmethod\u001b[0m \u001b[35mmaxBy\u001b[0m in \u001b[3",
      "stdout": "",
      "timestamp": 1659798563
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpddfqyi29.scala:22)\n\tat Problem.main(tmpddfqyi29.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798563
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordString = maxWord.mkString\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = maxWordString.reverse\n        val maxWordString = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgef_ne2z.scala:65:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgef_ne2z.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgef_ne2z.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgef_ne2z.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgef_ne2z.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already define",
      "stdout": "",
      "timestamp": 1659798560
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxCharsWithMaxChars = words.filter(_.length == maxChars).filter(_.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqiblipb8.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqiblipb8.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798562
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars += c\n            })\n        })\n        val maxCharsCount = maxChars.size\n        val uniqueCharsCount = uniqueChars.size\n        if(maxCharsCount > uniqueCharsCount) {\n            words.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        } else {\n            words.sortWith((a, b) => a.compareTo(b) > 0)(0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp376wml_v.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp376wml_v.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798559
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n        if(maxCount > 1) uniqueChars.min\n        else uniqueChars.max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbv_r1nqa.scala:18:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mif\u001b[0m(maxCount > \u001b[31m1\u001b[0m) uniqueChars.min\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Char\n\u001b[31m   |\u001b[0m                         Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbv_r1nqa.scala:19:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33melse\u001b[0m uniqueChars.max\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Char\n\u001b[31m   |\u001b[0m             Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798564
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.ArrayBuffer(words(0))\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).take(1).foreach(c => {\n            maxWord = maxWord.updated(0, c)\n        })\n        maxWord.toString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbtp6dxd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbtp6dxd.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.ArrayBuffer(words(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798561
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.maxBy(maxChars)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppn18bica.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppn18bica.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798562
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.ListBuffer[String]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(uniqueChar => {\n            val word = words.filter(word => word.contains(uniqueChar))\n            if (word.length > 0) {\n                maxWord += word(0)\n            }\n        })\n        if (maxWord.length > 0) {\n            maxWord(0)\n        } else {\n            \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph1sp59n3.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph1sp59n3.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798562
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpci4w39jy.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:20:116 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:21:126 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:22:136 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:23:146 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => word.toSet.size == uniqueChars.size)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0fk3h_ff.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0fk3h_ff.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fk3h_ff.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toSet.size == uniqueChars.size)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798565
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count\n        val maxChar = uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n        val maxWordWithMaxCount = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar) == maxCount))\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar))\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_ == maxChar) == maxCount)))\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWordWithMaxWord = words.filter(w => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(w => w.toCharArray.max == maxChar).exists(w => w.toCharArray.count(_\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpomizmb9g.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpomizmb9g.scala:20:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCount\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and (Char => Boolean) => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpomizmb9g.scala:21:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCountWithMaxChar\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and (Char => Boolean) => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpomizmb9g.scala:22:109 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCountWithMaxCharWithMaxWord\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.contains(maxChar) && w.toCharArray.count(_ == maxChar) == maxCount && w.toCharArray.max == maxChar && words.filter(\u001b[36mw\u001b[0m => w.toCharArray.max == maxChar).exists(\u001b[36mw\u001b[0m => w.toCharArray.count(_ == maxChar) == maxCount))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and (Char => Boolean) => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpom",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.forall(uniqueChars.contains)).max\n        val maxWordWithMaxChars = words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_)) && words.filter(_.toCharArray.forall(uniqueChars.contains(_))).max.toCharArray.forall(uniqueChars.contains(_))).max\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptn5ok8xb.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn5ok8xb.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordWithCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).take(1).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.length == maxCount).\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9d0py7tz.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9d0py7tz.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\u001b[0m = words.filter(_.length == maxCount).\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9d0py7tz.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length > _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toChar).distinct\n        val maxWordWithMaxCharsFirstCharsLength = maxWordWithMaxCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstChars.head\n        val maxWordWithMaxCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirst.length\n        val maxWordWithMaxCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirst.map(_.toChar).distinct\n        val maxWordWithMaxCharsFirstCharsFirstCharsLength = maxWordWithMaxCharsFirstCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirstChars.head\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirstCharsFirst.length\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirstCharsFirst.map(_.toChar).distinct\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsLength = maxWordWithMaxCharsFirstCharsFirstCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirstLength = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.length\n        val maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirstChars = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.map(_.toChar).distinct\n        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2yda4cgj.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yda4cgj.scala:24:90 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirstLength\u001b[0m = maxWordWithMaxCharsFirstCharsFirst.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yda4cgj.scala:25:89 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirstChars\u001b[0m = maxWordWithMaxCharsFirstCharsFirst.map(_.toChar).distinct\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value map is not a member of Char\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2yda4cgj.scala:31:69 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst\u001b[0m = maxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsFirstCharsFirstCharsFirst\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yda4cgj.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659798569
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc, word) =>\n                val chars = word.map(c => c.toInt)\n                val count = chars.foldLeft(0)(_ + _)\n                (chars zip count) map {\n                    case (c, n) => (c, n)\n                }.toMap\n        }\n        val maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1)\n        val maxCharsCount = maxChars.foldLeft(0)(_ + _)\n        val maxCharsCountInWord = words.foldLeft(0)(_ + _)\n        if (maxCharsCount > maxCharsCountInWord) {\n            words.find(w => w.count(_ == maxChars.head) > maxCharsCountInWord)\n        } else {\n            words.find(w => w.count(_ == maxChars.head) == maxCharsCountInWord)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvmjmuwv.scala:19:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                (chars zip count) map {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (count : Int)\n\u001b[31m   |\u001b[0m                           Required: IterableOnce[Any]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppvmjmuwv.scala:20:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    \u001b[33mcase\u001b[0m (c, n) => (c, n)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter x$1 of expanded function:\n\u001b[31m   |\u001b[0m   x$1 => \n\u001b[31m   |\u001b[0m     x$1\u001b[33m match \u001b[0m\n\u001b[31m   |\u001b[0m       {\n\u001b[31m   |\u001b[0m         \u001b[33mcase \u001b[0m(c, n) => \n\u001b[31m   |\u001b[0m           (c, n)\n\u001b[31m   |\u001b[0m       }.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvmjmuwv.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    \u001b[33mcase\u001b[0m (c, n) => (c, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: c\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvmjmuwv.scala:20:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    \u001b[33mcase\u001b[0m (c, n) => (c, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmppvmjmuwv.scala:24:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = counts.filter(_._2 == maxCount).map(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Int and (Char, Int) cannot be comp",
      "stdout": "",
      "timestamp": 1659798571
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n        val maxWord = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c))).sorted\n        val maxWordWithMaxChars = maxWord.mkString(\"\")\n        val maxWordWithMaxCharsAndCounts = maxWordWithMaxChars + \" \" + maxCount\n        val maxWordWithMaxCharsAndCountAndIndex = maxWordWithMaxCharsAndCounts.indexOf(0)\n        val maxWordWithMaxCharsAndCountAndIndexAsString = maxWordWithMaxCharsAndCountAndIndex + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n        val maxWordWithMaxCharsAndCountAndIndexAsChars = maxWordWithMaxCharsAndCountAndIndexAsString.toCharArray\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsString = maxWordWithMaxCharsAndCountAndIndexAsChars.mkString(\"\")\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxChars = maxWordWithMaxCharsAndCountAndIndexAsCharsAsString + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCounts = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxChars + \" \" + maxCount\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndex = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCounts.indexOf(0)\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsString = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndex + maxWordWithMaxCharsAndCounts.substring(maxWordWithMaxCharsAndCountAndIndex).trim\n        val maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsChars = maxWordWithMaxCharsAndCountAndIndexAsCharsAsStringWithMaxCharsAndCountAndIndexAsString.toCharArray\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpewqbi2lm.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpewqbi2lm.scala:18:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = counts.filter(_._2 == maxCount).map(_._1).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Int and (Char, Int) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpewqbi2lm.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798570
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.head\n        val maxWordWithMaxCharsFirstCharCount = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n        if (maxWordWithMaxCharsFirstCharCount > 1) {\n            val maxWordWithMaxCharsFirstCharCountInOrder = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n            if (maxWordWithMaxCharsFirstCharCountInOrder == 1) {\n                maxWordWithMaxCharsFirstChar\n            } else {\n                maxWordWithMaxCharsFirstChar\n            }\n        } else {\n            maxWordWithMaxCharsFirstChar\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwf4n0llm.scala:25:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                maxWordWithMaxCharsFirstChar\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (maxWordWithMaxCharsFirstChar : Char)\n\u001b[31m   |\u001b[0m                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwf4n0llm.scala:27:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                maxWordWithMaxCharsFirstChar\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (maxWordWithMaxCharsFirstChar : Char)\n\u001b[31m   |\u001b[0m                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwf4n0llm.scala:30:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            maxWordWithMaxCharsFirstChar\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (maxWordWithMaxCharsFirstChar : Char)\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798571
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                if (uniqueChars.getOrElse(c, 0) == 0) {\n                    uniqueChars += (c -> 1)\n                } else {\n                    uniqueChars += (c -> uniqueChars(c) + 1)\n                }\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.toString.contains(maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwpqr0194.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpqr0194.scala:26:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.toString.contains(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798569
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpykoit12c.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of ",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be de",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.foldLeft(Set.empty[Char])((set, word) => set + word.charAt(0))\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word => word.charAt(0) == maxChars)\n        val maxWordWithMaxChars = words.filter(word => word.charAt(0) == maxChars && word < maxWord)\n        val maxWordWithMaxCharsAndMaxWord = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWord = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxChars = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWord && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxChars && word < maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWord)\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord = words.filter(word => word.charAt(0) == maxChars && word < maxWord && word > maxWordWithMaxChars && word < maxWordWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzyn001b5.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyn001b5.scala:18:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.charAt(\u001b[31m0\u001b[0m) == maxChars && word < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyn001b5.scala:19:102 -------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.charAt(\u001b[31m0\u001b[0m) == maxChars && word < maxWord && word > maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyn001b5.scala:19:120 -------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.charAt(\u001b[31m0\u001b[0m) == maxChars && word < maxWord && word > maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (maxWordWithMaxChars : List[String])\n\u001b[31m   |\u001b[0m                          Requi",
      "stdout": "",
      "timestamp": 1659798574
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n        val uniqueChars = chars.toSeq.distinct.length\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.distinct.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSorted = maxWordWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxChars = maxWordWithMaxCharsSorted.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSorted = maxWordWithMaxCharsSortedWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxChars = maxWordWithMaxCharsSortedWithMaxCharsSorted.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.sortWith(_.toCharArray.distinct.toList.sorted == _.toCharArray.distinct.toList.sorted)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.take(1)\n        val maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSorted = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa2b9_fz2.scala:18:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.distinct.length == maxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     Values of types Int and Int => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa2b9_fz2.scala:19:52 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     Values of types Int and Int => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa2b9_fz2.scala:19:145 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                         ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value toCharArray is not a member of List[String]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpa2b9_fz2.scala:25:88 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars\u001b[0m = maxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWithMaxChars.take(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsSortedWithMaxCharsSortedWithMaxCharsSortedWith",
      "stdout": "",
      "timestamp": 1659798573
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.toCharArray.size == maxChars)\n        val maxWord = maxWords.head\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.map(_.toChar).distinct\n        val maxWordCharCount = maxWordChars.max\n        val maxWordCharCountLength = maxWordCharCount.length\n        val maxWordCharCountIndex = maxWordCharCount - 1\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        val maxWordCharCountIndex = maxWordCharCountIndex.charAt(0)\n        val maxWordCharCountIndex = maxWordCharCountIndex.toInt\n        val maxWordCharCountIndex = maxWordCharCountIndex.toString\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqur4z1k.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountIndex\u001b[0m = maxWordCharCountIndex.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharCountIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqur4z1k.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountIndex\u001b[0m = maxWordCharCountIndex.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharCountIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqur4z1k.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountIndex\u001b[0m = maxWordCharCountIndex.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharCountIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzqur4z1k.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharCountIndex\u001b[0m = maxWordCharCountIndex.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharCountIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharCountIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] N",
      "stdout": "",
      "timestamp": 1659798573
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                unique.add(c)\n                maxCount(c) = maxCount(c) + 1\n            })\n        })\n        val maxKey = maxCount.maxBy(_._2)._1\n        words.find(word => unique.count(_ == word.charAt(0)) == maxCount(maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfkkhwpq2.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfkkhwpq2.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfkkhwpq2.scala:24:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => unique.count(_ == word.charAt(\u001b[31m0\u001b[0m)) == maxCount(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798572
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc, word) => word.count(x => acc.getOrElse(x, 0) == 0)\n        }\n        counts.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp266tn16q.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mcase\u001b[0m (acc, word) => word.count(x => acc.getOrElse(x, \u001b[31m0\u001b[0m) == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Int\n\u001b[31m   |\u001b[0m                       Required: scala.collection.mutable.Map[Char, Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp266tn16q.scala:18:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        counts.maxBy(_._2)._1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Char\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798572
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp45fed1fm.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp45fed1fm.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798570
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2)(Ordering.Int.reverse).head\n        words.find(word => word.count(_ == maxCharsSorted._1))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvkuydpau.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvkuydpau.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkuydpau.scala:26:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.count(_ == maxCharsSorted._1))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Int\n\u001b[31m   |\u001b[0m                           Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798572
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpykoit12c.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of ",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount = words.map(x => x.distinct).flatten.toSet.max\n        val maxWord = words.filter(x => unique.contains(x)).sortWith(_.length < maxCount).head\n        unique.contains(maxWord) ? maxWord : findMax(words.filter(x => !unique.contains(x)))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmidame_4.scala:18:52 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxWord) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(x => !unique.contains(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '(' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmidame_4.scala:17:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).sortWith(_.length < maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (x : String)\n\u001b[31m   |\u001b[0m                                                  Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpmidame_4.scala:17:69 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).sortWith(_.length < maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmidame_4.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        unique.contains(maxWord) ? maxWord : \u001b[35mfindMax\u001b[0m(words.filter(x => !unique.contains(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (maxWord : String)\n\u001b[31m   |\u001b[0m                        Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798574
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.toCharArray\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = maxWordChars.indexOf(0)\n        val maxWordCharsIndex = maxWordCharsIndex + 1\n        if (maxWordCharsLength > maxWordLength) {\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n            val maxWordCharsIndex = maxWordCharsIndex - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6gdgg6mx.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6gdgg6mx.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6gdgg6mx.scala:27:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6gdgg6mx.scala:28:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6gdgg6mx.scala:29:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = maxWordCharsIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that",
      "stdout": "",
      "timestamp": 1659798575
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0q9jupqf.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0q9jupqf.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798572
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.length - 1 else maxWordIndex\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgbi15tb8.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.length - \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798573
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAnd\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuvfvtm0g.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuvfvtm0g.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798575
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val max = unique.max\n        val index = unique.indexOfMax\n        words(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpncw6b1eg.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = unique.indexOfMax\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue indexOfMax is not a member of List[Int] - did you mean unique.indexOf?\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798576
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordString = maxWord.mkString(\"\")\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n        val maxWordString = max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6o25r5c.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.substring(\u001b[31m0\u001b[0m,maxWordString.length-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6o25r5c.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.substring(\u001b[31m0\u001b[0m,maxWordString.length-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6o25r5c.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.substring(\u001b[31m0\u001b[0m,maxWordString.length-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6o25r5c.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordString\u001b[0m = maxWordString.substring(\u001b[31m0\u001b[0m,maxWordString.length-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overl",
      "stdout": "",
      "timestamp": 1659798578
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_ == word.charAt(0)) == maxChars(maxChar))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz5_a70ll.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz5_a70ll.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz5_a70ll.scala:24:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => uniqueChars.count(_ == word.charAt(\u001b[31m0\u001b[0m)) == maxChars(maxChar))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798578
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars += c\n        })\n        uniqueChars.foreach(c => {\n            if (maxChars.contains(c)) {\n                maxWord += word\n            }\n        })\n        if (maxWord.size == 1) {\n            maxWord.head\n        } else {\n            maxWord.headOption.getOrElse(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hv8a0w4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hv8a0w4.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hv8a0w4.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798575
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars += c\n            })\n        })\n        words.foreach(word => {\n            word.foreach(c => {\n                maxWord = maxWord.filterNot(_ == word)\n            })\n        })\n        val maxWordWithMaxChars = maxWord.filter(_ => maxChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueChars = maxWordWithMaxChars.filter(_ => uniqueChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirst = maxWordWithMaxCharsAndUniqueChars.filter(_ => words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxChars = maxWordWithMaxCharsAndUniqueCharsAndFirst.filter(_ => maxChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxChars.filter(_ => uniqueChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars.filter(_ => words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxChars = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst.filter(_ => maxChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxChars.filter(_ => uniqueChars.contains(_))\n        val maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars.filter(_ => \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpyhjtyxto.scala:41:237 --------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirst\u001b[0m = maxWordWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueCharsAndFirstWithMaxCharsAndUniqueChars.filter(_ => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhjtyxto.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhjtyxto.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhjtyxto.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpyhjtyxto.scala:30:24 --------------------",
      "stdout": "",
      "timestamp": 1659798578
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted = maxChars.toList.sortWith(_ < _)\n        if (maxCharsSorted.size == 1) {\n            maxCharsSorted.head\n        } else {\n            val maxCharsSortedFirst = maxCharsSorted.head\n            val maxCharsSortedSecond = maxCharsSorted.tail.head\n            if (maxCharsSortedFirst < maxCharsSortedSecond) {\n                maxCharsSortedFirst\n            } else {\n                maxCharsSortedSecond\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3j50but.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3j50but.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798576
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char, String]()\n        for (word <- words) {\n            for (char <- word) {\n                if (!uniqueChars.contains(char)) {\n                    uniqueChars(char) = uniqueChars(char) + 1\n                }\n                if (!maxChars.contains(char)) {\n                    maxChars(char) = maxChars(char) + 1\n                }\n            }\n        }\n        for (char <- uniqueChars.keys) {\n            if (maxChars(char) > maxChars(maxChars.keys.last)) {\n                maxWord(char) = word\n            }\n        }\n        maxWord(maxWord.keys.last)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvi7c69_b.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvi7c69_b.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvi7c69_b.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798578
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[String, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n            val count = uniqueChars.size\n            uniqueChars.clear()\n            maxCount(word) = count\n        })\n        val maxWord = maxCount.maxBy(_._2)._1\n        words.find(word => maxCount(word) == maxCount(maxWord))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphz1x7wbh.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphz1x7wbh.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = mutable.Map[\u001b[35mString\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz1x7wbh.scala:26:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => maxCount(word) == maxCount(maxWord))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798580
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char => {\n            maxChars += char -> uniqueChars.count(_ == char)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2)(Ordering.Int.reverse).head\n        val maxCharsSortedKey = maxCharsSorted._1.toString\n        val maxCharsSortedValue = maxCharsSorted._2\n        words.find(word => maxCharsSortedValue == uniqueChars.count(_ == word))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gk4y57e.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gk4y57e.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7gk4y57e.scala:28:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => maxCharsSortedValue == uniqueChars.count(_ == word))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798581
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length > _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstChars.head\n        val maxWordWithMaxCharsFirstCharsFirst = maxWordWithMaxCharsFirstCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirst.head\n        val maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirst = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9s_ardfc.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9s_ardfc.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirst\u001b[0m = maxWordWithMaxCharsFirstCharsFirst.map(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsFirstCharsFirst is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsFirst\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9s_ardfc.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst\u001b[0m = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirst.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirst\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9s_ardfc.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst\u001b[0m = maxWordWithMaxCharsFirstCharsFirstFirstFirstFirstFirstFirstFirst.map(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798583
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplspvtfw1.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplspvtfw1.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798583
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi_jx9z8g.scala:22)\n\tat Problem.main(tmpi_jx9z8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798585
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n        val maxCharsSortedSecond = maxCharsSorted.head._2\n        val maxCharsSortedThird = maxCharsSorted.head._3\n        if (maxCharsSortedFirst == maxCharsSortedSecond && maxCharsSortedFirst == maxCharsSortedThird) {\n            maxCharsSortedFirst\n        } else {\n            maxCharsSortedFirst\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe3zsq9c0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe3zsq9c0.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798581
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi_jx9z8g.scala:22)\n\tat Problem.main(tmpi_jx9z8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798585
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith((a, b) => b._2 - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5f11alj.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5f11alj.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChar\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798580
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpci4w39jy.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:20:116 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:21:126 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:22:136 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:23:146 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\")\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n        val maxWordIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpiio5y1k4.scala:47:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpiio5y1k4.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == \u001b[31m0\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpiio5y1k4.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(_ == maxChars) > \u001b[31m0\u001b[0m).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpiio5y1k4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = words.indexOf(maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpiio5y1k4.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m",
      "stdout": "",
      "timestamp": 1659798585
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.Array[String]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0) + 1 \n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            val count = maxChars.get(c)\n            if (count > maxChars.getOrElse(c, 0))\n                maxChars(c) = count\n        })\n        maxChars.toList.sortWith(_ < _).foreach(c => {\n            val count = maxChars.get(c)\n            if (count > maxChars.getOrElse(c, 0))\n                maxWord = c :: maxWord\n        })\n        maxWord.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqs_766m2.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqs_766m2.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqs_766m2.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.Array[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798582
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(w => w.length == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxChars.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLength = maxWordWithMaxCharsSortedByLength.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4b_f83lq.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4b_f83lq.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLength\u001b[0m = maxWordWithMaxCharsSortedByLength.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsSortedByLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4b_f83lq.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLength\u001b[0m = maxWordWithMaxCharsSortedByLength.sortBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsSortedByLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4b_f83lq.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLength\u001b[0m = maxWordWithMaxCharsSortedByLength.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsSortedByLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4b_f83lq.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[",
      "stdout": "",
      "timestamp": 1659798583
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n        for (word <- words) {\n            val chars = word.map(c => c.toInt)\n            uniqueChars ++= chars\n            maxChars ++= chars\n        }\n        val maxCount = uniqueChars.max\n        val maxChar = maxChars.max\n        val maxWords = words.filter(word => word.count(_ == maxChar) == maxCount)\n        if (maxWords.isEmpty) maxWord\n        else maxWords.sortBy(word => word.head).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmqrn4zda.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmqrn4zda.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmqrn4zda.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798581
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).distinct\n        val maxCount = unique.max\n        unique.find(x => x.size == maxCount).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4t1uhoc5.scala:17:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        unique.find(\u001b[36mx\u001b[0m => x.size == maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types Int and String cannot be compared with == or !=\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798584
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirst = words.sortBy(_.length).head\n        val maxWordWithMaxCharsFirstWithMaxChars = words.sortBy(_.length).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.sortBy(_.length).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.sortBy(_.length).filter(_.length == \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmg4fcbz5.scala:27:148 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\u001b[0m = words.sortBy(_.length).filter(_.length == \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmg4fcbz5.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798586
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptaec_u45.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798582
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                uniqueChars += char\n                maxChars(char) match {\n                    case Some(count) => count = count + 1\n                    case None => maxChars(char) = uniqueChars.size\n                }\n            })\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word => word.contains(maxChar))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmt65uny.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmt65uny.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmt65uny.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    \u001b[33mcase\u001b[0m Some(count) => count = count + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: count\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmt65uny.scala:21:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    \u001b[33mcase\u001b[0m Some(count) => count = count + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Not found: count\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmt65uny.scala:27:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word.contains(maxChar))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "stdout": "",
      "timestamp": 1659798586
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten\n        val maxCount = unique.count(_ == unique.max)\n        val maxWord = unique.take(maxCount)\n        val maxWordIndex = unique.indexOf(maxWord)\n        val maxWordString = words.take(maxWordIndex).mkString(\" \")\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpstdejtd6.scala:23)\n\tat Problem.main(tmpstdejtd6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798588
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.max)\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp56qrj89.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars.max)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp56qrj89.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsLength\u001b[0m = maxWordChars.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp56qrj89.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsIndex\u001b[0m = words.indexOf(maxWordChars.max)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp56qrj89.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsLength\u001b[0m = maxWordChars.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp56qrj89.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    ",
      "stdout": "",
      "timestamp": 1659798587
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpykoit12c.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpykoit12c.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of ",
      "stdout": "",
      "timestamp": 1659798519
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length == maxChars && _.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.to\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeu0zz83s.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpeu0zz83s.scala:19:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.length == maxChars && _.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerC",
      "stdout": "",
      "timestamp": 1659798588
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                maxChars.getOrElse(c, 0) += 1\n            })\n        })\n        val maxCharsCount = maxChars.values.max\n        val maxCharsKeys = maxChars.keys.max\n        val maxCharsValues = maxChars.values.max\n        val maxCharsKeysValues = maxCharsKeys.zip(maxCharsValues).max\n        val maxCharsKeysValuesString = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\"\")\n        val maxCharsKeysValuesString = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString2 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString3 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString4 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString5 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString6 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString7 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString8 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString9 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString10 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString11 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString12 = maxCharsKeysValues.map(x => x._1 + x._2).mkString(\" \")\n        val maxCharsKeysValuesString13 = maxCharsKeysValues.map(x => x._\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxjrfu3y6.scala:38:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsKeysValuesString13\u001b[0m = maxCharsKeysValues.map(\u001b[36mx\u001b[0m => x._\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxjrfu3y6.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsKeysValuesString\u001b[0m = maxCharsKeysValues.map(\u001b[36mx\u001b[0m => x._1 + x._2).mkString(\u001b[31m\" \"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsKeysValuesString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsKeysValuesString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxjrfu3y6.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjrfu3y6.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798587
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head.head.head.head.head.head.head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpci4w39jy.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:20:116 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:21:126 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:22:136 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value head is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpci4w39jy.scala:23:146 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == maxChars).sortBy(_.length).head.head.head.head.head.head.head\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "stdout": "",
      "timestamp": 1659798567
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordCount = unique.filter(_.length == maxCount).length\n        if (maxWordCount == 1) {\n            maxWord\n        } else {\n            val maxWordIndex = unique.indexOf(maxWord)\n            words.take(maxWordIndex).mkString(\" \")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp78d1353.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCount\u001b[0m = unique.filter(_.length == maxCount).length\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798589
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordLength = maxWord.length\n        val maxWordWithMaxChars = words.filter(_.length == maxWordLength)\n        val maxWordWithMaxCharsLength = maxWordWithMaxChars.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.length\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength.sortBy(_.length).head\n        val maxWordWithMaxCharsLength = maxWordWithMaxCharsLength\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptxxl464c.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.sortBy(_.length).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptxxl464c.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptxxl464c.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.sortBy(_.length).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptxxl464c.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsLength\u001b[0m = maxWordWithMaxCharsLength.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsLength\u001b[0",
      "stdout": "",
      "timestamp": 1659798589
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n                if (uniqueChars.contains(char)) {\n                    uniqueChars += char\n                    maxChars(char) += 1\n                } else {\n                    uniqueChars += char\n                }\n            })\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => maxChars(maxKey) == word.count(_ == maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hhqxnfh.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hhqxnfh.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7hhqxnfh.scala:28:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => maxChars(maxKey) == word.count(_ == maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798589
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n        words.find(word => word.toSet.size == uniqueChars.size).getOrElse(maxKey)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplyx2ytvb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplyx2ytvb.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798587
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value < _.value)\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_.value == maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_.value == maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstKey = maxCharsSortedFirstKey.toString\n        val maxCharsSortedFirstValue = maxCharsSortedFirstValue.toString\n        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirstKey\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirstValue\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + maxCharsSortedFirst\n        val maxCharsSortedFirst = maxCharsSortedFirst + \", \" + max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn1rr__w2.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstKey\u001b[0m = maxCharsSortedFirstKey.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstKey is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstKey\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn1rr__w2.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirstValue\u001b[0m = maxCharsSortedFirstValue.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirstValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirstValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn1rr__w2.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirst\u001b[0m = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirst is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirst\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn1rr__w2.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsSortedFirst\u001b[0m = maxCharsSortedFirst + \u001b[31m\", \"\u001b[0m + maxCharsSortedFirstKey\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsSortedFirst is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsSortedFirst\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that over",
      "stdout": "",
      "timestamp": 1659798590
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.foldLeft(0) { (max, word) =>\n            val count = word.length\n            if (count > max) {\n                count\n            } else {\n                max\n            }\n        }\n        val maxWord = words.filter(word => word.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6_9rzosj.scala:28)\n\tat Problem.main(tmp6_9rzosj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798593
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c)).getOrElse(0)\n            })\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedUnique = maxCharsSorted.filter(_._2 == uniqueChars.size).head._1\n        val maxCharsSortedUniqueString = maxCharsSortedUnique.mkString\n        words.find(word => word.count(_ == maxCharsSortedUniqueString) == uniqueChars.size).getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76sqyza.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76sqyza.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798589
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount = words.map(x => x.distinct).flatten.count(x => unique.contains(x))\n        val maxWord = if (maxCount > 1) words.filter(x => unique.contains(x)).head else words.head\n        val maxChar = words.map(x => x.distinct).flatten.count(x => unique.contains(x))\n        val maxCharWord = if (maxChar > 1) words.filter(x => unique.contains(x)).head else words.head\n        val maxCharWord2 = words.map(x => x.distinct).flatten.count(x => unique.contains(x))\n        val maxCharWord3 = words.filter(x => unique.contains(x)).head\n        val maxCharWord4 = words.filter(x => unique.contains(x)).head\n        val maxCharWord5 = words.filter(x => unique.contains(x)).head\n        val maxCharWord6 = words.filter(x => unique.contains(x)).head\n        val maxCharWord7 = words.filter(x => unique.contains(x)).head\n        val maxCharWord8 = words.filter(x => unique.contains(x)).head\n        val maxCharWord9 = words.filter(x => unique.contains(x)).head\n        val maxCharWord10 = words.filter(x => unique.contains(x)).head\n        val maxCharWord11 = words.filter(x => unique.contains(x)).head\n        val maxCharWord12 = words.filter(x => unique.contains(x)).head\n        val maxCharWord13 = words.filter(x => unique.contains(x)).head\n        val maxCharWord14 = words.filter(x => unique.contains(x)).head\n        val maxCharWord15 = words.filter(x => unique.contains(x)).head\n        val maxCharWord16 = words.filter(x => unique.contains(x)).head\n        val maxCharWord17 = words.filter(x => unique.contains(x)).head\n        val maxCharWord18 = words.filter(x => unique.contains(x)).head\n        val maxCharWord19 = words.filter(x => unique.contains(x)).head\n        val maxCharWord20 = words.filter(x => unique.contains(x)).head\n        val maxCharWord21 = words.filter(x => unique.contains(x)).head\n        val maxCharWord22 = words.filter(x => unique.contains(x)).head\n        val maxCharWord23 = words.filter(x => unique.contains(x)).head\n        val maxCharWord24 = words.filter(x => unique.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7ds45gb.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ds45gb.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = \u001b[33mif\u001b[0m (maxCount > \u001b[31m1\u001b[0m) words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).head \u001b[33melse\u001b[0m words.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (x : String)\n\u001b[31m   |\u001b[0m                                                  Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ds45gb.scala:19:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharWord\u001b[0m = \u001b[33mif\u001b[0m (maxChar > \u001b[31m1\u001b[0m) words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).head \u001b[33melse\u001b[0m words.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (x : String)\n\u001b[31m   |\u001b[0m                                                  Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ds45gb.scala:21:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharWord3\u001b[0m = words.filter(\u001b[36mx\u001b[0m => unique.contains(x)).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (x : String)\n\u001b[31m   |\u001b[0m                                                  Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ds45gb.scala:2",
      "stdout": "",
      "timestamp": 1659798597
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxUniqueChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxUniqueChars = words.filter(_.length == maxUniqueChars)\n        val maxWordWithMaxUniqueCharsFirst = maxWordWithMaxUniqueChars.head\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrder = maxWordWithMaxUniqueCharsFirst.compareToIgnoreCase(maxWord)\n        if (maxWordWithMaxUniqueCharsFirstInLexicographicalOrder == 0) maxWordWithMaxUniqueCharsFirst else maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkv05es3v.scala:32)\n\tat Problem.main(tmpkv05es3v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798595
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWordIndex = if (maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps26pcypz.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps26pcypz.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps26pcypz.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(_.length == maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps26pcypz.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps26pcypz.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798595
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.foldLeft(Set.empty[String]) { (set, word) =>\n            set + word\n        }\n        val maxCount = unique.max\n        val maxWord = unique.find(_ == maxCount)\n        if (maxCount == unique.size)\n            maxWord\n        else\n            words.find(word => unique.contains(word) && word < maxWord)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpo7o_pcps.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (maxCount == unique.size)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types String and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7o_pcps.scala:21:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            maxWord\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (maxWord : Option[String])\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7o_pcps.scala:23:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            words.find(\u001b[36mword\u001b[0m => unique.contains(word) && word < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (maxWord : Option[String])\n\u001b[31m   |\u001b[0m                                    Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798595
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength + 1\n        val maxWordWithMaxCharsString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcq6lfao3.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcq6lfao3.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = maxWordWithMaxCharsIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcq6lfao3.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsStringLength + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcq6lfao3.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsStringLength + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcq6lfao3.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsStringLength\u001b[0m = maxWordWithMaxCharsString",
      "stdout": "",
      "timestamp": 1659798593
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphklqebet.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklqebet.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = words.indexOf(maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklqebet.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = words.indexOf(maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklqebet.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = words.indexOf(maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithMaxCharsIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithMaxCharsIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklqebet.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsIndex\u001b[0m = words.indexOf(maxWordWithMaxChars)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659798594
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst = words.filter(w => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexicographicalOrder && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder = words.filter(w => w.length == maxChars && w < maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder = words.filter(w => w.length == maxChars && w > maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLex\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxgayljr3.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgayljr3.scala:18:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w < maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgayljr3.scala:19:85 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirst\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w > maxWord)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (maxWord : List[String])\n\u001b[31m   |\u001b[0m                                      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgayljr3.scala:20:107 -------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\u001b[0m = words.filter(\u001b[36mw\u001b[0m => w.length == maxChars && w < maxWordWithMaxCharsFirst)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (maxWordWithMaxCharsFirst : List[String])\n\u001b[31m   |\u001b[0m                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Er",
      "stdout": "",
      "timestamp": 1659798597
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                uniqueChars += c\n                maxChars += c -> 0\n            })\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_ == word(0)) == maxChars(maxKey))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7hg3kze.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36muniqueChars\u001b[0m = mutable.HashSet[\u001b[35mChar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7hg3kze.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.HashMap[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn7hg3kze.scala:24:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => uniqueChars.count(_ == word(\u001b[31m0\u001b[0m)) == maxChars(maxKey))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798595
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxChars = mutable.Map[Int, String]()\n        words.foreach(word => {\n            val chars = word.distinct\n            val count = chars.length\n            if (maxChars.contains(count)) {\n                maxChars(count) = word\n            } else {\n                maxChars(count) = word\n            }\n        })\n        maxChars.maxBy(_._1)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6dzcp94m.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = mutable.Map[\u001b[35mInt\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798593
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n        unique.find(_ == maxCount) match {\n            case Some(count) => maxWord\n            case None => \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxsaov0o8.scala:25)\n\tat Problem.main(tmpxsaov0o8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798598
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).keys.toList\n        val maxCharsIndex = chars.indexOf(maxChars.head)\n        val maxCharsString = chars.take(maxCharsIndex).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.head).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_ != maxChars.last).mkString(\"\")\n        val maxCharsString = maxCharsString.takeWhile(_\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7r6hitl.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf7r6hitl.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsString\u001b[0m = maxCharsString.takeWhile(_ != maxChars.head).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf7r6hitl.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsString\u001b[0m = maxCharsString.takeWhile(_ != maxChars.last).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf7r6hitl.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsString\u001b[0m = maxCharsString.takeWhile(_ != maxChars.last).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharsString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharsString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf7r6hitl.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharsString\u001b[0m = maxCharsString.takeWhile(_ != maxChars.last).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659798598
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val maxUnique = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n        words(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5dq66rmi.scala:22)\n\tat Problem.main(tmp5dq66rmi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798599
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count, word) => count + word.count(\"a\"))\n        val maxWord = words.filter(word => word.count(\"a\") == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tx68du1.scala:15:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCount\u001b[0m = words.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36mcount\u001b[0m, \u001b[36mword\u001b[0m) => count + word.count(\u001b[31m\"a\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (\u001b[32m\"a\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                               Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tx68du1.scala:16:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(\u001b[36mword\u001b[0m => word.count(\u001b[31m\"a\"\u001b[0m) == maxCount).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (\u001b[32m\"a\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                               Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798598
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n        val maxChar = uniqueChars.max\n        val maxCharIndex = chars.indexOf(maxChar)\n        val maxCharIndex = if (maxCharIndex == -1) words.length else maxCharIndex\n        val maxWord = words.take(maxCharIndex).mkString(\"\")\n        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == -1) words.length else maxWordIndex\n        val maxWord = words.take(maxWordIndex).mkString(\"\")\n        if (maxCount == 1) maxWord\n        else if (maxCount > 1) maxWord\n        else words.take(maxWordIndex).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4wjwmluy.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxCharIndex\u001b[0m = \u001b[33mif\u001b[0m (maxCharIndex == -\u001b[31m1\u001b[0m) words.length \u001b[33melse\u001b[0m maxCharIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxCharIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxCharIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4wjwmluy.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordIndex == -\u001b[31m1\u001b[0m) words.length \u001b[33melse\u001b[0m maxWordIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4wjwmluy.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.take(maxWordIndex).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWord is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWord\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798597
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).reduce(_ ++ _)\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxChars = maxWord.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(word => word.head)\n        val maxWordWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirst.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirstWithMaxCharsFirst.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.sortBy(word => word.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = maxWordWith\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbvq_f2z.scala:28:119 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\u001b[0m = maxWordWith\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: maxWordWith\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbvq_f2z.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798598
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n                if (!unique.contains(c)) {\n                    unique(c) = unique.getOrElse(c, 0) + 1\n                }\n            })\n        })\n        val maxKey = unique.maxBy(_._2)._1\n        words.find(word => word(maxKey) == unique.maxBy(_._2)._1)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxldya69v.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.Map[\u001b[35mChar\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxldya69v.scala:24:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        words.find(\u001b[36mword\u001b[0m => word(maxKey) == unique.maxBy(_._2)._1)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798599
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n        val maxWord = maxWords.head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).head\n        val maxWordWithMaxCharsFirstInLex = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsFirstInLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex = words.filter(_.length == maxChars).sortBy(_.length).reverse.tail.tail.tail.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplwz1wbcw.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplwz1wbcw.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798599
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length == max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpngf49pe7.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpngf49pe7.scala:39:107 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\u001b[0m = words.filter(_.length == max\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Int and (Int, Int) => Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpngf49pe7.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659798600
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val chars = words.map(_.toChar).distinct\n        val maxChars = chars.max\n        val maxWord = words.filter(_.toChar == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile(_.toChar == maxChars).takeWhile\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4wajz0x8.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mchars\u001b[0m = words.map(_.toChar).distinct\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4wajz0x8.scala:16:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxChars\u001b[0m = chars.max\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mChar\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4wajz0x8.scala:17:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = words.filter(_.toChar == maxChars)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4wajz0x8.scala:18:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxChars\u001b[0m = words.filter(_.toChar == maxChars).head\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4wajz0x8.scala:19:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithMaxCharsAndMaxWord\u001b[0m = words.filter(_.toChar == maxChars).takeWhile(_.toChar == maxChars).head\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4wajz0x8.scala:19:91 -----------------",
      "stdout": "",
      "timestamp": 1659798602
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).min\n        val maxWordWithCount = words.filter(_.length == maxCount).max\n        val maxWordWithCountWithMax = words.filter(_.length == maxCount).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4t3thjo.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi4t3thjo.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length).maxBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi4t3thjo.scala:20:104 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi4t3thjo.scala:20:111 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordWithCountWithMaxWithMax\u001b[0m = words.filter(_.length == maxCount).maxBy(_.length).maxBy(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b",
      "stdout": "",
      "timestamp": 1659798601
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n        val maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).head\n        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).sortBy(word => word).head\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5fsmxft.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798601
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size == maxCount).min\n        val maxWordString = maxWord.mkString(\"\")\n        val maxWordLength = maxWordString.length\n        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsSet = maxWordChars.toSet\n        val maxWordCharsSetLength = maxWordCharsSet.length\n        val maxWordCharsSetSet = maxWordCharsSet.toSet\n        val maxWordCharsSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWordCharsSetSet.length\n        val maxWordCharsSetSetSetLength = maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmperkvkf_y.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsSetSetSetLength\u001b[0m = maxWordCharsSetSet.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsSetSetSetLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsSetSetSetLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmperkvkf_y.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsSetSetSetLength\u001b[0m = maxWordCharsSetSet.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsSetSetSetLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsSetSetSetLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmperkvkf_y.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsSetSetSetLength\u001b[0m = maxWordCharsSetSet.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsSetSetSetLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsSetSetSetLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmperkvkf_y.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordCharsSetSetSetLength\u001b[0m = maxWordCharsSetSet.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordCharsSetSetSetLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordCharsSetSetSetLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the",
      "stdout": "",
      "timestamp": 1659798602
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val maxCountMap = mutable.Map[String, Int]()\n        words.foreach(word => {\n            val count = maxCountMap.getOrElse(word, 0) + 1;\n            maxCountMap += (word -> (count))\n        })\n        val maxCount = maxCountMap.maxBy(_._2)._1\n        val maxWord = maxCountMap.maxBy(_._2)._2\n        val maxWords = maxCountMap.filter(_._2 == maxCount).map(_._1)\n        val maxWordsSorted = maxWords.sortWith(_ < _)\n        val maxWordsSortedFirst = maxWordsSorted.head\n        val maxWordsSortedFirstIndex = words.indexOf(maxWordsSortedFirst)\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.size else maxWordsSortedFirstIndex\n        val maxWordsSortedFirstIndex = if (maxWordsSortedFirstIndex == -1) words.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprd1uiy0i.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprd1uiy0i.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordsSortedFirstIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordsSortedFirstIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordsSortedFirstIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordsSortedFirstIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordsSortedFirstIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprd1uiy0i.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordsSortedFirstIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordsSortedFirstIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordsSortedFirstIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordsSortedFirstIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordsSortedFirstIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprd1uiy0i.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWordsSortedFirstIndex\u001b[0m = \u001b[33mif\u001b[0m (maxWordsSortedFirstIndex == -\u001b[31m1\u001b[0m) words.size \u001b[33melse\u001b[0m maxWordsSortedFirstIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxWordsSortedFirstIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxWordsSortedFirstIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded met",
      "stdout": "",
      "timestamp": 1659798602
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount = words.map(x => x.distinct).flatten.toSet.max\n        val maxWord = words.filter(x => x.distinct.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.findMax(tmph77ctf9k.scala:17)\n\tat Problem$.main(tmph77ctf9k.scala:22)\n\tat Problem.main(tmph77ctf9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798603
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(x => x.distinct).distinct\n        val maxCount = unique.map(x => x.size).max\n        val maxWord = unique.filter(x => x.size == maxCount).head\n        unique.filter(x => x.size == maxCount).sortWith(_ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpienli7iq.scala:23)\n\tat Problem.main(tmpienli7iq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798603
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n        uniqueChars.find(_ == maxCount) match {\n            case Some(count) => maxWord\n            case None => \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphx10hjul.scala:25)\n\tat Problem.main(tmphx10hjul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659798603
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.length).distinct\n        val max = unique.max\n        val index = unique.indexOfMax\n        if (index != -1)\n            words(index)\n        else\n            \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuz30x302.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = unique.indexOfMax\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue indexOfMax is not a member of List[Int] - did you mean unique.indexOf?\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798603
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = mutable.HashSet[String]()\n        val maxWord = mutable.HashMap[String, Int]()\n        words.foreach(word => {\n            val count = unique.count(_ == word)\n            if (count > maxWord(word)) {\n                maxWord(word) = count\n            }\n            unique += word\n        })\n        val maxCount = maxWord.maxBy(_._2)\n        val maxWords = maxWord.filter(_._2 == maxCount).map(_._1)\n        if (maxWords.isEmpty) \"\"\n        else maxWords.min\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwxzmyu5.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36munique\u001b[0m = mutable.HashSet[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwxzmyu5.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxWord\u001b[0m = mutable.HashMap[\u001b[35mString\u001b[0m, \u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659798601
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val unique = words.map(_.distinct).map(_.size).max\n        val maxWord = words.filter(_.distinct.size == unique)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.length < b.length)(0)\n        val maxWordWithMaxCharsAndFirst = maxWordWithMaxChars.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        maxWordWithMaxCharsAndFirst\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkoprp_zf.scala:19:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        maxWordWithMaxCharsAndFirst\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (maxWordWithMaxCharsAndFirst : Char)\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659798603
    }
  ]
}