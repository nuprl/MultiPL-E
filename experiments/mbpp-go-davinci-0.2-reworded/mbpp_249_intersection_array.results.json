{
  "name": "mbpp_249_intersection_array",
  "language": "go_test.go",
  "prompt": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums = append(array_nums, num1)\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510147,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var intersection_array []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                intersection_array = append(intersection_array, num1)\n            }\n        }\n    }\n    return intersection_array\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510147,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510147,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums = append(array_nums, num1)\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                array_result = append(array_result, num)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, vv := range array_nums2 {\n            if v == vv {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, value := range array_nums1 {\n        for _, value2 := range array_nums2 {\n            if value == value2 {\n                array_result = append(array_result, value)\n                break\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var ret []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                ret = append(ret, num1)\n            }\n        }\n    }\n    return ret\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums1 = make(map[int]int)\n    var map_nums2 = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums1[num] = 1\n    }\n    for _, num := range array_nums2 {\n        map_nums2[num] = 1\n    }\n    for num, _ := range map_nums1 {\n        if _, ok := map_nums2[num]; ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "--- FAIL: TestIntersection_Array (0.00s)\n    --- FAIL: TestIntersection_Array/test_num__0 (0.00s)\n        tmpq4b4c4n5_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums = append(array_nums, num1)\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums1 = make(map[int]int)\n    var map_nums2 = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums1[num] = 1\n    }\n    for _, num := range array_nums2 {\n        map_nums2[num] = 1\n    }\n    for num, _ := range map_nums1 {\n        if _, ok := map_nums2[num]; ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "--- FAIL: TestIntersection_Array (0.00s)\n    --- FAIL: TestIntersection_Array/test_num__0 (0.00s)\n        tmpq4b4c4n5_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                array_nums = append(array_nums, array_nums1[i])\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if map_nums[num] == 1 {\n            result = append(result, num)\n            map_nums[num] = 2\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, v := range array_nums1 {\n        for _, vv := range array_nums2 {\n            if v == vv {\n                array_result = append(array_result, v)\n                break\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v1 := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v1 == v2 {\n                result = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if _, ok := map_nums[num]; ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                array_nums = append(array_nums, array_nums1[i])\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]bool)\n\n    for _, num := range array_nums1 {\n        map_nums[num] = true\n    }\n\n    for _, num := range array_nums2 {\n        if map_nums[num] {\n            result = append(result, num)\n            map_nums[num] = false\n        }\n    }\n\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums_intersection = append(array_nums_intersection, num1)\n            }\n        }\n    }\n    return array_nums_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if _, ok := map_nums[num]; ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums = append(array_nums, num1)\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n                break\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if map_nums[num] == 1 {\n            result = append(result, num)\n            map_nums[num] = 2\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    nums1 := make(map[int]int)\n    nums2 := make(map[int]int)\n    result := make(map[int]int)\n    for _, v := range array_nums1 {\n        nums1[v] = v\n    }\n    for _, v := range array_nums2 {\n        nums2[v] = v\n    }\n    for k, _ := range nums1 {\n        if _, ok := nums2[k]; ok {\n            result[k] = k\n        }\n    }\n    var result_array []int\n    for _, v := range result {\n        result_array = append(result_array, v)\n    }\n    return result_array\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "--- FAIL: TestIntersection_Array (0.00s)\n    --- FAIL: TestIntersection_Array/test_num__0 (0.00s)\n        tmpuc0174f6_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestIntersection_Array/test_num__1 (0.00s)\n        tmpuc0174f6_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]', got '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_nums []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_nums = append(array_nums, num1)\n            }\n        }\n    }\n    return array_nums\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n                break\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]bool)\n    for _, num := range array_nums1 {\n        map_nums[num] = true\n    }\n    for _, num := range array_nums2 {\n        if map_nums[num] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if map_nums[num] == 1 {\n            result = append(result, num)\n            map_nums[num] = 2\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, v := range array_nums1 {\n        for _, v2 := range array_nums2 {\n            if v == v2 {\n                result = append(result, v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510146,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    // \u521b\u5efa\u4e00\u4e2amap\n    nums_map := make(map[int]int)\n    // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4\n    nums_array := make([]int, 0)\n    // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4\n    nums_array_map := make([]int, 0)\n    // \u5faa\u73af\u7b2c\u4e00\u4e2a\u6570\u7ec4\n    for _, num := range array_nums1 {\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if _, ok := nums_map[num]; !ok {\n            // \u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u5230map\u4e2d\n            nums_map[num] = 1\n            // \u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d\n            nums_array = append(nums_array, num)\n        }\n    }\n    // \u5faa\u73af\u7b2c\u4e8c\u4e2a\u6570\u7ec4\n    for _, num := range array_nums2 {\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if _, ok := nums_map[num]; ok {\n            // \u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u5230map\u4e2d\n            nums_map[num] = 2\n            // \u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d\n            nums_array_map = append(nums_array_map, num)\n        }\n    }\n    // \u5faa\u73afmap\n    for _, num := range nums_array {\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\n        if nums_map[num] == 2 {\n            // \u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u5230map\u4e2d\n            nums_array_map = append(nums_array_map, num)\n        }\n    }\n    // \u8fd4\u56de\u6570\u7ec4\n    return nums_array_map\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "--- FAIL: TestIntersection_Array (0.00s)\n    --- FAIL: TestIntersection_Array/test_num__0 (0.00s)\n        tmp4hfz0kg5_test.go:63: expected '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestIntersection_Array/test_num__1 (0.00s)\n        tmp4hfz0kg5_test.go:63: expected '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestIntersection_Array/test_num__2 (0.00s)\n        tmp4hfz0kg5_test.go:63: expected '[%!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123246,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}