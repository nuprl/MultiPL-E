{
  "name": "mbpp_640_remove_parenthesis",
  "language": "go_test.go",
  "prompt": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var open_parenthesis_count int\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis_count++\n        } else if item == \")\" {\n            open_parenthesis_count--\n        } else if open_parenthesis_count == 0 {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \")\" {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            }\n        } else if item == \"(\" {\n            stack = append(stack, item)\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n",
    "    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n"
  ]
}