{
  "name": "mbpp_777_find_sum",
  "language": "go_test.go",
  "prompt": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int = 0\n    var i, j int\n    for i = 0; i < len(arr); i++ {\n        for j = 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                break\n            }\n        }\n        if j == len(arr) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpsm4t6h9t_test.go:40: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpsm4t6h9t_test.go:40: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpsm4t6h9t_test.go:40: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i - 1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var seen = make(map[int]bool)\n\n    for _, v := range arr {\n        if !seen[v] {\n            sum += v\n            seen[v] = true\n        }\n    }\n\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp187g9g2a_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        var found bool = false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmppihmi06y_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmppihmi06y_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmppihmi06y_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, val := range arr {\n        sum += val\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] && i != j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i - 1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var m = make(map[int]int)\n\n    for _, v := range arr {\n        m[v]++\n    }\n\n    for k, v := range m {\n        if v == 1 {\n            sum += k\n        }\n    }\n\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmph0569cgo_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmph0569cgo_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmph0569cgo_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        found := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] && i != j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum = arr[i]\n        } else {\n            sum = sum + arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmphk2sf4bw_test.go:36: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmphk2sf4bw_test.go:36: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmphk2sf4bw_test.go:36: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for _, v2 := range arr {\n            if v == v2 {\n                v = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v != 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp1dyze5r1_test.go:34: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp1dyze5r1_test.go:34: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp1dyze5r1_test.go:34: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int = 0\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(arr); i++ {\n        for j = 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                break\n            }\n        }\n        if j == len(arr) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpmwu7t7gm_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpmwu7t7gm_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpmwu7t7gm_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        is_repeated := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[i+1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\npanic: runtime error: index out of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_sum(...)\n\t/tmp/tmpytusr53m_test.go:12\ncommand-line-arguments_test.TestFind_Sum(0xc000001380)\n\t/tmp/tmpytusr53m_test.go:26 +0x52c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 || arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, num := range arr {\n        if num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp69ory7ea_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp69ory7ea_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp69ory7ea_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        found := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var i, j int\n    for i = 0; i < len(arr); i++ {\n        for j = 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                break\n            }\n        }\n        if j == len(arr) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpgr_jwuiq_test.go:40: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpgr_jwuiq_test.go:40: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpgr_jwuiq_test.go:40: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int = 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp79moh_g1_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp79moh_g1_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp79moh_g1_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, val := range arr {\n        sum += val\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpuuhyiayd_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        is_repeated := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6a9f4kij_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6a9f4kij_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6a9f4kij_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 1; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if !contains(arr[:i], arr[i]) && !contains(arr[i+1:], arr[i]) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpylscnsl9_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_sum(...)\n\t/tmp/tmp1n5mm557_test.go:12\ncommand-line-arguments_test.TestFind_Sum(0xc000102600)\n\t/tmp/tmp1n5mm557_test.go:26 +0x52c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 || arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmphqgygvt4_test.go:34: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmphqgygvt4_test.go:34: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmphqgygvt4_test.go:34: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] && i != j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmps5wqg7xf_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if !contains(arr, v) {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpip7iv_k__test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i - 1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i - 1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpbtpeusie_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpbtpeusie_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpbtpeusie_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i - 1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp50gffo65_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i == j {\n                continue\n            }\n            if arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp_sfnemtp_test.go:44: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp_sfnemtp_test.go:44: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp_sfnemtp_test.go:44: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        is_repeated := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var seen = make(map[int]bool)\n    for _, val := range arr {\n        if !seen[val] {\n            sum += val\n            seen[val] = true\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for _, v2 := range arr {\n            if v == v2 {\n                v = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpih558b3f_test.go:40: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        found := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp8yuf0o1v_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var i int\n    for i = 0; i < len(arr); i++ {\n        var j int\n        var found bool\n        for j = 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpwpn09dka_test.go:43: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpwpn09dka_test.go:43: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpwpn09dka_test.go:43: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if !contains(arr, v) {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpip7iv_k__test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        var found bool\n        for _, v2 := range arr {\n            if v == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpqgzkajpd_test.go:41: expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpqgzkajpd_test.go:41: expected '%!s(int=71)', got '%!s(int=0)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpqgzkajpd_test.go:41: expected '%!s(int=78)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        is_repeated := false\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp4szt5caq_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_sum(...)\n\t/tmp/tmp1n5mm557_test.go:12\ncommand-line-arguments_test.TestFind_Sum(0xc000102600)\n\t/tmp/tmp1n5mm557_test.go:26 +0x52c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[i+1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\npanic: runtime error: index out of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_sum(...)\n\t/tmp/tmpcuowadxn_test.go:12\ncommand-line-arguments_test.TestFind_Sum(0xc000001380)\n\t/tmp/tmpcuowadxn_test.go:26 +0x52c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, val := range arr {\n        sum += val\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpjjxv06ah_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpjjxv06ah_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpjjxv06ah_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp6ovt6g82_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpaqsyix35_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpaqsyix35_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpaqsyix35_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        sum += v\n        for i := 0; i < len(arr); i++ {\n            if arr[i] == v {\n                arr[i] = 0\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    var i int\n    var j int\n    for i = 0; i < len(arr); i++ {\n        for j = 0; j < len(arr); j++ {\n            if arr[i] == arr[j] && i != j {\n                break\n            }\n        }\n        if j == len(arr) {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpig4g85eb_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpig4g85eb_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpig4g85eb_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        var found bool\n        for j := 0; j < len(arr); j++ {\n            if i != j && arr[i] == arr[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=21)', got '%!s(int=20)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=71)', got '%!s(int=57)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmplb60auon_test.go:41: expected '%!s(int=78)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0oahymi4_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpf3zrr5na_test.go:36: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else {\n            if arr[i] != arr[i-1] {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp0zjehefy_test.go:38: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpygdlgo9b_test.go:34: expected '%!s(int=78)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if i == 0 || arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmpadtpt6g5_test.go:34: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i-1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123860,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmppbmpct1q_test.go:36: expected '%!s(int=21)', got '%!s(int=22)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmppbmpct1q_test.go:36: expected '%!s(int=71)', got '%!s(int=85)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmppbmpct1q_test.go:36: expected '%!s(int=78)', got '%!s(int=143)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509770,
      "stdout": "--- FAIL: TestFind_Sum (0.00s)\n    --- FAIL: TestFind_Sum/test_num__0 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=21)', got '%!s(int=23)'\n    --- FAIL: TestFind_Sum/test_num__1 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=71)', got '%!s(int=95)'\n    --- FAIL: TestFind_Sum/test_num__2 (0.00s)\n        tmp2myl6cpe_test.go:32: expected '%!s(int=78)', got '%!s(int=153)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}