{
  "name": "mbpp_95_Find_Min_Length",
  "language": "go_test.go",
  "prompt": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min {\n            min = len(sub_lst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min {\n            min = len(sub_lst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for i := 1; i < len(lst); i++ {\n        if len(lst[i]) < min {\n            min = len(lst[i])\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int\n    for i, v := range lst {\n        if i == 0 {\n            min = len(v)\n        } else {\n            if len(v) < min {\n                min = len(v)\n            }\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min {\n            min = len(sub_lst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min {\n            min = len(l)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_len {\n            min_len = len(l)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_len {\n            min_len = len(l)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min {\n            min = len(sub_lst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_length {\n            min_length = len(sub_lst)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_length {\n            min_length = len(l)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_len {\n            min_len = len(l)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_length {\n            min_length = len(l)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int\n    for _, v := range lst {\n        if min == 0 || len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min {\n            min = len(sub_lst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int\n    for i, v := range lst {\n        if i == 0 {\n            min = len(v)\n        } else {\n            if len(v) < min {\n                min = len(v)\n            }\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, l := range lst {\n        if len(l) < min_len {\n            min_len = len(l)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, list := range lst {\n        if len(list) < min_length {\n            min_length = len(list)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, sublst := range lst {\n        if len(sublst) < min {\n            min = len(sublst)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_len {\n            min_len = len(v)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_length {\n            min_length = len(sub_lst)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_length {\n            min_length = len(sub_lst)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    var min int = len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min_length {\n            min_length = len(v)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_len := len(lst[0])\n    for _, sub_lst := range lst {\n        if len(sub_lst) < min_len {\n            min_len = len(sub_lst)\n        }\n    }\n    return min_len\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, i := range lst {\n        if len(i) < min {\n            min = len(i)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min_length := len(lst[0])\n    for _, sublst := range lst {\n        if len(sublst) < min_length {\n            min_length = len(sublst)\n        }\n    }\n    return min_length\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n    min := len(lst[0])\n    for _, v := range lst {\n        if len(v) < min {\n            min = len(v)\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510555,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}