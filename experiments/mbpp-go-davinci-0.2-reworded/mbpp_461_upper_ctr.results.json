{
  "name": "mbpp_461_upper_ctr",
  "language": "go_test.go",
  "prompt": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpyx87lehe_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpyx87lehe_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmppix49sqb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmppix49sqb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu_fqokch_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu_fqokch_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var upper_ctr int = 0\n    for _, char := range str {\n        if char >= 65 && char <= 90 {\n            upper_ctr++\n        }\n    }\n    return upper_ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpssac9iqe_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpssac9iqe_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmprlplk5nw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu2_u9jag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpj46a_kz2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpk0hdqcvx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpdgq_b0nx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var upper_ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            upper_ctr++\n        }\n    }\n    return upper_ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpl2pn23lx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpl2pn23lx_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp5_oe7vj2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4eed40xb_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123498,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpu83wgw27_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp06slall8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp4tqnjffl_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}