{
  "name": "mbpp_407_rearrange_bigger",
  "language": "go_test.go",
  "prompt": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n%10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for _, d := range digits {\n        res = res*10 + d\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmpcvl01x_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmpcvl01x_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return digits\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp337tdb8j_test.go:45: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp337tdb8j_test.go:45: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp337tdb8j_test.go:45: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpv7soisjb_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpv7soisjb_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp__n1ew14_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp__n1ew14_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9fd8dnqn_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9fd8dnqn_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    // convert to string\n    s := fmt.Sprintf(\"%d\", n)\n    // convert to []byte\n    b := []byte(s)\n    // find the first digit that is smaller than the digit to its right\n    var i int\n    for i = len(b) - 1; i > 0; i-- {\n        if b[i] > b[i-1] {\n            break\n        }\n    }\n    // if no such digit, return -1\n    if i == 0 {\n        return -1\n    }\n    // find the smallest digit to the right of i that is larger than b[i-1]\n    var j int\n    for j = i; j < len(b); j++ {\n        if b[j] < b[i-1] {\n            break\n        }\n    }\n    // swap b[i-1] and b[j]\n    b[i-1], b[j] = b[j], b[i-1]\n    // reverse the digits from i to the end\n    for k := i; k < len(b)-1-k+i; k++ {\n        b[k], b[len(b)-1-k+i] = b[len(b)-1-k+i], b[k]\n    }\n    // convert back to int\n    return fmt.Sprintf(\"%d\", b)\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc0001c4000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc0001c4000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.rearrange_bigger(0xc, 0x4cd164, 0x5fa160)\n\t/tmp/tmpo8z0wnla_test.go:33 +0x26a\ncommand-line-arguments_test.TestRearrange_Bigger(0xc0001a0300)\n\t/tmp/tmpo8z0wnla_test.go:49 +0x47\ntesting.tRunner(0xc0001a0300, 0x54f208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp1glwd0d0_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp1glwd0d0_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp1glwd0d0_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9aldf7pe_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9aldf7pe_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[j], digits[i] = digits[i], digits[j]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            var result int\n            for _, v := range digits {\n                result = result * 10 + v\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpj4lubaa6_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpj4lubaa6_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpj4lubaa6_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i - 1] < digits[i] {\n            digits[i - 1], digits[i] = digits[i], digits[i - 1]\n            return digitsToInt(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphphsk81b_test.go:21:20: undefined: digitsToInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpa_th7ve2_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpa_th7ve2_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpg173ovqx_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpg173ovqx_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqrpoow89_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqrpoow89_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return \"Negative numbers are not allowed\"\n    }\n    if n < 10 {\n        return \"No bigger number possible\"\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpew0a_z87_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpew0a_z87_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpew0a_z87_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j + 1] {\n                    digits[j], digits[j + 1] = digits[j + 1], digits[j]\n                }\n            }\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpdm2tv9gl_test.go:56: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdm2tv9gl_test.go:56: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdm2tv9gl_test.go:56: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmtob9jlo_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmtob9jlo_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp76to_ewr_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp76to_ewr_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return digits\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp4exi_wmn_test.go:45: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4exi_wmn_test.go:45: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4exi_wmn_test.go:45: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122840,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphdui18d9_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphdui18d9_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpsh1gqd6o_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpsh1gqd6o_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpeq_ygnqd_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpeq_ygnqd_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            return digitsToNumber(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122840,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvpenwcow_test.go:21:20: undefined: digitsToNumber\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpcj43jpya_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpcj43jpya_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpd7pihz78_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpd7pihz78_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j + 1] {\n                    digits[j], digits[j + 1] = digits[j + 1], digits[j]\n                }\n            }\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpib3tbnig_test.go:56: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpib3tbnig_test.go:56: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return nil\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmptd3k2exr_test.go:45: expected '%!s(int=21)', got '%!s(<nil>)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptd3k2exr_test.go:45: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptd3k2exr_test.go:45: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            for j := len(digits) - 1; j >= i; j-- {\n                if digits[j] > digits[i - 1] {\n                    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n                    break\n                }\n            }\n\n            for j := 0; j < (len(digits) - i) / 2; j++ {\n                digits[i + j], digits[len(digits) - 1 - j] = digits[len(digits) - 1 - j], digits[i + j]\n            }\n\n            result := 0\n            for _, digit := range digits {\n                result = result * 10 + digit\n            }\n\n            return result\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmptsc240fj_test.go:60: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptsc240fj_test.go:60: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptsc240fj_test.go:60: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphrpffjob_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122840,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n%10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpiq6kg55r_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpiq6kg55r_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    var digits []int\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpuu5q0j2l_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpuu5q0j2l_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpuu5q0j2l_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n%10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp8fz8069n_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8fz8069n_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8fz8069n_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122840,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4lusnh7r_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjvgln6fq_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjvgln6fq_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjvgln6fq_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpm4alt0vu_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpm4alt0vu_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpu1e5brj3_test.go:55: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpu1e5brj3_test.go:55: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpu1e5brj3_test.go:55: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpnzoey003_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpnzoey003_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122842,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmprat44s79_test.go:43: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmprat44s79_test.go:43: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmprat44s79_test.go:43: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpcybgqw2a_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpcybgqw2a_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvsp3acoh_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvsp3acoh_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    if digits[0] == 0 {\n        return -1\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjvcnir8t_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjvcnir8t_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbp47u6l2_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbp47u6l2_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpeq_ygnqd_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpeq_ygnqd_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptodc8ws0_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptodc8ws0_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    if n < 10 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpf1d70qvr_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpf1d70qvr_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpf1d70qvr_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpllwbg_hp_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpllwbg_hp_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u633gss_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqyhrhsx2_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpy_1ywx3u_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpy_1ywx3u_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpy_1ywx3u_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return toInt(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprfhdd11b_test.go:21:20: undefined: toInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j + 1] {\n                    digits[j], digits[j + 1] = digits[j + 1], digits[j]\n                }\n            }\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8al8f6xc_test.go:56: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8al8f6xc_test.go:56: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpickke6vi_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpickke6vi_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpat7q9vpq_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqgfl5pla_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqgfl5pla_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i+1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j+1] {\n                    digits[j], digits[j+1] = digits[j+1], digits[j]\n                }\n            }\n\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n\n            return result\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwv0swbtl_test.go:62: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwv0swbtl_test.go:62: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwv0swbtl_test.go:62: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp1ldfhozc_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp1ldfhozc_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp1ldfhozc_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9f3g26_4_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    if n < 10 {\n        return nil\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpcoinq9r6_test.go:53: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpcoinq9r6_test.go:53: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var r int\n    for i := 0; i < len(digits); i++ {\n        r = r * 10 + digits[i]\n    }\n    return r\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpls2xy5rt_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpls2xy5rt_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_number(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqc953yks_test.go:21:20: undefined: to_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp4ltfplz8_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4ltfplz8_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4ltfplz8_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    for i := 0; i < len(digits) / 2; i++ {\n        digits[i], digits[len(digits) - 1 - i] = digits[len(digits) - 1 - i], digits[i]\n    }\n    var res int\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpl33_jkrn_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpl33_jkrn_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpl33_jkrn_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    l := len(digits)\n    for i := l - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < l; i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8_o5alod_test.go:47: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8_o5alod_test.go:47: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp2eukvehm_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp2eukvehm_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp1b675bz1_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp1b675bz1_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp1b675bz1_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_number(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptnptuq9__test.go:23:20: undefined: to_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvd8a68lf_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i+1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbl_ucqsv_test.go:61: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbl_ucqsv_test.go:61: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmphaeec40e_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphaeec40e_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphaeec40e_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}