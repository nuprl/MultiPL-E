{
  "name": "mbpp_802_count_rotation",
  "language": "go_test.go",
  "prompt": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    var min int = arr[0]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            count = i\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpw716mxo5_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpw716mxo5_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the smallest element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpkp14zjac_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpkp14zjac_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpkdq60k9q_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpkdq60k9q_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpj_1d4zt__test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpj_1d4zt__test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum value\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_q4o3paq_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp_q4o3paq_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else {\n            return 3\n        }\n    }\n\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else {\n            return 4\n        }\n    }\n\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else {\n            return 5\n        }\n    }\n\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else if arr[4] > arr[5] {\n            return 5\n        } else {\n            return 6\n        }\n    }\n\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509798,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6hiv_72q_test.go:85:33: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the smallest element\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    n := len(arr)\n    low := 0\n    high := n - 1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low + high) / 2\n        next := (mid + 1) % n\n        prev := (mid + n - 1) % n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp67wk_eww_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp67wk_eww_test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the index of the smallest element in the array.\n    // This is the number of rotations required.\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_pa303ob_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp_pa303ob_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] < arr[mid-1] {\n        return mid\n    }\n    if arr[mid] > arr[mid-1] {\n        return count_rotation(arr[mid:])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp11lr7ymk_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp11lr7ymk_test.go:56: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp11lr7ymk_test.go:56: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp11lr7ymk_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp11lr7ymk_test.go:56: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        return 1\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        if arr[4] > arr[5] {\n            return 6\n        }\n        return 1\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpduuk0hmr_test.go:90:6: expected '(', found TestCount_Rotation\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpa2yqe_26_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpa2yqe_26_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the smallest element\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpj_1d4zt__test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpj_1d4zt__test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    // the pivot is the index of the smallest element in the array\n    var pivot int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < arr[pivot] {\n            pivot = i\n        }\n    }\n    return pivot\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp9n702ev9_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp9n702ev9_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else {\n            return 3\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else {\n            return 4\n        }\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else {\n            return 5\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else if arr[4] > arr[5] {\n            return 5\n        } else {\n            return 6\n        }\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124048,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpccixmyh0_test.go:78:33: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    if arr[0] < arr[1] {\n        return 1\n    }\n\n    if arr[len(arr) - 1] > arr[0] {\n        return len(arr)\n    }\n\n    return count_rotation(arr[1:]) + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp3xbvcql9_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp3xbvcql9_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp3xbvcql9_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp3xbvcql9_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp3xbvcql9_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp67wk_eww_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp67wk_eww_test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000142000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000142000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp3y0gw__s_test.go:27\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp3y0gw__s_test.go:45 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the pivot\n    var pivot int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            pivot = i\n            break\n        }\n    }\n    return pivot + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmplf9xz2ru_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpj_1d4zt__test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpj_1d4zt__test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum value in the array\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp35j1n6ng_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp35j1n6ng_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the smallest element\n    var min_index int\n    min_index = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp64oxcmra_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp64oxcmra_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    var pivot int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            pivot = i\n            break\n        }\n    }\n    return pivot + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpx8zfdqzd_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    var mid int = len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid+1:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpt5tf1us0_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpt5tf1us0_test.go:51: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpt5tf1us0_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpt5tf1us0_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpkdq60k9q_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpkdq60k9q_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // TODO: Implement\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp57wjn62m_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp57wjn62m_test.go:31: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp57wjn62m_test.go:31: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp57wjn62m_test.go:31: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum element\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp1kag1blf_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp1kag1blf_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i, v := range arr {\n        if v < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpgfj4pee5_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpgfj4pee5_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp6xium1zt_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element in the array\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmplbwpxijc_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmplbwpxijc_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    var count int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpjf1rnjpl_test.go:13\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpjf1rnjpl_test.go:31 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    var pivot int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            pivot = i + 1\n            break\n        }\n    }\n    return pivot\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the minimum element in the array.\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpuei6lfmi_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpuei6lfmi_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpymd2f227_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpav5n5c1u_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpav5n5c1u_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpymd2f227_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpymd2f227_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    // the pivot is the index of the smallest element\n    pivot := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[pivot] {\n            pivot = i\n        }\n    }\n    return pivot\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpvu1jxnqc_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpvu1jxnqc_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low + high) / 2\n        next := (mid + 1) % len(arr)\n        prev := (mid + len(arr) - 1) % len(arr)\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    var pivot int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            pivot = i\n            break\n        }\n    }\n    return pivot + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp4fpk7n1z_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp67wk_eww_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp67wk_eww_test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpj_1d4zt__test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpj_1d4zt__test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpuy99i02x_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpz9t7i961_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpz9t7i961_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid + 1:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_he3l850_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp_he3l850_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp_he3l850_test.go:52: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp_he3l850_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp_he3l850_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp67wk_eww_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp67wk_eww_test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpymd2f227_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpxrvaqf5q_test.go:25\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpxrvaqf5q_test.go:43 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the smallest number\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmphuokk3sg_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmphuokk3sg_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpz9t7i961_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpz9t7i961_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the minimum element in the array\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp61y6_ty3_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp61y6_ty3_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpk02ytxrp_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpk02ytxrp_test.go:29 +0x5c5\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Initialize count of rotations\n    var rotations int = 0\n    var n int = len(arr)\n\n    // We basically find index of minimum element\n    var min int = arr[0]\n    for i := 0; i < n; i++ {\n        if (arr[i] < min) {\n            min = arr[i]\n            rotations = i\n        }\n    }\n\n    return rotations\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpystavark_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpystavark_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum element\n    min := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min] {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmptlgvzw8l_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmptlgvzw8l_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124050,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpav5n5c1u_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpav5n5c1u_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp67wk_eww_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmp67wk_eww_test.go:26 +0x606\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    var pivot int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            pivot = i\n            break\n        }\n    }\n    return pivot + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpx8zfdqzd_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum value in the array\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpbvabfzxr_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpbvabfzxr_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    n := len(arr)\n    low := 0\n    high := n-1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low+high)/2\n        next := (mid+1)%n\n        prev := (mid+n-1)%n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid-1\n        } else if arr[mid] >= arr[low] {\n            low = mid+1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i, v := range arr {\n        if i > 0 && v < arr[i-1] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpav1x0d4e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpav1x0d4e_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpk02ytxrp_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpk02ytxrp_test.go:29 +0x5c5\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjihewvao_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpbii7f28e_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a0300)\n\t/tmp/tmpbii7f28e_test.go:30 +0x626\ntesting.tRunner(0xc0001a0300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpd8_q4i3c_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpd8_q4i3c_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the minimum element in the array\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpxpoqtukx_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpxpoqtukx_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the smallest element\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjrtfnxnt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the pivot\n    var pivot int\n    for i := 0; i < len(arr)-1; i++ {\n        if arr[i] > arr[i+1] {\n            pivot = i\n            break\n        }\n    }\n    return pivot+1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpykq2lfa0_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min] {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpuffaae_p_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpuffaae_p_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var i, n int\n    n = len(arr)\n    for i = 0; i < n - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpp27zoo50_test.go:37: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the minimum element in the array\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124049,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmplbwpxijc_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmplbwpxijc_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpvvsf9ky0_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpvvsf9ky0_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] < arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid+1] {\n            return mid + 1\n        } else if arr[mid] < arr[left] {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124052,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmph5s3cuwm_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmph5s3cuwm_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // Find the index of the smallest element in the array\n    var min_index int = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124053,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpbn_li89b_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpbn_li89b_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum element in the array\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124053,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp1ospekyk_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp1ospekyk_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpttbuv3kq_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpttbuv3kq_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509800,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpf3xca52x_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpf3xca52x_test.go:30 +0x626\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}