{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "go_test.go",
  "prompt": "package last_Digit_Factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last digit in factorial of a given number.\nfunc last_Digit_Factorial(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "func TestLast_Digit_Factorial(t *testing.T) {\n  candidate := last_Digit_Factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 4 },\n     { actual: candidate(21), expected: 0 },\n     { actual: candidate(30), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n < 0 {\n        return -1\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    if n < 0 {\n        return 0\n    }\n    if n <= 1 {\n        return 1\n    }\n    return (n * last_Digit_Factorial(n-1)) % 10\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n-1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    // Your code goes here\n    return 0\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    return n * last_Digit_Factorial(n - 1)\n}\n"
  ]
}