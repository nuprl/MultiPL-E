{
  "name": "mbpp_259_maximize_elements",
  "language": "go_test.go",
  "prompt": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to return\n    var ret_list []interface{}\n\n    // Iterate through the lists\n    for i := 0; i < len(test_tup1); i++ {\n        // If the first list is greater than the second list\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            // Append the first list to the return list\n            ret_list = append(ret_list, test_tup1[i])\n        } else {\n            // Append the second list to the return list\n            ret_list = append(ret_list, test_tup2[i])\n        }\n    }\n\n    // Return the return list\n    return ret_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmppdn590o8_test.go:16\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmppdn590o8_test.go:36 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Lengths of the two lists are not equal\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp679if5dz_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmp679if5dz_test.go:31 +0x1bf3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            test_tup3 = append(test_tup3, test_tup1[i])\n        } else {\n            test_tup3 = append(test_tup3, test_tup2[i])\n        }\n    }\n    return test_tup3\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp46xfkad6_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp46xfkad6_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] > test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpniohmhdj_test.go:12:25: invalid operation: test_tup1[i] > test_tup2[i] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"The two lists are not of the same length.\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp86ctcw5p_test.go:16 +0x2f5\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp86ctcw5p_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550230)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to hold the results.\n    result := make([]interface{}, len(test_tup1))\n    // Loop through the lists and compare the values.\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            result[i] = test_tup2[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp7vrtqr8c_test.go:14\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp7vrtqr8c_test.go:30 +0x18b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to store the results.\n    test_tup3 := make([]interface{}, len(test_tup1))\n    // Iterate over the two lists.\n    for i := 0; i < len(test_tup1); i++ {\n        // Check if the elements are of the same type.\n        if test_tup1[i].(type) == test_tup2[i].(type) {\n            // Check if the elements are of type int.\n            if test_tup1[i].(type) == 1 {\n                // Check if the first element is greater than the second.\n                if test_tup1[i].(int) > test_tup2[i].(int) {\n                    // Append the first element to the new list.\n                    test_tup3[i] = test_tup1[i]\n                } else {\n                    // Append the second element to the new list.\n                    test_tup3[i] = test_tup2[i]\n                }\n            } else {\n                // Check if the first element is greater than the second.\n                if test_tup1[i].(float64) > test_tup2[i].(float64) {\n                    // Append the first element to the new list.\n                    test_tup3[i] = test_tup1[i]\n                } else {\n                    // Append the second element to the new list.\n                    test_tup3[i] = test_tup2[i]\n                }\n            }\n        } else {\n            // Append the first element to the new list.\n            test_tup3[i] = test_tup1[i]\n        }\n    }\n    // Return the new list.\n    return test_tup3\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigxlbjjy_test.go:15:24: use of .(type) outside type switch\n/tmp/tmpigxlbjjy_test.go:17:28: use of .(type) outside type switch\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Error: The two lists must be of the same length.\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpyve8tcjm_test.go:16 +0x2f5\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpyve8tcjm_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550238)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc00011add0, 0x4, 0x4, 0xc00011ad90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpdxa753td_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmpdxa753td_test.go:28 +0x445\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to hold the results.\n    var result_list []interface{}\n    // Iterate through the lists and compare the elements.\n    for i := 0; i < len(test_tup1); i++ {\n        // Compare the elements.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            // Append the element from the first list.\n            result_list = append(result_list, test_tup1[i])\n        } else {\n            // Append the element from the second list.\n            result_list = append(result_list, test_tup2[i])\n        }\n    }\n    // Return the result list.\n    return result_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp73sl1_y1_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp73sl1_y1_test.go:34 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Initialize the result list\n    result := make([]interface{}, 0)\n    // Iterate over the first list\n    for _, val1 := range test_tup1 {\n        // Iterate over the second list\n        for _, val2 := range test_tup2 {\n            // Compare the values\n            if val1.(int) > val2.(int) {\n                result = append(result, val1)\n                break\n            } else {\n                result = append(result, val2)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp9gvg9zcb_test.go:17 +0x2d9\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp9gvg9zcb_test.go:36 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    if len(test_tup1) == len(test_tup2) {\n        for i := 0; i < len(test_tup1); i++ {\n            if test_tup1[i].(int) > test_tup2[i].(int) {\n                max_tup = append(max_tup, test_tup1[i])\n            } else {\n                max_tup = append(max_tup, test_tup2[i])\n            }\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpzi29ld8u_test.go:13\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmpzi29ld8u_test.go:30 +0x1bf3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            new_tup = append(new_tup, test_tup1[i])\n        } else {\n            new_tup = append(new_tup, test_tup2[i])\n        }\n    }\n    return new_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpr4_1ntgx_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpr4_1ntgx_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup2[i])\n        }\n    }\n    return result_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpib_y5k05_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpib_y5k05_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new slice to hold the results.\n    var result_tup []interface{}\n    // Iterate through the two lists.\n    for i := 0; i < len(test_tup1); i++ {\n        // Compare the two values.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            // Append the first value to the result.\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            // Append the second value to the result.\n            result_tup = append(result_tup, test_tup2[i])\n        }\n    }\n    // Return the result.\n    return result_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp7p18jvr1_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp7p18jvr1_test.go:34 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, len(test_tup1))\n    // Loop through the lists and compare the elements.\n    for i := 0; i < len(test_tup1); i++ {\n        // If the first element is greater than the second, add it to the result.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            result[i] = test_tup2[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp_fwttq06_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp_fwttq06_test.go:31 +0x18b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            ret_tup = append(ret_tup, test_tup1[i])\n        } else {\n            ret_tup = append(ret_tup, test_tup2[i])\n        }\n    }\n    return ret_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpyz2iusld_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpyz2iusld_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to store the results.\n    result := make([]interface{}, len(test_tup1))\n\n    // Iterate over the two lists and compare the elements.\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            result[i] = test_tup2[i]\n        }\n    }\n\n    // Return the result.\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp59xobl0c_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp59xobl0c_test.go:33 +0x18b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var max_val int\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_val = test_tup1[i].(int)\n        } else {\n            max_val = test_tup2[i].(int)\n        }\n        result = append(result, max_val)\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6iu0ntgt_test.go:13 +0x20a\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp6iu0ntgt_test.go:30 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] > test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3f1kysm_test.go:12:25: invalid operation: test_tup1[i] > test_tup2[i] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc00011add0, 0x4, 0x4, 0xc00011ad90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpqywmie4__test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmpqywmie4__test.go:28 +0x445\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to hold the results.\n    var result []interface{}\n    // Iterate through the first list.\n    for i := 0; i < len(test_tup1); i++ {\n        // If the element in the first list is greater than the element in the second list,\n        // append the element in the first list to the result list.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            // Otherwise, append the element in the second list to the result list.\n            result = append(result, test_tup2[i])\n        }\n    }\n    // Return the result list.\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpx_r66cyf_test.go:16\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpx_r66cyf_test.go:34 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Check if the lists are of equal length.\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    // Create a new list to store the results.\n    result := make([]interface{}, len(test_tup1))\n    // Iterate through the lists and compare the elements.\n    for i := 0; i < len(test_tup1); i++ {\n        // Check if the elements are of the same type.\n        if test_tup1[i].(type) != test_tup2[i].(type) {\n            return nil\n        }\n        // Check if the elements are of type int.\n        if _, ok := test_tup1[i].(int); ok {\n            // Check if the first element is greater than the second.\n            if test_tup1[i].(int) > test_tup2[i].(int) {\n                result[i] = test_tup1[i]\n            } else {\n                result[i] = test_tup2[i]\n            }\n        } else {\n            // Check if the first element is greater than the second.\n            if test_tup1[i].(float64) > test_tup2[i].(float64) {\n                result[i] = test_tup1[i]\n            } else {\n                result[i] = test_tup2[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5e3pr28q_test.go:19:24: use of .(type) outside type switch\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new slice to hold the result.\n    result := make([]interface{}, len(test_tup1))\n\n    // Iterate over the two lists and compare the elements.\n    for i := 0; i < len(test_tup1); i++ {\n        // If the first element is greater than the second element,\n        // then add the first element to the result.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            // Otherwise, add the second element to the result.\n            result[i] = test_tup2[i]\n        }\n    }\n\n    // Return the result.\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpgvcifs0h_test.go:17\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpgvcifs0h_test.go:36 +0x18b9\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists must be of the same length.\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp5jl9ikcm_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmp5jl9ikcm_test.go:31 +0x1bf3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            test_tup3 = append(test_tup3, test_tup1[i])\n        } else {\n            test_tup3 = append(test_tup3, test_tup2[i])\n        }\n    }\n    return test_tup3\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp46xfkad6_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp46xfkad6_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists are not the same length.\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp23ccgm6m_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp23ccgm6m_test.go:31 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_list = append(max_list, test_tup1[i])\n        } else {\n            max_list = append(max_list, test_tup2[i])\n        }\n    }\n    return max_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpi46hldku_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpi46hldku_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Your code goes here\n    return []interface{}{}\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\n    --- FAIL: TestMaximize_Elements/test_num__0 (0.00s)\n        tmpr3fs29j3_test.go:29: expected '[[%!s(int=6) %!s(int=7)] [%!s(int=4) %!s(int=9)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=10)]]', got '[]'\n    --- FAIL: TestMaximize_Elements/test_num__1 (0.00s)\n        tmpr3fs29j3_test.go:29: expected '[[%!s(int=7) %!s(int=8)] [%!s(int=5) %!s(int=10)] [%!s(int=3) %!s(int=10)] [%!s(int=8) %!s(int=11)]]', got '[]'\n    --- FAIL: TestMaximize_Elements/test_num__2 (0.00s)\n        tmpr3fs29j3_test.go:29: expected '[[%!s(int=8) %!s(int=9)] [%!s(int=6) %!s(int=11)] [%!s(int=4) %!s(int=11)] [%!s(int=9) %!s(int=12)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new slice to store the result\n    result := make([]interface{}, len(test_tup1))\n    // Iterate through the two lists\n    for i := 0; i < len(test_tup1); i++ {\n        // Compare the two elements\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            result[i] = test_tup2[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp3khu8qu6_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmp3khu8qu6_test.go:31 +0x18b9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    max_tup := make([]interface{}, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup[i] = test_tup1[i]\n        } else {\n            max_tup[i] = test_tup2[i]\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpeq3v8ub8_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpeq3v8ub8_test.go:28 +0x18b9\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result_list = append(result_list, test_tup1[i])\n        } else {\n            result_list = append(result_list, test_tup2[i])\n        }\n    }\n    return result_list\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpcsb797cl_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpcsb797cl_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            ret_tup = append(ret_tup, test_tup1[i])\n        } else {\n            ret_tup = append(ret_tup, test_tup2[i])\n        }\n    }\n    return ret_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpyz2iusld_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpyz2iusld_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    var i int\n    for i = 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            ret_tup = append(ret_tup, test_tup1[i])\n        } else {\n            ret_tup = append(ret_tup, test_tup2[i])\n        }\n    }\n    return ret_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp5zg6ao60_test.go:13\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp5zg6ao60_test.go:29 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            ret_tup = append(ret_tup, test_tup1[i])\n        } else {\n            ret_tup = append(ret_tup, test_tup2[i])\n        }\n    }\n    return ret_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122966,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpyz2iusld_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpyz2iusld_test.go:28 +0x1bf3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists must be of equal length.\")\n    }\n    max_tup := make([]interface{}, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup[i] = test_tup1[i]\n        } else {\n            max_tup[i] = test_tup2[i]\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpri6jh8ng_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmpri6jh8ng_test.go:31 +0x18b9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpn2jel_gy_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpn2jel_gy_test.go:28 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a new list to store the results.\n    result := make([]interface{}, len(test_tup1))\n    // Iterate through the two lists.\n    for i := 0; i < len(test_tup1); i++ {\n        // Check if the first list element is greater than the second list element.\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            // If so, add the first list element to the result list.\n            result[i] = test_tup1[i]\n        } else {\n            // Otherwise, add the second list element to the result list.\n            result[i] = test_tup2[i]\n        }\n    }\n    // Return the result list.\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp315wnvfy_test.go:15\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmp315wnvfy_test.go:34 +0x18b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists must be of the same length.\")\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result[i] = test_tup1[i]\n        } else {\n            result[i] = test_tup2[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpgpllvftp_test.go:15 +0x146\ncommand-line-arguments_test.TestMaximize_Elements(0xc000001380)\n\t/tmp/tmpgpllvftp_test.go:31 +0x445\ntesting.tRunner(0xc000001380, 0x550230)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Error: Tuples are not of equal length.\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122967,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc00011add0, 0x4, 0x4, 0xc00011ad90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp16ux9urr_test.go:16 +0x2f5\ncommand-line-arguments_test.TestMaximize_Elements(0xc000102600)\n\t/tmp/tmp16ux9urr_test.go:32 +0x445\ntesting.tRunner(0xc000102600, 0x550230)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(0xc0000bcdd0, 0x4, 0x4, 0xc0000bcd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp59wnokow_test.go:12 +0x27f\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp59wnokow_test.go:28 +0x445\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var max_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            max_tup = append(max_tup, test_tup1[i])\n        } else {\n            max_tup = append(max_tup, test_tup2[i])\n        }\n    }\n    return max_tup\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmpha1qav90_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmpha1qav90_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 7}, []interface{}{4, 9}, []interface{}{2, 9}, []interface{}{7, 10}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{7, 8}, []interface{}{5, 10}, []interface{}{3, 10}, []interface{}{8, 11}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{8, 9}, []interface{}{6, 11}, []interface{}{4, 11}, []interface{}{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestMaximize_Elements (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.maximize_elements(...)\n\t/tmp/tmp503jpk6s_test.go:12\ncommand-line-arguments_test.TestMaximize_Elements(0xc000186300)\n\t/tmp/tmp503jpk6s_test.go:28 +0x1bf3\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}