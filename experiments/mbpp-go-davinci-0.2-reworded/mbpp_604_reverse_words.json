{
  "name": "mbpp_604_reverse_words",
  "language": "go_test.go",
  "prompt": "package reverse_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to reverse words seperated by spaces in a given string.\nfunc reverse_words(s string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReverse_Words(t *testing.T) {\n  candidate := reverse_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python program\"), expected: \"program python\" },\n     { actual: candidate(\"java language\"), expected: \"language java\" },\n     { actual: candidate(\"indian man\"), expected: \"man indian\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var r string\n    var w string\n    for _, c := range s {\n        if c == ' ' {\n            r = fmt.Sprintf(\"%s%s \", w, r)\n            w = \"\"\n        } else {\n            w = fmt.Sprintf(\"%s%c\", w, c)\n        }\n    }\n    return fmt.Sprintf(\"%s%s\", w, r)\n}\n",
    "    var r string\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == ' ' {\n            r += \" \"\n        } else {\n            j := i\n            for ; j >= 0 && s[j] != ' '; j-- {\n            }\n            r += s[j + 1:i + 1]\n            i = j\n        }\n    }\n    return r\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var r string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            r = fmt.Sprintf(\"%s%s \", word, r)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    r = fmt.Sprintf(\"%s%s\", word, r)\n    return r\n}\n",
    "    var r []rune\n    var word []rune\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                r = append(r, word...)\n                r = append(r, ' ')\n                word = word[:0]\n            }\n        } else {\n            word = append(word, c)\n        }\n    }\n    if len(word) > 0 {\n        r = append(r, word...)\n    }\n    for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var r []rune\n    var word []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, word...)\n            r = append(r, c)\n            word = nil\n        } else {\n            word = append([]rune{c}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var r string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            r = fmt.Sprintf(\"%s%s \", word, r)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    r = fmt.Sprintf(\"%s%s\", word, r)\n    return r\n}\n",
    "    if len(s) <= 1 {\n        return s\n    }\n\n    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i] + \" \"\n    }\n    return reversed\n}\n",
    "    var r string\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == ' ' {\n            r += \" \"\n        } else {\n            j := i\n            for ; j >= 0 && s[j] != ' '; j-- {\n            }\n            r += s[j+1:i+1]\n            i = j\n        }\n    }\n    return r\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if word != \"\" {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word = word + string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = reversed + words[i]\n        if i != 0 {\n            reversed = reversed + \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n"
  ]
}