{
  "name": "mbpp_618_div_list",
  "language": "go_test.go",
  "prompt": "package div_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to divide two lists element wise.\nfunc div_list(nums1 []int, nums2 []int) []float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDiv_List(t *testing.T) {\n  candidate := div_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 5, 6}, []int{1, 2, 3}), expected: []float64{4.0, 2.5, 2.0} },\n     { actual: candidate([]int{3, 2}, []int{1, 4}), expected: []float64{3.0, 0.5} },\n     { actual: candidate([]int{90, 120}, []int{50, 70}), expected: []float64{1.8, 1.7142857142857142} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    result := make([]float64, len(nums1))\n    for i, n1 := range nums1 {\n        result[i] = float64(n1) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var nums3 []float64\n    for i := 0; i < len(nums1); i++ {\n        nums3 = append(nums3, float64(nums1[i])/float64(nums2[i]))\n    }\n    return nums3\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Length of lists must be equal\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Length of lists must be equal\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Two lists must have the same length.\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Length of lists must be equal\")\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    if len(nums1) != len(nums2) {\n        return result\n    }\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i])/float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    res := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Lengths of lists are not equal\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 should have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i, v := range nums1 {\n        res[i] = float64(v) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 should have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i, num1 := range nums1 {\n        result[i] = float64(num1) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, v := range nums1 {\n        result[i] = float64(v) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must be of the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    res := make([]float64, len(nums1))\n    for i, num := range nums1 {\n        res[i] = float64(num) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    if len(nums1) != len(nums2) {\n        return result\n    }\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i, num1 := range nums1 {\n        result[i] = float64(num1) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, v := range nums1 {\n        result[i] = float64(v) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, num1 := range nums1 {\n        result[i] = float64(num1) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, v := range nums1 {\n        result[i] = float64(v) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i, num := range nums1 {\n        result[i] = float64(num) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, v := range nums1 {\n        result = append(result, float64(v)/float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i, _ := range nums1 {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 should have the same length\")\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Length of lists must be equal\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"The two lists must have the same length.\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    var res []float64\n    for i, _ := range nums1 {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var res []float64\n    if len(nums1) != len(nums2) {\n        return res\n    }\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    res := make([]float64, len(nums1))\n    for i, n1 := range nums1 {\n        res[i] = float64(n1) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var res []float64\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return res\n}\n",
    "    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    var result []float64\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, float64(nums1[i]) / float64(nums2[i]))\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    result := make([]float64, len(nums1))\n    for i := range nums1 {\n        result[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := range nums1 {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]float64, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = float64(nums1[i]) / float64(nums2[i])\n    }\n    return res\n}\n"
  ]
}