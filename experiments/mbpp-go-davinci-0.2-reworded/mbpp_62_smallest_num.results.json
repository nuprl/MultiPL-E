{
  "name": "mbpp_62_smallest_num",
  "language": "go_test.go",
  "prompt": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, value := range xs {\n        if value < smallest {\n            smallest = value\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    min := xs[0]\n    for _, v := range xs {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 || v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    // Initialize smallest number to first element in list.\n    smallest := xs[0]\n    // Iterate over list.\n    for _, x := range xs {\n        // If current element is smaller than smallest, set smallest to current element.\n        if x < smallest {\n            smallest = x\n        }\n    }\n    // Return smallest number.\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i := 0; i < len(xs); i++ {\n        if i == 0 {\n            smallest = xs[i]\n        } else {\n            if xs[i] < smallest {\n                smallest = xs[i]\n            }\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    // Assume the first number is the smallest.\n    smallest := xs[0]\n    // Loop through the rest of the list.\n    for _, x := range xs {\n        // If the number is smaller than the current smallest,\n        // set it as the new smallest.\n        if x < smallest {\n            smallest = x\n        }\n    }\n    // Return the smallest number.\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    // Initialize the smallest number to the first element in the list.\n    smallest := xs[0]\n\n    // Iterate through the list.\n    for _, x := range xs {\n        // If the current element is smaller than the smallest number,\n        // then replace the smallest number with the current element.\n        if x < smallest {\n            smallest = x\n        }\n    }\n\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    // TODO: Implement\n    return 0\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "--- FAIL: TestSmallest_Num (0.00s)\n    --- FAIL: TestSmallest_Num/test_num__0 (0.00s)\n        tmp9ghjz6gv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Num/test_num__1 (0.00s)\n        tmp9ghjz6gv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Num/test_num__2 (0.00s)\n        tmp9ghjz6gv_test.go:29: expected '%!s(int=45)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 || v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, v := range xs {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 || v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, x := range xs {\n        if i == 0 || x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, x := range xs {\n        if i == 0 || x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, n := range xs {\n        if n < smallest {\n            smallest = n\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, v := range xs {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, v := range xs {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    smallest = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 {\n            smallest = v\n        } else if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 || v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, value := range xs {\n        if value < smallest {\n            smallest = value\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i := 0; i < len(xs); i++ {\n        if i == 0 || xs[i] < smallest {\n            smallest = xs[i]\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n\n    smallest := xs[0]\n\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest_num int = xs[0]\n    for _, v := range xs {\n        if v < smallest_num {\n            smallest_num = v\n        }\n    }\n    return smallest_num\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, x := range xs {\n        if i == 0 || x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int\n    for i, v := range xs {\n        if i == 0 || v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\nfunc TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124209,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}