{
  "name": "mbpp_558_digit_distance_nums",
  "language": "go_test.go",
  "prompt": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Sum the per-digit difference between the two strings.\n    var sum int\n    for i := 0; i < min_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    // Your code goes here\n    return 0\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n",
    "    // convert numbers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n\n    // get the length of the longer string\n    l := l1\n    if l2 > l1 {\n        l = l2\n    }\n\n    // pad the shorter string with zeros\n    if l1 < l {\n        for i := 0; i < l - l1; i++ {\n            s1 = \"0\" + s1\n        }\n    }\n    if l2 < l {\n        for i := 0; i < l - l2; i++ {\n            s2 = \"0\" + s2\n        }\n    }\n\n    // convert the strings to byte arrays\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // calculate the sum of the per-digit difference\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += abs(int(b1[i]) - int(b2[i]))\n    }\n\n    return sum\n}\n",
    "    // Convert the integers to strings\n    str1 := fmt.Sprintf(\"%d\", n1)\n    str2 := fmt.Sprintf(\"%d\", n2)\n\n    // Make sure the strings are the same length\n    if len(str1) > len(str2) {\n        str2 = fmt.Sprintf(\"%s%s\", strings.Repeat(\"0\", len(str1) - len(str2)), str2)\n    } else if len(str2) > len(str1) {\n        str1 = fmt.Sprintf(\"%s%s\", strings.Repeat(\"0\", len(str2) - len(str1)), str1)\n    }\n\n    // Iterate through the strings and add the difference between the digits\n    var sum int\n    for i := 0; i < len(str1); i++ {\n        sum += int(str1[i] - str2[i])\n    }\n\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    // Your code goes here\n    return 0\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    // Convert the integers to strings.\n    str1 := fmt.Sprintf(\"%d\", n1)\n    str2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string.\n    max_len := len(str1)\n    if len(str2) > max_len {\n        max_len = len(str2)\n    }\n\n    // Pad the shorter string with zeros.\n    if len(str1) < max_len {\n        str1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len(str2) < max_len {\n        str2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Iterate over the strings and find the difference between the digits.\n    sum := 0\n    for i := 0; i < max_len; i++ {\n        sum += int(str1[i]) - int(str2[i])\n    }\n\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the strings\n    len1 := len(s1)\n    len2 := len(s2)\n\n    // Get the length of the longer string\n    max_len := len1\n    if len2 > len1 {\n        max_len = len2\n    }\n\n    // Pad the shorter string with zeros\n    if len1 < max_len {\n        s1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len2 < max_len {\n        s2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Convert the strings to slices of bytes\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // Initialize the sum\n    sum := 0\n\n    // Iterate over the bytes\n    for i := 0; i < max_len; i++ {\n        // Get the difference between the bytes\n        diff := int(b1[i]) - int(b2[i])\n\n        // If the difference is negative, make it positive\n        if diff < 0 {\n            diff = -diff\n        }\n\n        // Add the difference to the sum\n        sum += diff\n    }\n\n    // Return the sum\n    return sum\n}\n"
  ]
}