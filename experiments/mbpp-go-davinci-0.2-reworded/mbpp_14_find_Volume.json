{
  "name": "mbpp_14_find_Volume",
  "language": "go_test.go",
  "prompt": "package find_Volume_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the volume of a triangular prism.\nfunc find_Volume(l int, b int, h int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Volume(t *testing.T) {\n  candidate := find_Volume\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 8, 6), expected: 240 },\n     { actual: candidate(3, 2, 2), expected: 6 },\n     { actual: candidate(1, 2, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l*b*h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l*b*h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n",
    "    return l * b * h\n}\n"
  ]
}