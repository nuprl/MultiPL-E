{
  "name": "mbpp_780_find_combinations",
  "language": "go_test.go",
  "prompt": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/gothon-combinations-of-sum-with-lists-in-list-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    combinations := make([][]interface{}, 0)\n    for _, list := range test_list {\n        for _, item := range list {\n            combinations = append(combinations, []interface{}{item})\n        }\n    }\n    for _, list := range test_list {\n        for _, item := range list {\n            for _, combination := range combinations {\n                if combination[0].(int) + item.(int) == 10 {\n                    combinations = append(combinations, append(combination, item))\n                }\n            }\n        }\n    }\n    return combinations\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            var temp []interface{}\n            temp = append(temp, item)\n            result = append(result, temp)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            var new_list []interface{}\n            new_list = append(new_list, item)\n            result = append(result, new_list)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var sum int\n        for _, item := range list {\n            sum += item.(int)\n        }\n        if sum == 0 {\n            result = append(result, list)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                for l := 0; l < len(test_list[j]); l++ {\n                    if test_list[i][k].(int) + test_list[j][l].(int) == 0 {\n                        result = append(result, []interface{}{test_list[i][k], test_list[j][l]})\n                    }\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            sum := 0\n            for _, v := range test_list[i] {\n                sum += v.(int)\n            }\n            for _, v := range test_list[j] {\n                sum += v.(int)\n            }\n            if sum == 0 {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            var temp []interface{}\n            temp = append(temp, item)\n            result = append(result, temp)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                for l := 0; l < len(test_list[j]); l++ {\n                    if test_list[i][k].(int) + test_list[j][l].(int) == 0 {\n                        result = append(result, []interface{}{test_list[i][k], test_list[j][l]})\n                    }\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            if len(result) == 0 {\n                result = append(result, []interface{}{item})\n            } else {\n                for _, result_item := range result {\n                    result = append(result, append(result_item, item))\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if len(test_list[i]) == len(test_list[j]) {\n                var sum_list []interface{}\n                for k := 0; k < len(test_list[i]); k++ {\n                    sum_list = append(sum_list, test_list[i][k].(int) + test_list[j][k].(int))\n                }\n                result = append(result, sum_list)\n            }\n        }\n    }\n\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            var new_list []interface{}\n            new_list = append(new_list, item)\n            result = append(result, new_list)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            var sum_list []interface{}\n            for k := 0; k < len(test_list[i]); k++ {\n                sum_list = append(sum_list, test_list[i][k])\n            }\n            for k := 0; k < len(test_list[j]); k++ {\n                sum_list = append(sum_list, test_list[j][k])\n            }\n            result = append(result, sum_list)\n        }\n    }\n    return result\n}\n",
    "    var combinations [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            var combination []interface{}\n            for _, item := range test_list[i] {\n                combination = append(combination, item)\n            }\n            for _, item := range test_list[j] {\n                combination = append(combination, item)\n            }\n            combinations = append(combinations, combination)\n        }\n    }\n    return combinations\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        for _, item := range list {\n            result = append(result, []interface{}{item})\n        }\n    }\n    return result\n}\n"
  ]
}