{
  "name": "mbpp_793_last",
  "language": "go_test.go",
  "prompt": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "func TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    if arr[len(arr)-1] < x {\n        return -1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[l/2] == x {\n        if arr[l/2+1] == x {\n            return last(arr[l/2+1:], x)\n        } else {\n            return l/2\n        }\n    } else if arr[l/2] > x {\n        return last(arr[:l/2], x)\n    } else {\n        return last(arr[l/2+1:], x)\n    }\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp06l4oaiz_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low, high := 0, len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] > x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l < r {\n        m := (l + r) / 2\n        if arr[m] <= x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if arr[l] == x {\n        return l\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    n := len(arr)\n    if n == 0 {\n        return -1\n    }\n    if x > arr[n-1] {\n        return -1\n    }\n    if x < arr[0] {\n        return -1\n    }\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            if mid == n - 1 || arr[mid + 1] > x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    if arr[len(arr) - 1] < x {\n        return -1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if arr[m] > x {\n            r = m - 1\n        } else if arr[m] < x {\n            l = m + 1\n        } else {\n            if m == len(arr) - 1 || arr[m + 1] != x {\n                return m\n            } else {\n                l = m + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n\n    if arr[l-1] == x {\n        return l-1\n    }\n\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    var l int = 0\n    var r int = len(arr) - 1\n    var mid int\n\n    for l <= r {\n        mid = (l + r) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                l = mid + 1\n            }\n        } else if arr[mid] < x {\n            l = mid + 1\n        } else {\n            r = mid - 1\n        }\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == x {\n        if mid == len(arr) - 1 {\n            return mid\n        } else if arr[mid + 1] != x {\n            return mid\n        } else {\n            return last(arr[mid + 1:], x)\n        }\n    } else if arr[mid] < x {\n        return last(arr[mid + 1:], x)\n    } else {\n        return last(arr[:mid], x)\n    }\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpluh7_i_9_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    start := 0\n    end := len(arr) - 1\n\n    for start < end {\n        mid := (start + end) / 2\n\n        if arr[mid] <= x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n\n    if arr[start] == x {\n        return start\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp9o3xs7dv_test.go:49: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp9o3xs7dv_test.go:49: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp9o3xs7dv_test.go:49: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 {\n                return mid\n            } else if arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if arr[m] == x {\n            if m == len(arr) - 1 || arr[m + 1] != x {\n                return m\n            } else {\n                l = m + 1\n            }\n        } else if arr[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    start := 0\n    end := len(arr) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                start = mid + 1\n            }\n        } else if arr[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] <= x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if arr[left] == x {\n        return left\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpk9jotj37_test.go:44: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpk9jotj37_test.go:44: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpk9jotj37_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if arr[m] <= x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    if r >= 0 && arr[r] == x {\n        return r\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: Implement me!\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpxm8_ccvw_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpxm8_ccvw_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpxm8_ccvw_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] <= x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if high < 0 || arr[high] != x {\n        return -1\n    }\n    return high\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    var left, right, mid int\n    left = 0\n    right = len(arr) - 1\n    for left <= right {\n        mid = left + (right - left) / 2\n        if arr[mid] <= x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if arr[right] == x {\n        return right\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n\n    if arr[l-1] == x {\n        return l-1\n    }\n\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement this function\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[l-1] == x {\n        return l - 1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if arr[m] == x {\n            if m == len(arr) - 1 || arr[m + 1] != x {\n                return m\n            } else {\n                l = m + 1\n            }\n        } else if arr[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(arr) - 1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    if arr[len(arr) - 1] < x {\n        return -1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 && arr[0] == x {\n        return 0\n    }\n    if len(arr) == 1 && arr[0] != x {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    if arr[len(arr) - 1] < x {\n        return -1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == x {\n        if mid == len(arr) - 1 {\n            return mid\n        }\n        if arr[mid + 1] != x {\n            return mid\n        }\n    }\n\n    if arr[mid] > x {\n        return last(arr[:mid], x)\n    } else {\n        return last(arr[mid + 1:], x)\n    }\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp64ys2pmo_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement this function\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l, r := 0, len(arr) - 1\n    for l <= r {\n        mid := (l + r) / 2\n        if arr[mid] <= x {\n            l = mid + 1\n        } else {\n            r = mid - 1\n        }\n    }\n    if r < 0 || arr[r] != x {\n        return -1\n    }\n    return r\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // return the index of the last position of x in arr\n    // if x is not in arr, return -1\n    // assume arr is sorted in ascending order\n    //\n    // your code here\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpz5ugpiza_test.go:33: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpz5ugpiza_test.go:33: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpz5ugpiza_test.go:33: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement me\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpbdo51hhh_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpbdo51hhh_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpbdo51hhh_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if arr[m] == x {\n            if m == len(arr) - 1 || arr[m + 1] != x {\n                return m\n            } else {\n                l = m + 1\n            }\n        } else if arr[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l < r {\n        m := l + (r - l) / 2\n        if arr[m] <= x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if arr[l] == x {\n        return l\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmppjw4pbun_test.go:41: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmppjw4pbun_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmppjw4pbun_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    mid := len(arr) / 2\n    if arr[mid] == x {\n        if mid == len(arr) - 1 {\n            return mid\n        }\n        if arr[mid + 1] != x {\n            return mid\n        }\n        return last(arr[mid + 1:], x)\n    }\n    if arr[mid] > x {\n        return last(arr[:mid], x)\n    }\n    return last(arr[mid + 1:], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpghgloowk_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l - 1] == x {\n        return l - 1\n    }\n    return last(arr[:l - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    lo := 0\n    hi := len(arr) - 1\n    for lo <= hi {\n        mid := (lo + hi) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                lo = mid + 1\n            }\n        } else if arr[mid] > x {\n            hi = mid - 1\n        } else {\n            lo = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: Implement\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] > x {\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l < r {\n        m := (l + r + 1) / 2\n        if arr[m] > x {\n            r = m - 1\n        } else {\n            l = m\n        }\n    }\n    if arr[l] == x {\n        return l\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // Write your code here\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low, high := 0, len(arr) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] <= x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if high < 0 || arr[high] != x {\n        return -1\n    }\n    return high\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] > x {\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // Write your code here\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    start := 0\n    end := len(arr) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                start = mid + 1\n            }\n        } else if arr[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(arr) - 1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    left := 0\n    right := len(arr) - 1\n\n    for left < right {\n        mid := (left + right) / 2\n\n        if arr[mid] <= x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if arr[left] == x {\n        return left\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmptpzilbjg_test.go:49: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmptpzilbjg_test.go:49: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmptpzilbjg_test.go:49: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l <= r {\n        mid := l + (r - l) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                l = mid + 1\n            }\n        } else if arr[mid] > x {\n            r = mid - 1\n        } else {\n            l = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[l-1] == x {\n        return l - 1\n    } else if arr[l-1] < x {\n        return -1\n    } else {\n        return last(arr[:l-1], x)\n    }\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    start := 0\n    end := len(arr) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            }\n            start = mid + 1\n        } else if arr[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement this function\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmporqfyiha_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] > x {\n                return mid\n            }\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l < r {\n        m := (l + r) / 2\n        if arr[m] <= x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if arr[l] == x {\n        return l\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: Implement\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpyyk8gvhp_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    mid := len(arr) / 2\n    if arr[mid] == x {\n        if mid == len(arr) - 1 {\n            return mid\n        }\n        if arr[mid + 1] != x {\n            return mid\n        }\n        return last(arr[mid + 1:], x)\n    }\n    if arr[mid] < x {\n        return last(arr[mid + 1:], x)\n    }\n    return last(arr[:mid], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp7is84dwm_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if l == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    if arr[l-1] < x {\n        return -1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123702,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    start := 0\n    end := len(arr) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if arr[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    if arr[end] == x {\n        return end\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpt0sigbsk_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpt0sigbsk_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // find the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is not in arr, return -1\n    // arr is sorted in ascending order\n    // return the last position of x in arr\n    // if x is\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123706,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_iqjsez2_test.go:57:6: expected '(', found TestLast\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] != x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpb284q613_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpb284q613_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    return lastRecursive(arr, x, 0, len(arr) - 1)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6t0wfjq4_test.go:10:12: undefined: lastRecursive\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    return lastRecursive(arr, x, 0, len(arr) - 1)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6t0wfjq4_test.go:10:12: undefined: lastRecursive\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := 0\n    r := len(arr) - 1\n    for l < r {\n        m := (l + r) / 2\n        if arr[m] <= x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if arr[l] == x {\n        return l\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp6jlwt33y_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // Write your code here\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp74_svh03_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmpwm1bevhb_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpwm1bevhb_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpwm1bevhb_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    l := len(arr)\n    if l == 0 {\n        return -1\n    }\n    if arr[l-1] == x {\n        return l-1\n    }\n    return last(arr[:l-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123701,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr)-1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // Write your code here\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__0 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmp9mpqeqer_test.go:29: expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123705,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    low := 0\n    high := len(arr) - 1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            if mid == len(arr) - 1 || arr[mid + 1] > x {\n                return mid\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123707,
      "stdout": "--- FAIL: TestLast (0.00s)\n    --- FAIL: TestLast/test_num__1 (0.00s)\n        tmpgdqmzpjh_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestLast/test_num__2 (0.00s)\n        tmpgdqmzpjh_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if arr[len(arr)-1] == x {\n        return len(arr)-1\n    }\n    return last(arr[:len(arr)-1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        if arr[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if arr[len(arr) - 1] == x {\n        return len(arr) - 1\n    }\n    return last(arr[:len(arr) - 1], x)\n}\n\nfunc TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510549,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}