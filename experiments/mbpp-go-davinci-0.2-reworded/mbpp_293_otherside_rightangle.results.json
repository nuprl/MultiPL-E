{
  "name": "mbpp_293_otherside_rightangle",
  "language": "go_test.go",
  "prompt": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "func TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpv7wsu210_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=56)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpv7wsu210_test.go:28: expected '%!s(int=5)', got '%!s(float64=12)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpv7wsu210_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=105)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) / float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=0.875)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(int=5)', got '%!s(float64=0.75)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=0.4666666666666667)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w) + float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) / float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=0.875)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(int=5)', got '%!s(float64=0.75)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=0.4666666666666667)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvg7140s7_test.go:10:12: undefined: Sqrt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w) + float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w) + float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmph9_flxhe_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2.0\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpnkmk5mwn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpnkmk5mwn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpnkmk5mwn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w * w + h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppds9xk0e_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(h) / 2\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=28)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(int=5)', got '%!s(float64=6)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpceg26wjn_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=52.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) / float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=0.875)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(int=5)', got '%!s(float64=0.75)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp5k_3bow3_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=0.4666666666666667)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w * w) + float64(h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w * w) + float64(h * h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpp01l8srk_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w * w + h * h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmppep4ht5i_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(float64(w*w + h*h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_oa6uyi_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w) * float64(w) + float64(h) * float64(h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123502,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpzgzhe854_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return math.Sqrt(math.Pow(float64(w), 2) + math.Pow(float64(h), 2))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ys6de7n_test.go:10:12: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return float64(w*w + h*h)\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmp90ub0rcb_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n    return (float64(w) * float64(w)) + (float64(h) * float64(h))\n}\n\nfunc TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517477,
      "stdout": "--- FAIL: TestOtherside_Rightangle (0.00s)\n    --- FAIL: TestOtherside_Rightangle/test_num__0 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=10.63014581273465)', got '%!s(float64=113)'\n    --- FAIL: TestOtherside_Rightangle/test_num__1 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(int=5)', got '%!s(float64=25)'\n    --- FAIL: TestOtherside_Rightangle/test_num__2 (0.00s)\n        tmpm7corxi5_test.go:28: expected '%!s(float64=16.55294535724685)', got '%!s(float64=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}