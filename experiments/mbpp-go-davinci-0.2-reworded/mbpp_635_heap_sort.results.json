{
  "name": "mbpp_635_heap_sort",
  "language": "go_test.go",
  "prompt": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "func TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n    for i := len(iterable) - 1; i > 0; i-- {\n        // Swap the first element with the last element.\n        heap[0], heap[i] = heap[i], heap[0]\n        // Rebuild the heap.\n        heap = max_heapify(heap[:i], 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4olxewmv_test.go:11:13: undefined: build_max_heap\n/tmp/tmp4olxewmv_test.go:16:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element and heapify the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgm23_gqw_test.go:12:20: undefined: heapify\n/tmp/tmpgm23_gqw_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the list.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the root element and heapify the remaining heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj2bjg0d__test.go:12:20: undefined: heapify\n/tmp/tmpj2bjg0d__test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the list.\n    heap.swap(0, len(heap.items) - 1)\n\n    // Pop the last element of the list.\n    heap.pop()\n\n    // Rebuild the heap.\n    heap.max_heapify(0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap.items) > 0 {\n        heap.swap(0, len(heap.items) - 1)\n        heap.pop()\n        heap.max_heapify(0)\n    }\n\n    return heap.items\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpucyvf1np_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpib8eplqh_test.go:12:20: undefined: heapify\n/tmp/tmpib8eplqh_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxo5145qz_test.go:12:20: undefined: heapify\n/tmp/tmpxo5145qz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element, and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpegmd5l3e_test.go:12:20: undefined: heapify\n/tmp/tmpegmd5l3e_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable) - 1)\n    }\n\n    // Repeatedly extract the largest item from the heap.\n    for end := len(iterable) - 1; end > 0; {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end--\n        iterable = sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe657hpjg_test.go:13:20: undefined: sift_down\n/tmp/tmpe657hpjg_test.go:20:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe6pbj250_test.go:11:13: undefined: build_max_heap\n/tmp/tmpe6pbj250_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Swap the first element with the last element.\n    // Then heapify the heap excluding the last element.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpav3piitv_test.go:12:20: undefined: heapify\n/tmp/tmpav3piitv_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the max element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap.heap_size--\n        heap.max_heapify(0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp4bzer5p_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Pop the last element from the heap.\n    // Restore the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0eeert50_test.go:11:13: undefined: build_max_heap\n/tmp/tmp0eeert50_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Create a heap from the iterable.\n    heap := make([]int, len(iterable))\n    copy(heap, iterable)\n    for i := len(heap) / 2; i >= 0; i-- {\n        heap = heapify(heap, i)\n    }\n\n    // Pop the heap and append the popped element to the end of the list.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0829mfj3_test.go:14:16: undefined: heapify\n/tmp/tmp0829mfj3_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the heap is empty.\n    if len(heap) > 0 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf3c_31ml_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap in-place.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvmq24esa_test.go:12:20: undefined: heapify\n/tmp/tmpvmq24esa_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element.\n    // Pop the last element out of the heap.\n    // Rebuild the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe3wpi3sx_test.go:12:20: undefined: heapify\n/tmp/tmpe3wpi3sx_test.go:20:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root of the heap and put it at the end of the\n    // list.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk_s6qcs0_test.go:11:13: undefined: build_heap\n/tmp/tmpk_s6qcs0_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last elements of the heap.\n    heap.swap(0, len(heap.data) - 1)\n    // Pop the last element from the heap.\n    heap.pop()\n    // Repeat the above steps until the heap is empty.\n    for len(heap.data) > 0 {\n        heap.swap(0, len(heap.data) - 1)\n        heap.pop()\n    }\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfid7uz10_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ihorax1_test.go:12:20: undefined: heapify\n/tmp/tmp5ihorax1_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i)\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ouweukx_test.go:12:20: undefined: max_heapify\n/tmp/tmp8ouweukx_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvao5nyao_test.go:12:20: undefined: heapify\n/tmp/tmpvao5nyao_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4nto7hee_test.go:12:9: undefined: heapify\n/tmp/tmp4nto7hee_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    var sorted []int\n    for len(heap) > 0 {\n        sorted = append(sorted, heap[0])\n        heap[0] = heap[len(heap) - 1]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptl_kexm8_test.go:11:13: undefined: build_heap\n/tmp/tmptl_kexm8_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124225,
      "stdout": "--- FAIL: TestHeap_Sort (0.00s)\n    --- FAIL: TestHeap_Sort/test_num__0 (0.00s)\n        tmp7pzmo2uj_test.go:28: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestHeap_Sort/test_num__1 (0.00s)\n        tmp7pzmo2uj_test.go:28: expected '[%!s(int=14) %!s(int=22) %!s(int=25) %!s(int=25) %!s(int=35) %!s(int=58) %!s(int=65) %!s(int=75) %!s(int=85)]', got '[%!s(int=25) %!s(int=35) %!s(int=22) %!s(int=85) %!s(int=14) %!s(int=65) %!s(int=75) %!s(int=25) %!s(int=58)]'\n    --- FAIL: TestHeap_Sort/test_num__2 (0.00s)\n        tmp7pzmo2uj_test.go:28: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=9)]', got '[%!s(int=7) %!s(int=1) %!s(int=9) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Iterate over the heap and swap the first element with the last element.\n    // Then, heapify the heap again.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl4h8zadx_test.go:11:13: undefined: build_heap\n/tmp/tmpl4h8zadx_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the sorted list.\n    sorted := []int{}\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpisvis10g_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap.\n    heapify(iterable)\n\n    // Swap the first element with the last element.\n    // Then, heapify the rest of the elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyd8uphkc_test.go:11:5: undefined: heapify\n/tmp/tmpyd8uphkc_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        max_heapify(iterable, i)\n    }\n\n    // Swap the first element with the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9cwb396x_test.go:12:9: undefined: max_heapify\n/tmp/tmp9cwb396x_test.go:18:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap_size := len(heap)\n    heap[0], heap[heap_size - 1] = heap[heap_size - 1], heap[0]\n\n    // Reduce the heap size by 1.\n    heap_size -= 1\n\n    // Continue swapping the first and last elements of the heap\n    // and reducing the heap size by 1 until the heap size is 1.\n    for heap_size > 1 {\n        // Swap the first and last elements of the heap.\n        heap[0], heap[heap_size - 1] = heap[heap_size - 1], heap[0]\n\n        // Reduce the heap size by 1.\n        heap_size -= 1\n\n        // Restore the heap's max heap property.\n        heap = max_heapify(heap, 0, heap_size)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx2q0cm9_test.go:11:13: undefined: build_max_heap\n/tmp/tmpkx2q0cm9_test.go:30:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = max_heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8x387mio_test.go:11:13: undefined: build_max_heap\n/tmp/tmp8x387mio_test.go:16:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8hner0c2_test.go:12:20: undefined: heapify\n/tmp/tmp8hner0c2_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpolul1ggw_test.go:12:9: undefined: heapify\n/tmp/tmpolul1ggw_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81n3q69r_test.go:12:20: undefined: heapify\n/tmp/tmp81n3q69r_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n\n    // Heapify the heap.\n    heap = heapify(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        // Swap the first and last element.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element.\n        heap = heap[:len(heap)-1]\n\n        // Heapify the heap.\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_vkod6m7_test.go:11:13: undefined: build_max_heap\n/tmp/tmp_vkod6m7_test.go:20:12: undefined: heapify\n/tmp/tmp_vkod6m7_test.go:31:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Sift down the new root element to restore the heap.\n        sift_down(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc01nv_e5_test.go:11:13: undefined: build_heap\n/tmp/tmpc01nv_e5_test.go:19:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap.swap(0, len(heap.data) - 1)\n\n    // Repeat the process until the heap is empty.\n    for i := len(heap.data) - 1; i > 0; i-- {\n        // Maintain the heap property.\n        heap.heapify(0, i)\n\n        // Swap the first and last element of the heap.\n        heap.swap(0, i - 1)\n    }\n\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz37ef9jm_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // The sorted list.\n    sorted := make([]int, 0)\n    // While the heap is not empty,\n    // pop the max element from the heap\n    // and append it to the sorted list.\n    for len(heap) > 0 {\n        sorted = append(sorted, heap[0])\n        heap = heap[1:]\n        heap = max_heapify(heap, 0)\n    }\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdedhonz8_test.go:11:13: undefined: build_max_heap\n/tmp/tmpdedhonz8_test.go:20:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptr8yudu1_test.go:13:9: undefined: heapify\n/tmp/tmptr8yudu1_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxo5145qz_test.go:12:20: undefined: heapify\n/tmp/tmpxo5145qz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element, and heapify the root element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj3ns8018_test.go:11:13: undefined: build_max_heap\n/tmp/tmpj3ns8018_test.go:16:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the last element out of the heap.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = iterable[:i]\n        max_heapify(iterable, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3bw74lgc_test.go:11:5: undefined: build_max_heap\n/tmp/tmp3bw74lgc_test.go:19:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable) - 1)\n    }\n\n    // Repeatedly extract the largest item from the heap.\n    for end := len(iterable) - 1; end > 0; {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end--\n        iterable = sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe657hpjg_test.go:13:20: undefined: sift_down\n/tmp/tmpe657hpjg_test.go:20:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the root and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2cn4bkkh_test.go:12:20: undefined: heapify\n/tmp/tmp2cn4bkkh_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n    // Sift down the first element.\n    heap = sift_down(heap, 0)\n    // Repeat the process until the heap is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap[:len(heap)-1]), heap[len(heap)-1])\n    } else {\n        return []int{}\n    }\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2gtb_u6f_test.go:11:13: undefined: build_heap\n/tmp/tmp2gtb_u6f_test.go:17:12: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb_p25yy3_test.go:11:13: undefined: build_max_heap\n/tmp/tmpb_p25yy3_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp272gajyn_test.go:12:9: undefined: heapify\n/tmp/tmp272gajyn_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n    // Swap the first and last items.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n    // Pop the last item.\n    heap = heap[:len(heap)-1]\n    // Sift down the first item.\n    heap = sift_down(heap, 0)\n    // Repeat until the heap is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap[:len(heap)-1]), heap[len(heap)-1])\n    } else {\n        return []int{}\n    }\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq605t8qf_test.go:11:13: undefined: build_heap\n/tmp/tmpq605t8qf_test.go:17:12: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last element, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg00cjy9t_test.go:12:20: undefined: heapify\n/tmp/tmpg00cjy9t_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the heap is empty.\n    if len(heap) > 1 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzmgcj4o_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Pop the largest element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7t7oybs8_test.go:12:20: undefined: heapify\n/tmp/tmp7t7oybs8_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The following are equivalent:\n    // heapify(x)\n    // heapify(x[:len(x)])\n    // heapify(x[:len(x)/2])\n    // heapify(x[len(x)/2:])\n    heapify(iterable)\n\n    // Pop the largest item from the heap, and add it to the end of the sorted list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        siftdown(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9_63k_7x_test.go:16:5: undefined: heapify\n/tmp/tmp9_63k_7x_test.go:21:9: undefined: siftdown\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Then heapify the heap excluding the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(heap, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknfdereh_test.go:11:13: undefined: build_max_heap\n/tmp/tmpknfdereh_test.go:17:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the sorted list.\n    // Continue until the heap is empty.\n    sorted := []int{}\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxx54i21u_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    build_max_heap(iterable)\n\n    // Swap the first and last element, and heapify the heap excluding the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2dt_q9ih_test.go:11:5: undefined: build_max_heap\n/tmp/tmp2dt_q9ih_test.go:16:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Sort the list.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Rebuild the heap.\n        heap = max_heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3209nztj_test.go:11:13: undefined: build_max_heap\n/tmp/tmp3209nztj_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element of the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Repeat the above steps until the heap is empty.\n    if len(heap) > 1 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpva5m0zmt_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // Call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehkxz6jf_test.go:12:9: undefined: heapify\n/tmp/tmpehkxz6jf_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Remove the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the new root element.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpys0liceq_test.go:11:13: undefined: build_max_heap\n/tmp/tmpys0liceq_test.go:20:12: undefined: sift_down\n/tmp/tmpys0liceq_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n    // Swap the root with the last element.\n    heap = swap(heap, 0, len(heap) - 1)\n    // Pop the root.\n    heap = heap[:len(heap) - 1]\n    // Repeat until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root.\n        heap = sift_down(heap, 0)\n        // Swap the root with the last element.\n        heap = swap(heap, 0, len(heap) - 1)\n        // Pop the root.\n        heap = heap[:len(heap) - 1]\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp54z0bs4a_test.go:11:13: undefined: build_max_heap\n/tmp/tmp54z0bs4a_test.go:13:12: undefined: swap\n/tmp/tmp54z0bs4a_test.go:19:16: undefined: sift_down\n/tmp/tmp54z0bs4a_test.go:21:16: undefined: swap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpycduxkw9_test.go:12:20: undefined: heapify\n/tmp/tmpycduxkw9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Heap sort\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphvfl193r_test.go:12:9: undefined: heapify\n/tmp/tmphvfl193r_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Create a heap from the list.\n    heap := heapify(iterable)\n\n    // Pop the heap and append the popped value to the result.\n    result := make([]int, 0, len(iterable))\n    for heap.size > 0 {\n        result = append(result, heap.pop())\n    }\n\n    return result\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa3sn4ag2_test.go:11:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the given list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Remove the last element of the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the first element of the heap.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5k629u4_test.go:11:13: undefined: build_max_heap\n/tmp/tmpb5k629u4_test.go:20:12: undefined: sift_down\n/tmp/tmpb5k629u4_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n    // Repeatedly extract the largest element from the heap, and\n    // append it to the sorted list; the heap is updated after each\n    // extraction.\n    sorted := make([]int, 0)\n    for len(heap) > 0 {\n        sorted = append(sorted, heap[0])\n        heap[0] = heap[len(heap)-1]\n        heap = heap[:len(heap)-1]\n        heap = heapify(heap, 0)\n    }\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoe1acnnz_test.go:11:13: undefined: build_heap\n/tmp/tmpoe1acnnz_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the heap is empty.\n    if len(heap) > 1 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo2dxipqi_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The following are equivalent:\n    // heapify(x)\n    // heapify(x[:len(x)])\n    // heapify(x[:len(x)])\n    heapify(iterable)\n\n    // Pop the largest item from the heap, and add it to the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, 0, i - 1)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8c73_iq_test.go:15:5: undefined: heapify\n/tmp/tmpr8c73_iq_test.go:21:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n    // Swap the first and last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv438xi98_test.go:12:20: undefined: heapify\n/tmp/tmpv438xi98_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.data) - 1)\n\n    // Pop the max element and heapify the heap.\n    for i := len(heap.data) - 1; i > 0; i-- {\n        heap.data = heap.data[:i]\n        heap.heapify(0)\n        heap.swap(0, i - 1)\n    }\n\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ppdejsb_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the smallest element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    sorted := make([]int, 0, len(iterable))\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7qx6sfp8_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Swap the first element with the last element, and heapify the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqubmd0yy_test.go:12:20: undefined: heapify\n/tmp/tmpqubmd0yy_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ze1nae4_test.go:12:20: undefined: heapify\n/tmp/tmp2ze1nae4_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the list.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Remove the last element from the list.\n    heap = heap[:len(heap) - 1]\n\n    // Repeat the above steps until the list is empty.\n    for len(heap) > 0 {\n        // Sift down the first element of the list.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last elements of the list.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n        // Remove the last element from the list.\n        heap = heap[:len(heap) - 1]\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwsw91lfz_test.go:11:13: undefined: build_max_heap\n/tmp/tmpwsw91lfz_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i >= 1; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgeetb3k9_test.go:12:20: undefined: heapify\n/tmp/tmpgeetb3k9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxo5145qz_test.go:12:20: undefined: heapify\n/tmp/tmpxo5145qz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa79f0rm__test.go:12:9: undefined: heapify\n/tmp/tmpa79f0rm__test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqwmtv5k5_test.go:12:20: undefined: heapify\n/tmp/tmpqwmtv5k5_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap.swap(0, len(heap.data) - 1)\n\n    // Pop the last element from the heap.\n    heap.pop()\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap.data) > 0 {\n        heap.swap(0, len(heap.data) - 1)\n        heap.pop()\n    }\n\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3mzueo6c_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element,\n    // and heapify the heap excluding the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpug6l5s6u_test.go:12:20: undefined: heapify\n/tmp/tmpug6l5s6u_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        iterable = heapify(iterable, idx, len(iterable))\n    }\n\n    // Perform the following operations n times.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        // Swap the root of the heap with the last item of the heap.\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n        // Rebuild the heap.\n        iterable = heapify(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp71957lgl_test.go:13:20: undefined: heapify\n/tmp/tmp71957lgl_test.go:21:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    // Pop the max element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdbngkg4q_test.go:11:13: undefined: build_max_heap\n/tmp/tmpdbngkg4q_test.go:19:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcndhu5sj_test.go:12:9: undefined: heapify\n/tmp/tmpcndhu5sj_test.go:17:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        sift_down(iterable, idx, len(iterable))\n    }\n\n    // Repeatedly extract the largest item from the heap and\n    // replace it with the last item of the heap followed by reducing\n    // the size of heap by 1.\n    // Finally, heap will have only one item and that is the smallest item.\n    for idx := len(iterable) - 1; idx >= 0; idx-- {\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n        sift_down(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptzd4blvf_test.go:13:9: undefined: sift_down\n/tmp/tmptzd4blvf_test.go:22:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heap := make([]int, len(iterable))\n    for i, v := range iterable {\n        heap[i] = v\n    }\n\n    for i := len(heap) / 2 - 1; i >= 0; i-- {\n        heap = heapify(heap, i, len(heap))\n    }\n\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4jkvivl__test.go:16:16: undefined: heapify\n/tmp/tmp4jkvivl__test.go:21:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last elements.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element.\n        heap = heap[:len(heap)-1]\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn4wzwumi_test.go:11:13: undefined: build_max_heap\n/tmp/tmpn4wzwumi_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[i] = heap.pop()\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxyq0rb1c_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable) - 1)\n    }\n\n    // Repeatedly extract the largest item from the heap.\n    for end := len(iterable) - 1; end > 0; {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end--\n        iterable = sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe657hpjg_test.go:13:20: undefined: sift_down\n/tmp/tmpe657hpjg_test.go:20:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnsj59bor_test.go:12:20: undefined: heapify\n/tmp/tmpnsj59bor_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwa3z6jtl_test.go:12:20: undefined: heapify\n/tmp/tmpwa3z6jtl_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Sift down the new root element.\n    heap = sift_down(heap, 0)\n\n    // Repeat the process until the heap is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap[:len(heap) - 1]), heap[len(heap) - 1])\n    } else {\n        return []int{}\n    }\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb_opp6mk_test.go:11:13: undefined: build_max_heap\n/tmp/tmpb_opp6mk_test.go:20:12: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element of the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the first element of the heap.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpscopqo37_test.go:11:13: undefined: build_max_heap\n/tmp/tmpscopqo37_test.go:20:12: undefined: sift_down\n/tmp/tmpscopqo37_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8p4whfl7_test.go:12:20: undefined: heapify\n/tmp/tmp8p4whfl7_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build max-heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3iakrh22_test.go:12:20: undefined: heapify\n/tmp/tmp3iakrh22_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := make([]int, len(iterable))\n    copy(heap, iterable)\n    for i := len(heap) / 2; i >= 0; i-- {\n        heap = heapify(heap, i)\n    }\n\n    // Sort the heap.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe1ikno0h_test.go:14:16: undefined: heapify\n/tmp/tmpe1ikno0h_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb17cddnz_test.go:12:20: undefined: heapify\n/tmp/tmpb17cddnz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Then, remove the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwjhov7b_test.go:11:13: undefined: build_max_heap\n/tmp/tmpnwjhov7b_test.go:19:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Sift down the first element.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        // Swap the first element with the last element.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap) - 1]\n\n        // Sift down the first element.\n        heap = sift_down(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm2wnv65e_test.go:11:13: undefined: build_max_heap\n/tmp/tmpm2wnv65e_test.go:20:12: undefined: sift_down\n/tmp/tmpm2wnv65e_test.go:31:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmproxa0l4g_test.go:11:16: undefined: build_heap\n/tmp/tmproxa0l4g_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heapify(iterable)\n    end := len(iterable) - 1\n    for end > 0 {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end -= 1\n        sift_down(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzqcu5oaz_test.go:10:5: undefined: heapify\n/tmp/tmpzqcu5oaz_test.go:15:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_heap(iterable)\n\n    // Swap the first and last element, then heapify the heap\n    // excluding the last element.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2rpizwp_test.go:11:13: undefined: build_heap\n/tmp/tmpg2rpizwp_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heap := new(Heap)\n    heap.Init(iterable)\n    return heap.Sort()\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwtto__yy_test.go:10:17: undefined: Heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the given list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last element, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehq9ip4d_test.go:12:20: undefined: heapify\n/tmp/tmpehq9ip4d_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Sort the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        // Swap the first and last element.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Rebuild the max heap.\n        heap = max_heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptvggc8ee_test.go:11:13: undefined: build_max_heap\n/tmp/tmptvggc8ee_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the input data.\n    var heap_size = len(iterable)\n    for i := (heap_size / 2) - 1; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, heap_size)\n    }\n\n    // Repeatedly extract the maximum element from the heap.\n    for i := heap_size - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap_size--\n        iterable = max_heapify(iterable, 0, heap_size)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp41nvmcvk_test.go:13:20: undefined: max_heapify\n/tmp/tmp41nvmcvk_test.go:20:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Re-heapify the heap.\n    heap = heapify(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        // Swap the first and last elements.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap)-1]\n\n        // Re-heapify the heap.\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp93yt18pu_test.go:11:13: undefined: build_max_heap\n/tmp/tmp93yt18pu_test.go:20:12: undefined: heapify\n/tmp/tmp93yt18pu_test.go:31:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Repeat until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last elements.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap)-1]\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcz9q2p49_test.go:11:13: undefined: build_max_heap\n/tmp/tmpcz9q2p49_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_max_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size\n    // of heap by 1. Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbr260r9e_test.go:11:16: undefined: build_max_heap\n/tmp/tmpbr260r9e_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa0f3959h_test.go:12:20: undefined: heapify\n/tmp/tmpa0f3959h_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable))\n    }\n\n    // Repeatedly extract the largest item from the heap and\n    // put it into the array.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n        iterable = sift_down(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp90j0pua0_test.go:13:20: undefined: sift_down\n/tmp/tmp90j0pua0_test.go:20:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element.\n        heap = sift_down(heap, 0)\n        // Swap the first and last elements.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        // Pop the last element.\n        heap = heap[:len(heap)-1]\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0zn8e9of_test.go:11:13: undefined: build_max_heap\n/tmp/tmp0zn8e9of_test.go:19:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heap := make([]int, 0)\n    for _, item := range iterable {\n        heap = append(heap, item)\n        heap = heapify(heap)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdmb00n6_test.go:13:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwa3z6jtl_test.go:12:20: undefined: heapify\n/tmp/tmpwa3z6jtl_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Sift down the new root element.\n        sift_down(heap, 0, i - 1)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjpdb20cf_test.go:11:13: undefined: build_heap\n/tmp/tmpjpdb20cf_test.go:19:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heapify(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the last element out of the heap.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable[:i])\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bq87s0o_test.go:11:5: undefined: heapify\n/tmp/tmp1bq87s0o_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpycduxkw9_test.go:12:20: undefined: heapify\n/tmp/tmpycduxkw9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n    // Sift down the first element.\n    heap = sift_down(heap, 0)\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwha0th62_test.go:11:13: undefined: build_max_heap\n/tmp/tmpwha0th62_test.go:17:12: undefined: sift_down\n/tmp/tmpwha0th62_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa9hm9ov4_test.go:12:9: undefined: heapify\n/tmp/tmpa9hm9ov4_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfzrs0qwv_test.go:12:20: undefined: heapify\n/tmp/tmpfzrs0qwv_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element.\n    heap.swap(0, len(heap.elements) - 1)\n    // Pop the last element.\n    heap.elements = heap.elements[:len(heap.elements) - 1]\n    // Sift down the root element.\n    heap.sift_down(0)\n    // Repeat the above steps until the heap is empty.\n    for len(heap.elements) > 0 {\n        heap.swap(0, len(heap.elements) - 1)\n        heap.elements = heap.elements[:len(heap.elements) - 1]\n        heap.sift_down(0)\n    }\n    // Return the sorted list.\n    return heap.elements\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmput1_f19l_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyt2t9ev9_test.go:12:20: undefined: heapify\n/tmp/tmpyt2t9ev9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap = heap[:len(heap) - 1]\n        heap = max_heapify(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnx0wsj9_test.go:11:13: undefined: build_max_heap\n/tmp/tmpmnx0wsj9_test.go:17:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Remove the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the first element to the correct position.\n    heap = sift_down(heap, 0)\n\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0w4y7glm_test.go:11:13: undefined: build_max_heap\n/tmp/tmp0w4y7glm_test.go:20:12: undefined: sift_down\n/tmp/tmp0w4y7glm_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp272gajyn_test.go:12:9: undefined: heapify\n/tmp/tmp272gajyn_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3xz3c0th_test.go:12:20: undefined: heapify\n/tmp/tmp3xz3c0th_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root element from the heap.\n    for i := len(heap) - 1; i >= 0; i-- {\n        // Swap the root element with the last element.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Restore the heap property.\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqxtxbqk_test.go:11:13: undefined: build_heap\n/tmp/tmpyqxtxbqk_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the sorted list.\n    sorted := []int{}\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvuzqgp5r_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, len(iterable), i)\n    }\n\n    // Extract elements from the heap one by one.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsz3lpzom_test.go:12:20: undefined: heapify\n/tmp/tmpsz3lpzom_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element of the heap.\n    heap_size := len(heap)\n    heap[0], heap[heap_size-1] = heap[heap_size-1], heap[0]\n    // Reduce the heap size by 1.\n    heap_size -= 1\n    // Continue to swap the first and last element of the heap,\n    // and reduce the heap size by 1, until the heap size is 1.\n    for heap_size > 1 {\n        // Sift down the new first element to maintain the heap property.\n        heap = sift_down(heap, 0, heap_size)\n        // Swap the first and last element of the heap.\n        heap[0], heap[heap_size-1] = heap[heap_size-1], heap[0]\n        // Reduce the heap size by 1.\n        heap_size -= 1\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp941h_5v7_test.go:11:13: undefined: build_max_heap\n/tmp/tmp941h_5v7_test.go:21:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsoyu9wg_test.go:12:20: undefined: heapify\n/tmp/tmplsoyu9wg_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the list.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the list.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the list is empty.\n    if len(heap) > 1 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmbimj6x_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and\n    // every element beyond end is greater than everything before it (so\n    // a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The smallest item in the heap is stored at the root. Replace it with\n        // the last item of the heap followed by reducing the size of the heap by\n        // 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        iterable = heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4w_hbh8_test.go:13:20: undefined: heapify\n/tmp/tmpc4w_hbh8_test.go:25:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the heap.\n    // Repeat until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbvrxfqnv_test.go:11:13: undefined: build_max_heap\n/tmp/tmpbvrxfqnv_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Extract the max element and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk99551_x_test.go:12:20: undefined: heapify\n/tmp/tmpk99551_x_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the root with the last element.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Re-heapify the heap.\n        heap = heapify(heap[:i])\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl3bdf65b_test.go:11:13: undefined: build_heap\n/tmp/tmpl3bdf65b_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.data) - 1)\n\n    // Sift down the new root element to the correct position.\n    heap.sift_down(0)\n\n    // Repeat the above two steps until the heap is empty.\n    for i := len(heap.data) - 1; i > 0; i-- {\n        heap.swap(0, i)\n        heap.sift_down(0)\n    }\n\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphnyc18w0_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i)\n    }\n\n    // Extract the max element and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0_gbzwqw_test.go:12:9: undefined: heapify\n/tmp/tmp0_gbzwqw_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable))\n    }\n\n    // Repeatedly extract the largest item from the heap and\n    // replace it with the last item of the heap followed by\n    // reducing the size of heap by 1.\n    // Finally, store the item at the root of the heap into\n    // the sorted array.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n        iterable = sift_down(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxxb0bba_test.go:13:20: undefined: sift_down\n/tmp/tmpqxxb0bba_test.go:23:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // Call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbs7u_4_s_test.go:12:9: undefined: heapify\n/tmp/tmpbs7u_4_s_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the list.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp412ogw4j_test.go:11:13: undefined: build_heap\n/tmp/tmp412ogw4j_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the list.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the remaining list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1ovne6v_test.go:12:20: undefined: heapify\n/tmp/tmpw1ovne6v_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8u96b1ll_test.go:12:20: undefined: heapify\n/tmp/tmp8u96b1ll_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = max_heapify(heap[:i], 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoupu5kt3_test.go:11:13: undefined: build_max_heap\n/tmp/tmpoupu5kt3_test.go:15:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv1b6tuj3_test.go:11:13: undefined: build_max_heap\n/tmp/tmpv1b6tuj3_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv2nkebvz_test.go:12:20: undefined: heapify\n/tmp/tmpv2nkebvz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xxuo68n_test.go:12:20: undefined: heapify\n/tmp/tmp2xxuo68n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the max element and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_y63axtb_test.go:12:9: undefined: heapify\n/tmp/tmp_y63axtb_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element to the correct position.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last elements.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap)-1]\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxl8s1ty_test.go:11:13: undefined: build_max_heap\n/tmp/tmpqxl8s1ty_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    heap := build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4vigmhc7_test.go:11:13: undefined: build_heap\n/tmp/tmp4vigmhc7_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f0xp2zh_test.go:12:20: undefined: heapify\n/tmp/tmp5f0xp2zh_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpee_0pdxg_test.go:12:20: undefined: heapify\n/tmp/tmpee_0pdxg_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heapify(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the max element form the heap, and put it at the end of the list.\n    // Continue step 2 and 3 until there is no element left in the heap.\n    for end := len(iterable) - 1; end > 0; end-- {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        sift_down(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgbgm3im_test.go:11:5: undefined: heapify\n/tmp/tmpsgbgm3im_test.go:18:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Convert the list to a heap.\n    heap := make([]int, len(iterable))\n    for i, item := range iterable {\n        heap[i] = item\n    }\n    heapify(heap)\n\n    // Pop the largest element from the heap and append it to the result.\n    result := make([]int, len(iterable))\n    for i := len(iterable) - 1; i >= 0; i-- {\n        result[i] = heap[0]\n        heap[0] = heap[len(heap) - 1]\n        heap = heap[:len(heap) - 1]\n        sift_down(heap, 0)\n    }\n    return result\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9_wy_hqs_test.go:15:5: undefined: heapify\n/tmp/tmp9_wy_hqs_test.go:23:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the largest element and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqe4_07t4_test.go:12:20: undefined: heapify\n/tmp/tmpqe4_07t4_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpci7qak3w_test.go:12:20: undefined: max_heapify\n/tmp/tmpci7qak3w_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakul47dq_test.go:12:20: undefined: heapify\n/tmp/tmpakul47dq_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the list.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp412ogw4j_test.go:11:13: undefined: build_heap\n/tmp/tmp412ogw4j_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        heapify(iterable, len(iterable), idx)\n    }\n\n    // When the heap is built, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for idx := len(iterable) - 1; idx >= 0; idx-- {\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n        heapify(iterable, idx, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmtlksa5l_test.go:13:9: undefined: heapify\n/tmp/tmpmtlksa5l_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Convert the list to a heap.\n    heap := make([]int, len(iterable))\n    for i, item := range iterable {\n        heap[i] = item\n    }\n    for i := len(heap) / 2; i >= 0; i-- {\n        heap = sift_down(heap, i)\n    }\n\n    // Pop the largest item off the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = sift_down(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r4s_tf5_test.go:16:16: undefined: sift_down\n/tmp/tmp2r4s_tf5_test.go:23:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last element.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element.\n        heap = heap[:len(heap)-1]\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzfzfmq54_test.go:11:13: undefined: build_max_heap\n/tmp/tmpzfzfmq54_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Remove the last element.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the first element.\n    heap = sift_down(heap, 0)\n\n    // Repeat until the heap is empty.\n    for len(heap) > 0 {\n        // Swap the first and last element.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Remove the last element.\n        heap = heap[:len(heap)-1]\n\n        // Sift down the first element.\n        heap = sift_down(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpojyg140c_test.go:11:13: undefined: build_heap\n/tmp/tmpojyg140c_test.go:20:12: undefined: sift_down\n/tmp/tmpojyg140c_test.go:31:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Sift down the first element to the correct position.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7crc0q2z_test.go:11:13: undefined: build_max_heap\n/tmp/tmp7crc0q2z_test.go:20:12: undefined: sift_down\n/tmp/tmp7crc0q2z_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpycduxkw9_test.go:12:20: undefined: heapify\n/tmp/tmpycduxkw9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Repeatedly extract the maximum element from the heap.\n    for i := len(iterable) - 1; i >= 1; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124236,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7do5kk_p_test.go:11:5: undefined: build_max_heap\n/tmp/tmp7do5kk_p_test.go:16:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heapify(iterable)\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for end := len(iterable) - 1; end > 0; end-- {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyz90s2b8_test.go:11:5: undefined: heapify\n/tmp/tmpyz90s2b8_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdk5pxqs6_test.go:12:20: undefined: heapify\n/tmp/tmpdk5pxqs6_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the list.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Sift down the new root element to restore the heap.\n        sift_down(heap, 0, i - 1)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzalj6dpi_test.go:11:13: undefined: build_heap\n/tmp/tmpzalj6dpi_test.go:19:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heapify(iterable)\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for end := len(iterable) - 1; end > 0; end-- {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyz90s2b8_test.go:11:5: undefined: heapify\n/tmp/tmpyz90s2b8_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpek7vhu6b_test.go:12:9: undefined: heapify\n/tmp/tmpek7vhu6b_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the max heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp64lkf0al_test.go:12:20: undefined: heapify\n/tmp/tmp64lkf0al_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and\n    // every element beyond end is greater than everything before it (so\n    // a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // a[0] is the root and largest value. The swap moves it in front of the\n        // sorted elements.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // The heap size is reduced by one.\n        iterable = heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9glz21mk_test.go:13:20: undefined: heapify\n/tmp/tmp9glz21mk_test.go:24:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Swap the first and last elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa7o8u29m_test.go:12:20: undefined: heapify\n/tmp/tmpa7o8u29m_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the max element form the heap and put it at the end of the list.\n    // Continue step 2 and 3 until there is no element left in the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = iterable[:i]\n        max_heapify(iterable, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02fw4a5d_test.go:11:5: undefined: build_max_heap\n/tmp/tmp02fw4a5d_test.go:19:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.data) - 1)\n    // Pop the last element.\n    heap.data = heap.data[:len(heap.data) - 1]\n    // Rebuild the heap.\n    heap.heapify(0)\n    // Repeat until the heap is empty.\n    if len(heap.data) > 1 {\n        return heap_sort(heap.data)\n    }\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpje_dnxeq_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i)\n    }\n\n    // Pop the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124237,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqssxn8mr_test.go:12:9: undefined: heapify\n/tmp/tmpqssxn8mr_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}