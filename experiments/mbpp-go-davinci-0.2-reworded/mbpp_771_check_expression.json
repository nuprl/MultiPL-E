{
  "name": "mbpp_771_check_expression",
  "language": "go_test.go",
  "prompt": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var stack []byte\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, byte(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []byte\n    for i := 0; i < len(exp); i++ {\n        if exp[i] == '(' || exp[i] == '[' || exp[i] == '{' {\n            stack = append(stack, exp[i])\n        } else if exp[i] == ')' || exp[i] == ']' || exp[i] == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if exp[i] == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if exp[i] == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            if exp[i] == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        switch r {\n        case '(', '{', '[':\n            stack = append(stack, r)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (char == ')' && top == '(') || (char == ']' && top == '[') || (char == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if c == ')' && last != '(' {\n                return false\n            }\n            if c == ']' && last != '[' {\n                return false\n            }\n            if c == '}' && last != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) > 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    if len(exp) == 0 {\n        return true\n    }\n\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n\n            stack = stack[:len(stack) - 1]\n        }\n    }\n\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == \"(\") || (c == '}' && last == \"{\") || (c == ']' && last == \"[\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if top == '(' && char == ')' || top == '{' && char == '}' || top == '[' && char == ']' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if string(c) == \")\" && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if string(c) == \"}\" && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if string(c) == \"]\" && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') ||\n                (c == ']' && top != '[') ||\n                (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if char == ')' && top != \"(\" {\n                return false\n            } else if char == '}' && top != \"{\" {\n                return false\n            } else if char == ']' && top != \"[\" {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []byte\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, byte(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (top == \"(\" && c != ')') || (top == \"[\" && c != ']') || (top == \"{\" && c != '}') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if string(v) == \")\" && stack[len(stack) - 1] == \"(\" {\n                stack = stack[:len(stack) - 1]\n            } else if string(v) == \"}\" && stack[len(stack) - 1] == \"{\" {\n                stack = stack[:len(stack) - 1]\n            } else if string(v) == \"]\" && stack[len(stack) - 1] == \"[\" {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) > 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if string(v) == \")\" && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if string(v) == \"}\" && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if string(v) == \"]\" && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if (char == ')' && stack[len(stack)-1] == \"(\") || (char == ']' && stack[len(stack)-1] == \"[\") || (char == '}' && stack[len(stack)-1] == \"{\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (r == ')' && top != '(') || (r == ']' && top != '[') || (r == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var last string\n            last, stack = stack[len(stack) - 1], stack[:len(stack) - 1]\n            if (c == ')' && last != \"(\") || (c == '}' && last != \"{\") || (c == ']' && last != \"[\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if char == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if char == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if char == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != \"(\") || (c == '}' && last != \"{\") || (c == ']' && last != \"[\") {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []string{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == \"(\") || (c == ']' && top == \"[\") || (c == '}' && top == \"{\")) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (char == ')' && last == \"(\") || (char == ']' && last == \"[\") || (char == '}' && last == \"{\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []byte\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, byte(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == ']' && last != '[') || (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    var top int\n    top = -1\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            top++\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if top == -1 {\n                return false\n            }\n            if stack[top] == '(' && c == ')' || stack[top] == '{' && c == '}' || stack[top] == '[' && c == ']' {\n                top--\n            } else {\n                return false\n            }\n        }\n    }\n    if top == -1 {\n        return true\n    }\n    return false\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        } else if c == ']' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        } else if c == '}' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if char == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if char == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            if char == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] == '(' {\n                stack = stack[:len(stack) - 1]\n            } else if c == '}' && stack[len(stack) - 1] == '{' {\n                stack = stack[:len(stack) - 1]\n            } else if c == ']' && stack[len(stack) - 1] == '[' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != \"(\") || (c == '}' && top != \"{\") || (c == ']' && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if string(c) == \"(\" || string(c) == \"{\" || string(c) == \"[\" {\n            stack = append(stack, string(c))\n        } else if string(c) == \")\" || string(c) == \"}\" || string(c) == \"]\" {\n            if len(stack) == 0 {\n                return false\n            }\n            if string(c) == \")\" && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if string(c) == \"}\" && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if string(c) == \"]\" && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last_char := stack[len(stack)-1]\n            if (last_char == \"(\" && char == ')') || (last_char == \"[\" && char == ']') || (last_char == \"{\" && char == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (char == ')' && last == '(') || (char == '}' && last == '{') || (char == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') ||\n                (c == ']' && top != '[') ||\n                (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (top == \"(\" && c != ')') || (top == \"{\" && c != '}') || (top == \"[\" && c != ']') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '{' || c == '[' || c == '(' {\n            stack = append(stack, c)\n        } else if c == '}' || c == ']' || c == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == '}' && top != '{') || (c == ']' && top != '[') || (c == ')' && top != '(') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if c == ')' && last != '(' {\n                return false\n            }\n            if c == ']' && last != '[' {\n                return false\n            }\n            if c == '}' && last != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last_char := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (char == ')' && last_char != \"(\") || (char == '}' && last_char != \"{\") || (char == ']' && last_char != \"[\") {\n                return false\n            }\n        }\n    }\n    if len(stack) > 0 {\n        return false\n    }\n    return true\n}\n",
    "    // Create a stack to store characters\n    var stack []string\n    // Traverse the given expression to check matching parenthesis\n    for _, c := range exp {\n        // If the exp[i] is a starting parenthesis then push it\n        if string(c) == \"(\" || string(c) == \"{\" || string(c) == \"[\" {\n            stack = append(stack, string(c))\n        } else if string(c) == \")\" {\n            // Store the top element in a\n            a := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if a != \"(\" {\n                return false\n            }\n        } else if string(c) == \"}\" {\n            // Store the top element in a\n            a := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if a != \"{\" {\n                return false\n            }\n        } else if string(c) == \"]\" {\n            // Store the top element in a\n            a := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if a != \"[\" {\n                return false\n            }\n        }\n    }\n    // If there is something left in expression then there is a starting parenthesis without a closing parenthesis\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last == \"(\") || (c == ']' && last == \"[\") || (c == '}' && last == \"{\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != \"(\" {\n                return false\n            } else if c == '}' && top != \"{\" {\n                return false\n            } else if c == ']' && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if char == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if char == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if char == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if string(c) == \")\" && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if string(c) == \"}\" && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if string(c) == \"]\" && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if !is_match(stack[len(stack)-1], c) {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []byte\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, byte(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (last == \"(\" && v != ')') || (last == \"[\" && v != ']') || (last == \"{\" && v != '}') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        } else {\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != \"(\" {\n                return false\n            } else if c == ']' && top != \"[\" {\n                return false\n            } else if c == '}' && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := []string{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (last == \"(\" && c == ')') || (last == \"[\" && c == ']') || (last == \"{\" && c == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (r == ')' && top != '(') || (r == '}' && top != '{') || (r == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, v)\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if v == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if v == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if v == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    stack := make([]rune, 0)\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n",
    "    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (char == ')' && last == '(') || (char == ']' && last == '[') || (char == '}' && last == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] == \"(\" ||\n                c == ']' && stack[len(stack) - 1] == \"[\" ||\n                c == '}' && stack[len(stack) - 1] == \"{\" {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == ']' && last != '[') || (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != \"(\" {\n                return false\n            }\n            if c == '}' && top != \"{\" {\n                return false\n            }\n            if c == ']' && top != \"[\" {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (top == \"(\" && c == ')') || (top == \"[\" && c == ']') || (top == \"{\" && c == '}') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' {\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        } else if c == '}' {\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        } else if c == ']' {\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if v == ')' && stack[len(stack) - 1] == \"(\" {\n                stack = stack[:len(stack) - 1]\n            } else if v == ']' && stack[len(stack) - 1] == \"[\" {\n                stack = stack[:len(stack) - 1]\n            } else if v == '}' && stack[len(stack) - 1] == \"{\" {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n"
  ]
}