{
  "name": "mbpp_452_loss_amount",
  "language": "go_test.go",
  "prompt": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "func TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp53i_7_z1_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp89tz9vap_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122641,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmpqozlnjcy_test.go:32: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\nfunc TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestLoss_Amount (0.00s)\n    --- FAIL: TestLoss_Amount/test_num__0 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=0)', got '%!s(int=300)'\n    --- FAIL: TestLoss_Amount/test_num__1 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=100)', got '%!s(int=0)'\n    --- FAIL: TestLoss_Amount/test_num__2 (0.00s)\n        tmp5fvic9f4_test.go:31: expected '%!s(int=3000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}