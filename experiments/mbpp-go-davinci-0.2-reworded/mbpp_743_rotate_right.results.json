{
  "name": "mbpp_743_rotate_right",
  "language": "go_test.go",
  "prompt": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    result := make([]int, n)\n    for i, v := range list {\n        result[(i + m) % n] = v\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m < 0 {\n        return rotate_left(list, -m)\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl90f8z0y_test.go:14:16: undefined: rotate_left\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m == len(list) {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    // if m is greater than the length of the list, then we can just mod it\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    // if m is 0, then we don't need to rotate\n    if m == 0 {\n        return list\n    }\n\n    // if m is less than the length of the list, then we can rotate\n    if m < len(list) {\n        // we need to split the list into two parts\n        // the first part is the last m items\n        // the second part is the first len(list) - m items\n        first := list[len(list) - m:]\n        second := list[:len(list) - m]\n\n        // we need to combine the two parts\n        return append(first, second...)\n    }\n\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m < 0 {\n        return rotate_left(list, -m)\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl90f8z0y_test.go:14:16: undefined: rotate_left\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    // if m is 0, return the list\n    if m == 0 {\n        return list\n    }\n\n    // if m is greater than the length of the list, return the list\n    if m > len(list) {\n        return list\n    }\n\n    // if m is less than the length of the list, rotate the list\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m == 0 {\n        return list\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    length := len(list)\n    if length == 0 {\n        return list\n    }\n    m = m % length\n    if m == 0 {\n        return list\n    }\n    return append(list[length - m:], list[:length - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if m == 0 || m == n {\n        return list\n    }\n    if m > n {\n        m = m % n\n    }\n    if m < 0 {\n        m = n + m\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m == len(list) {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    if m == len(list) {\n        return list\n    }\n\n    var result []int\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 || len(list) == 0 {\n        return list\n    }\n\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m == 0 {\n        return list\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    var i int\n    for i = 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9w71xwwj_test.go:33: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9w71xwwj_test.go:33: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    length := len(list)\n    if length == 0 {\n        return list\n    }\n    m = m % length\n    if m == 0 {\n        return list\n    }\n    return append(list[length-m:], list[:length-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list) - m:]...)\n    result = append(result, list[:len(list) - m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    length := len(list)\n    if length == 0 {\n        return result\n    }\n    if m > length {\n        m = m % length\n    }\n    result = append(result, list[length-m:]...)\n    result = append(result, list[:length-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 || m == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m == len(list) {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    var i int\n    var j int\n    var k int\n    var l int\n    var n int\n    n = len(list)\n    l = n - m\n    for i = 0; i < l; i++ {\n        result = append(result, list[i])\n    }\n    for j = 0; j < m; j++ {\n        result = append(result, list[n - m + j])\n    }\n    for k = 0; k < n; k++ {\n        list[k] = result[k]\n    }\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmphvzhtvxo_test.go:45: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmphvzhtvxo_test.go:45: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRotate_Right/test_num__2 (0.00s)\n        tmphvzhtvxo_test.go:45: expected '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m < 0 {\n        m = len(list) + m\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if m == 0 || m == n {\n        return list\n    }\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var i int\n    var j int\n    var k int\n    var temp int\n    var n int = len(list)\n    for i = 0; i < m; i++ {\n        temp = list[n - 1]\n        for j = n - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = temp\n    }\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122611,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjug55c3z_test.go:12:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m <= 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    // make a copy of the list\n    result := make([]int, len(list))\n    copy(result, list)\n\n    // rotate the list\n    for i := 0; i < m; i++ {\n        // get the last element\n        last := result[len(result) - 1]\n\n        // shift the list to the right\n        for j := len(result) - 1; j > 0; j-- {\n            result[j] = result[j - 1]\n        }\n\n        // put the last element at the beginning\n        result[0] = last\n    }\n\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    // TODO: Implement the function\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpbh0j7ffc_test.go:29: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpbh0j7ffc_test.go:29: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRotate_Right/test_num__2 (0.00s)\n        tmpbh0j7ffc_test.go:29: expected '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if m == 0 || m == n {\n        return list\n    }\n    if m > n {\n        m = m % n\n    }\n    if m < 0 {\n        m = n + m\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m < 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if len(list) == 0 {\n        return result\n    }\n    if m < 0 {\n        m = -m\n    }\n    m = m % len(list)\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    if len(list) > 0 {\n        for i := 0; i < len(list); i++ {\n            result = append(result, list[(i + m) % len(list)])\n        }\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp7t3vtl2q_test.go:34: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp7t3vtl2q_test.go:34: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m >= len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    for i := 0; i < m; i++ {\n        last := list[n - 1]\n        for j := n - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    if m == len(list) {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    // if m is greater than the length of the list, then m = m % len(list)\n    if m > len(list) {\n        m = m % len(list)\n    }\n    // if m is 0, then return the list as is\n    if m == 0 {\n        return list\n    }\n    // if m is less than the length of the list, then rotate the list\n    if m < len(list) {\n        // create a new list\n        new_list := make([]int, len(list))\n        // loop through the list\n        for i := 0; i < len(list); i++ {\n            // if i + m is greater than the length of the list, then i + m = (i + m) % len(list)\n            if i + m > len(list) - 1 {\n                new_list[(i + m) % len(list)] = list[i]\n            } else {\n                new_list[i + m] = list[i]\n            }\n        }\n        return new_list\n    }\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    list = append(list[n-m:], list[:n-m]...)\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    var length = len(list)\n    var start = length - m\n    for i := start; i < length; i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < start; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 || m == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    for i := 0; i < m; i++ {\n        last := list[n-1]\n        for j := n-1; j > 0; j-- {\n            list[j] = list[j-1]\n        }\n        list[0] = last\n    }\n    return list\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmp9l_i05_y_test.go:35: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if len(list) == 0 || m == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122612,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509981,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n\nfunc TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestRotate_Right (0.00s)\n    --- FAIL: TestRotate_Right/test_num__0 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRotate_Right/test_num__1 (0.00s)\n        tmpn4ttovp1_test.go:32: expected '[%!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}