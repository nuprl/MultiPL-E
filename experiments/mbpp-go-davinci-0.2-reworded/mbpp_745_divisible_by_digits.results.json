{
  "name": "mbpp_745_divisible_by_digits",
  "language": "go_test.go",
  "prompt": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var is_divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % (i % 10) == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\n    --- FAIL: TestDivisible_By_Digits/test_num__0 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=22)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=21) %!s(int=22)]'\n    --- FAIL: TestDivisible_By_Digits/test_num__2 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=22) %!s(int=24)]', got '[%!s(int=21) %!s(int=22) %!s(int=24) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var divisible_by_digits_list []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible_by_digits_flag bool = true\n        var num_str string = fmt.Sprintf(\"%d\", i)\n        for _, digit := range num_str {\n            var digit_int int = int(digit - '0')\n            if digit_int == 0 || i % digit_int != 0 {\n                divisible_by_digits_flag = false\n                break\n            }\n        }\n        if divisible_by_digits_flag {\n            divisible_by_digits_list = append(divisible_by_digits_list, i)\n        }\n    }\n    return divisible_by_digits_list\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, v := range fmt.Sprintf(\"%d\", i) {\n            if i % int(v - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpuc_wfgrx_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmpuc_wfgrx_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        var num = i\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var is_divisible = true\n        for j := i; j > 0; j = j / 10 {\n            if i % (j % 10) != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var isDivisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmp2ehhy_tz_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmp2ehhy_tz_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    result := []int{}\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyc9ypa_o_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var num = i\n        var divisible = true\n        for num > 0 {\n            if i % (num % 10) != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpmcvcj3uh_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102480)\n\t/tmp/tmpmcvcj3uh_test.go:33 +0x53\ntesting.tRunner(0xc000102480, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i < 10 {\n            result = append(result, i)\n        } else {\n            var divisible = true\n            var number = i\n            for number > 0 {\n                var digit = number % 10\n                if digit == 0 || i % digit != 0 {\n                    divisible = false\n                    break\n                }\n                number = number / 10\n            }\n            if divisible {\n                result = append(result, i)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var is_divisible bool = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpmcvcj3uh_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102480)\n\t/tmp/tmpmcvcj3uh_test.go:33 +0x53\ntesting.tRunner(0xc000102480, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var is_divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpuccp8fqh_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000186300)\n\t/tmp/tmpuccp8fqh_test.go:33 +0x53\ntesting.tRunner(0xc000186300, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, v := range fmt.Sprintf(\"%d\", i) {\n            if i % int(v - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpuc_wfgrx_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmpuc_wfgrx_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % (i % 10) == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\n    --- FAIL: TestDivisible_By_Digits/test_num__0 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=22)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=21) %!s(int=22)]'\n    --- FAIL: TestDivisible_By_Digits/test_num__2 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=22) %!s(int=24)]', got '[%!s(int=21) %!s(int=22) %!s(int=24) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var is_divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpmcvcj3uh_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102480)\n\t/tmp/tmpmcvcj3uh_test.go:33 +0x53\ntesting.tRunner(0xc000102480, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var num = i\n        var divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var divisible = true\n        for j := i; j > 0; j /= 10 {\n            if i % (j % 10) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var isDivisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplke6px29_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplke6px29_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for j := 1; j <= i; j *= 10 {\n            if i % (i / j % 10) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(...)\n\t/tmp/tmp_g_ni6j0_test.go:14\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmp_g_ni6j0_test.go:33 +0x805\ntesting.tRunner(0xc000102600, 0x54f368)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplg73654u_test.go:12:12: undefined: divisible\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var is_divisible = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplg73654u_test.go:12:12: undefined: divisible\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq094s51k_test.go:12:12: undefined: is_divisible\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var digits []int\n        for j := i; j > 0; j /= 10 {\n            digits = append(digits, j % 10)\n        }\n        var divisible = true\n        for _, digit := range digits {\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var num = i\n        for num > 0 {\n            if i % (num % 10) != 0 {\n                break\n            }\n            num /= 10\n        }\n        if num == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprint(i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa3b8, 0x609a20, 0x0)\n\t/tmp/tmpimjwmc54_test.go:14 +0x232\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000186300)\n\t/tmp/tmpimjwmc54_test.go:33 +0x53\ntesting.tRunner(0xc000186300, 0x54f368)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var is_divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpyql512gb_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc0001a0300)\n\t/tmp/tmpyql512gb_test.go:33 +0x53\ntesting.tRunner(0xc0001a0300, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var isDivisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplke6px29_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplke6px29_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var ok bool = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                ok = false\n                break\n            }\n        }\n        if ok {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmp_g4q094j_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmp_g4q094j_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % (i / 10) == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(...)\n\t/tmp/tmp1d3x81zm_test.go:15\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmp1d3x81zm_test.go:29 +0x739\ntesting.tRunner(0xc000001380, 0x54f368)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplg73654u_test.go:12:12: undefined: divisible\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % (i / 10) == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(...)\n\t/tmp/tmp1d3x81zm_test.go:15\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmp1d3x81zm_test.go:29 +0x739\ntesting.tRunner(0xc000001380, 0x54f368)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 11 == 0 {\n            continue\n        }\n        if i % 12 == 0 {\n            continue\n        }\n        if i % 13 == 0 {\n            continue\n        }\n        if i % 14 == 0 {\n            continue\n        }\n        if i % 15 == 0 {\n            continue\n        }\n        if i % 16 == 0 {\n            continue\n        }\n        if i % 17 == 0 {\n            continue\n        }\n        if i % 18 == 0 {\n            continue\n        }\n        if i % 19 == 0 {\n            continue\n        }\n        if i % 20 == 0 {\n            continue\n        }\n        if i % 21 == 0 {\n            continue\n        }\n        if i % 22 == 0 {\n            continue\n        }\n        if i % 23 == 0 {\n            continue\n        }\n        if i % 24 == 0 {\n            continue\n        }\n        if i % 25 == 0 {\n            continue\n        }\n        if i % 26 == 0 {\n            continue\n        }\n        if i % 27 == 0 {\n            continue\n        }\n        if i % 28 == 0 {\n            continue\n        }\n        if i % 29 == 0 {\n            continue\n        }\n        if i % 30 == 0 {\n            continue\n        }\n        if i % 31 == 0 {\n            continue\n        }\n        if i % 32 == 0 {\n            continue\n        }\n        if i % 33 == 0 {\n            continue\n        }\n        if i % 34 == 0 {\n            continue\n        }\n        if i % 35 == 0 {\n            continue\n        }\n        if i % 36 == 0 {\n            continue\n        }\n        if i % 37 == 0 {\n            continue\n        }\n        if i % 38 == 0 {\n            continue\n        }\n        if i % 39 == 0 {\n            continue\n        }\n        if i % 40 == 0 {\n            continue\n        }\n        if i % 41 == 0 {\n            continue\n        }\n        if i % 42 == 0 {\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122616,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxdykkz6h_test.go:110:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var isDivisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplke6px29_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplke6px29_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i < 10 {\n            result = append(result, i)\n        } else {\n            var digits []int\n            for j := i; j > 0; j = j / 10 {\n                digits = append(digits, j % 10)\n            }\n            var isDivisible = true\n            for _, d := range digits {\n                if i % d != 0 {\n                    isDivisible = false\n                    break\n                }\n            }\n            if isDivisible {\n                result = append(result, i)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpb5lvwmch_test.go:21 +0x24c\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmpb5lvwmch_test.go:41 +0x53\ntesting.tRunner(0xc000001380, 0x54f368)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num int = i\n        var digits []int\n        for num > 0 {\n            digits = append(digits, num % 10)\n            num /= 10\n        }\n        var divisible bool = true\n        for _, digit := range digits {\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % (i % 10) == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\n    --- FAIL: TestDivisible_By_Digits/test_num__0 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=22)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=15) %!s(int=21) %!s(int=22)]'\n    --- FAIL: TestDivisible_By_Digits/test_num__2 (0.00s)\n        tmpkmy8q0pm_test.go:37: expected '[%!s(int=22) %!s(int=24)]', got '[%!s(int=21) %!s(int=22) %!s(int=24) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var digits []int\n        for num > 0 {\n            digits = append(digits, num % 10)\n            num /= 10\n        }\n        var divisible = true\n        for _, digit := range digits {\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, d := range fmt.Sprintf(\"%d\", i) {\n            if i % int(d - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpmcvcj3uh_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102480)\n\t/tmp/tmpmcvcj3uh_test.go:33 +0x53\ntesting.tRunner(0xc000102480, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var is_divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        var divisible = true\n        for j := i; j > 0; j = j / 10 {\n            if i % (j % 10) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_check(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphsqzfdhv_test.go:12:12: undefined: divisible_by_digits_check\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var num = i\n        var is_divisible = true\n        for num > 0 {\n            var digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible bool = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmplc8piht9_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000001380)\n\t/tmp/tmplc8piht9_test.go:33 +0x53\ntesting.tRunner(0xc000001380, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if is_divisible_by_digits(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4bfh5_4z_test.go:12:12: undefined: is_divisible_by_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        var divisible = true\n        for _, digit := range fmt.Sprintf(\"%d\", i) {\n            if i % int(digit - '0') != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "--- FAIL: TestDivisible_By_Digits (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5231e0, 0x617a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.divisible_by_digits(0x1, 0x16, 0x5fa320, 0x609a20, 0x0)\n\t/tmp/tmpx_z67rob_test.go:14 +0x246\ncommand-line-arguments_test.TestDivisible_By_Digits(0xc000102600)\n\t/tmp/tmpx_z67rob_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f370)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if divisible_by_digits_helper(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqd6gvrpc_test.go:12:12: undefined: divisible_by_digits_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    result := []int{}\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx75nnos9_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n    var result []int\n    for i := startnum; i <= endnum; i++ {\n        if i % 10 == 0 {\n            continue\n        }\n        if i % 100 == 0 {\n            continue\n        }\n        if i % 1000 == 0 {\n            continue\n        }\n        if i % 10000 == 0 {\n            continue\n        }\n        if i % 100000 == 0 {\n            continue\n        }\n        if i % 1000000 == 0 {\n            continue\n        }\n        if i % 10000000 == 0 {\n            continue\n        }\n        if i % 100000000 == 0 {\n            continue\n        }\n        if i % 1000000000 == 0 {\n            continue\n        }\n        if i % 10000000000 == 0 {\n            continue\n        }\n        if i % 100000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 1000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 10000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000000 == 0 {\n            continue\n        }\n        if i % 100000000000000000000000000\nfunc TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hcy_kz6_test.go:100:6: expected '(', found TestDivisible_By_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}