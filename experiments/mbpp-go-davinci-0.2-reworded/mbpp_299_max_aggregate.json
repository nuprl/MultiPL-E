{
  "name": "mbpp_299_max_aggregate",
  "language": "go_test.go",
  "prompt": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max []interface{}\n    for _, row := range stdata {\n        if len(max) == 0 {\n            max = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max[i].(int) {\n                    max[i] = v\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    // TODO: Implement this function\n    return nil\n}\n",
    "    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, cell := range row {\n                if max_agg[i] == nil {\n                    max_agg[i] = cell\n                } else {\n                    switch cell.(type) {\n                    case int:\n                        if cell.(int) > max_agg[i].(int) {\n                            max_agg[i] = cell\n                        }\n                    case float64:\n                        if cell.(float64) > max_agg[i].(float64) {\n                            max_agg[i] = cell\n                        }\n                    case string:\n                        if cell.(string) > max_agg[i].(string) {\n                            max_agg[i] = cell\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    if len(stdata[0]) == 0 {\n        return nil\n    }\n    if len(stdata[0]) == 1 {\n        return stdata[0]\n    }\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if max == nil {\n                max = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max.(int) {\n                    max = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n            continue\n        }\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            case float64:\n                if v.(float64) > max_aggregate[i].(float64) {\n                    max_aggregate[i] = v\n                }\n            case string:\n                if v.(string) > max_aggregate[i].(string) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        max := stdata[0][i]\n        for j := 1; j < len(stdata); j++ {\n            if stdata[j][i].(int) > max.(int) {\n                max = stdata[j][i]\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, row := range stdata {\n        for _, col := range row {\n            result = append(result, col)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, data := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = data\n        } else {\n            for i, v := range data {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_agg[i].(int) {\n                    max_agg[i] = val\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    var max_aggregate []interface{}\n    for _, sublist := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = sublist\n        } else {\n            for i, val := range sublist {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    // TODO: Implement this function\n    return []interface{}{}\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for _, v := range stdata {\n            if max == nil {\n                max = v[i]\n            } else {\n                switch v[i].(type) {\n                case int:\n                    if v[i].(int) > max.(int) {\n                        max = v[i]\n                    }\n                case float64:\n                    if v[i].(float64) > max.(float64) {\n                        max = v[i]\n                    }\n                case string:\n                    if v[i].(string) > max.(string) {\n                        max = v[i]\n                    }\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n"
  ]
}